
adc_probe8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008024  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008280  08008280  0000a074  2**0
                  CONTENTS
  4 .ARM          00000000  08008280  08008280  0000a074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008280  08008280  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008284  08008284  00009284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008288  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000074  080082fc  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  080082fc  0000a50c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013191  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a17  00000000  00000000  0001d22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d56  00000000  00000000  00020d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001818d  00000000  00000000  00021a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014732  00000000  00000000  00039c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4e4  00000000  00000000  0004e35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  000e8884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ece2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080080c4 	.word	0x080080c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080080c4 	.word	0x080080c4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdrcmple>:
 8000410:	4684      	mov	ip, r0
 8000412:	0010      	movs	r0, r2
 8000414:	4662      	mov	r2, ip
 8000416:	468c      	mov	ip, r1
 8000418:	0019      	movs	r1, r3
 800041a:	4663      	mov	r3, ip
 800041c:	e000      	b.n	8000420 <__aeabi_cdcmpeq>
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__aeabi_cdcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 ff87 	bl	8001334 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cdcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_dcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fec7 	bl	80011c4 <__eqdf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_dcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 ff79 	bl	8001334 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_dcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_dcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ff6f 	bl	8001334 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_dcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fef1 	bl	800124c <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_dcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fee7 	bl	800124c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_dcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_d2uiz>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	2200      	movs	r2, #0
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <__aeabi_d2uiz+0x38>)
 8000492:	0004      	movs	r4, r0
 8000494:	000d      	movs	r5, r1
 8000496:	f7ff ffef 	bl	8000478 <__aeabi_dcmpge>
 800049a:	2800      	cmp	r0, #0
 800049c:	d104      	bne.n	80004a8 <__aeabi_d2uiz+0x1c>
 800049e:	0020      	movs	r0, r4
 80004a0:	0029      	movs	r1, r5
 80004a2:	f001 fe3f 	bl	8002124 <__aeabi_d2iz>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <__aeabi_d2uiz+0x38>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	0020      	movs	r0, r4
 80004ae:	0029      	movs	r1, r5
 80004b0:	f001 fa7a 	bl	80019a8 <__aeabi_dsub>
 80004b4:	f001 fe36 	bl	8002124 <__aeabi_d2iz>
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	061b      	lsls	r3, r3, #24
 80004bc:	469c      	mov	ip, r3
 80004be:	4460      	add	r0, ip
 80004c0:	e7f1      	b.n	80004a6 <__aeabi_d2uiz+0x1a>
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	41e00000 	.word	0x41e00000

080004c8 <__aeabi_dadd>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	464e      	mov	r6, r9
 80004ce:	4645      	mov	r5, r8
 80004d0:	46de      	mov	lr, fp
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	b083      	sub	sp, #12
 80004d6:	9000      	str	r0, [sp, #0]
 80004d8:	9101      	str	r1, [sp, #4]
 80004da:	030c      	lsls	r4, r1, #12
 80004dc:	004f      	lsls	r7, r1, #1
 80004de:	0fce      	lsrs	r6, r1, #31
 80004e0:	0a61      	lsrs	r1, r4, #9
 80004e2:	9c00      	ldr	r4, [sp, #0]
 80004e4:	031d      	lsls	r5, r3, #12
 80004e6:	0f64      	lsrs	r4, r4, #29
 80004e8:	430c      	orrs	r4, r1
 80004ea:	9900      	ldr	r1, [sp, #0]
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	00c8      	lsls	r0, r1, #3
 80004f2:	0059      	lsls	r1, r3, #1
 80004f4:	0d4b      	lsrs	r3, r1, #21
 80004f6:	4699      	mov	r9, r3
 80004f8:	9a00      	ldr	r2, [sp, #0]
 80004fa:	9b01      	ldr	r3, [sp, #4]
 80004fc:	0a6d      	lsrs	r5, r5, #9
 80004fe:	0fd9      	lsrs	r1, r3, #31
 8000500:	0f53      	lsrs	r3, r2, #29
 8000502:	432b      	orrs	r3, r5
 8000504:	469a      	mov	sl, r3
 8000506:	9b00      	ldr	r3, [sp, #0]
 8000508:	0d7f      	lsrs	r7, r7, #21
 800050a:	00da      	lsls	r2, r3, #3
 800050c:	4694      	mov	ip, r2
 800050e:	464a      	mov	r2, r9
 8000510:	46b0      	mov	r8, r6
 8000512:	1aba      	subs	r2, r7, r2
 8000514:	428e      	cmp	r6, r1
 8000516:	d100      	bne.n	800051a <__aeabi_dadd+0x52>
 8000518:	e0b0      	b.n	800067c <__aeabi_dadd+0x1b4>
 800051a:	2a00      	cmp	r2, #0
 800051c:	dc00      	bgt.n	8000520 <__aeabi_dadd+0x58>
 800051e:	e078      	b.n	8000612 <__aeabi_dadd+0x14a>
 8000520:	4649      	mov	r1, r9
 8000522:	2900      	cmp	r1, #0
 8000524:	d100      	bne.n	8000528 <__aeabi_dadd+0x60>
 8000526:	e0e9      	b.n	80006fc <__aeabi_dadd+0x234>
 8000528:	49c9      	ldr	r1, [pc, #804]	@ (8000850 <__aeabi_dadd+0x388>)
 800052a:	428f      	cmp	r7, r1
 800052c:	d100      	bne.n	8000530 <__aeabi_dadd+0x68>
 800052e:	e195      	b.n	800085c <__aeabi_dadd+0x394>
 8000530:	2501      	movs	r5, #1
 8000532:	2a38      	cmp	r2, #56	@ 0x38
 8000534:	dc16      	bgt.n	8000564 <__aeabi_dadd+0x9c>
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	4653      	mov	r3, sl
 800053a:	0409      	lsls	r1, r1, #16
 800053c:	430b      	orrs	r3, r1
 800053e:	469a      	mov	sl, r3
 8000540:	2a1f      	cmp	r2, #31
 8000542:	dd00      	ble.n	8000546 <__aeabi_dadd+0x7e>
 8000544:	e1e7      	b.n	8000916 <__aeabi_dadd+0x44e>
 8000546:	2120      	movs	r1, #32
 8000548:	4655      	mov	r5, sl
 800054a:	1a8b      	subs	r3, r1, r2
 800054c:	4661      	mov	r1, ip
 800054e:	409d      	lsls	r5, r3
 8000550:	40d1      	lsrs	r1, r2
 8000552:	430d      	orrs	r5, r1
 8000554:	4661      	mov	r1, ip
 8000556:	4099      	lsls	r1, r3
 8000558:	1e4b      	subs	r3, r1, #1
 800055a:	4199      	sbcs	r1, r3
 800055c:	4653      	mov	r3, sl
 800055e:	40d3      	lsrs	r3, r2
 8000560:	430d      	orrs	r5, r1
 8000562:	1ae4      	subs	r4, r4, r3
 8000564:	1b45      	subs	r5, r0, r5
 8000566:	42a8      	cmp	r0, r5
 8000568:	4180      	sbcs	r0, r0
 800056a:	4240      	negs	r0, r0
 800056c:	1a24      	subs	r4, r4, r0
 800056e:	0223      	lsls	r3, r4, #8
 8000570:	d400      	bmi.n	8000574 <__aeabi_dadd+0xac>
 8000572:	e10f      	b.n	8000794 <__aeabi_dadd+0x2cc>
 8000574:	0264      	lsls	r4, r4, #9
 8000576:	0a64      	lsrs	r4, r4, #9
 8000578:	2c00      	cmp	r4, #0
 800057a:	d100      	bne.n	800057e <__aeabi_dadd+0xb6>
 800057c:	e139      	b.n	80007f2 <__aeabi_dadd+0x32a>
 800057e:	0020      	movs	r0, r4
 8000580:	f001 fe3a 	bl	80021f8 <__clzsi2>
 8000584:	0003      	movs	r3, r0
 8000586:	3b08      	subs	r3, #8
 8000588:	2120      	movs	r1, #32
 800058a:	0028      	movs	r0, r5
 800058c:	1aca      	subs	r2, r1, r3
 800058e:	40d0      	lsrs	r0, r2
 8000590:	409c      	lsls	r4, r3
 8000592:	0002      	movs	r2, r0
 8000594:	409d      	lsls	r5, r3
 8000596:	4322      	orrs	r2, r4
 8000598:	429f      	cmp	r7, r3
 800059a:	dd00      	ble.n	800059e <__aeabi_dadd+0xd6>
 800059c:	e173      	b.n	8000886 <__aeabi_dadd+0x3be>
 800059e:	1bd8      	subs	r0, r3, r7
 80005a0:	3001      	adds	r0, #1
 80005a2:	1a09      	subs	r1, r1, r0
 80005a4:	002c      	movs	r4, r5
 80005a6:	408d      	lsls	r5, r1
 80005a8:	40c4      	lsrs	r4, r0
 80005aa:	1e6b      	subs	r3, r5, #1
 80005ac:	419d      	sbcs	r5, r3
 80005ae:	0013      	movs	r3, r2
 80005b0:	40c2      	lsrs	r2, r0
 80005b2:	408b      	lsls	r3, r1
 80005b4:	4325      	orrs	r5, r4
 80005b6:	2700      	movs	r7, #0
 80005b8:	0014      	movs	r4, r2
 80005ba:	431d      	orrs	r5, r3
 80005bc:	076b      	lsls	r3, r5, #29
 80005be:	d009      	beq.n	80005d4 <__aeabi_dadd+0x10c>
 80005c0:	230f      	movs	r3, #15
 80005c2:	402b      	ands	r3, r5
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d005      	beq.n	80005d4 <__aeabi_dadd+0x10c>
 80005c8:	1d2b      	adds	r3, r5, #4
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	41ad      	sbcs	r5, r5
 80005ce:	426d      	negs	r5, r5
 80005d0:	1964      	adds	r4, r4, r5
 80005d2:	001d      	movs	r5, r3
 80005d4:	0223      	lsls	r3, r4, #8
 80005d6:	d400      	bmi.n	80005da <__aeabi_dadd+0x112>
 80005d8:	e12d      	b.n	8000836 <__aeabi_dadd+0x36e>
 80005da:	4a9d      	ldr	r2, [pc, #628]	@ (8000850 <__aeabi_dadd+0x388>)
 80005dc:	3701      	adds	r7, #1
 80005de:	4297      	cmp	r7, r2
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x11c>
 80005e2:	e0d3      	b.n	800078c <__aeabi_dadd+0x2c4>
 80005e4:	4646      	mov	r6, r8
 80005e6:	499b      	ldr	r1, [pc, #620]	@ (8000854 <__aeabi_dadd+0x38c>)
 80005e8:	08ed      	lsrs	r5, r5, #3
 80005ea:	4021      	ands	r1, r4
 80005ec:	074a      	lsls	r2, r1, #29
 80005ee:	432a      	orrs	r2, r5
 80005f0:	057c      	lsls	r4, r7, #21
 80005f2:	024d      	lsls	r5, r1, #9
 80005f4:	0b2d      	lsrs	r5, r5, #12
 80005f6:	0d64      	lsrs	r4, r4, #21
 80005f8:	0524      	lsls	r4, r4, #20
 80005fa:	432c      	orrs	r4, r5
 80005fc:	07f6      	lsls	r6, r6, #31
 80005fe:	4334      	orrs	r4, r6
 8000600:	0010      	movs	r0, r2
 8000602:	0021      	movs	r1, r4
 8000604:	b003      	add	sp, #12
 8000606:	bcf0      	pop	{r4, r5, r6, r7}
 8000608:	46bb      	mov	fp, r7
 800060a:	46b2      	mov	sl, r6
 800060c:	46a9      	mov	r9, r5
 800060e:	46a0      	mov	r8, r4
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	2a00      	cmp	r2, #0
 8000614:	d100      	bne.n	8000618 <__aeabi_dadd+0x150>
 8000616:	e084      	b.n	8000722 <__aeabi_dadd+0x25a>
 8000618:	464a      	mov	r2, r9
 800061a:	1bd2      	subs	r2, r2, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_dadd+0x15a>
 8000620:	e16d      	b.n	80008fe <__aeabi_dadd+0x436>
 8000622:	0025      	movs	r5, r4
 8000624:	4305      	orrs	r5, r0
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x162>
 8000628:	e127      	b.n	800087a <__aeabi_dadd+0x3b2>
 800062a:	1e56      	subs	r6, r2, #1
 800062c:	2a01      	cmp	r2, #1
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x16a>
 8000630:	e23b      	b.n	8000aaa <__aeabi_dadd+0x5e2>
 8000632:	4d87      	ldr	r5, [pc, #540]	@ (8000850 <__aeabi_dadd+0x388>)
 8000634:	42aa      	cmp	r2, r5
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x172>
 8000638:	e26a      	b.n	8000b10 <__aeabi_dadd+0x648>
 800063a:	2501      	movs	r5, #1
 800063c:	2e38      	cmp	r6, #56	@ 0x38
 800063e:	dc12      	bgt.n	8000666 <__aeabi_dadd+0x19e>
 8000640:	0032      	movs	r2, r6
 8000642:	2a1f      	cmp	r2, #31
 8000644:	dd00      	ble.n	8000648 <__aeabi_dadd+0x180>
 8000646:	e1f8      	b.n	8000a3a <__aeabi_dadd+0x572>
 8000648:	2620      	movs	r6, #32
 800064a:	0025      	movs	r5, r4
 800064c:	1ab6      	subs	r6, r6, r2
 800064e:	0007      	movs	r7, r0
 8000650:	4653      	mov	r3, sl
 8000652:	40b0      	lsls	r0, r6
 8000654:	40d4      	lsrs	r4, r2
 8000656:	40b5      	lsls	r5, r6
 8000658:	40d7      	lsrs	r7, r2
 800065a:	1e46      	subs	r6, r0, #1
 800065c:	41b0      	sbcs	r0, r6
 800065e:	1b1b      	subs	r3, r3, r4
 8000660:	469a      	mov	sl, r3
 8000662:	433d      	orrs	r5, r7
 8000664:	4305      	orrs	r5, r0
 8000666:	4662      	mov	r2, ip
 8000668:	1b55      	subs	r5, r2, r5
 800066a:	45ac      	cmp	ip, r5
 800066c:	4192      	sbcs	r2, r2
 800066e:	4653      	mov	r3, sl
 8000670:	4252      	negs	r2, r2
 8000672:	000e      	movs	r6, r1
 8000674:	464f      	mov	r7, r9
 8000676:	4688      	mov	r8, r1
 8000678:	1a9c      	subs	r4, r3, r2
 800067a:	e778      	b.n	800056e <__aeabi_dadd+0xa6>
 800067c:	2a00      	cmp	r2, #0
 800067e:	dc00      	bgt.n	8000682 <__aeabi_dadd+0x1ba>
 8000680:	e08e      	b.n	80007a0 <__aeabi_dadd+0x2d8>
 8000682:	4649      	mov	r1, r9
 8000684:	2900      	cmp	r1, #0
 8000686:	d175      	bne.n	8000774 <__aeabi_dadd+0x2ac>
 8000688:	4661      	mov	r1, ip
 800068a:	4653      	mov	r3, sl
 800068c:	4319      	orrs	r1, r3
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x1ca>
 8000690:	e0f6      	b.n	8000880 <__aeabi_dadd+0x3b8>
 8000692:	1e51      	subs	r1, r2, #1
 8000694:	2a01      	cmp	r2, #1
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x1d2>
 8000698:	e191      	b.n	80009be <__aeabi_dadd+0x4f6>
 800069a:	4d6d      	ldr	r5, [pc, #436]	@ (8000850 <__aeabi_dadd+0x388>)
 800069c:	42aa      	cmp	r2, r5
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1da>
 80006a0:	e0dc      	b.n	800085c <__aeabi_dadd+0x394>
 80006a2:	2501      	movs	r5, #1
 80006a4:	2938      	cmp	r1, #56	@ 0x38
 80006a6:	dc14      	bgt.n	80006d2 <__aeabi_dadd+0x20a>
 80006a8:	000a      	movs	r2, r1
 80006aa:	2a1f      	cmp	r2, #31
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_dadd+0x1e8>
 80006ae:	e1a2      	b.n	80009f6 <__aeabi_dadd+0x52e>
 80006b0:	2120      	movs	r1, #32
 80006b2:	4653      	mov	r3, sl
 80006b4:	1a89      	subs	r1, r1, r2
 80006b6:	408b      	lsls	r3, r1
 80006b8:	001d      	movs	r5, r3
 80006ba:	4663      	mov	r3, ip
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	431d      	orrs	r5, r3
 80006c0:	4663      	mov	r3, ip
 80006c2:	408b      	lsls	r3, r1
 80006c4:	0019      	movs	r1, r3
 80006c6:	1e4b      	subs	r3, r1, #1
 80006c8:	4199      	sbcs	r1, r3
 80006ca:	4653      	mov	r3, sl
 80006cc:	40d3      	lsrs	r3, r2
 80006ce:	430d      	orrs	r5, r1
 80006d0:	18e4      	adds	r4, r4, r3
 80006d2:	182d      	adds	r5, r5, r0
 80006d4:	4285      	cmp	r5, r0
 80006d6:	4180      	sbcs	r0, r0
 80006d8:	4240      	negs	r0, r0
 80006da:	1824      	adds	r4, r4, r0
 80006dc:	0223      	lsls	r3, r4, #8
 80006de:	d559      	bpl.n	8000794 <__aeabi_dadd+0x2cc>
 80006e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000850 <__aeabi_dadd+0x388>)
 80006e2:	3701      	adds	r7, #1
 80006e4:	429f      	cmp	r7, r3
 80006e6:	d051      	beq.n	800078c <__aeabi_dadd+0x2c4>
 80006e8:	2101      	movs	r1, #1
 80006ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000854 <__aeabi_dadd+0x38c>)
 80006ec:	086a      	lsrs	r2, r5, #1
 80006ee:	401c      	ands	r4, r3
 80006f0:	4029      	ands	r1, r5
 80006f2:	430a      	orrs	r2, r1
 80006f4:	07e5      	lsls	r5, r4, #31
 80006f6:	4315      	orrs	r5, r2
 80006f8:	0864      	lsrs	r4, r4, #1
 80006fa:	e75f      	b.n	80005bc <__aeabi_dadd+0xf4>
 80006fc:	4661      	mov	r1, ip
 80006fe:	4653      	mov	r3, sl
 8000700:	4319      	orrs	r1, r3
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x23e>
 8000704:	e0bc      	b.n	8000880 <__aeabi_dadd+0x3b8>
 8000706:	1e51      	subs	r1, r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x246>
 800070c:	e164      	b.n	80009d8 <__aeabi_dadd+0x510>
 800070e:	4d50      	ldr	r5, [pc, #320]	@ (8000850 <__aeabi_dadd+0x388>)
 8000710:	42aa      	cmp	r2, r5
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x24e>
 8000714:	e16a      	b.n	80009ec <__aeabi_dadd+0x524>
 8000716:	2501      	movs	r5, #1
 8000718:	2938      	cmp	r1, #56	@ 0x38
 800071a:	dd00      	ble.n	800071e <__aeabi_dadd+0x256>
 800071c:	e722      	b.n	8000564 <__aeabi_dadd+0x9c>
 800071e:	000a      	movs	r2, r1
 8000720:	e70e      	b.n	8000540 <__aeabi_dadd+0x78>
 8000722:	4a4d      	ldr	r2, [pc, #308]	@ (8000858 <__aeabi_dadd+0x390>)
 8000724:	1c7d      	adds	r5, r7, #1
 8000726:	4215      	tst	r5, r2
 8000728:	d000      	beq.n	800072c <__aeabi_dadd+0x264>
 800072a:	e0d0      	b.n	80008ce <__aeabi_dadd+0x406>
 800072c:	0025      	movs	r5, r4
 800072e:	4662      	mov	r2, ip
 8000730:	4653      	mov	r3, sl
 8000732:	4305      	orrs	r5, r0
 8000734:	431a      	orrs	r2, r3
 8000736:	2f00      	cmp	r7, #0
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x274>
 800073a:	e137      	b.n	80009ac <__aeabi_dadd+0x4e4>
 800073c:	2d00      	cmp	r5, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_dadd+0x27a>
 8000740:	e1a8      	b.n	8000a94 <__aeabi_dadd+0x5cc>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x280>
 8000746:	e16a      	b.n	8000a1e <__aeabi_dadd+0x556>
 8000748:	4663      	mov	r3, ip
 800074a:	1ac5      	subs	r5, r0, r3
 800074c:	4653      	mov	r3, sl
 800074e:	1ae2      	subs	r2, r4, r3
 8000750:	42a8      	cmp	r0, r5
 8000752:	419b      	sbcs	r3, r3
 8000754:	425b      	negs	r3, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	021a      	lsls	r2, r3, #8
 800075a:	d400      	bmi.n	800075e <__aeabi_dadd+0x296>
 800075c:	e203      	b.n	8000b66 <__aeabi_dadd+0x69e>
 800075e:	4663      	mov	r3, ip
 8000760:	1a1d      	subs	r5, r3, r0
 8000762:	45ac      	cmp	ip, r5
 8000764:	4192      	sbcs	r2, r2
 8000766:	4653      	mov	r3, sl
 8000768:	4252      	negs	r2, r2
 800076a:	1b1c      	subs	r4, r3, r4
 800076c:	000e      	movs	r6, r1
 800076e:	4688      	mov	r8, r1
 8000770:	1aa4      	subs	r4, r4, r2
 8000772:	e723      	b.n	80005bc <__aeabi_dadd+0xf4>
 8000774:	4936      	ldr	r1, [pc, #216]	@ (8000850 <__aeabi_dadd+0x388>)
 8000776:	428f      	cmp	r7, r1
 8000778:	d070      	beq.n	800085c <__aeabi_dadd+0x394>
 800077a:	2501      	movs	r5, #1
 800077c:	2a38      	cmp	r2, #56	@ 0x38
 800077e:	dca8      	bgt.n	80006d2 <__aeabi_dadd+0x20a>
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	4653      	mov	r3, sl
 8000784:	0409      	lsls	r1, r1, #16
 8000786:	430b      	orrs	r3, r1
 8000788:	469a      	mov	sl, r3
 800078a:	e78e      	b.n	80006aa <__aeabi_dadd+0x1e2>
 800078c:	003c      	movs	r4, r7
 800078e:	2500      	movs	r5, #0
 8000790:	2200      	movs	r2, #0
 8000792:	e731      	b.n	80005f8 <__aeabi_dadd+0x130>
 8000794:	2307      	movs	r3, #7
 8000796:	402b      	ands	r3, r5
 8000798:	2b00      	cmp	r3, #0
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x2d6>
 800079c:	e710      	b.n	80005c0 <__aeabi_dadd+0xf8>
 800079e:	e093      	b.n	80008c8 <__aeabi_dadd+0x400>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d074      	beq.n	800088e <__aeabi_dadd+0x3c6>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1bd2      	subs	r2, r2, r7
 80007a8:	2f00      	cmp	r7, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x2e6>
 80007ac:	e0c7      	b.n	800093e <__aeabi_dadd+0x476>
 80007ae:	4928      	ldr	r1, [pc, #160]	@ (8000850 <__aeabi_dadd+0x388>)
 80007b0:	4589      	cmp	r9, r1
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dadd+0x2ee>
 80007b4:	e185      	b.n	8000ac2 <__aeabi_dadd+0x5fa>
 80007b6:	2501      	movs	r5, #1
 80007b8:	2a38      	cmp	r2, #56	@ 0x38
 80007ba:	dc12      	bgt.n	80007e2 <__aeabi_dadd+0x31a>
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	0409      	lsls	r1, r1, #16
 80007c0:	430c      	orrs	r4, r1
 80007c2:	2a1f      	cmp	r2, #31
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x300>
 80007c6:	e1ab      	b.n	8000b20 <__aeabi_dadd+0x658>
 80007c8:	2120      	movs	r1, #32
 80007ca:	0025      	movs	r5, r4
 80007cc:	1a89      	subs	r1, r1, r2
 80007ce:	0007      	movs	r7, r0
 80007d0:	4088      	lsls	r0, r1
 80007d2:	408d      	lsls	r5, r1
 80007d4:	40d7      	lsrs	r7, r2
 80007d6:	1e41      	subs	r1, r0, #1
 80007d8:	4188      	sbcs	r0, r1
 80007da:	40d4      	lsrs	r4, r2
 80007dc:	433d      	orrs	r5, r7
 80007de:	4305      	orrs	r5, r0
 80007e0:	44a2      	add	sl, r4
 80007e2:	4465      	add	r5, ip
 80007e4:	4565      	cmp	r5, ip
 80007e6:	4192      	sbcs	r2, r2
 80007e8:	4252      	negs	r2, r2
 80007ea:	4452      	add	r2, sl
 80007ec:	0014      	movs	r4, r2
 80007ee:	464f      	mov	r7, r9
 80007f0:	e774      	b.n	80006dc <__aeabi_dadd+0x214>
 80007f2:	0028      	movs	r0, r5
 80007f4:	f001 fd00 	bl	80021f8 <__clzsi2>
 80007f8:	0003      	movs	r3, r0
 80007fa:	3318      	adds	r3, #24
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	dc00      	bgt.n	8000802 <__aeabi_dadd+0x33a>
 8000800:	e6c2      	b.n	8000588 <__aeabi_dadd+0xc0>
 8000802:	002a      	movs	r2, r5
 8000804:	3808      	subs	r0, #8
 8000806:	4082      	lsls	r2, r0
 8000808:	429f      	cmp	r7, r3
 800080a:	dd00      	ble.n	800080e <__aeabi_dadd+0x346>
 800080c:	e0a9      	b.n	8000962 <__aeabi_dadd+0x49a>
 800080e:	1bdb      	subs	r3, r3, r7
 8000810:	1c58      	adds	r0, r3, #1
 8000812:	281f      	cmp	r0, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x350>
 8000816:	e1ac      	b.n	8000b72 <__aeabi_dadd+0x6aa>
 8000818:	0015      	movs	r5, r2
 800081a:	3b1f      	subs	r3, #31
 800081c:	40dd      	lsrs	r5, r3
 800081e:	2820      	cmp	r0, #32
 8000820:	d005      	beq.n	800082e <__aeabi_dadd+0x366>
 8000822:	2340      	movs	r3, #64	@ 0x40
 8000824:	1a1b      	subs	r3, r3, r0
 8000826:	409a      	lsls	r2, r3
 8000828:	1e53      	subs	r3, r2, #1
 800082a:	419a      	sbcs	r2, r3
 800082c:	4315      	orrs	r5, r2
 800082e:	2307      	movs	r3, #7
 8000830:	2700      	movs	r7, #0
 8000832:	402b      	ands	r3, r5
 8000834:	e7b0      	b.n	8000798 <__aeabi_dadd+0x2d0>
 8000836:	08ed      	lsrs	r5, r5, #3
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <__aeabi_dadd+0x388>)
 800083a:	0762      	lsls	r2, r4, #29
 800083c:	432a      	orrs	r2, r5
 800083e:	08e4      	lsrs	r4, r4, #3
 8000840:	429f      	cmp	r7, r3
 8000842:	d00f      	beq.n	8000864 <__aeabi_dadd+0x39c>
 8000844:	0324      	lsls	r4, r4, #12
 8000846:	0b25      	lsrs	r5, r4, #12
 8000848:	057c      	lsls	r4, r7, #21
 800084a:	0d64      	lsrs	r4, r4, #21
 800084c:	e6d4      	b.n	80005f8 <__aeabi_dadd+0x130>
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	000007ff 	.word	0x000007ff
 8000854:	ff7fffff 	.word	0xff7fffff
 8000858:	000007fe 	.word	0x000007fe
 800085c:	08c0      	lsrs	r0, r0, #3
 800085e:	0762      	lsls	r2, r4, #29
 8000860:	4302      	orrs	r2, r0
 8000862:	08e4      	lsrs	r4, r4, #3
 8000864:	0013      	movs	r3, r2
 8000866:	4323      	orrs	r3, r4
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x3a4>
 800086a:	e186      	b.n	8000b7a <__aeabi_dadd+0x6b2>
 800086c:	2580      	movs	r5, #128	@ 0x80
 800086e:	032d      	lsls	r5, r5, #12
 8000870:	4325      	orrs	r5, r4
 8000872:	032d      	lsls	r5, r5, #12
 8000874:	4cc3      	ldr	r4, [pc, #780]	@ (8000b84 <__aeabi_dadd+0x6bc>)
 8000876:	0b2d      	lsrs	r5, r5, #12
 8000878:	e6be      	b.n	80005f8 <__aeabi_dadd+0x130>
 800087a:	4660      	mov	r0, ip
 800087c:	4654      	mov	r4, sl
 800087e:	000e      	movs	r6, r1
 8000880:	0017      	movs	r7, r2
 8000882:	08c5      	lsrs	r5, r0, #3
 8000884:	e7d8      	b.n	8000838 <__aeabi_dadd+0x370>
 8000886:	4cc0      	ldr	r4, [pc, #768]	@ (8000b88 <__aeabi_dadd+0x6c0>)
 8000888:	1aff      	subs	r7, r7, r3
 800088a:	4014      	ands	r4, r2
 800088c:	e696      	b.n	80005bc <__aeabi_dadd+0xf4>
 800088e:	4abf      	ldr	r2, [pc, #764]	@ (8000b8c <__aeabi_dadd+0x6c4>)
 8000890:	1c79      	adds	r1, r7, #1
 8000892:	4211      	tst	r1, r2
 8000894:	d16b      	bne.n	800096e <__aeabi_dadd+0x4a6>
 8000896:	0022      	movs	r2, r4
 8000898:	4302      	orrs	r2, r0
 800089a:	2f00      	cmp	r7, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_dadd+0x3d8>
 800089e:	e0db      	b.n	8000a58 <__aeabi_dadd+0x590>
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x3de>
 80008a4:	e12d      	b.n	8000b02 <__aeabi_dadd+0x63a>
 80008a6:	4662      	mov	r2, ip
 80008a8:	4653      	mov	r3, sl
 80008aa:	431a      	orrs	r2, r3
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x3e8>
 80008ae:	e0b6      	b.n	8000a1e <__aeabi_dadd+0x556>
 80008b0:	4663      	mov	r3, ip
 80008b2:	18c5      	adds	r5, r0, r3
 80008b4:	4285      	cmp	r5, r0
 80008b6:	4180      	sbcs	r0, r0
 80008b8:	4454      	add	r4, sl
 80008ba:	4240      	negs	r0, r0
 80008bc:	1824      	adds	r4, r4, r0
 80008be:	0223      	lsls	r3, r4, #8
 80008c0:	d502      	bpl.n	80008c8 <__aeabi_dadd+0x400>
 80008c2:	000f      	movs	r7, r1
 80008c4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b88 <__aeabi_dadd+0x6c0>)
 80008c6:	401c      	ands	r4, r3
 80008c8:	003a      	movs	r2, r7
 80008ca:	0028      	movs	r0, r5
 80008cc:	e7d8      	b.n	8000880 <__aeabi_dadd+0x3b8>
 80008ce:	4662      	mov	r2, ip
 80008d0:	1a85      	subs	r5, r0, r2
 80008d2:	42a8      	cmp	r0, r5
 80008d4:	4192      	sbcs	r2, r2
 80008d6:	4653      	mov	r3, sl
 80008d8:	4252      	negs	r2, r2
 80008da:	4691      	mov	r9, r2
 80008dc:	1ae3      	subs	r3, r4, r3
 80008de:	001a      	movs	r2, r3
 80008e0:	464b      	mov	r3, r9
 80008e2:	1ad2      	subs	r2, r2, r3
 80008e4:	0013      	movs	r3, r2
 80008e6:	4691      	mov	r9, r2
 80008e8:	021a      	lsls	r2, r3, #8
 80008ea:	d454      	bmi.n	8000996 <__aeabi_dadd+0x4ce>
 80008ec:	464a      	mov	r2, r9
 80008ee:	464c      	mov	r4, r9
 80008f0:	432a      	orrs	r2, r5
 80008f2:	d000      	beq.n	80008f6 <__aeabi_dadd+0x42e>
 80008f4:	e640      	b.n	8000578 <__aeabi_dadd+0xb0>
 80008f6:	2600      	movs	r6, #0
 80008f8:	2400      	movs	r4, #0
 80008fa:	2500      	movs	r5, #0
 80008fc:	e67c      	b.n	80005f8 <__aeabi_dadd+0x130>
 80008fe:	4da1      	ldr	r5, [pc, #644]	@ (8000b84 <__aeabi_dadd+0x6bc>)
 8000900:	45a9      	cmp	r9, r5
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x43e>
 8000904:	e090      	b.n	8000a28 <__aeabi_dadd+0x560>
 8000906:	2501      	movs	r5, #1
 8000908:	2a38      	cmp	r2, #56	@ 0x38
 800090a:	dd00      	ble.n	800090e <__aeabi_dadd+0x446>
 800090c:	e6ab      	b.n	8000666 <__aeabi_dadd+0x19e>
 800090e:	2580      	movs	r5, #128	@ 0x80
 8000910:	042d      	lsls	r5, r5, #16
 8000912:	432c      	orrs	r4, r5
 8000914:	e695      	b.n	8000642 <__aeabi_dadd+0x17a>
 8000916:	0011      	movs	r1, r2
 8000918:	4655      	mov	r5, sl
 800091a:	3920      	subs	r1, #32
 800091c:	40cd      	lsrs	r5, r1
 800091e:	46a9      	mov	r9, r5
 8000920:	2a20      	cmp	r2, #32
 8000922:	d006      	beq.n	8000932 <__aeabi_dadd+0x46a>
 8000924:	2140      	movs	r1, #64	@ 0x40
 8000926:	4653      	mov	r3, sl
 8000928:	1a8a      	subs	r2, r1, r2
 800092a:	4093      	lsls	r3, r2
 800092c:	4662      	mov	r2, ip
 800092e:	431a      	orrs	r2, r3
 8000930:	4694      	mov	ip, r2
 8000932:	4665      	mov	r5, ip
 8000934:	1e6b      	subs	r3, r5, #1
 8000936:	419d      	sbcs	r5, r3
 8000938:	464b      	mov	r3, r9
 800093a:	431d      	orrs	r5, r3
 800093c:	e612      	b.n	8000564 <__aeabi_dadd+0x9c>
 800093e:	0021      	movs	r1, r4
 8000940:	4301      	orrs	r1, r0
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x47e>
 8000944:	e0c4      	b.n	8000ad0 <__aeabi_dadd+0x608>
 8000946:	1e51      	subs	r1, r2, #1
 8000948:	2a01      	cmp	r2, #1
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x486>
 800094c:	e0fb      	b.n	8000b46 <__aeabi_dadd+0x67e>
 800094e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b84 <__aeabi_dadd+0x6bc>)
 8000950:	42aa      	cmp	r2, r5
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x48e>
 8000954:	e0b5      	b.n	8000ac2 <__aeabi_dadd+0x5fa>
 8000956:	2501      	movs	r5, #1
 8000958:	2938      	cmp	r1, #56	@ 0x38
 800095a:	dd00      	ble.n	800095e <__aeabi_dadd+0x496>
 800095c:	e741      	b.n	80007e2 <__aeabi_dadd+0x31a>
 800095e:	000a      	movs	r2, r1
 8000960:	e72f      	b.n	80007c2 <__aeabi_dadd+0x2fa>
 8000962:	4c89      	ldr	r4, [pc, #548]	@ (8000b88 <__aeabi_dadd+0x6c0>)
 8000964:	1aff      	subs	r7, r7, r3
 8000966:	4014      	ands	r4, r2
 8000968:	0762      	lsls	r2, r4, #29
 800096a:	08e4      	lsrs	r4, r4, #3
 800096c:	e76a      	b.n	8000844 <__aeabi_dadd+0x37c>
 800096e:	4a85      	ldr	r2, [pc, #532]	@ (8000b84 <__aeabi_dadd+0x6bc>)
 8000970:	4291      	cmp	r1, r2
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x4ae>
 8000974:	e0e3      	b.n	8000b3e <__aeabi_dadd+0x676>
 8000976:	4663      	mov	r3, ip
 8000978:	18c2      	adds	r2, r0, r3
 800097a:	4282      	cmp	r2, r0
 800097c:	4180      	sbcs	r0, r0
 800097e:	0023      	movs	r3, r4
 8000980:	4240      	negs	r0, r0
 8000982:	4453      	add	r3, sl
 8000984:	181b      	adds	r3, r3, r0
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	085c      	lsrs	r4, r3, #1
 800098a:	2307      	movs	r3, #7
 800098c:	0852      	lsrs	r2, r2, #1
 800098e:	4315      	orrs	r5, r2
 8000990:	000f      	movs	r7, r1
 8000992:	402b      	ands	r3, r5
 8000994:	e700      	b.n	8000798 <__aeabi_dadd+0x2d0>
 8000996:	4663      	mov	r3, ip
 8000998:	1a1d      	subs	r5, r3, r0
 800099a:	45ac      	cmp	ip, r5
 800099c:	4192      	sbcs	r2, r2
 800099e:	4653      	mov	r3, sl
 80009a0:	4252      	negs	r2, r2
 80009a2:	1b1c      	subs	r4, r3, r4
 80009a4:	000e      	movs	r6, r1
 80009a6:	4688      	mov	r8, r1
 80009a8:	1aa4      	subs	r4, r4, r2
 80009aa:	e5e5      	b.n	8000578 <__aeabi_dadd+0xb0>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x4ea>
 80009b0:	e091      	b.n	8000ad6 <__aeabi_dadd+0x60e>
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d138      	bne.n	8000a28 <__aeabi_dadd+0x560>
 80009b6:	2480      	movs	r4, #128	@ 0x80
 80009b8:	2600      	movs	r6, #0
 80009ba:	0324      	lsls	r4, r4, #12
 80009bc:	e756      	b.n	800086c <__aeabi_dadd+0x3a4>
 80009be:	4663      	mov	r3, ip
 80009c0:	18c5      	adds	r5, r0, r3
 80009c2:	4285      	cmp	r5, r0
 80009c4:	4180      	sbcs	r0, r0
 80009c6:	4454      	add	r4, sl
 80009c8:	4240      	negs	r0, r0
 80009ca:	1824      	adds	r4, r4, r0
 80009cc:	2701      	movs	r7, #1
 80009ce:	0223      	lsls	r3, r4, #8
 80009d0:	d400      	bmi.n	80009d4 <__aeabi_dadd+0x50c>
 80009d2:	e6df      	b.n	8000794 <__aeabi_dadd+0x2cc>
 80009d4:	2702      	movs	r7, #2
 80009d6:	e687      	b.n	80006e8 <__aeabi_dadd+0x220>
 80009d8:	4663      	mov	r3, ip
 80009da:	1ac5      	subs	r5, r0, r3
 80009dc:	42a8      	cmp	r0, r5
 80009de:	4180      	sbcs	r0, r0
 80009e0:	4653      	mov	r3, sl
 80009e2:	4240      	negs	r0, r0
 80009e4:	1ae4      	subs	r4, r4, r3
 80009e6:	2701      	movs	r7, #1
 80009e8:	1a24      	subs	r4, r4, r0
 80009ea:	e5c0      	b.n	800056e <__aeabi_dadd+0xa6>
 80009ec:	0762      	lsls	r2, r4, #29
 80009ee:	08c0      	lsrs	r0, r0, #3
 80009f0:	4302      	orrs	r2, r0
 80009f2:	08e4      	lsrs	r4, r4, #3
 80009f4:	e736      	b.n	8000864 <__aeabi_dadd+0x39c>
 80009f6:	0011      	movs	r1, r2
 80009f8:	4653      	mov	r3, sl
 80009fa:	3920      	subs	r1, #32
 80009fc:	40cb      	lsrs	r3, r1
 80009fe:	4699      	mov	r9, r3
 8000a00:	2a20      	cmp	r2, #32
 8000a02:	d006      	beq.n	8000a12 <__aeabi_dadd+0x54a>
 8000a04:	2140      	movs	r1, #64	@ 0x40
 8000a06:	4653      	mov	r3, sl
 8000a08:	1a8a      	subs	r2, r1, r2
 8000a0a:	4093      	lsls	r3, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	4694      	mov	ip, r2
 8000a12:	4665      	mov	r5, ip
 8000a14:	1e6b      	subs	r3, r5, #1
 8000a16:	419d      	sbcs	r5, r3
 8000a18:	464b      	mov	r3, r9
 8000a1a:	431d      	orrs	r5, r3
 8000a1c:	e659      	b.n	80006d2 <__aeabi_dadd+0x20a>
 8000a1e:	0762      	lsls	r2, r4, #29
 8000a20:	08c0      	lsrs	r0, r0, #3
 8000a22:	4302      	orrs	r2, r0
 8000a24:	08e4      	lsrs	r4, r4, #3
 8000a26:	e70d      	b.n	8000844 <__aeabi_dadd+0x37c>
 8000a28:	4653      	mov	r3, sl
 8000a2a:	075a      	lsls	r2, r3, #29
 8000a2c:	4663      	mov	r3, ip
 8000a2e:	08d8      	lsrs	r0, r3, #3
 8000a30:	4653      	mov	r3, sl
 8000a32:	000e      	movs	r6, r1
 8000a34:	4302      	orrs	r2, r0
 8000a36:	08dc      	lsrs	r4, r3, #3
 8000a38:	e714      	b.n	8000864 <__aeabi_dadd+0x39c>
 8000a3a:	0015      	movs	r5, r2
 8000a3c:	0026      	movs	r6, r4
 8000a3e:	3d20      	subs	r5, #32
 8000a40:	40ee      	lsrs	r6, r5
 8000a42:	2a20      	cmp	r2, #32
 8000a44:	d003      	beq.n	8000a4e <__aeabi_dadd+0x586>
 8000a46:	2540      	movs	r5, #64	@ 0x40
 8000a48:	1aaa      	subs	r2, r5, r2
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	4320      	orrs	r0, r4
 8000a4e:	1e42      	subs	r2, r0, #1
 8000a50:	4190      	sbcs	r0, r2
 8000a52:	0005      	movs	r5, r0
 8000a54:	4335      	orrs	r5, r6
 8000a56:	e606      	b.n	8000666 <__aeabi_dadd+0x19e>
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	d07c      	beq.n	8000b56 <__aeabi_dadd+0x68e>
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	4653      	mov	r3, sl
 8000a60:	08c0      	lsrs	r0, r0, #3
 8000a62:	431a      	orrs	r2, r3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x5a0>
 8000a66:	e6fa      	b.n	800085e <__aeabi_dadd+0x396>
 8000a68:	0762      	lsls	r2, r4, #29
 8000a6a:	4310      	orrs	r0, r2
 8000a6c:	2280      	movs	r2, #128	@ 0x80
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	0312      	lsls	r2, r2, #12
 8000a72:	4214      	tst	r4, r2
 8000a74:	d008      	beq.n	8000a88 <__aeabi_dadd+0x5c0>
 8000a76:	08d9      	lsrs	r1, r3, #3
 8000a78:	4211      	tst	r1, r2
 8000a7a:	d105      	bne.n	8000a88 <__aeabi_dadd+0x5c0>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	08d8      	lsrs	r0, r3, #3
 8000a80:	4653      	mov	r3, sl
 8000a82:	000c      	movs	r4, r1
 8000a84:	075b      	lsls	r3, r3, #29
 8000a86:	4318      	orrs	r0, r3
 8000a88:	0f42      	lsrs	r2, r0, #29
 8000a8a:	00c0      	lsls	r0, r0, #3
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0752      	lsls	r2, r2, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	e6e7      	b.n	8000864 <__aeabi_dadd+0x39c>
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x5d2>
 8000a98:	e72d      	b.n	80008f6 <__aeabi_dadd+0x42e>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	08d8      	lsrs	r0, r3, #3
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	075a      	lsls	r2, r3, #29
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	4302      	orrs	r2, r0
 8000aa6:	08dc      	lsrs	r4, r3, #3
 8000aa8:	e6cc      	b.n	8000844 <__aeabi_dadd+0x37c>
 8000aaa:	4663      	mov	r3, ip
 8000aac:	1a1d      	subs	r5, r3, r0
 8000aae:	45ac      	cmp	ip, r5
 8000ab0:	4192      	sbcs	r2, r2
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	1b1c      	subs	r4, r3, r4
 8000ab8:	000e      	movs	r6, r1
 8000aba:	4688      	mov	r8, r1
 8000abc:	1aa4      	subs	r4, r4, r2
 8000abe:	3701      	adds	r7, #1
 8000ac0:	e555      	b.n	800056e <__aeabi_dadd+0xa6>
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	08d9      	lsrs	r1, r3, #3
 8000ac6:	4653      	mov	r3, sl
 8000ac8:	075a      	lsls	r2, r3, #29
 8000aca:	430a      	orrs	r2, r1
 8000acc:	08dc      	lsrs	r4, r3, #3
 8000ace:	e6c9      	b.n	8000864 <__aeabi_dadd+0x39c>
 8000ad0:	4660      	mov	r0, ip
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	e6d4      	b.n	8000880 <__aeabi_dadd+0x3b8>
 8000ad6:	08c0      	lsrs	r0, r0, #3
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x616>
 8000adc:	e6bf      	b.n	800085e <__aeabi_dadd+0x396>
 8000ade:	0762      	lsls	r2, r4, #29
 8000ae0:	4310      	orrs	r0, r2
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	08e4      	lsrs	r4, r4, #3
 8000ae6:	0312      	lsls	r2, r2, #12
 8000ae8:	4214      	tst	r4, r2
 8000aea:	d0cd      	beq.n	8000a88 <__aeabi_dadd+0x5c0>
 8000aec:	08dd      	lsrs	r5, r3, #3
 8000aee:	4215      	tst	r5, r2
 8000af0:	d1ca      	bne.n	8000a88 <__aeabi_dadd+0x5c0>
 8000af2:	4663      	mov	r3, ip
 8000af4:	08d8      	lsrs	r0, r3, #3
 8000af6:	4653      	mov	r3, sl
 8000af8:	075b      	lsls	r3, r3, #29
 8000afa:	000e      	movs	r6, r1
 8000afc:	002c      	movs	r4, r5
 8000afe:	4318      	orrs	r0, r3
 8000b00:	e7c2      	b.n	8000a88 <__aeabi_dadd+0x5c0>
 8000b02:	4663      	mov	r3, ip
 8000b04:	08d9      	lsrs	r1, r3, #3
 8000b06:	4653      	mov	r3, sl
 8000b08:	075a      	lsls	r2, r3, #29
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	08dc      	lsrs	r4, r3, #3
 8000b0e:	e699      	b.n	8000844 <__aeabi_dadd+0x37c>
 8000b10:	4663      	mov	r3, ip
 8000b12:	08d8      	lsrs	r0, r3, #3
 8000b14:	4653      	mov	r3, sl
 8000b16:	075a      	lsls	r2, r3, #29
 8000b18:	000e      	movs	r6, r1
 8000b1a:	4302      	orrs	r2, r0
 8000b1c:	08dc      	lsrs	r4, r3, #3
 8000b1e:	e6a1      	b.n	8000864 <__aeabi_dadd+0x39c>
 8000b20:	0011      	movs	r1, r2
 8000b22:	0027      	movs	r7, r4
 8000b24:	3920      	subs	r1, #32
 8000b26:	40cf      	lsrs	r7, r1
 8000b28:	2a20      	cmp	r2, #32
 8000b2a:	d003      	beq.n	8000b34 <__aeabi_dadd+0x66c>
 8000b2c:	2140      	movs	r1, #64	@ 0x40
 8000b2e:	1a8a      	subs	r2, r1, r2
 8000b30:	4094      	lsls	r4, r2
 8000b32:	4320      	orrs	r0, r4
 8000b34:	1e42      	subs	r2, r0, #1
 8000b36:	4190      	sbcs	r0, r2
 8000b38:	0005      	movs	r5, r0
 8000b3a:	433d      	orrs	r5, r7
 8000b3c:	e651      	b.n	80007e2 <__aeabi_dadd+0x31a>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	2500      	movs	r5, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	e558      	b.n	80005f8 <__aeabi_dadd+0x130>
 8000b46:	4460      	add	r0, ip
 8000b48:	4560      	cmp	r0, ip
 8000b4a:	4192      	sbcs	r2, r2
 8000b4c:	4454      	add	r4, sl
 8000b4e:	4252      	negs	r2, r2
 8000b50:	0005      	movs	r5, r0
 8000b52:	18a4      	adds	r4, r4, r2
 8000b54:	e73a      	b.n	80009cc <__aeabi_dadd+0x504>
 8000b56:	4653      	mov	r3, sl
 8000b58:	075a      	lsls	r2, r3, #29
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	08d9      	lsrs	r1, r3, #3
 8000b5e:	4653      	mov	r3, sl
 8000b60:	430a      	orrs	r2, r1
 8000b62:	08dc      	lsrs	r4, r3, #3
 8000b64:	e67e      	b.n	8000864 <__aeabi_dadd+0x39c>
 8000b66:	001a      	movs	r2, r3
 8000b68:	001c      	movs	r4, r3
 8000b6a:	432a      	orrs	r2, r5
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_dadd+0x6a8>
 8000b6e:	e6ab      	b.n	80008c8 <__aeabi_dadd+0x400>
 8000b70:	e6c1      	b.n	80008f6 <__aeabi_dadd+0x42e>
 8000b72:	2120      	movs	r1, #32
 8000b74:	2500      	movs	r5, #0
 8000b76:	1a09      	subs	r1, r1, r0
 8000b78:	e519      	b.n	80005ae <__aeabi_dadd+0xe6>
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2500      	movs	r5, #0
 8000b7e:	4c01      	ldr	r4, [pc, #4]	@ (8000b84 <__aeabi_dadd+0x6bc>)
 8000b80:	e53a      	b.n	80005f8 <__aeabi_dadd+0x130>
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	000007ff 	.word	0x000007ff
 8000b88:	ff7fffff 	.word	0xff7fffff
 8000b8c:	000007fe 	.word	0x000007fe

08000b90 <__aeabi_ddiv>:
 8000b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b92:	46de      	mov	lr, fp
 8000b94:	4645      	mov	r5, r8
 8000b96:	4657      	mov	r7, sl
 8000b98:	464e      	mov	r6, r9
 8000b9a:	b5e0      	push	{r5, r6, r7, lr}
 8000b9c:	b087      	sub	sp, #28
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	030b      	lsls	r3, r1, #12
 8000ba4:	0b1b      	lsrs	r3, r3, #12
 8000ba6:	469b      	mov	fp, r3
 8000ba8:	0fca      	lsrs	r2, r1, #31
 8000baa:	004b      	lsls	r3, r1, #1
 8000bac:	0004      	movs	r4, r0
 8000bae:	4680      	mov	r8, r0
 8000bb0:	0d5b      	lsrs	r3, r3, #21
 8000bb2:	9202      	str	r2, [sp, #8]
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_ddiv+0x28>
 8000bb6:	e16a      	b.n	8000e8e <__aeabi_ddiv+0x2fe>
 8000bb8:	4ad4      	ldr	r2, [pc, #848]	@ (8000f0c <__aeabi_ddiv+0x37c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_ddiv+0x30>
 8000bbe:	e18c      	b.n	8000eda <__aeabi_ddiv+0x34a>
 8000bc0:	4659      	mov	r1, fp
 8000bc2:	0f42      	lsrs	r2, r0, #29
 8000bc4:	00c9      	lsls	r1, r1, #3
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	0409      	lsls	r1, r1, #16
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	00c2      	lsls	r2, r0, #3
 8000bd0:	4690      	mov	r8, r2
 8000bd2:	4acf      	ldr	r2, [pc, #828]	@ (8000f10 <__aeabi_ddiv+0x380>)
 8000bd4:	4689      	mov	r9, r1
 8000bd6:	4692      	mov	sl, r2
 8000bd8:	449a      	add	sl, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2400      	movs	r4, #0
 8000bde:	9303      	str	r3, [sp, #12]
 8000be0:	9e00      	ldr	r6, [sp, #0]
 8000be2:	9f01      	ldr	r7, [sp, #4]
 8000be4:	033b      	lsls	r3, r7, #12
 8000be6:	0b1b      	lsrs	r3, r3, #12
 8000be8:	469b      	mov	fp, r3
 8000bea:	007b      	lsls	r3, r7, #1
 8000bec:	0030      	movs	r0, r6
 8000bee:	0d5b      	lsrs	r3, r3, #21
 8000bf0:	0ffd      	lsrs	r5, r7, #31
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_ddiv+0x68>
 8000bf6:	e128      	b.n	8000e4a <__aeabi_ddiv+0x2ba>
 8000bf8:	4ac4      	ldr	r2, [pc, #784]	@ (8000f0c <__aeabi_ddiv+0x37c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_ddiv+0x70>
 8000bfe:	e177      	b.n	8000ef0 <__aeabi_ddiv+0x360>
 8000c00:	4659      	mov	r1, fp
 8000c02:	0f72      	lsrs	r2, r6, #29
 8000c04:	00c9      	lsls	r1, r1, #3
 8000c06:	430a      	orrs	r2, r1
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	0409      	lsls	r1, r1, #16
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	468b      	mov	fp, r1
 8000c10:	49bf      	ldr	r1, [pc, #764]	@ (8000f10 <__aeabi_ddiv+0x380>)
 8000c12:	00f2      	lsls	r2, r6, #3
 8000c14:	468c      	mov	ip, r1
 8000c16:	4651      	mov	r1, sl
 8000c18:	4463      	add	r3, ip
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9e02      	ldr	r6, [sp, #8]
 8000c22:	406e      	eors	r6, r5
 8000c24:	2c0f      	cmp	r4, #15
 8000c26:	d827      	bhi.n	8000c78 <__aeabi_ddiv+0xe8>
 8000c28:	49ba      	ldr	r1, [pc, #744]	@ (8000f14 <__aeabi_ddiv+0x384>)
 8000c2a:	00a4      	lsls	r4, r4, #2
 8000c2c:	5909      	ldr	r1, [r1, r4]
 8000c2e:	468f      	mov	pc, r1
 8000c30:	46cb      	mov	fp, r9
 8000c32:	4642      	mov	r2, r8
 8000c34:	9e02      	ldr	r6, [sp, #8]
 8000c36:	9b03      	ldr	r3, [sp, #12]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d016      	beq.n	8000c6a <__aeabi_ddiv+0xda>
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0xb2>
 8000c40:	e2a6      	b.n	8001190 <__aeabi_ddiv+0x600>
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d000      	beq.n	8000c48 <__aeabi_ddiv+0xb8>
 8000c46:	e0df      	b.n	8000e08 <__aeabi_ddiv+0x278>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	4690      	mov	r8, r2
 8000c50:	051b      	lsls	r3, r3, #20
 8000c52:	4323      	orrs	r3, r4
 8000c54:	07f6      	lsls	r6, r6, #31
 8000c56:	4333      	orrs	r3, r6
 8000c58:	4640      	mov	r0, r8
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	b007      	add	sp, #28
 8000c5e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c60:	46bb      	mov	fp, r7
 8000c62:	46b2      	mov	sl, r6
 8000c64:	46a9      	mov	r9, r5
 8000c66:	46a0      	mov	r8, r4
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4ba6      	ldr	r3, [pc, #664]	@ (8000f0c <__aeabi_ddiv+0x37c>)
 8000c72:	e7ed      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8000c74:	002e      	movs	r6, r5
 8000c76:	e7df      	b.n	8000c38 <__aeabi_ddiv+0xa8>
 8000c78:	45cb      	cmp	fp, r9
 8000c7a:	d200      	bcs.n	8000c7e <__aeabi_ddiv+0xee>
 8000c7c:	e1d4      	b.n	8001028 <__aeabi_ddiv+0x498>
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0xf2>
 8000c80:	e1cf      	b.n	8001022 <__aeabi_ddiv+0x492>
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	469c      	mov	ip, r3
 8000c88:	4644      	mov	r4, r8
 8000c8a:	4648      	mov	r0, r9
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	44e2      	add	sl, ip
 8000c90:	465b      	mov	r3, fp
 8000c92:	0e15      	lsrs	r5, r2, #24
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	431d      	orrs	r5, r3
 8000c98:	0c19      	lsrs	r1, r3, #16
 8000c9a:	042b      	lsls	r3, r5, #16
 8000c9c:	0212      	lsls	r2, r2, #8
 8000c9e:	9500      	str	r5, [sp, #0]
 8000ca0:	0c1d      	lsrs	r5, r3, #16
 8000ca2:	4691      	mov	r9, r2
 8000ca4:	9102      	str	r1, [sp, #8]
 8000ca6:	9503      	str	r5, [sp, #12]
 8000ca8:	f7ff fac2 	bl	8000230 <__aeabi_uidivmod>
 8000cac:	0002      	movs	r2, r0
 8000cae:	436a      	muls	r2, r5
 8000cb0:	040b      	lsls	r3, r1, #16
 8000cb2:	0c21      	lsrs	r1, r4, #16
 8000cb4:	4680      	mov	r8, r0
 8000cb6:	4319      	orrs	r1, r3
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	d909      	bls.n	8000cd0 <__aeabi_ddiv+0x140>
 8000cbc:	9d00      	ldr	r5, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	46ac      	mov	ip, r5
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	4461      	add	r1, ip
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	44e0      	add	r8, ip
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	d800      	bhi.n	8000cd0 <__aeabi_ddiv+0x140>
 8000cce:	e1fb      	b.n	80010c8 <__aeabi_ddiv+0x538>
 8000cd0:	1a88      	subs	r0, r1, r2
 8000cd2:	9902      	ldr	r1, [sp, #8]
 8000cd4:	f7ff faac 	bl	8000230 <__aeabi_uidivmod>
 8000cd8:	9a03      	ldr	r2, [sp, #12]
 8000cda:	0424      	lsls	r4, r4, #16
 8000cdc:	4342      	muls	r2, r0
 8000cde:	0409      	lsls	r1, r1, #16
 8000ce0:	0c24      	lsrs	r4, r4, #16
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	430c      	orrs	r4, r1
 8000ce6:	42a2      	cmp	r2, r4
 8000ce8:	d906      	bls.n	8000cf8 <__aeabi_ddiv+0x168>
 8000cea:	9900      	ldr	r1, [sp, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	468c      	mov	ip, r1
 8000cf0:	4464      	add	r4, ip
 8000cf2:	42a1      	cmp	r1, r4
 8000cf4:	d800      	bhi.n	8000cf8 <__aeabi_ddiv+0x168>
 8000cf6:	e1e1      	b.n	80010bc <__aeabi_ddiv+0x52c>
 8000cf8:	1aa0      	subs	r0, r4, r2
 8000cfa:	4642      	mov	r2, r8
 8000cfc:	0412      	lsls	r2, r2, #16
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	4693      	mov	fp, r2
 8000d02:	464b      	mov	r3, r9
 8000d04:	4659      	mov	r1, fp
 8000d06:	0c1b      	lsrs	r3, r3, #16
 8000d08:	001d      	movs	r5, r3
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	040b      	lsls	r3, r1, #16
 8000d0e:	4649      	mov	r1, r9
 8000d10:	0409      	lsls	r1, r1, #16
 8000d12:	0c09      	lsrs	r1, r1, #16
 8000d14:	000c      	movs	r4, r1
 8000d16:	0c1b      	lsrs	r3, r3, #16
 8000d18:	435c      	muls	r4, r3
 8000d1a:	0c12      	lsrs	r2, r2, #16
 8000d1c:	436b      	muls	r3, r5
 8000d1e:	4688      	mov	r8, r1
 8000d20:	4351      	muls	r1, r2
 8000d22:	436a      	muls	r2, r5
 8000d24:	0c25      	lsrs	r5, r4, #16
 8000d26:	46ac      	mov	ip, r5
 8000d28:	185b      	adds	r3, r3, r1
 8000d2a:	4463      	add	r3, ip
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	d903      	bls.n	8000d38 <__aeabi_ddiv+0x1a8>
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	0249      	lsls	r1, r1, #9
 8000d34:	468c      	mov	ip, r1
 8000d36:	4462      	add	r2, ip
 8000d38:	0c19      	lsrs	r1, r3, #16
 8000d3a:	0424      	lsls	r4, r4, #16
 8000d3c:	041b      	lsls	r3, r3, #16
 8000d3e:	0c24      	lsrs	r4, r4, #16
 8000d40:	188a      	adds	r2, r1, r2
 8000d42:	191c      	adds	r4, r3, r4
 8000d44:	4290      	cmp	r0, r2
 8000d46:	d302      	bcc.n	8000d4e <__aeabi_ddiv+0x1be>
 8000d48:	d116      	bne.n	8000d78 <__aeabi_ddiv+0x1e8>
 8000d4a:	42a7      	cmp	r7, r4
 8000d4c:	d214      	bcs.n	8000d78 <__aeabi_ddiv+0x1e8>
 8000d4e:	465b      	mov	r3, fp
 8000d50:	9d00      	ldr	r5, [sp, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	444f      	add	r7, r9
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	454f      	cmp	r7, r9
 8000d5a:	419b      	sbcs	r3, r3
 8000d5c:	46ac      	mov	ip, r5
 8000d5e:	425b      	negs	r3, r3
 8000d60:	4463      	add	r3, ip
 8000d62:	18c0      	adds	r0, r0, r3
 8000d64:	4285      	cmp	r5, r0
 8000d66:	d300      	bcc.n	8000d6a <__aeabi_ddiv+0x1da>
 8000d68:	e1a1      	b.n	80010ae <__aeabi_ddiv+0x51e>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	d900      	bls.n	8000d70 <__aeabi_ddiv+0x1e0>
 8000d6e:	e1f6      	b.n	800115e <__aeabi_ddiv+0x5ce>
 8000d70:	d100      	bne.n	8000d74 <__aeabi_ddiv+0x1e4>
 8000d72:	e1f1      	b.n	8001158 <__aeabi_ddiv+0x5c8>
 8000d74:	9b05      	ldr	r3, [sp, #20]
 8000d76:	469b      	mov	fp, r3
 8000d78:	1b3c      	subs	r4, r7, r4
 8000d7a:	42a7      	cmp	r7, r4
 8000d7c:	41bf      	sbcs	r7, r7
 8000d7e:	9d00      	ldr	r5, [sp, #0]
 8000d80:	1a80      	subs	r0, r0, r2
 8000d82:	427f      	negs	r7, r7
 8000d84:	1bc0      	subs	r0, r0, r7
 8000d86:	4285      	cmp	r5, r0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x1fc>
 8000d8a:	e1d0      	b.n	800112e <__aeabi_ddiv+0x59e>
 8000d8c:	9902      	ldr	r1, [sp, #8]
 8000d8e:	f7ff fa4f 	bl	8000230 <__aeabi_uidivmod>
 8000d92:	9a03      	ldr	r2, [sp, #12]
 8000d94:	040b      	lsls	r3, r1, #16
 8000d96:	4342      	muls	r2, r0
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	0007      	movs	r7, r0
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d900      	bls.n	8000da4 <__aeabi_ddiv+0x214>
 8000da2:	e178      	b.n	8001096 <__aeabi_ddiv+0x506>
 8000da4:	1a88      	subs	r0, r1, r2
 8000da6:	9902      	ldr	r1, [sp, #8]
 8000da8:	f7ff fa42 	bl	8000230 <__aeabi_uidivmod>
 8000dac:	9a03      	ldr	r2, [sp, #12]
 8000dae:	0424      	lsls	r4, r4, #16
 8000db0:	4342      	muls	r2, r0
 8000db2:	0409      	lsls	r1, r1, #16
 8000db4:	0c24      	lsrs	r4, r4, #16
 8000db6:	0003      	movs	r3, r0
 8000db8:	430c      	orrs	r4, r1
 8000dba:	42a2      	cmp	r2, r4
 8000dbc:	d900      	bls.n	8000dc0 <__aeabi_ddiv+0x230>
 8000dbe:	e15d      	b.n	800107c <__aeabi_ddiv+0x4ec>
 8000dc0:	4641      	mov	r1, r8
 8000dc2:	1aa4      	subs	r4, r4, r2
 8000dc4:	043a      	lsls	r2, r7, #16
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	9d04      	ldr	r5, [sp, #16]
 8000dca:	0413      	lsls	r3, r2, #16
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	4359      	muls	r1, r3
 8000dd0:	4647      	mov	r7, r8
 8000dd2:	436b      	muls	r3, r5
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	0c10      	lsrs	r0, r2, #16
 8000dd8:	4347      	muls	r7, r0
 8000dda:	0c0b      	lsrs	r3, r1, #16
 8000ddc:	44bc      	add	ip, r7
 8000dde:	4463      	add	r3, ip
 8000de0:	4368      	muls	r0, r5
 8000de2:	429f      	cmp	r7, r3
 8000de4:	d903      	bls.n	8000dee <__aeabi_ddiv+0x25e>
 8000de6:	2580      	movs	r5, #128	@ 0x80
 8000de8:	026d      	lsls	r5, r5, #9
 8000dea:	46ac      	mov	ip, r5
 8000dec:	4460      	add	r0, ip
 8000dee:	0c1f      	lsrs	r7, r3, #16
 8000df0:	0409      	lsls	r1, r1, #16
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	0c09      	lsrs	r1, r1, #16
 8000df6:	183f      	adds	r7, r7, r0
 8000df8:	185b      	adds	r3, r3, r1
 8000dfa:	42bc      	cmp	r4, r7
 8000dfc:	d200      	bcs.n	8000e00 <__aeabi_ddiv+0x270>
 8000dfe:	e102      	b.n	8001006 <__aeabi_ddiv+0x476>
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x274>
 8000e02:	e0fd      	b.n	8001000 <__aeabi_ddiv+0x470>
 8000e04:	2301      	movs	r3, #1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <__aeabi_ddiv+0x388>)
 8000e0a:	4453      	add	r3, sl
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_ddiv+0x282>
 8000e10:	e0ae      	b.n	8000f70 <__aeabi_ddiv+0x3e0>
 8000e12:	0751      	lsls	r1, r2, #29
 8000e14:	d000      	beq.n	8000e18 <__aeabi_ddiv+0x288>
 8000e16:	e198      	b.n	800114a <__aeabi_ddiv+0x5ba>
 8000e18:	4659      	mov	r1, fp
 8000e1a:	01c9      	lsls	r1, r1, #7
 8000e1c:	d506      	bpl.n	8000e2c <__aeabi_ddiv+0x29c>
 8000e1e:	4659      	mov	r1, fp
 8000e20:	4b3e      	ldr	r3, [pc, #248]	@ (8000f1c <__aeabi_ddiv+0x38c>)
 8000e22:	4019      	ands	r1, r3
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	468b      	mov	fp, r1
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4453      	add	r3, sl
 8000e2c:	493c      	ldr	r1, [pc, #240]	@ (8000f20 <__aeabi_ddiv+0x390>)
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_ddiv+0x2a4>
 8000e32:	e71a      	b.n	8000c6a <__aeabi_ddiv+0xda>
 8000e34:	4659      	mov	r1, fp
 8000e36:	08d2      	lsrs	r2, r2, #3
 8000e38:	0749      	lsls	r1, r1, #29
 8000e3a:	4311      	orrs	r1, r2
 8000e3c:	465a      	mov	r2, fp
 8000e3e:	055b      	lsls	r3, r3, #21
 8000e40:	0254      	lsls	r4, r2, #9
 8000e42:	4688      	mov	r8, r1
 8000e44:	0b24      	lsrs	r4, r4, #12
 8000e46:	0d5b      	lsrs	r3, r3, #21
 8000e48:	e702      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8000e4a:	465a      	mov	r2, fp
 8000e4c:	9b00      	ldr	r3, [sp, #0]
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	d100      	bne.n	8000e54 <__aeabi_ddiv+0x2c4>
 8000e52:	e07e      	b.n	8000f52 <__aeabi_ddiv+0x3c2>
 8000e54:	465b      	mov	r3, fp
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x2cc>
 8000e5a:	e100      	b.n	800105e <__aeabi_ddiv+0x4ce>
 8000e5c:	4658      	mov	r0, fp
 8000e5e:	f001 f9cb 	bl	80021f8 <__clzsi2>
 8000e62:	0002      	movs	r2, r0
 8000e64:	0003      	movs	r3, r0
 8000e66:	3a0b      	subs	r2, #11
 8000e68:	271d      	movs	r7, #29
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	1aba      	subs	r2, r7, r2
 8000e6e:	0019      	movs	r1, r3
 8000e70:	4658      	mov	r0, fp
 8000e72:	40d6      	lsrs	r6, r2
 8000e74:	3908      	subs	r1, #8
 8000e76:	4088      	lsls	r0, r1
 8000e78:	0032      	movs	r2, r6
 8000e7a:	4302      	orrs	r2, r0
 8000e7c:	4693      	mov	fp, r2
 8000e7e:	9a00      	ldr	r2, [sp, #0]
 8000e80:	408a      	lsls	r2, r1
 8000e82:	4928      	ldr	r1, [pc, #160]	@ (8000f24 <__aeabi_ddiv+0x394>)
 8000e84:	4453      	add	r3, sl
 8000e86:	468a      	mov	sl, r1
 8000e88:	449a      	add	sl, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e6c8      	b.n	8000c20 <__aeabi_ddiv+0x90>
 8000e8e:	465b      	mov	r3, fp
 8000e90:	4303      	orrs	r3, r0
 8000e92:	4699      	mov	r9, r3
 8000e94:	d056      	beq.n	8000f44 <__aeabi_ddiv+0x3b4>
 8000e96:	465b      	mov	r3, fp
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x30e>
 8000e9c:	e0cd      	b.n	800103a <__aeabi_ddiv+0x4aa>
 8000e9e:	4658      	mov	r0, fp
 8000ea0:	f001 f9aa 	bl	80021f8 <__clzsi2>
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	0002      	movs	r2, r0
 8000eac:	4484      	add	ip, r0
 8000eae:	4666      	mov	r6, ip
 8000eb0:	231d      	movs	r3, #29
 8000eb2:	1b9b      	subs	r3, r3, r6
 8000eb4:	0026      	movs	r6, r4
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	4658      	mov	r0, fp
 8000eba:	40de      	lsrs	r6, r3
 8000ebc:	3908      	subs	r1, #8
 8000ebe:	4088      	lsls	r0, r1
 8000ec0:	0033      	movs	r3, r6
 8000ec2:	4303      	orrs	r3, r0
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	4698      	mov	r8, r3
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <__aeabi_ddiv+0x398>)
 8000ece:	2400      	movs	r4, #0
 8000ed0:	1a9b      	subs	r3, r3, r2
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9303      	str	r3, [sp, #12]
 8000ed8:	e682      	b.n	8000be0 <__aeabi_ddiv+0x50>
 8000eda:	465a      	mov	r2, fp
 8000edc:	4302      	orrs	r2, r0
 8000ede:	4691      	mov	r9, r2
 8000ee0:	d12a      	bne.n	8000f38 <__aeabi_ddiv+0x3a8>
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	4690      	mov	r8, r2
 8000eea:	2408      	movs	r4, #8
 8000eec:	9303      	str	r3, [sp, #12]
 8000eee:	e677      	b.n	8000be0 <__aeabi_ddiv+0x50>
 8000ef0:	465a      	mov	r2, fp
 8000ef2:	9b00      	ldr	r3, [sp, #0]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <__aeabi_ddiv+0x39c>)
 8000ef8:	469c      	mov	ip, r3
 8000efa:	44e2      	add	sl, ip
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d117      	bne.n	8000f30 <__aeabi_ddiv+0x3a0>
 8000f00:	2302      	movs	r3, #2
 8000f02:	431c      	orrs	r4, r3
 8000f04:	2300      	movs	r3, #0
 8000f06:	469b      	mov	fp, r3
 8000f08:	3302      	adds	r3, #2
 8000f0a:	e689      	b.n	8000c20 <__aeabi_ddiv+0x90>
 8000f0c:	000007ff 	.word	0x000007ff
 8000f10:	fffffc01 	.word	0xfffffc01
 8000f14:	08008110 	.word	0x08008110
 8000f18:	000003ff 	.word	0x000003ff
 8000f1c:	feffffff 	.word	0xfeffffff
 8000f20:	000007fe 	.word	0x000007fe
 8000f24:	000003f3 	.word	0x000003f3
 8000f28:	fffffc0d 	.word	0xfffffc0d
 8000f2c:	fffff801 	.word	0xfffff801
 8000f30:	2303      	movs	r3, #3
 8000f32:	0032      	movs	r2, r6
 8000f34:	431c      	orrs	r4, r3
 8000f36:	e673      	b.n	8000c20 <__aeabi_ddiv+0x90>
 8000f38:	469a      	mov	sl, r3
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	46d9      	mov	r9, fp
 8000f3e:	240c      	movs	r4, #12
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	e64d      	b.n	8000be0 <__aeabi_ddiv+0x50>
 8000f44:	2300      	movs	r3, #0
 8000f46:	4698      	mov	r8, r3
 8000f48:	469a      	mov	sl, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	2404      	movs	r4, #4
 8000f4e:	9303      	str	r3, [sp, #12]
 8000f50:	e646      	b.n	8000be0 <__aeabi_ddiv+0x50>
 8000f52:	2301      	movs	r3, #1
 8000f54:	431c      	orrs	r4, r3
 8000f56:	2300      	movs	r3, #0
 8000f58:	469b      	mov	fp, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	e660      	b.n	8000c20 <__aeabi_ddiv+0x90>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2480      	movs	r4, #128	@ 0x80
 8000f62:	4698      	mov	r8, r3
 8000f64:	2600      	movs	r6, #0
 8000f66:	4b92      	ldr	r3, [pc, #584]	@ (80011b0 <__aeabi_ddiv+0x620>)
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	e671      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4252      	negs	r2, r2
 8000f70:	2101      	movs	r1, #1
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	2938      	cmp	r1, #56	@ 0x38
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_ddiv+0x3ea>
 8000f78:	e666      	b.n	8000c48 <__aeabi_ddiv+0xb8>
 8000f7a:	291f      	cmp	r1, #31
 8000f7c:	dc00      	bgt.n	8000f80 <__aeabi_ddiv+0x3f0>
 8000f7e:	e0ab      	b.n	80010d8 <__aeabi_ddiv+0x548>
 8000f80:	201f      	movs	r0, #31
 8000f82:	4240      	negs	r0, r0
 8000f84:	1ac3      	subs	r3, r0, r3
 8000f86:	4658      	mov	r0, fp
 8000f88:	40d8      	lsrs	r0, r3
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	2920      	cmp	r1, #32
 8000f8e:	d004      	beq.n	8000f9a <__aeabi_ddiv+0x40a>
 8000f90:	4658      	mov	r0, fp
 8000f92:	4988      	ldr	r1, [pc, #544]	@ (80011b4 <__aeabi_ddiv+0x624>)
 8000f94:	4451      	add	r1, sl
 8000f96:	4088      	lsls	r0, r1
 8000f98:	4302      	orrs	r2, r0
 8000f9a:	1e51      	subs	r1, r2, #1
 8000f9c:	418a      	sbcs	r2, r1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	4011      	ands	r1, r2
 8000fa8:	4213      	tst	r3, r2
 8000faa:	d00c      	beq.n	8000fc6 <__aeabi_ddiv+0x436>
 8000fac:	230f      	movs	r3, #15
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x426>
 8000fb4:	e0f9      	b.n	80011aa <__aeabi_ddiv+0x61a>
 8000fb6:	1d11      	adds	r1, r2, #4
 8000fb8:	4291      	cmp	r1, r2
 8000fba:	419b      	sbcs	r3, r3
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	0759      	lsls	r1, r3, #29
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	0b1c      	lsrs	r4, r3, #12
 8000fc6:	08d2      	lsrs	r2, r2, #3
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	4690      	mov	r8, r2
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e63f      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8000fd0:	2480      	movs	r4, #128	@ 0x80
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	0324      	lsls	r4, r4, #12
 8000fd6:	4223      	tst	r3, r4
 8000fd8:	d009      	beq.n	8000fee <__aeabi_ddiv+0x45e>
 8000fda:	465b      	mov	r3, fp
 8000fdc:	4223      	tst	r3, r4
 8000fde:	d106      	bne.n	8000fee <__aeabi_ddiv+0x45e>
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	0324      	lsls	r4, r4, #12
 8000fe4:	002e      	movs	r6, r5
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	4b71      	ldr	r3, [pc, #452]	@ (80011b0 <__aeabi_ddiv+0x620>)
 8000fea:	0b24      	lsrs	r4, r4, #12
 8000fec:	e630      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8000fee:	2480      	movs	r4, #128	@ 0x80
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	0324      	lsls	r4, r4, #12
 8000ff4:	431c      	orrs	r4, r3
 8000ff6:	0324      	lsls	r4, r4, #12
 8000ff8:	9e02      	ldr	r6, [sp, #8]
 8000ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80011b0 <__aeabi_ddiv+0x620>)
 8000ffc:	0b24      	lsrs	r4, r4, #12
 8000ffe:	e627      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x476>
 8001004:	e700      	b.n	8000e08 <__aeabi_ddiv+0x278>
 8001006:	9800      	ldr	r0, [sp, #0]
 8001008:	1e51      	subs	r1, r2, #1
 800100a:	4684      	mov	ip, r0
 800100c:	4464      	add	r4, ip
 800100e:	4284      	cmp	r4, r0
 8001010:	d200      	bcs.n	8001014 <__aeabi_ddiv+0x484>
 8001012:	e084      	b.n	800111e <__aeabi_ddiv+0x58e>
 8001014:	42bc      	cmp	r4, r7
 8001016:	d200      	bcs.n	800101a <__aeabi_ddiv+0x48a>
 8001018:	e0ae      	b.n	8001178 <__aeabi_ddiv+0x5e8>
 800101a:	d100      	bne.n	800101e <__aeabi_ddiv+0x48e>
 800101c:	e0c1      	b.n	80011a2 <__aeabi_ddiv+0x612>
 800101e:	000a      	movs	r2, r1
 8001020:	e6f0      	b.n	8000e04 <__aeabi_ddiv+0x274>
 8001022:	4542      	cmp	r2, r8
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x498>
 8001026:	e62c      	b.n	8000c82 <__aeabi_ddiv+0xf2>
 8001028:	464b      	mov	r3, r9
 800102a:	07dc      	lsls	r4, r3, #31
 800102c:	0858      	lsrs	r0, r3, #1
 800102e:	4643      	mov	r3, r8
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	431c      	orrs	r4, r3
 8001034:	4643      	mov	r3, r8
 8001036:	07df      	lsls	r7, r3, #31
 8001038:	e62a      	b.n	8000c90 <__aeabi_ddiv+0x100>
 800103a:	f001 f8dd 	bl	80021f8 <__clzsi2>
 800103e:	2315      	movs	r3, #21
 8001040:	469c      	mov	ip, r3
 8001042:	4484      	add	ip, r0
 8001044:	0002      	movs	r2, r0
 8001046:	4663      	mov	r3, ip
 8001048:	3220      	adds	r2, #32
 800104a:	2b1c      	cmp	r3, #28
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x4c0>
 800104e:	e72e      	b.n	8000eae <__aeabi_ddiv+0x31e>
 8001050:	0023      	movs	r3, r4
 8001052:	3808      	subs	r0, #8
 8001054:	4083      	lsls	r3, r0
 8001056:	4699      	mov	r9, r3
 8001058:	2300      	movs	r3, #0
 800105a:	4698      	mov	r8, r3
 800105c:	e736      	b.n	8000ecc <__aeabi_ddiv+0x33c>
 800105e:	f001 f8cb 	bl	80021f8 <__clzsi2>
 8001062:	0002      	movs	r2, r0
 8001064:	0003      	movs	r3, r0
 8001066:	3215      	adds	r2, #21
 8001068:	3320      	adds	r3, #32
 800106a:	2a1c      	cmp	r2, #28
 800106c:	dc00      	bgt.n	8001070 <__aeabi_ddiv+0x4e0>
 800106e:	e6fb      	b.n	8000e68 <__aeabi_ddiv+0x2d8>
 8001070:	9900      	ldr	r1, [sp, #0]
 8001072:	3808      	subs	r0, #8
 8001074:	4081      	lsls	r1, r0
 8001076:	2200      	movs	r2, #0
 8001078:	468b      	mov	fp, r1
 800107a:	e702      	b.n	8000e82 <__aeabi_ddiv+0x2f2>
 800107c:	9900      	ldr	r1, [sp, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	468c      	mov	ip, r1
 8001082:	4464      	add	r4, ip
 8001084:	42a1      	cmp	r1, r4
 8001086:	d900      	bls.n	800108a <__aeabi_ddiv+0x4fa>
 8001088:	e69a      	b.n	8000dc0 <__aeabi_ddiv+0x230>
 800108a:	42a2      	cmp	r2, r4
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x500>
 800108e:	e697      	b.n	8000dc0 <__aeabi_ddiv+0x230>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	4464      	add	r4, ip
 8001094:	e694      	b.n	8000dc0 <__aeabi_ddiv+0x230>
 8001096:	46ac      	mov	ip, r5
 8001098:	4461      	add	r1, ip
 800109a:	3f01      	subs	r7, #1
 800109c:	428d      	cmp	r5, r1
 800109e:	d900      	bls.n	80010a2 <__aeabi_ddiv+0x512>
 80010a0:	e680      	b.n	8000da4 <__aeabi_ddiv+0x214>
 80010a2:	428a      	cmp	r2, r1
 80010a4:	d800      	bhi.n	80010a8 <__aeabi_ddiv+0x518>
 80010a6:	e67d      	b.n	8000da4 <__aeabi_ddiv+0x214>
 80010a8:	1e87      	subs	r7, r0, #2
 80010aa:	4461      	add	r1, ip
 80010ac:	e67a      	b.n	8000da4 <__aeabi_ddiv+0x214>
 80010ae:	4285      	cmp	r5, r0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_ddiv+0x524>
 80010b2:	e65f      	b.n	8000d74 <__aeabi_ddiv+0x1e4>
 80010b4:	45b9      	cmp	r9, r7
 80010b6:	d900      	bls.n	80010ba <__aeabi_ddiv+0x52a>
 80010b8:	e65c      	b.n	8000d74 <__aeabi_ddiv+0x1e4>
 80010ba:	e656      	b.n	8000d6a <__aeabi_ddiv+0x1da>
 80010bc:	42a2      	cmp	r2, r4
 80010be:	d800      	bhi.n	80010c2 <__aeabi_ddiv+0x532>
 80010c0:	e61a      	b.n	8000cf8 <__aeabi_ddiv+0x168>
 80010c2:	1e83      	subs	r3, r0, #2
 80010c4:	4464      	add	r4, ip
 80010c6:	e617      	b.n	8000cf8 <__aeabi_ddiv+0x168>
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d800      	bhi.n	80010ce <__aeabi_ddiv+0x53e>
 80010cc:	e600      	b.n	8000cd0 <__aeabi_ddiv+0x140>
 80010ce:	46ac      	mov	ip, r5
 80010d0:	1e83      	subs	r3, r0, #2
 80010d2:	4698      	mov	r8, r3
 80010d4:	4461      	add	r1, ip
 80010d6:	e5fb      	b.n	8000cd0 <__aeabi_ddiv+0x140>
 80010d8:	4837      	ldr	r0, [pc, #220]	@ (80011b8 <__aeabi_ddiv+0x628>)
 80010da:	0014      	movs	r4, r2
 80010dc:	4450      	add	r0, sl
 80010de:	4082      	lsls	r2, r0
 80010e0:	465b      	mov	r3, fp
 80010e2:	0017      	movs	r7, r2
 80010e4:	4083      	lsls	r3, r0
 80010e6:	40cc      	lsrs	r4, r1
 80010e8:	1e7a      	subs	r2, r7, #1
 80010ea:	4197      	sbcs	r7, r2
 80010ec:	4323      	orrs	r3, r4
 80010ee:	433b      	orrs	r3, r7
 80010f0:	001a      	movs	r2, r3
 80010f2:	465b      	mov	r3, fp
 80010f4:	40cb      	lsrs	r3, r1
 80010f6:	0751      	lsls	r1, r2, #29
 80010f8:	d009      	beq.n	800110e <__aeabi_ddiv+0x57e>
 80010fa:	210f      	movs	r1, #15
 80010fc:	4011      	ands	r1, r2
 80010fe:	2904      	cmp	r1, #4
 8001100:	d005      	beq.n	800110e <__aeabi_ddiv+0x57e>
 8001102:	1d11      	adds	r1, r2, #4
 8001104:	4291      	cmp	r1, r2
 8001106:	4192      	sbcs	r2, r2
 8001108:	4252      	negs	r2, r2
 800110a:	189b      	adds	r3, r3, r2
 800110c:	000a      	movs	r2, r1
 800110e:	0219      	lsls	r1, r3, #8
 8001110:	d400      	bmi.n	8001114 <__aeabi_ddiv+0x584>
 8001112:	e755      	b.n	8000fc0 <__aeabi_ddiv+0x430>
 8001114:	2200      	movs	r2, #0
 8001116:	2301      	movs	r3, #1
 8001118:	2400      	movs	r4, #0
 800111a:	4690      	mov	r8, r2
 800111c:	e598      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 800111e:	000a      	movs	r2, r1
 8001120:	42bc      	cmp	r4, r7
 8001122:	d000      	beq.n	8001126 <__aeabi_ddiv+0x596>
 8001124:	e66e      	b.n	8000e04 <__aeabi_ddiv+0x274>
 8001126:	454b      	cmp	r3, r9
 8001128:	d000      	beq.n	800112c <__aeabi_ddiv+0x59c>
 800112a:	e66b      	b.n	8000e04 <__aeabi_ddiv+0x274>
 800112c:	e66c      	b.n	8000e08 <__aeabi_ddiv+0x278>
 800112e:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <__aeabi_ddiv+0x62c>)
 8001130:	4a23      	ldr	r2, [pc, #140]	@ (80011c0 <__aeabi_ddiv+0x630>)
 8001132:	4453      	add	r3, sl
 8001134:	4592      	cmp	sl, r2
 8001136:	da00      	bge.n	800113a <__aeabi_ddiv+0x5aa>
 8001138:	e718      	b.n	8000f6c <__aeabi_ddiv+0x3dc>
 800113a:	2101      	movs	r1, #1
 800113c:	4249      	negs	r1, r1
 800113e:	1d0a      	adds	r2, r1, #4
 8001140:	428a      	cmp	r2, r1
 8001142:	4189      	sbcs	r1, r1
 8001144:	4249      	negs	r1, r1
 8001146:	448b      	add	fp, r1
 8001148:	e666      	b.n	8000e18 <__aeabi_ddiv+0x288>
 800114a:	210f      	movs	r1, #15
 800114c:	4011      	ands	r1, r2
 800114e:	2904      	cmp	r1, #4
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x5c4>
 8001152:	e661      	b.n	8000e18 <__aeabi_ddiv+0x288>
 8001154:	0011      	movs	r1, r2
 8001156:	e7f2      	b.n	800113e <__aeabi_ddiv+0x5ae>
 8001158:	42bc      	cmp	r4, r7
 800115a:	d800      	bhi.n	800115e <__aeabi_ddiv+0x5ce>
 800115c:	e60a      	b.n	8000d74 <__aeabi_ddiv+0x1e4>
 800115e:	2302      	movs	r3, #2
 8001160:	425b      	negs	r3, r3
 8001162:	469c      	mov	ip, r3
 8001164:	9900      	ldr	r1, [sp, #0]
 8001166:	444f      	add	r7, r9
 8001168:	454f      	cmp	r7, r9
 800116a:	419b      	sbcs	r3, r3
 800116c:	44e3      	add	fp, ip
 800116e:	468c      	mov	ip, r1
 8001170:	425b      	negs	r3, r3
 8001172:	4463      	add	r3, ip
 8001174:	18c0      	adds	r0, r0, r3
 8001176:	e5ff      	b.n	8000d78 <__aeabi_ddiv+0x1e8>
 8001178:	4649      	mov	r1, r9
 800117a:	9d00      	ldr	r5, [sp, #0]
 800117c:	0048      	lsls	r0, r1, #1
 800117e:	4548      	cmp	r0, r9
 8001180:	4189      	sbcs	r1, r1
 8001182:	46ac      	mov	ip, r5
 8001184:	4249      	negs	r1, r1
 8001186:	4461      	add	r1, ip
 8001188:	4681      	mov	r9, r0
 800118a:	3a02      	subs	r2, #2
 800118c:	1864      	adds	r4, r4, r1
 800118e:	e7c7      	b.n	8001120 <__aeabi_ddiv+0x590>
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	465b      	mov	r3, fp
 8001194:	0324      	lsls	r4, r4, #12
 8001196:	431c      	orrs	r4, r3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	4690      	mov	r8, r2
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__aeabi_ddiv+0x620>)
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	e556      	b.n	8000c50 <__aeabi_ddiv+0xc0>
 80011a2:	4599      	cmp	r9, r3
 80011a4:	d3e8      	bcc.n	8001178 <__aeabi_ddiv+0x5e8>
 80011a6:	000a      	movs	r2, r1
 80011a8:	e7bd      	b.n	8001126 <__aeabi_ddiv+0x596>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e708      	b.n	8000fc0 <__aeabi_ddiv+0x430>
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	000007ff 	.word	0x000007ff
 80011b4:	0000043e 	.word	0x0000043e
 80011b8:	0000041e 	.word	0x0000041e
 80011bc:	000003ff 	.word	0x000003ff
 80011c0:	fffffc02 	.word	0xfffffc02

080011c4 <__eqdf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	4657      	mov	r7, sl
 80011c8:	46de      	mov	lr, fp
 80011ca:	464e      	mov	r6, r9
 80011cc:	4645      	mov	r5, r8
 80011ce:	b5e0      	push	{r5, r6, r7, lr}
 80011d0:	000d      	movs	r5, r1
 80011d2:	0004      	movs	r4, r0
 80011d4:	0fe8      	lsrs	r0, r5, #31
 80011d6:	4683      	mov	fp, r0
 80011d8:	0309      	lsls	r1, r1, #12
 80011da:	0fd8      	lsrs	r0, r3, #31
 80011dc:	0b09      	lsrs	r1, r1, #12
 80011de:	4682      	mov	sl, r0
 80011e0:	4819      	ldr	r0, [pc, #100]	@ (8001248 <__eqdf2+0x84>)
 80011e2:	468c      	mov	ip, r1
 80011e4:	031f      	lsls	r7, r3, #12
 80011e6:	0069      	lsls	r1, r5, #1
 80011e8:	005e      	lsls	r6, r3, #1
 80011ea:	0d49      	lsrs	r1, r1, #21
 80011ec:	0b3f      	lsrs	r7, r7, #12
 80011ee:	0d76      	lsrs	r6, r6, #21
 80011f0:	4281      	cmp	r1, r0
 80011f2:	d018      	beq.n	8001226 <__eqdf2+0x62>
 80011f4:	4286      	cmp	r6, r0
 80011f6:	d00f      	beq.n	8001218 <__eqdf2+0x54>
 80011f8:	2001      	movs	r0, #1
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	d10d      	bne.n	800121a <__eqdf2+0x56>
 80011fe:	45bc      	cmp	ip, r7
 8001200:	d10b      	bne.n	800121a <__eqdf2+0x56>
 8001202:	4294      	cmp	r4, r2
 8001204:	d109      	bne.n	800121a <__eqdf2+0x56>
 8001206:	45d3      	cmp	fp, sl
 8001208:	d01c      	beq.n	8001244 <__eqdf2+0x80>
 800120a:	2900      	cmp	r1, #0
 800120c:	d105      	bne.n	800121a <__eqdf2+0x56>
 800120e:	4660      	mov	r0, ip
 8001210:	4320      	orrs	r0, r4
 8001212:	1e43      	subs	r3, r0, #1
 8001214:	4198      	sbcs	r0, r3
 8001216:	e000      	b.n	800121a <__eqdf2+0x56>
 8001218:	2001      	movs	r0, #1
 800121a:	bcf0      	pop	{r4, r5, r6, r7}
 800121c:	46bb      	mov	fp, r7
 800121e:	46b2      	mov	sl, r6
 8001220:	46a9      	mov	r9, r5
 8001222:	46a0      	mov	r8, r4
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001226:	2001      	movs	r0, #1
 8001228:	428e      	cmp	r6, r1
 800122a:	d1f6      	bne.n	800121a <__eqdf2+0x56>
 800122c:	4661      	mov	r1, ip
 800122e:	4339      	orrs	r1, r7
 8001230:	000f      	movs	r7, r1
 8001232:	4317      	orrs	r7, r2
 8001234:	4327      	orrs	r7, r4
 8001236:	d1f0      	bne.n	800121a <__eqdf2+0x56>
 8001238:	465b      	mov	r3, fp
 800123a:	4652      	mov	r2, sl
 800123c:	1a98      	subs	r0, r3, r2
 800123e:	1e43      	subs	r3, r0, #1
 8001240:	4198      	sbcs	r0, r3
 8001242:	e7ea      	b.n	800121a <__eqdf2+0x56>
 8001244:	2000      	movs	r0, #0
 8001246:	e7e8      	b.n	800121a <__eqdf2+0x56>
 8001248:	000007ff 	.word	0x000007ff

0800124c <__gedf2>:
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	4657      	mov	r7, sl
 8001250:	464e      	mov	r6, r9
 8001252:	4645      	mov	r5, r8
 8001254:	46de      	mov	lr, fp
 8001256:	b5e0      	push	{r5, r6, r7, lr}
 8001258:	000d      	movs	r5, r1
 800125a:	030f      	lsls	r7, r1, #12
 800125c:	0b39      	lsrs	r1, r7, #12
 800125e:	b083      	sub	sp, #12
 8001260:	0004      	movs	r4, r0
 8001262:	4680      	mov	r8, r0
 8001264:	9101      	str	r1, [sp, #4]
 8001266:	0058      	lsls	r0, r3, #1
 8001268:	0fe9      	lsrs	r1, r5, #31
 800126a:	4f31      	ldr	r7, [pc, #196]	@ (8001330 <__gedf2+0xe4>)
 800126c:	0d40      	lsrs	r0, r0, #21
 800126e:	468c      	mov	ip, r1
 8001270:	006e      	lsls	r6, r5, #1
 8001272:	0319      	lsls	r1, r3, #12
 8001274:	4682      	mov	sl, r0
 8001276:	4691      	mov	r9, r2
 8001278:	0d76      	lsrs	r6, r6, #21
 800127a:	0b09      	lsrs	r1, r1, #12
 800127c:	0fd8      	lsrs	r0, r3, #31
 800127e:	42be      	cmp	r6, r7
 8001280:	d01f      	beq.n	80012c2 <__gedf2+0x76>
 8001282:	45ba      	cmp	sl, r7
 8001284:	d00f      	beq.n	80012a6 <__gedf2+0x5a>
 8001286:	2e00      	cmp	r6, #0
 8001288:	d12f      	bne.n	80012ea <__gedf2+0x9e>
 800128a:	4655      	mov	r5, sl
 800128c:	9e01      	ldr	r6, [sp, #4]
 800128e:	4334      	orrs	r4, r6
 8001290:	2d00      	cmp	r5, #0
 8001292:	d127      	bne.n	80012e4 <__gedf2+0x98>
 8001294:	430a      	orrs	r2, r1
 8001296:	d03a      	beq.n	800130e <__gedf2+0xc2>
 8001298:	2c00      	cmp	r4, #0
 800129a:	d145      	bne.n	8001328 <__gedf2+0xdc>
 800129c:	2800      	cmp	r0, #0
 800129e:	d11a      	bne.n	80012d6 <__gedf2+0x8a>
 80012a0:	2001      	movs	r0, #1
 80012a2:	4240      	negs	r0, r0
 80012a4:	e017      	b.n	80012d6 <__gedf2+0x8a>
 80012a6:	4311      	orrs	r1, r2
 80012a8:	d13b      	bne.n	8001322 <__gedf2+0xd6>
 80012aa:	2e00      	cmp	r6, #0
 80012ac:	d102      	bne.n	80012b4 <__gedf2+0x68>
 80012ae:	9f01      	ldr	r7, [sp, #4]
 80012b0:	4327      	orrs	r7, r4
 80012b2:	d0f3      	beq.n	800129c <__gedf2+0x50>
 80012b4:	4584      	cmp	ip, r0
 80012b6:	d109      	bne.n	80012cc <__gedf2+0x80>
 80012b8:	4663      	mov	r3, ip
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <__gedf2+0x54>
 80012be:	4660      	mov	r0, ip
 80012c0:	e009      	b.n	80012d6 <__gedf2+0x8a>
 80012c2:	9f01      	ldr	r7, [sp, #4]
 80012c4:	4327      	orrs	r7, r4
 80012c6:	d12c      	bne.n	8001322 <__gedf2+0xd6>
 80012c8:	45b2      	cmp	sl, r6
 80012ca:	d024      	beq.n	8001316 <__gedf2+0xca>
 80012cc:	4663      	mov	r3, ip
 80012ce:	2002      	movs	r0, #2
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4018      	ands	r0, r3
 80012d4:	3801      	subs	r0, #1
 80012d6:	b003      	add	sp, #12
 80012d8:	bcf0      	pop	{r4, r5, r6, r7}
 80012da:	46bb      	mov	fp, r7
 80012dc:	46b2      	mov	sl, r6
 80012de:	46a9      	mov	r9, r5
 80012e0:	46a0      	mov	r8, r4
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e4:	2c00      	cmp	r4, #0
 80012e6:	d0d9      	beq.n	800129c <__gedf2+0x50>
 80012e8:	e7e4      	b.n	80012b4 <__gedf2+0x68>
 80012ea:	4654      	mov	r4, sl
 80012ec:	2c00      	cmp	r4, #0
 80012ee:	d0ed      	beq.n	80012cc <__gedf2+0x80>
 80012f0:	4584      	cmp	ip, r0
 80012f2:	d1eb      	bne.n	80012cc <__gedf2+0x80>
 80012f4:	4556      	cmp	r6, sl
 80012f6:	dce9      	bgt.n	80012cc <__gedf2+0x80>
 80012f8:	dbde      	blt.n	80012b8 <__gedf2+0x6c>
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d8e5      	bhi.n	80012cc <__gedf2+0x80>
 8001300:	d1da      	bne.n	80012b8 <__gedf2+0x6c>
 8001302:	45c8      	cmp	r8, r9
 8001304:	d8e2      	bhi.n	80012cc <__gedf2+0x80>
 8001306:	2000      	movs	r0, #0
 8001308:	45c8      	cmp	r8, r9
 800130a:	d2e4      	bcs.n	80012d6 <__gedf2+0x8a>
 800130c:	e7d4      	b.n	80012b8 <__gedf2+0x6c>
 800130e:	2000      	movs	r0, #0
 8001310:	2c00      	cmp	r4, #0
 8001312:	d0e0      	beq.n	80012d6 <__gedf2+0x8a>
 8001314:	e7da      	b.n	80012cc <__gedf2+0x80>
 8001316:	4311      	orrs	r1, r2
 8001318:	d103      	bne.n	8001322 <__gedf2+0xd6>
 800131a:	4584      	cmp	ip, r0
 800131c:	d1d6      	bne.n	80012cc <__gedf2+0x80>
 800131e:	2000      	movs	r0, #0
 8001320:	e7d9      	b.n	80012d6 <__gedf2+0x8a>
 8001322:	2002      	movs	r0, #2
 8001324:	4240      	negs	r0, r0
 8001326:	e7d6      	b.n	80012d6 <__gedf2+0x8a>
 8001328:	4584      	cmp	ip, r0
 800132a:	d0e6      	beq.n	80012fa <__gedf2+0xae>
 800132c:	e7ce      	b.n	80012cc <__gedf2+0x80>
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	000007ff 	.word	0x000007ff

08001334 <__ledf2>:
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	4657      	mov	r7, sl
 8001338:	464e      	mov	r6, r9
 800133a:	4645      	mov	r5, r8
 800133c:	46de      	mov	lr, fp
 800133e:	b5e0      	push	{r5, r6, r7, lr}
 8001340:	000d      	movs	r5, r1
 8001342:	030f      	lsls	r7, r1, #12
 8001344:	0004      	movs	r4, r0
 8001346:	4680      	mov	r8, r0
 8001348:	0fe8      	lsrs	r0, r5, #31
 800134a:	0b39      	lsrs	r1, r7, #12
 800134c:	4684      	mov	ip, r0
 800134e:	b083      	sub	sp, #12
 8001350:	0058      	lsls	r0, r3, #1
 8001352:	4f30      	ldr	r7, [pc, #192]	@ (8001414 <__ledf2+0xe0>)
 8001354:	0d40      	lsrs	r0, r0, #21
 8001356:	9101      	str	r1, [sp, #4]
 8001358:	031e      	lsls	r6, r3, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	4682      	mov	sl, r0
 800135e:	4691      	mov	r9, r2
 8001360:	0d49      	lsrs	r1, r1, #21
 8001362:	0b36      	lsrs	r6, r6, #12
 8001364:	0fd8      	lsrs	r0, r3, #31
 8001366:	42b9      	cmp	r1, r7
 8001368:	d020      	beq.n	80013ac <__ledf2+0x78>
 800136a:	45ba      	cmp	sl, r7
 800136c:	d00f      	beq.n	800138e <__ledf2+0x5a>
 800136e:	2900      	cmp	r1, #0
 8001370:	d12b      	bne.n	80013ca <__ledf2+0x96>
 8001372:	9901      	ldr	r1, [sp, #4]
 8001374:	430c      	orrs	r4, r1
 8001376:	4651      	mov	r1, sl
 8001378:	2900      	cmp	r1, #0
 800137a:	d137      	bne.n	80013ec <__ledf2+0xb8>
 800137c:	4332      	orrs	r2, r6
 800137e:	d038      	beq.n	80013f2 <__ledf2+0xbe>
 8001380:	2c00      	cmp	r4, #0
 8001382:	d144      	bne.n	800140e <__ledf2+0xda>
 8001384:	2800      	cmp	r0, #0
 8001386:	d119      	bne.n	80013bc <__ledf2+0x88>
 8001388:	2001      	movs	r0, #1
 800138a:	4240      	negs	r0, r0
 800138c:	e016      	b.n	80013bc <__ledf2+0x88>
 800138e:	4316      	orrs	r6, r2
 8001390:	d113      	bne.n	80013ba <__ledf2+0x86>
 8001392:	2900      	cmp	r1, #0
 8001394:	d102      	bne.n	800139c <__ledf2+0x68>
 8001396:	9f01      	ldr	r7, [sp, #4]
 8001398:	4327      	orrs	r7, r4
 800139a:	d0f3      	beq.n	8001384 <__ledf2+0x50>
 800139c:	4584      	cmp	ip, r0
 800139e:	d020      	beq.n	80013e2 <__ledf2+0xae>
 80013a0:	4663      	mov	r3, ip
 80013a2:	2002      	movs	r0, #2
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4018      	ands	r0, r3
 80013a8:	3801      	subs	r0, #1
 80013aa:	e007      	b.n	80013bc <__ledf2+0x88>
 80013ac:	9f01      	ldr	r7, [sp, #4]
 80013ae:	4327      	orrs	r7, r4
 80013b0:	d103      	bne.n	80013ba <__ledf2+0x86>
 80013b2:	458a      	cmp	sl, r1
 80013b4:	d1f4      	bne.n	80013a0 <__ledf2+0x6c>
 80013b6:	4316      	orrs	r6, r2
 80013b8:	d01f      	beq.n	80013fa <__ledf2+0xc6>
 80013ba:	2002      	movs	r0, #2
 80013bc:	b003      	add	sp, #12
 80013be:	bcf0      	pop	{r4, r5, r6, r7}
 80013c0:	46bb      	mov	fp, r7
 80013c2:	46b2      	mov	sl, r6
 80013c4:	46a9      	mov	r9, r5
 80013c6:	46a0      	mov	r8, r4
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	4654      	mov	r4, sl
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d0e7      	beq.n	80013a0 <__ledf2+0x6c>
 80013d0:	4584      	cmp	ip, r0
 80013d2:	d1e5      	bne.n	80013a0 <__ledf2+0x6c>
 80013d4:	4551      	cmp	r1, sl
 80013d6:	dce3      	bgt.n	80013a0 <__ledf2+0x6c>
 80013d8:	db03      	blt.n	80013e2 <__ledf2+0xae>
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	42b3      	cmp	r3, r6
 80013de:	d8df      	bhi.n	80013a0 <__ledf2+0x6c>
 80013e0:	d00f      	beq.n	8001402 <__ledf2+0xce>
 80013e2:	4663      	mov	r3, ip
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0cf      	beq.n	8001388 <__ledf2+0x54>
 80013e8:	4660      	mov	r0, ip
 80013ea:	e7e7      	b.n	80013bc <__ledf2+0x88>
 80013ec:	2c00      	cmp	r4, #0
 80013ee:	d0c9      	beq.n	8001384 <__ledf2+0x50>
 80013f0:	e7d4      	b.n	800139c <__ledf2+0x68>
 80013f2:	2000      	movs	r0, #0
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d0e1      	beq.n	80013bc <__ledf2+0x88>
 80013f8:	e7d2      	b.n	80013a0 <__ledf2+0x6c>
 80013fa:	4584      	cmp	ip, r0
 80013fc:	d1d0      	bne.n	80013a0 <__ledf2+0x6c>
 80013fe:	2000      	movs	r0, #0
 8001400:	e7dc      	b.n	80013bc <__ledf2+0x88>
 8001402:	45c8      	cmp	r8, r9
 8001404:	d8cc      	bhi.n	80013a0 <__ledf2+0x6c>
 8001406:	2000      	movs	r0, #0
 8001408:	45c8      	cmp	r8, r9
 800140a:	d2d7      	bcs.n	80013bc <__ledf2+0x88>
 800140c:	e7e9      	b.n	80013e2 <__ledf2+0xae>
 800140e:	4584      	cmp	ip, r0
 8001410:	d0e3      	beq.n	80013da <__ledf2+0xa6>
 8001412:	e7c5      	b.n	80013a0 <__ledf2+0x6c>
 8001414:	000007ff 	.word	0x000007ff

08001418 <__aeabi_dmul>:
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	4657      	mov	r7, sl
 800141c:	46de      	mov	lr, fp
 800141e:	464e      	mov	r6, r9
 8001420:	4645      	mov	r5, r8
 8001422:	b5e0      	push	{r5, r6, r7, lr}
 8001424:	001f      	movs	r7, r3
 8001426:	030b      	lsls	r3, r1, #12
 8001428:	0b1b      	lsrs	r3, r3, #12
 800142a:	0016      	movs	r6, r2
 800142c:	469a      	mov	sl, r3
 800142e:	0fca      	lsrs	r2, r1, #31
 8001430:	004b      	lsls	r3, r1, #1
 8001432:	0004      	movs	r4, r0
 8001434:	4693      	mov	fp, r2
 8001436:	b087      	sub	sp, #28
 8001438:	0d5b      	lsrs	r3, r3, #21
 800143a:	d100      	bne.n	800143e <__aeabi_dmul+0x26>
 800143c:	e0d5      	b.n	80015ea <__aeabi_dmul+0x1d2>
 800143e:	4abb      	ldr	r2, [pc, #748]	@ (800172c <__aeabi_dmul+0x314>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d100      	bne.n	8001446 <__aeabi_dmul+0x2e>
 8001444:	e0f8      	b.n	8001638 <__aeabi_dmul+0x220>
 8001446:	4651      	mov	r1, sl
 8001448:	0f42      	lsrs	r2, r0, #29
 800144a:	00c9      	lsls	r1, r1, #3
 800144c:	430a      	orrs	r2, r1
 800144e:	2180      	movs	r1, #128	@ 0x80
 8001450:	0409      	lsls	r1, r1, #16
 8001452:	4311      	orrs	r1, r2
 8001454:	00c2      	lsls	r2, r0, #3
 8001456:	4691      	mov	r9, r2
 8001458:	4ab5      	ldr	r2, [pc, #724]	@ (8001730 <__aeabi_dmul+0x318>)
 800145a:	468a      	mov	sl, r1
 800145c:	189d      	adds	r5, r3, r2
 800145e:	2300      	movs	r3, #0
 8001460:	4698      	mov	r8, r3
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	033c      	lsls	r4, r7, #12
 8001466:	007b      	lsls	r3, r7, #1
 8001468:	0ffa      	lsrs	r2, r7, #31
 800146a:	0030      	movs	r0, r6
 800146c:	0b24      	lsrs	r4, r4, #12
 800146e:	0d5b      	lsrs	r3, r3, #21
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	d100      	bne.n	8001476 <__aeabi_dmul+0x5e>
 8001474:	e096      	b.n	80015a4 <__aeabi_dmul+0x18c>
 8001476:	4aad      	ldr	r2, [pc, #692]	@ (800172c <__aeabi_dmul+0x314>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d031      	beq.n	80014e0 <__aeabi_dmul+0xc8>
 800147c:	0f72      	lsrs	r2, r6, #29
 800147e:	00e4      	lsls	r4, r4, #3
 8001480:	4322      	orrs	r2, r4
 8001482:	2480      	movs	r4, #128	@ 0x80
 8001484:	0424      	lsls	r4, r4, #16
 8001486:	4314      	orrs	r4, r2
 8001488:	4aa9      	ldr	r2, [pc, #676]	@ (8001730 <__aeabi_dmul+0x318>)
 800148a:	00f0      	lsls	r0, r6, #3
 800148c:	4694      	mov	ip, r2
 800148e:	4463      	add	r3, ip
 8001490:	195b      	adds	r3, r3, r5
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	4642      	mov	r2, r8
 8001498:	2600      	movs	r6, #0
 800149a:	2a0a      	cmp	r2, #10
 800149c:	dc42      	bgt.n	8001524 <__aeabi_dmul+0x10c>
 800149e:	465a      	mov	r2, fp
 80014a0:	9900      	ldr	r1, [sp, #0]
 80014a2:	404a      	eors	r2, r1
 80014a4:	4693      	mov	fp, r2
 80014a6:	4642      	mov	r2, r8
 80014a8:	2a02      	cmp	r2, #2
 80014aa:	dc32      	bgt.n	8001512 <__aeabi_dmul+0xfa>
 80014ac:	3a01      	subs	r2, #1
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d900      	bls.n	80014b4 <__aeabi_dmul+0x9c>
 80014b2:	e149      	b.n	8001748 <__aeabi_dmul+0x330>
 80014b4:	2e02      	cmp	r6, #2
 80014b6:	d100      	bne.n	80014ba <__aeabi_dmul+0xa2>
 80014b8:	e0ca      	b.n	8001650 <__aeabi_dmul+0x238>
 80014ba:	2e01      	cmp	r6, #1
 80014bc:	d13d      	bne.n	800153a <__aeabi_dmul+0x122>
 80014be:	2300      	movs	r3, #0
 80014c0:	2400      	movs	r4, #0
 80014c2:	2200      	movs	r2, #0
 80014c4:	0010      	movs	r0, r2
 80014c6:	465a      	mov	r2, fp
 80014c8:	051b      	lsls	r3, r3, #20
 80014ca:	4323      	orrs	r3, r4
 80014cc:	07d2      	lsls	r2, r2, #31
 80014ce:	4313      	orrs	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	b007      	add	sp, #28
 80014d4:	bcf0      	pop	{r4, r5, r6, r7}
 80014d6:	46bb      	mov	fp, r7
 80014d8:	46b2      	mov	sl, r6
 80014da:	46a9      	mov	r9, r5
 80014dc:	46a0      	mov	r8, r4
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	4b92      	ldr	r3, [pc, #584]	@ (800172c <__aeabi_dmul+0x314>)
 80014e2:	4326      	orrs	r6, r4
 80014e4:	18eb      	adds	r3, r5, r3
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dmul+0xd4>
 80014ea:	e0bb      	b.n	8001664 <__aeabi_dmul+0x24c>
 80014ec:	2203      	movs	r2, #3
 80014ee:	4641      	mov	r1, r8
 80014f0:	4311      	orrs	r1, r2
 80014f2:	465a      	mov	r2, fp
 80014f4:	4688      	mov	r8, r1
 80014f6:	9900      	ldr	r1, [sp, #0]
 80014f8:	404a      	eors	r2, r1
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	0109      	lsls	r1, r1, #4
 80014fe:	468c      	mov	ip, r1
 8001500:	0029      	movs	r1, r5
 8001502:	4461      	add	r1, ip
 8001504:	9101      	str	r1, [sp, #4]
 8001506:	4641      	mov	r1, r8
 8001508:	290a      	cmp	r1, #10
 800150a:	dd00      	ble.n	800150e <__aeabi_dmul+0xf6>
 800150c:	e233      	b.n	8001976 <__aeabi_dmul+0x55e>
 800150e:	4693      	mov	fp, r2
 8001510:	2603      	movs	r6, #3
 8001512:	4642      	mov	r2, r8
 8001514:	2701      	movs	r7, #1
 8001516:	4097      	lsls	r7, r2
 8001518:	21a6      	movs	r1, #166	@ 0xa6
 800151a:	003a      	movs	r2, r7
 800151c:	00c9      	lsls	r1, r1, #3
 800151e:	400a      	ands	r2, r1
 8001520:	420f      	tst	r7, r1
 8001522:	d031      	beq.n	8001588 <__aeabi_dmul+0x170>
 8001524:	9e02      	ldr	r6, [sp, #8]
 8001526:	2e02      	cmp	r6, #2
 8001528:	d100      	bne.n	800152c <__aeabi_dmul+0x114>
 800152a:	e235      	b.n	8001998 <__aeabi_dmul+0x580>
 800152c:	2e03      	cmp	r6, #3
 800152e:	d100      	bne.n	8001532 <__aeabi_dmul+0x11a>
 8001530:	e1d2      	b.n	80018d8 <__aeabi_dmul+0x4c0>
 8001532:	4654      	mov	r4, sl
 8001534:	4648      	mov	r0, r9
 8001536:	2e01      	cmp	r6, #1
 8001538:	d0c1      	beq.n	80014be <__aeabi_dmul+0xa6>
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	4b7d      	ldr	r3, [pc, #500]	@ (8001734 <__aeabi_dmul+0x31c>)
 800153e:	4694      	mov	ip, r2
 8001540:	4463      	add	r3, ip
 8001542:	2b00      	cmp	r3, #0
 8001544:	dc00      	bgt.n	8001548 <__aeabi_dmul+0x130>
 8001546:	e0c0      	b.n	80016ca <__aeabi_dmul+0x2b2>
 8001548:	0742      	lsls	r2, r0, #29
 800154a:	d009      	beq.n	8001560 <__aeabi_dmul+0x148>
 800154c:	220f      	movs	r2, #15
 800154e:	4002      	ands	r2, r0
 8001550:	2a04      	cmp	r2, #4
 8001552:	d005      	beq.n	8001560 <__aeabi_dmul+0x148>
 8001554:	1d02      	adds	r2, r0, #4
 8001556:	4282      	cmp	r2, r0
 8001558:	4180      	sbcs	r0, r0
 800155a:	4240      	negs	r0, r0
 800155c:	1824      	adds	r4, r4, r0
 800155e:	0010      	movs	r0, r2
 8001560:	01e2      	lsls	r2, r4, #7
 8001562:	d506      	bpl.n	8001572 <__aeabi_dmul+0x15a>
 8001564:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <__aeabi_dmul+0x320>)
 8001566:	9a01      	ldr	r2, [sp, #4]
 8001568:	401c      	ands	r4, r3
 800156a:	2380      	movs	r3, #128	@ 0x80
 800156c:	4694      	mov	ip, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4463      	add	r3, ip
 8001572:	4a72      	ldr	r2, [pc, #456]	@ (800173c <__aeabi_dmul+0x324>)
 8001574:	4293      	cmp	r3, r2
 8001576:	dc6b      	bgt.n	8001650 <__aeabi_dmul+0x238>
 8001578:	0762      	lsls	r2, r4, #29
 800157a:	08c0      	lsrs	r0, r0, #3
 800157c:	0264      	lsls	r4, r4, #9
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	4302      	orrs	r2, r0
 8001582:	0b24      	lsrs	r4, r4, #12
 8001584:	0d5b      	lsrs	r3, r3, #21
 8001586:	e79d      	b.n	80014c4 <__aeabi_dmul+0xac>
 8001588:	2190      	movs	r1, #144	@ 0x90
 800158a:	0089      	lsls	r1, r1, #2
 800158c:	420f      	tst	r7, r1
 800158e:	d163      	bne.n	8001658 <__aeabi_dmul+0x240>
 8001590:	2288      	movs	r2, #136	@ 0x88
 8001592:	423a      	tst	r2, r7
 8001594:	d100      	bne.n	8001598 <__aeabi_dmul+0x180>
 8001596:	e0d7      	b.n	8001748 <__aeabi_dmul+0x330>
 8001598:	9b00      	ldr	r3, [sp, #0]
 800159a:	46a2      	mov	sl, r4
 800159c:	469b      	mov	fp, r3
 800159e:	4681      	mov	r9, r0
 80015a0:	9602      	str	r6, [sp, #8]
 80015a2:	e7bf      	b.n	8001524 <__aeabi_dmul+0x10c>
 80015a4:	0023      	movs	r3, r4
 80015a6:	4333      	orrs	r3, r6
 80015a8:	d100      	bne.n	80015ac <__aeabi_dmul+0x194>
 80015aa:	e07f      	b.n	80016ac <__aeabi_dmul+0x294>
 80015ac:	2c00      	cmp	r4, #0
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0x19a>
 80015b0:	e1ad      	b.n	800190e <__aeabi_dmul+0x4f6>
 80015b2:	0020      	movs	r0, r4
 80015b4:	f000 fe20 	bl	80021f8 <__clzsi2>
 80015b8:	0002      	movs	r2, r0
 80015ba:	0003      	movs	r3, r0
 80015bc:	3a0b      	subs	r2, #11
 80015be:	201d      	movs	r0, #29
 80015c0:	0019      	movs	r1, r3
 80015c2:	1a82      	subs	r2, r0, r2
 80015c4:	0030      	movs	r0, r6
 80015c6:	3908      	subs	r1, #8
 80015c8:	40d0      	lsrs	r0, r2
 80015ca:	408c      	lsls	r4, r1
 80015cc:	4304      	orrs	r4, r0
 80015ce:	0030      	movs	r0, r6
 80015d0:	4088      	lsls	r0, r1
 80015d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001740 <__aeabi_dmul+0x328>)
 80015d4:	1aeb      	subs	r3, r5, r3
 80015d6:	4694      	mov	ip, r2
 80015d8:	4463      	add	r3, ip
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	4642      	mov	r2, r8
 80015e0:	2600      	movs	r6, #0
 80015e2:	2a0a      	cmp	r2, #10
 80015e4:	dc00      	bgt.n	80015e8 <__aeabi_dmul+0x1d0>
 80015e6:	e75a      	b.n	800149e <__aeabi_dmul+0x86>
 80015e8:	e79c      	b.n	8001524 <__aeabi_dmul+0x10c>
 80015ea:	4653      	mov	r3, sl
 80015ec:	4303      	orrs	r3, r0
 80015ee:	4699      	mov	r9, r3
 80015f0:	d054      	beq.n	800169c <__aeabi_dmul+0x284>
 80015f2:	4653      	mov	r3, sl
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0x1e2>
 80015f8:	e177      	b.n	80018ea <__aeabi_dmul+0x4d2>
 80015fa:	4650      	mov	r0, sl
 80015fc:	f000 fdfc 	bl	80021f8 <__clzsi2>
 8001600:	230b      	movs	r3, #11
 8001602:	425b      	negs	r3, r3
 8001604:	469c      	mov	ip, r3
 8001606:	0002      	movs	r2, r0
 8001608:	4484      	add	ip, r0
 800160a:	0011      	movs	r1, r2
 800160c:	4650      	mov	r0, sl
 800160e:	3908      	subs	r1, #8
 8001610:	4088      	lsls	r0, r1
 8001612:	231d      	movs	r3, #29
 8001614:	4680      	mov	r8, r0
 8001616:	4660      	mov	r0, ip
 8001618:	1a1b      	subs	r3, r3, r0
 800161a:	0020      	movs	r0, r4
 800161c:	40d8      	lsrs	r0, r3
 800161e:	0003      	movs	r3, r0
 8001620:	4640      	mov	r0, r8
 8001622:	4303      	orrs	r3, r0
 8001624:	469a      	mov	sl, r3
 8001626:	0023      	movs	r3, r4
 8001628:	408b      	lsls	r3, r1
 800162a:	4699      	mov	r9, r3
 800162c:	2300      	movs	r3, #0
 800162e:	4d44      	ldr	r5, [pc, #272]	@ (8001740 <__aeabi_dmul+0x328>)
 8001630:	4698      	mov	r8, r3
 8001632:	1aad      	subs	r5, r5, r2
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	e715      	b.n	8001464 <__aeabi_dmul+0x4c>
 8001638:	4652      	mov	r2, sl
 800163a:	4302      	orrs	r2, r0
 800163c:	4691      	mov	r9, r2
 800163e:	d126      	bne.n	800168e <__aeabi_dmul+0x276>
 8001640:	2200      	movs	r2, #0
 8001642:	001d      	movs	r5, r3
 8001644:	2302      	movs	r3, #2
 8001646:	4692      	mov	sl, r2
 8001648:	3208      	adds	r2, #8
 800164a:	4690      	mov	r8, r2
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	e709      	b.n	8001464 <__aeabi_dmul+0x4c>
 8001650:	2400      	movs	r4, #0
 8001652:	2200      	movs	r2, #0
 8001654:	4b35      	ldr	r3, [pc, #212]	@ (800172c <__aeabi_dmul+0x314>)
 8001656:	e735      	b.n	80014c4 <__aeabi_dmul+0xac>
 8001658:	2300      	movs	r3, #0
 800165a:	2480      	movs	r4, #128	@ 0x80
 800165c:	469b      	mov	fp, r3
 800165e:	0324      	lsls	r4, r4, #12
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <__aeabi_dmul+0x314>)
 8001662:	e72f      	b.n	80014c4 <__aeabi_dmul+0xac>
 8001664:	2202      	movs	r2, #2
 8001666:	4641      	mov	r1, r8
 8001668:	4311      	orrs	r1, r2
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	4694      	mov	ip, r2
 8001670:	002a      	movs	r2, r5
 8001672:	4462      	add	r2, ip
 8001674:	4688      	mov	r8, r1
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	290a      	cmp	r1, #10
 800167a:	dd00      	ble.n	800167e <__aeabi_dmul+0x266>
 800167c:	e752      	b.n	8001524 <__aeabi_dmul+0x10c>
 800167e:	465a      	mov	r2, fp
 8001680:	2000      	movs	r0, #0
 8001682:	9900      	ldr	r1, [sp, #0]
 8001684:	0004      	movs	r4, r0
 8001686:	404a      	eors	r2, r1
 8001688:	4693      	mov	fp, r2
 800168a:	2602      	movs	r6, #2
 800168c:	e70b      	b.n	80014a6 <__aeabi_dmul+0x8e>
 800168e:	220c      	movs	r2, #12
 8001690:	001d      	movs	r5, r3
 8001692:	2303      	movs	r3, #3
 8001694:	4681      	mov	r9, r0
 8001696:	4690      	mov	r8, r2
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	e6e3      	b.n	8001464 <__aeabi_dmul+0x4c>
 800169c:	2300      	movs	r3, #0
 800169e:	469a      	mov	sl, r3
 80016a0:	3304      	adds	r3, #4
 80016a2:	4698      	mov	r8, r3
 80016a4:	3b03      	subs	r3, #3
 80016a6:	2500      	movs	r5, #0
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	e6db      	b.n	8001464 <__aeabi_dmul+0x4c>
 80016ac:	4642      	mov	r2, r8
 80016ae:	3301      	adds	r3, #1
 80016b0:	431a      	orrs	r2, r3
 80016b2:	002b      	movs	r3, r5
 80016b4:	4690      	mov	r8, r2
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	9201      	str	r2, [sp, #4]
 80016ba:	4642      	mov	r2, r8
 80016bc:	2400      	movs	r4, #0
 80016be:	2000      	movs	r0, #0
 80016c0:	2601      	movs	r6, #1
 80016c2:	2a0a      	cmp	r2, #10
 80016c4:	dc00      	bgt.n	80016c8 <__aeabi_dmul+0x2b0>
 80016c6:	e6ea      	b.n	800149e <__aeabi_dmul+0x86>
 80016c8:	e72c      	b.n	8001524 <__aeabi_dmul+0x10c>
 80016ca:	2201      	movs	r2, #1
 80016cc:	1ad2      	subs	r2, r2, r3
 80016ce:	2a38      	cmp	r2, #56	@ 0x38
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0x2bc>
 80016d2:	e6f4      	b.n	80014be <__aeabi_dmul+0xa6>
 80016d4:	2a1f      	cmp	r2, #31
 80016d6:	dc00      	bgt.n	80016da <__aeabi_dmul+0x2c2>
 80016d8:	e12a      	b.n	8001930 <__aeabi_dmul+0x518>
 80016da:	211f      	movs	r1, #31
 80016dc:	4249      	negs	r1, r1
 80016de:	1acb      	subs	r3, r1, r3
 80016e0:	0021      	movs	r1, r4
 80016e2:	40d9      	lsrs	r1, r3
 80016e4:	000b      	movs	r3, r1
 80016e6:	2a20      	cmp	r2, #32
 80016e8:	d005      	beq.n	80016f6 <__aeabi_dmul+0x2de>
 80016ea:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <__aeabi_dmul+0x32c>)
 80016ec:	9d01      	ldr	r5, [sp, #4]
 80016ee:	4694      	mov	ip, r2
 80016f0:	4465      	add	r5, ip
 80016f2:	40ac      	lsls	r4, r5
 80016f4:	4320      	orrs	r0, r4
 80016f6:	1e42      	subs	r2, r0, #1
 80016f8:	4190      	sbcs	r0, r2
 80016fa:	4318      	orrs	r0, r3
 80016fc:	2307      	movs	r3, #7
 80016fe:	0019      	movs	r1, r3
 8001700:	2400      	movs	r4, #0
 8001702:	4001      	ands	r1, r0
 8001704:	4203      	tst	r3, r0
 8001706:	d00c      	beq.n	8001722 <__aeabi_dmul+0x30a>
 8001708:	230f      	movs	r3, #15
 800170a:	4003      	ands	r3, r0
 800170c:	2b04      	cmp	r3, #4
 800170e:	d100      	bne.n	8001712 <__aeabi_dmul+0x2fa>
 8001710:	e140      	b.n	8001994 <__aeabi_dmul+0x57c>
 8001712:	1d03      	adds	r3, r0, #4
 8001714:	4283      	cmp	r3, r0
 8001716:	41a4      	sbcs	r4, r4
 8001718:	0018      	movs	r0, r3
 800171a:	4264      	negs	r4, r4
 800171c:	0761      	lsls	r1, r4, #29
 800171e:	0264      	lsls	r4, r4, #9
 8001720:	0b24      	lsrs	r4, r4, #12
 8001722:	08c2      	lsrs	r2, r0, #3
 8001724:	2300      	movs	r3, #0
 8001726:	430a      	orrs	r2, r1
 8001728:	e6cc      	b.n	80014c4 <__aeabi_dmul+0xac>
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	fffffc01 	.word	0xfffffc01
 8001734:	000003ff 	.word	0x000003ff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	000007fe 	.word	0x000007fe
 8001740:	fffffc0d 	.word	0xfffffc0d
 8001744:	0000043e 	.word	0x0000043e
 8001748:	4649      	mov	r1, r9
 800174a:	464a      	mov	r2, r9
 800174c:	0409      	lsls	r1, r1, #16
 800174e:	0c09      	lsrs	r1, r1, #16
 8001750:	000d      	movs	r5, r1
 8001752:	0c16      	lsrs	r6, r2, #16
 8001754:	0c02      	lsrs	r2, r0, #16
 8001756:	0400      	lsls	r0, r0, #16
 8001758:	0c00      	lsrs	r0, r0, #16
 800175a:	4345      	muls	r5, r0
 800175c:	46ac      	mov	ip, r5
 800175e:	0005      	movs	r5, r0
 8001760:	4375      	muls	r5, r6
 8001762:	46a8      	mov	r8, r5
 8001764:	0015      	movs	r5, r2
 8001766:	000f      	movs	r7, r1
 8001768:	4375      	muls	r5, r6
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	9502      	str	r5, [sp, #8]
 800176e:	002a      	movs	r2, r5
 8001770:	9d00      	ldr	r5, [sp, #0]
 8001772:	436f      	muls	r7, r5
 8001774:	4665      	mov	r5, ip
 8001776:	0c2d      	lsrs	r5, r5, #16
 8001778:	46a9      	mov	r9, r5
 800177a:	4447      	add	r7, r8
 800177c:	444f      	add	r7, r9
 800177e:	45b8      	cmp	r8, r7
 8001780:	d905      	bls.n	800178e <__aeabi_dmul+0x376>
 8001782:	0015      	movs	r5, r2
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	0252      	lsls	r2, r2, #9
 8001788:	4690      	mov	r8, r2
 800178a:	4445      	add	r5, r8
 800178c:	9502      	str	r5, [sp, #8]
 800178e:	0c3d      	lsrs	r5, r7, #16
 8001790:	9503      	str	r5, [sp, #12]
 8001792:	4665      	mov	r5, ip
 8001794:	042d      	lsls	r5, r5, #16
 8001796:	043f      	lsls	r7, r7, #16
 8001798:	0c2d      	lsrs	r5, r5, #16
 800179a:	46ac      	mov	ip, r5
 800179c:	003d      	movs	r5, r7
 800179e:	4465      	add	r5, ip
 80017a0:	9504      	str	r5, [sp, #16]
 80017a2:	0c25      	lsrs	r5, r4, #16
 80017a4:	0424      	lsls	r4, r4, #16
 80017a6:	0c24      	lsrs	r4, r4, #16
 80017a8:	46ac      	mov	ip, r5
 80017aa:	0025      	movs	r5, r4
 80017ac:	4375      	muls	r5, r6
 80017ae:	46a8      	mov	r8, r5
 80017b0:	4665      	mov	r5, ip
 80017b2:	000f      	movs	r7, r1
 80017b4:	4369      	muls	r1, r5
 80017b6:	4441      	add	r1, r8
 80017b8:	4689      	mov	r9, r1
 80017ba:	4367      	muls	r7, r4
 80017bc:	0c39      	lsrs	r1, r7, #16
 80017be:	4449      	add	r1, r9
 80017c0:	436e      	muls	r6, r5
 80017c2:	4588      	cmp	r8, r1
 80017c4:	d903      	bls.n	80017ce <__aeabi_dmul+0x3b6>
 80017c6:	2280      	movs	r2, #128	@ 0x80
 80017c8:	0252      	lsls	r2, r2, #9
 80017ca:	4690      	mov	r8, r2
 80017cc:	4446      	add	r6, r8
 80017ce:	0c0d      	lsrs	r5, r1, #16
 80017d0:	46a8      	mov	r8, r5
 80017d2:	0035      	movs	r5, r6
 80017d4:	4445      	add	r5, r8
 80017d6:	9505      	str	r5, [sp, #20]
 80017d8:	9d03      	ldr	r5, [sp, #12]
 80017da:	043f      	lsls	r7, r7, #16
 80017dc:	46a8      	mov	r8, r5
 80017de:	0c3f      	lsrs	r7, r7, #16
 80017e0:	0409      	lsls	r1, r1, #16
 80017e2:	19c9      	adds	r1, r1, r7
 80017e4:	4488      	add	r8, r1
 80017e6:	4645      	mov	r5, r8
 80017e8:	9503      	str	r5, [sp, #12]
 80017ea:	4655      	mov	r5, sl
 80017ec:	042e      	lsls	r6, r5, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c2f      	lsrs	r7, r5, #16
 80017f2:	0035      	movs	r5, r6
 80017f4:	4345      	muls	r5, r0
 80017f6:	4378      	muls	r0, r7
 80017f8:	4681      	mov	r9, r0
 80017fa:	0038      	movs	r0, r7
 80017fc:	46a8      	mov	r8, r5
 80017fe:	0c2d      	lsrs	r5, r5, #16
 8001800:	46aa      	mov	sl, r5
 8001802:	9a00      	ldr	r2, [sp, #0]
 8001804:	4350      	muls	r0, r2
 8001806:	4372      	muls	r2, r6
 8001808:	444a      	add	r2, r9
 800180a:	4452      	add	r2, sl
 800180c:	4591      	cmp	r9, r2
 800180e:	d903      	bls.n	8001818 <__aeabi_dmul+0x400>
 8001810:	2580      	movs	r5, #128	@ 0x80
 8001812:	026d      	lsls	r5, r5, #9
 8001814:	46a9      	mov	r9, r5
 8001816:	4448      	add	r0, r9
 8001818:	0c15      	lsrs	r5, r2, #16
 800181a:	46a9      	mov	r9, r5
 800181c:	4645      	mov	r5, r8
 800181e:	042d      	lsls	r5, r5, #16
 8001820:	0c2d      	lsrs	r5, r5, #16
 8001822:	46a8      	mov	r8, r5
 8001824:	4665      	mov	r5, ip
 8001826:	437d      	muls	r5, r7
 8001828:	0412      	lsls	r2, r2, #16
 800182a:	4448      	add	r0, r9
 800182c:	4490      	add	r8, r2
 800182e:	46a9      	mov	r9, r5
 8001830:	0032      	movs	r2, r6
 8001832:	4665      	mov	r5, ip
 8001834:	4362      	muls	r2, r4
 8001836:	436e      	muls	r6, r5
 8001838:	437c      	muls	r4, r7
 800183a:	0c17      	lsrs	r7, r2, #16
 800183c:	1936      	adds	r6, r6, r4
 800183e:	19bf      	adds	r7, r7, r6
 8001840:	42bc      	cmp	r4, r7
 8001842:	d903      	bls.n	800184c <__aeabi_dmul+0x434>
 8001844:	2480      	movs	r4, #128	@ 0x80
 8001846:	0264      	lsls	r4, r4, #9
 8001848:	46a4      	mov	ip, r4
 800184a:	44e1      	add	r9, ip
 800184c:	9c02      	ldr	r4, [sp, #8]
 800184e:	9e03      	ldr	r6, [sp, #12]
 8001850:	46a4      	mov	ip, r4
 8001852:	9d05      	ldr	r5, [sp, #20]
 8001854:	4466      	add	r6, ip
 8001856:	428e      	cmp	r6, r1
 8001858:	4189      	sbcs	r1, r1
 800185a:	46ac      	mov	ip, r5
 800185c:	0412      	lsls	r2, r2, #16
 800185e:	043c      	lsls	r4, r7, #16
 8001860:	0c12      	lsrs	r2, r2, #16
 8001862:	18a2      	adds	r2, r4, r2
 8001864:	4462      	add	r2, ip
 8001866:	4249      	negs	r1, r1
 8001868:	1854      	adds	r4, r2, r1
 800186a:	4446      	add	r6, r8
 800186c:	46a4      	mov	ip, r4
 800186e:	4546      	cmp	r6, r8
 8001870:	41a4      	sbcs	r4, r4
 8001872:	4682      	mov	sl, r0
 8001874:	4264      	negs	r4, r4
 8001876:	46a0      	mov	r8, r4
 8001878:	42aa      	cmp	r2, r5
 800187a:	4192      	sbcs	r2, r2
 800187c:	458c      	cmp	ip, r1
 800187e:	4189      	sbcs	r1, r1
 8001880:	44e2      	add	sl, ip
 8001882:	44d0      	add	r8, sl
 8001884:	4249      	negs	r1, r1
 8001886:	4252      	negs	r2, r2
 8001888:	430a      	orrs	r2, r1
 800188a:	45a0      	cmp	r8, r4
 800188c:	41a4      	sbcs	r4, r4
 800188e:	4582      	cmp	sl, r0
 8001890:	4189      	sbcs	r1, r1
 8001892:	4264      	negs	r4, r4
 8001894:	4249      	negs	r1, r1
 8001896:	430c      	orrs	r4, r1
 8001898:	4641      	mov	r1, r8
 800189a:	0c3f      	lsrs	r7, r7, #16
 800189c:	19d2      	adds	r2, r2, r7
 800189e:	1912      	adds	r2, r2, r4
 80018a0:	0dcc      	lsrs	r4, r1, #23
 80018a2:	9904      	ldr	r1, [sp, #16]
 80018a4:	0270      	lsls	r0, r6, #9
 80018a6:	4308      	orrs	r0, r1
 80018a8:	1e41      	subs	r1, r0, #1
 80018aa:	4188      	sbcs	r0, r1
 80018ac:	4641      	mov	r1, r8
 80018ae:	444a      	add	r2, r9
 80018b0:	0df6      	lsrs	r6, r6, #23
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	4330      	orrs	r0, r6
 80018b6:	0249      	lsls	r1, r1, #9
 80018b8:	4314      	orrs	r4, r2
 80018ba:	4308      	orrs	r0, r1
 80018bc:	01d2      	lsls	r2, r2, #7
 80018be:	d535      	bpl.n	800192c <__aeabi_dmul+0x514>
 80018c0:	2201      	movs	r2, #1
 80018c2:	0843      	lsrs	r3, r0, #1
 80018c4:	4002      	ands	r2, r0
 80018c6:	4313      	orrs	r3, r2
 80018c8:	07e0      	lsls	r0, r4, #31
 80018ca:	4318      	orrs	r0, r3
 80018cc:	0864      	lsrs	r4, r4, #1
 80018ce:	e634      	b.n	800153a <__aeabi_dmul+0x122>
 80018d0:	9b00      	ldr	r3, [sp, #0]
 80018d2:	46a2      	mov	sl, r4
 80018d4:	469b      	mov	fp, r3
 80018d6:	4681      	mov	r9, r0
 80018d8:	2480      	movs	r4, #128	@ 0x80
 80018da:	4653      	mov	r3, sl
 80018dc:	0324      	lsls	r4, r4, #12
 80018de:	431c      	orrs	r4, r3
 80018e0:	0324      	lsls	r4, r4, #12
 80018e2:	464a      	mov	r2, r9
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <__aeabi_dmul+0x588>)
 80018e6:	0b24      	lsrs	r4, r4, #12
 80018e8:	e5ec      	b.n	80014c4 <__aeabi_dmul+0xac>
 80018ea:	f000 fc85 	bl	80021f8 <__clzsi2>
 80018ee:	2315      	movs	r3, #21
 80018f0:	469c      	mov	ip, r3
 80018f2:	4484      	add	ip, r0
 80018f4:	0002      	movs	r2, r0
 80018f6:	4663      	mov	r3, ip
 80018f8:	3220      	adds	r2, #32
 80018fa:	2b1c      	cmp	r3, #28
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dmul+0x4e8>
 80018fe:	e684      	b.n	800160a <__aeabi_dmul+0x1f2>
 8001900:	2300      	movs	r3, #0
 8001902:	4699      	mov	r9, r3
 8001904:	0023      	movs	r3, r4
 8001906:	3808      	subs	r0, #8
 8001908:	4083      	lsls	r3, r0
 800190a:	469a      	mov	sl, r3
 800190c:	e68e      	b.n	800162c <__aeabi_dmul+0x214>
 800190e:	f000 fc73 	bl	80021f8 <__clzsi2>
 8001912:	0002      	movs	r2, r0
 8001914:	0003      	movs	r3, r0
 8001916:	3215      	adds	r2, #21
 8001918:	3320      	adds	r3, #32
 800191a:	2a1c      	cmp	r2, #28
 800191c:	dc00      	bgt.n	8001920 <__aeabi_dmul+0x508>
 800191e:	e64e      	b.n	80015be <__aeabi_dmul+0x1a6>
 8001920:	0002      	movs	r2, r0
 8001922:	0034      	movs	r4, r6
 8001924:	3a08      	subs	r2, #8
 8001926:	2000      	movs	r0, #0
 8001928:	4094      	lsls	r4, r2
 800192a:	e652      	b.n	80015d2 <__aeabi_dmul+0x1ba>
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	e604      	b.n	800153a <__aeabi_dmul+0x122>
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <__aeabi_dmul+0x58c>)
 8001932:	0021      	movs	r1, r4
 8001934:	469c      	mov	ip, r3
 8001936:	0003      	movs	r3, r0
 8001938:	9d01      	ldr	r5, [sp, #4]
 800193a:	40d3      	lsrs	r3, r2
 800193c:	4465      	add	r5, ip
 800193e:	40a9      	lsls	r1, r5
 8001940:	4319      	orrs	r1, r3
 8001942:	0003      	movs	r3, r0
 8001944:	40ab      	lsls	r3, r5
 8001946:	1e58      	subs	r0, r3, #1
 8001948:	4183      	sbcs	r3, r0
 800194a:	4319      	orrs	r1, r3
 800194c:	0008      	movs	r0, r1
 800194e:	40d4      	lsrs	r4, r2
 8001950:	074b      	lsls	r3, r1, #29
 8001952:	d009      	beq.n	8001968 <__aeabi_dmul+0x550>
 8001954:	230f      	movs	r3, #15
 8001956:	400b      	ands	r3, r1
 8001958:	2b04      	cmp	r3, #4
 800195a:	d005      	beq.n	8001968 <__aeabi_dmul+0x550>
 800195c:	1d0b      	adds	r3, r1, #4
 800195e:	428b      	cmp	r3, r1
 8001960:	4180      	sbcs	r0, r0
 8001962:	4240      	negs	r0, r0
 8001964:	1824      	adds	r4, r4, r0
 8001966:	0018      	movs	r0, r3
 8001968:	0223      	lsls	r3, r4, #8
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x556>
 800196c:	e6d6      	b.n	800171c <__aeabi_dmul+0x304>
 800196e:	2301      	movs	r3, #1
 8001970:	2400      	movs	r4, #0
 8001972:	2200      	movs	r2, #0
 8001974:	e5a6      	b.n	80014c4 <__aeabi_dmul+0xac>
 8001976:	290f      	cmp	r1, #15
 8001978:	d1aa      	bne.n	80018d0 <__aeabi_dmul+0x4b8>
 800197a:	2380      	movs	r3, #128	@ 0x80
 800197c:	4652      	mov	r2, sl
 800197e:	031b      	lsls	r3, r3, #12
 8001980:	421a      	tst	r2, r3
 8001982:	d0a9      	beq.n	80018d8 <__aeabi_dmul+0x4c0>
 8001984:	421c      	tst	r4, r3
 8001986:	d1a7      	bne.n	80018d8 <__aeabi_dmul+0x4c0>
 8001988:	431c      	orrs	r4, r3
 800198a:	9b00      	ldr	r3, [sp, #0]
 800198c:	0002      	movs	r2, r0
 800198e:	469b      	mov	fp, r3
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <__aeabi_dmul+0x588>)
 8001992:	e597      	b.n	80014c4 <__aeabi_dmul+0xac>
 8001994:	2400      	movs	r4, #0
 8001996:	e6c1      	b.n	800171c <__aeabi_dmul+0x304>
 8001998:	2400      	movs	r4, #0
 800199a:	4b01      	ldr	r3, [pc, #4]	@ (80019a0 <__aeabi_dmul+0x588>)
 800199c:	0022      	movs	r2, r4
 800199e:	e591      	b.n	80014c4 <__aeabi_dmul+0xac>
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	0000041e 	.word	0x0000041e

080019a8 <__aeabi_dsub>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	464e      	mov	r6, r9
 80019ac:	4645      	mov	r5, r8
 80019ae:	46de      	mov	lr, fp
 80019b0:	4657      	mov	r7, sl
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	b085      	sub	sp, #20
 80019b6:	9000      	str	r0, [sp, #0]
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	030c      	lsls	r4, r1, #12
 80019bc:	004f      	lsls	r7, r1, #1
 80019be:	0fce      	lsrs	r6, r1, #31
 80019c0:	0a61      	lsrs	r1, r4, #9
 80019c2:	9c00      	ldr	r4, [sp, #0]
 80019c4:	46b0      	mov	r8, r6
 80019c6:	0f64      	lsrs	r4, r4, #29
 80019c8:	430c      	orrs	r4, r1
 80019ca:	9900      	ldr	r1, [sp, #0]
 80019cc:	0d7f      	lsrs	r7, r7, #21
 80019ce:	00c8      	lsls	r0, r1, #3
 80019d0:	0011      	movs	r1, r2
 80019d2:	001a      	movs	r2, r3
 80019d4:	031b      	lsls	r3, r3, #12
 80019d6:	469c      	mov	ip, r3
 80019d8:	9100      	str	r1, [sp, #0]
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	0051      	lsls	r1, r2, #1
 80019de:	0d4b      	lsrs	r3, r1, #21
 80019e0:	4699      	mov	r9, r3
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	9d00      	ldr	r5, [sp, #0]
 80019e6:	0fd9      	lsrs	r1, r3, #31
 80019e8:	4663      	mov	r3, ip
 80019ea:	0f6a      	lsrs	r2, r5, #29
 80019ec:	0a5b      	lsrs	r3, r3, #9
 80019ee:	4313      	orrs	r3, r2
 80019f0:	00ea      	lsls	r2, r5, #3
 80019f2:	4694      	mov	ip, r2
 80019f4:	4693      	mov	fp, r2
 80019f6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cfc <__aeabi_dsub+0x354>)
 80019f8:	9003      	str	r0, [sp, #12]
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	4591      	cmp	r9, r2
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x5a>
 8001a00:	e0cd      	b.n	8001b9e <__aeabi_dsub+0x1f6>
 8001a02:	2501      	movs	r5, #1
 8001a04:	4069      	eors	r1, r5
 8001a06:	464d      	mov	r5, r9
 8001a08:	1b7d      	subs	r5, r7, r5
 8001a0a:	46aa      	mov	sl, r5
 8001a0c:	428e      	cmp	r6, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x6a>
 8001a10:	e080      	b.n	8001b14 <__aeabi_dsub+0x16c>
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	dc00      	bgt.n	8001a18 <__aeabi_dsub+0x70>
 8001a16:	e335      	b.n	8002084 <__aeabi_dsub+0x6dc>
 8001a18:	4649      	mov	r1, r9
 8001a1a:	2900      	cmp	r1, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x78>
 8001a1e:	e0df      	b.n	8001be0 <__aeabi_dsub+0x238>
 8001a20:	4297      	cmp	r7, r2
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x7e>
 8001a24:	e194      	b.n	8001d50 <__aeabi_dsub+0x3a8>
 8001a26:	4652      	mov	r2, sl
 8001a28:	2501      	movs	r5, #1
 8001a2a:	2a38      	cmp	r2, #56	@ 0x38
 8001a2c:	dc19      	bgt.n	8001a62 <__aeabi_dsub+0xba>
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	9b02      	ldr	r3, [sp, #8]
 8001a32:	0412      	lsls	r2, r2, #16
 8001a34:	4313      	orrs	r3, r2
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	4652      	mov	r2, sl
 8001a3a:	2a1f      	cmp	r2, #31
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x98>
 8001a3e:	e1e3      	b.n	8001e08 <__aeabi_dsub+0x460>
 8001a40:	4653      	mov	r3, sl
 8001a42:	2220      	movs	r2, #32
 8001a44:	4661      	mov	r1, ip
 8001a46:	9d02      	ldr	r5, [sp, #8]
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	4095      	lsls	r5, r2
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	430d      	orrs	r5, r1
 8001a50:	4661      	mov	r1, ip
 8001a52:	4091      	lsls	r1, r2
 8001a54:	000a      	movs	r2, r1
 8001a56:	1e51      	subs	r1, r2, #1
 8001a58:	418a      	sbcs	r2, r1
 8001a5a:	4315      	orrs	r5, r2
 8001a5c:	9a02      	ldr	r2, [sp, #8]
 8001a5e:	40da      	lsrs	r2, r3
 8001a60:	1aa4      	subs	r4, r4, r2
 8001a62:	1b45      	subs	r5, r0, r5
 8001a64:	42a8      	cmp	r0, r5
 8001a66:	4180      	sbcs	r0, r0
 8001a68:	4240      	negs	r0, r0
 8001a6a:	1a24      	subs	r4, r4, r0
 8001a6c:	0223      	lsls	r3, r4, #8
 8001a6e:	d400      	bmi.n	8001a72 <__aeabi_dsub+0xca>
 8001a70:	e13d      	b.n	8001cee <__aeabi_dsub+0x346>
 8001a72:	0264      	lsls	r4, r4, #9
 8001a74:	0a64      	lsrs	r4, r4, #9
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0xd4>
 8001a7a:	e147      	b.n	8001d0c <__aeabi_dsub+0x364>
 8001a7c:	0020      	movs	r0, r4
 8001a7e:	f000 fbbb 	bl	80021f8 <__clzsi2>
 8001a82:	0003      	movs	r3, r0
 8001a84:	3b08      	subs	r3, #8
 8001a86:	2120      	movs	r1, #32
 8001a88:	0028      	movs	r0, r5
 8001a8a:	1aca      	subs	r2, r1, r3
 8001a8c:	40d0      	lsrs	r0, r2
 8001a8e:	409c      	lsls	r4, r3
 8001a90:	0002      	movs	r2, r0
 8001a92:	409d      	lsls	r5, r3
 8001a94:	4322      	orrs	r2, r4
 8001a96:	429f      	cmp	r7, r3
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0xf4>
 8001a9a:	e177      	b.n	8001d8c <__aeabi_dsub+0x3e4>
 8001a9c:	1bd8      	subs	r0, r3, r7
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	1a09      	subs	r1, r1, r0
 8001aa2:	002c      	movs	r4, r5
 8001aa4:	408d      	lsls	r5, r1
 8001aa6:	40c4      	lsrs	r4, r0
 8001aa8:	1e6b      	subs	r3, r5, #1
 8001aaa:	419d      	sbcs	r5, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	40c2      	lsrs	r2, r0
 8001ab0:	408b      	lsls	r3, r1
 8001ab2:	4325      	orrs	r5, r4
 8001ab4:	2700      	movs	r7, #0
 8001ab6:	0014      	movs	r4, r2
 8001ab8:	431d      	orrs	r5, r3
 8001aba:	076b      	lsls	r3, r5, #29
 8001abc:	d009      	beq.n	8001ad2 <__aeabi_dsub+0x12a>
 8001abe:	230f      	movs	r3, #15
 8001ac0:	402b      	ands	r3, r5
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d005      	beq.n	8001ad2 <__aeabi_dsub+0x12a>
 8001ac6:	1d2b      	adds	r3, r5, #4
 8001ac8:	42ab      	cmp	r3, r5
 8001aca:	41ad      	sbcs	r5, r5
 8001acc:	426d      	negs	r5, r5
 8001ace:	1964      	adds	r4, r4, r5
 8001ad0:	001d      	movs	r5, r3
 8001ad2:	0223      	lsls	r3, r4, #8
 8001ad4:	d400      	bmi.n	8001ad8 <__aeabi_dsub+0x130>
 8001ad6:	e140      	b.n	8001d5a <__aeabi_dsub+0x3b2>
 8001ad8:	4a88      	ldr	r2, [pc, #544]	@ (8001cfc <__aeabi_dsub+0x354>)
 8001ada:	3701      	adds	r7, #1
 8001adc:	4297      	cmp	r7, r2
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x13a>
 8001ae0:	e101      	b.n	8001ce6 <__aeabi_dsub+0x33e>
 8001ae2:	2601      	movs	r6, #1
 8001ae4:	4643      	mov	r3, r8
 8001ae6:	4986      	ldr	r1, [pc, #536]	@ (8001d00 <__aeabi_dsub+0x358>)
 8001ae8:	08ed      	lsrs	r5, r5, #3
 8001aea:	4021      	ands	r1, r4
 8001aec:	074a      	lsls	r2, r1, #29
 8001aee:	432a      	orrs	r2, r5
 8001af0:	057c      	lsls	r4, r7, #21
 8001af2:	024d      	lsls	r5, r1, #9
 8001af4:	0b2d      	lsrs	r5, r5, #12
 8001af6:	0d64      	lsrs	r4, r4, #21
 8001af8:	401e      	ands	r6, r3
 8001afa:	0524      	lsls	r4, r4, #20
 8001afc:	432c      	orrs	r4, r5
 8001afe:	07f6      	lsls	r6, r6, #31
 8001b00:	4334      	orrs	r4, r6
 8001b02:	0010      	movs	r0, r2
 8001b04:	0021      	movs	r1, r4
 8001b06:	b005      	add	sp, #20
 8001b08:	bcf0      	pop	{r4, r5, r6, r7}
 8001b0a:	46bb      	mov	fp, r7
 8001b0c:	46b2      	mov	sl, r6
 8001b0e:	46a9      	mov	r9, r5
 8001b10:	46a0      	mov	r8, r4
 8001b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b14:	2d00      	cmp	r5, #0
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_dsub+0x172>
 8001b18:	e2d0      	b.n	80020bc <__aeabi_dsub+0x714>
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	d000      	beq.n	8001b22 <__aeabi_dsub+0x17a>
 8001b20:	e0d4      	b.n	8001ccc <__aeabi_dsub+0x324>
 8001b22:	4661      	mov	r1, ip
 8001b24:	9b02      	ldr	r3, [sp, #8]
 8001b26:	4319      	orrs	r1, r3
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x184>
 8001b2a:	e12b      	b.n	8001d84 <__aeabi_dsub+0x3dc>
 8001b2c:	1e69      	subs	r1, r5, #1
 8001b2e:	2d01      	cmp	r5, #1
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dsub+0x18c>
 8001b32:	e1d9      	b.n	8001ee8 <__aeabi_dsub+0x540>
 8001b34:	4295      	cmp	r5, r2
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x192>
 8001b38:	e10a      	b.n	8001d50 <__aeabi_dsub+0x3a8>
 8001b3a:	2501      	movs	r5, #1
 8001b3c:	2938      	cmp	r1, #56	@ 0x38
 8001b3e:	dc17      	bgt.n	8001b70 <__aeabi_dsub+0x1c8>
 8001b40:	468a      	mov	sl, r1
 8001b42:	4653      	mov	r3, sl
 8001b44:	2b1f      	cmp	r3, #31
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dsub+0x1a2>
 8001b48:	e1e7      	b.n	8001f1a <__aeabi_dsub+0x572>
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	9b02      	ldr	r3, [sp, #8]
 8001b50:	4661      	mov	r1, ip
 8001b52:	4093      	lsls	r3, r2
 8001b54:	001d      	movs	r5, r3
 8001b56:	4653      	mov	r3, sl
 8001b58:	40d9      	lsrs	r1, r3
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	001a      	movs	r2, r3
 8001b60:	430d      	orrs	r5, r1
 8001b62:	1e51      	subs	r1, r2, #1
 8001b64:	418a      	sbcs	r2, r1
 8001b66:	4653      	mov	r3, sl
 8001b68:	4315      	orrs	r5, r2
 8001b6a:	9a02      	ldr	r2, [sp, #8]
 8001b6c:	40da      	lsrs	r2, r3
 8001b6e:	18a4      	adds	r4, r4, r2
 8001b70:	182d      	adds	r5, r5, r0
 8001b72:	4285      	cmp	r5, r0
 8001b74:	4180      	sbcs	r0, r0
 8001b76:	4240      	negs	r0, r0
 8001b78:	1824      	adds	r4, r4, r0
 8001b7a:	0223      	lsls	r3, r4, #8
 8001b7c:	d400      	bmi.n	8001b80 <__aeabi_dsub+0x1d8>
 8001b7e:	e0b6      	b.n	8001cee <__aeabi_dsub+0x346>
 8001b80:	4b5e      	ldr	r3, [pc, #376]	@ (8001cfc <__aeabi_dsub+0x354>)
 8001b82:	3701      	adds	r7, #1
 8001b84:	429f      	cmp	r7, r3
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x1e2>
 8001b88:	e0ad      	b.n	8001ce6 <__aeabi_dsub+0x33e>
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001d00 <__aeabi_dsub+0x358>)
 8001b8e:	086a      	lsrs	r2, r5, #1
 8001b90:	401c      	ands	r4, r3
 8001b92:	4029      	ands	r1, r5
 8001b94:	430a      	orrs	r2, r1
 8001b96:	07e5      	lsls	r5, r4, #31
 8001b98:	4315      	orrs	r5, r2
 8001b9a:	0864      	lsrs	r4, r4, #1
 8001b9c:	e78d      	b.n	8001aba <__aeabi_dsub+0x112>
 8001b9e:	4a59      	ldr	r2, [pc, #356]	@ (8001d04 <__aeabi_dsub+0x35c>)
 8001ba0:	9b02      	ldr	r3, [sp, #8]
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	4662      	mov	r2, ip
 8001ba6:	44ba      	add	sl, r7
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	d02c      	beq.n	8001c06 <__aeabi_dsub+0x25e>
 8001bac:	428e      	cmp	r6, r1
 8001bae:	d02e      	beq.n	8001c0e <__aeabi_dsub+0x266>
 8001bb0:	4652      	mov	r2, sl
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d060      	beq.n	8001c78 <__aeabi_dsub+0x2d0>
 8001bb6:	2f00      	cmp	r7, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x214>
 8001bba:	e0db      	b.n	8001d74 <__aeabi_dsub+0x3cc>
 8001bbc:	4663      	mov	r3, ip
 8001bbe:	000e      	movs	r6, r1
 8001bc0:	9c02      	ldr	r4, [sp, #8]
 8001bc2:	08d8      	lsrs	r0, r3, #3
 8001bc4:	0762      	lsls	r2, r4, #29
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	08e4      	lsrs	r4, r4, #3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	4323      	orrs	r3, r4
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x22a>
 8001bd0:	e254      	b.n	800207c <__aeabi_dsub+0x6d4>
 8001bd2:	2580      	movs	r5, #128	@ 0x80
 8001bd4:	032d      	lsls	r5, r5, #12
 8001bd6:	4325      	orrs	r5, r4
 8001bd8:	032d      	lsls	r5, r5, #12
 8001bda:	4c48      	ldr	r4, [pc, #288]	@ (8001cfc <__aeabi_dsub+0x354>)
 8001bdc:	0b2d      	lsrs	r5, r5, #12
 8001bde:	e78c      	b.n	8001afa <__aeabi_dsub+0x152>
 8001be0:	4661      	mov	r1, ip
 8001be2:	9b02      	ldr	r3, [sp, #8]
 8001be4:	4319      	orrs	r1, r3
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x242>
 8001be8:	e0cc      	b.n	8001d84 <__aeabi_dsub+0x3dc>
 8001bea:	0029      	movs	r1, r5
 8001bec:	3901      	subs	r1, #1
 8001bee:	2d01      	cmp	r5, #1
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x24c>
 8001bf2:	e188      	b.n	8001f06 <__aeabi_dsub+0x55e>
 8001bf4:	4295      	cmp	r5, r2
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x252>
 8001bf8:	e0aa      	b.n	8001d50 <__aeabi_dsub+0x3a8>
 8001bfa:	2501      	movs	r5, #1
 8001bfc:	2938      	cmp	r1, #56	@ 0x38
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x25a>
 8001c00:	e72f      	b.n	8001a62 <__aeabi_dsub+0xba>
 8001c02:	468a      	mov	sl, r1
 8001c04:	e718      	b.n	8001a38 <__aeabi_dsub+0x90>
 8001c06:	2201      	movs	r2, #1
 8001c08:	4051      	eors	r1, r2
 8001c0a:	428e      	cmp	r6, r1
 8001c0c:	d1d0      	bne.n	8001bb0 <__aeabi_dsub+0x208>
 8001c0e:	4653      	mov	r3, sl
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x26e>
 8001c14:	e0be      	b.n	8001d94 <__aeabi_dsub+0x3ec>
 8001c16:	2f00      	cmp	r7, #0
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dsub+0x274>
 8001c1a:	e138      	b.n	8001e8e <__aeabi_dsub+0x4e6>
 8001c1c:	46ca      	mov	sl, r9
 8001c1e:	0022      	movs	r2, r4
 8001c20:	4302      	orrs	r2, r0
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dsub+0x27e>
 8001c24:	e1e2      	b.n	8001fec <__aeabi_dsub+0x644>
 8001c26:	4653      	mov	r3, sl
 8001c28:	1e59      	subs	r1, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x288>
 8001c2e:	e20d      	b.n	800204c <__aeabi_dsub+0x6a4>
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <__aeabi_dsub+0x354>)
 8001c32:	4592      	cmp	sl, r2
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x290>
 8001c36:	e1d2      	b.n	8001fde <__aeabi_dsub+0x636>
 8001c38:	2701      	movs	r7, #1
 8001c3a:	2938      	cmp	r1, #56	@ 0x38
 8001c3c:	dc13      	bgt.n	8001c66 <__aeabi_dsub+0x2be>
 8001c3e:	291f      	cmp	r1, #31
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x29c>
 8001c42:	e1ee      	b.n	8002022 <__aeabi_dsub+0x67a>
 8001c44:	2220      	movs	r2, #32
 8001c46:	9b02      	ldr	r3, [sp, #8]
 8001c48:	1a52      	subs	r2, r2, r1
 8001c4a:	0025      	movs	r5, r4
 8001c4c:	0007      	movs	r7, r0
 8001c4e:	469a      	mov	sl, r3
 8001c50:	40cc      	lsrs	r4, r1
 8001c52:	4090      	lsls	r0, r2
 8001c54:	4095      	lsls	r5, r2
 8001c56:	40cf      	lsrs	r7, r1
 8001c58:	44a2      	add	sl, r4
 8001c5a:	1e42      	subs	r2, r0, #1
 8001c5c:	4190      	sbcs	r0, r2
 8001c5e:	4653      	mov	r3, sl
 8001c60:	432f      	orrs	r7, r5
 8001c62:	4307      	orrs	r7, r0
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	003d      	movs	r5, r7
 8001c68:	4465      	add	r5, ip
 8001c6a:	4565      	cmp	r5, ip
 8001c6c:	4192      	sbcs	r2, r2
 8001c6e:	9b02      	ldr	r3, [sp, #8]
 8001c70:	4252      	negs	r2, r2
 8001c72:	464f      	mov	r7, r9
 8001c74:	18d4      	adds	r4, r2, r3
 8001c76:	e780      	b.n	8001b7a <__aeabi_dsub+0x1d2>
 8001c78:	4a23      	ldr	r2, [pc, #140]	@ (8001d08 <__aeabi_dsub+0x360>)
 8001c7a:	1c7d      	adds	r5, r7, #1
 8001c7c:	4215      	tst	r5, r2
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x2da>
 8001c80:	e0aa      	b.n	8001dd8 <__aeabi_dsub+0x430>
 8001c82:	4662      	mov	r2, ip
 8001c84:	0025      	movs	r5, r4
 8001c86:	9b02      	ldr	r3, [sp, #8]
 8001c88:	4305      	orrs	r5, r0
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_dsub+0x2ea>
 8001c90:	e0f5      	b.n	8001e7e <__aeabi_dsub+0x4d6>
 8001c92:	2d00      	cmp	r5, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x2f0>
 8001c96:	e16b      	b.n	8001f70 <__aeabi_dsub+0x5c8>
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x2f6>
 8001c9c:	e152      	b.n	8001f44 <__aeabi_dsub+0x59c>
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	1ac5      	subs	r5, r0, r3
 8001ca2:	9b02      	ldr	r3, [sp, #8]
 8001ca4:	1ae2      	subs	r2, r4, r3
 8001ca6:	42a8      	cmp	r0, r5
 8001ca8:	419b      	sbcs	r3, r3
 8001caa:	425b      	negs	r3, r3
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	021a      	lsls	r2, r3, #8
 8001cb0:	d400      	bmi.n	8001cb4 <__aeabi_dsub+0x30c>
 8001cb2:	e1d5      	b.n	8002060 <__aeabi_dsub+0x6b8>
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	1a1d      	subs	r5, r3, r0
 8001cb8:	45ac      	cmp	ip, r5
 8001cba:	4192      	sbcs	r2, r2
 8001cbc:	2601      	movs	r6, #1
 8001cbe:	9b02      	ldr	r3, [sp, #8]
 8001cc0:	4252      	negs	r2, r2
 8001cc2:	1b1c      	subs	r4, r3, r4
 8001cc4:	4688      	mov	r8, r1
 8001cc6:	1aa4      	subs	r4, r4, r2
 8001cc8:	400e      	ands	r6, r1
 8001cca:	e6f6      	b.n	8001aba <__aeabi_dsub+0x112>
 8001ccc:	4297      	cmp	r7, r2
 8001cce:	d03f      	beq.n	8001d50 <__aeabi_dsub+0x3a8>
 8001cd0:	4652      	mov	r2, sl
 8001cd2:	2501      	movs	r5, #1
 8001cd4:	2a38      	cmp	r2, #56	@ 0x38
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x332>
 8001cd8:	e74a      	b.n	8001b70 <__aeabi_dsub+0x1c8>
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	9b02      	ldr	r3, [sp, #8]
 8001cde:	0412      	lsls	r2, r2, #16
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	e72d      	b.n	8001b42 <__aeabi_dsub+0x19a>
 8001ce6:	003c      	movs	r4, r7
 8001ce8:	2500      	movs	r5, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	e705      	b.n	8001afa <__aeabi_dsub+0x152>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x350>
 8001cf6:	e6e2      	b.n	8001abe <__aeabi_dsub+0x116>
 8001cf8:	e06b      	b.n	8001dd2 <__aeabi_dsub+0x42a>
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	000007ff 	.word	0x000007ff
 8001d00:	ff7fffff 	.word	0xff7fffff
 8001d04:	fffff801 	.word	0xfffff801
 8001d08:	000007fe 	.word	0x000007fe
 8001d0c:	0028      	movs	r0, r5
 8001d0e:	f000 fa73 	bl	80021f8 <__clzsi2>
 8001d12:	0003      	movs	r3, r0
 8001d14:	3318      	adds	r3, #24
 8001d16:	2b1f      	cmp	r3, #31
 8001d18:	dc00      	bgt.n	8001d1c <__aeabi_dsub+0x374>
 8001d1a:	e6b4      	b.n	8001a86 <__aeabi_dsub+0xde>
 8001d1c:	002a      	movs	r2, r5
 8001d1e:	3808      	subs	r0, #8
 8001d20:	4082      	lsls	r2, r0
 8001d22:	429f      	cmp	r7, r3
 8001d24:	dd00      	ble.n	8001d28 <__aeabi_dsub+0x380>
 8001d26:	e0b9      	b.n	8001e9c <__aeabi_dsub+0x4f4>
 8001d28:	1bdb      	subs	r3, r3, r7
 8001d2a:	1c58      	adds	r0, r3, #1
 8001d2c:	281f      	cmp	r0, #31
 8001d2e:	dc00      	bgt.n	8001d32 <__aeabi_dsub+0x38a>
 8001d30:	e1a0      	b.n	8002074 <__aeabi_dsub+0x6cc>
 8001d32:	0015      	movs	r5, r2
 8001d34:	3b1f      	subs	r3, #31
 8001d36:	40dd      	lsrs	r5, r3
 8001d38:	2820      	cmp	r0, #32
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_dsub+0x3a0>
 8001d3c:	2340      	movs	r3, #64	@ 0x40
 8001d3e:	1a1b      	subs	r3, r3, r0
 8001d40:	409a      	lsls	r2, r3
 8001d42:	1e53      	subs	r3, r2, #1
 8001d44:	419a      	sbcs	r2, r3
 8001d46:	4315      	orrs	r5, r2
 8001d48:	2307      	movs	r3, #7
 8001d4a:	2700      	movs	r7, #0
 8001d4c:	402b      	ands	r3, r5
 8001d4e:	e7d0      	b.n	8001cf2 <__aeabi_dsub+0x34a>
 8001d50:	08c0      	lsrs	r0, r0, #3
 8001d52:	0762      	lsls	r2, r4, #29
 8001d54:	4302      	orrs	r2, r0
 8001d56:	08e4      	lsrs	r4, r4, #3
 8001d58:	e737      	b.n	8001bca <__aeabi_dsub+0x222>
 8001d5a:	08ea      	lsrs	r2, r5, #3
 8001d5c:	0763      	lsls	r3, r4, #29
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	4bd3      	ldr	r3, [pc, #844]	@ (80020b0 <__aeabi_dsub+0x708>)
 8001d62:	08e4      	lsrs	r4, r4, #3
 8001d64:	429f      	cmp	r7, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x3c2>
 8001d68:	e72f      	b.n	8001bca <__aeabi_dsub+0x222>
 8001d6a:	0324      	lsls	r4, r4, #12
 8001d6c:	0b25      	lsrs	r5, r4, #12
 8001d6e:	057c      	lsls	r4, r7, #21
 8001d70:	0d64      	lsrs	r4, r4, #21
 8001d72:	e6c2      	b.n	8001afa <__aeabi_dsub+0x152>
 8001d74:	46ca      	mov	sl, r9
 8001d76:	0022      	movs	r2, r4
 8001d78:	4302      	orrs	r2, r0
 8001d7a:	d158      	bne.n	8001e2e <__aeabi_dsub+0x486>
 8001d7c:	4663      	mov	r3, ip
 8001d7e:	000e      	movs	r6, r1
 8001d80:	9c02      	ldr	r4, [sp, #8]
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	9b03      	ldr	r3, [sp, #12]
 8001d86:	4657      	mov	r7, sl
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	e7e7      	b.n	8001d5c <__aeabi_dsub+0x3b4>
 8001d8c:	4cc9      	ldr	r4, [pc, #804]	@ (80020b4 <__aeabi_dsub+0x70c>)
 8001d8e:	1aff      	subs	r7, r7, r3
 8001d90:	4014      	ands	r4, r2
 8001d92:	e692      	b.n	8001aba <__aeabi_dsub+0x112>
 8001d94:	4dc8      	ldr	r5, [pc, #800]	@ (80020b8 <__aeabi_dsub+0x710>)
 8001d96:	1c7a      	adds	r2, r7, #1
 8001d98:	422a      	tst	r2, r5
 8001d9a:	d000      	beq.n	8001d9e <__aeabi_dsub+0x3f6>
 8001d9c:	e084      	b.n	8001ea8 <__aeabi_dsub+0x500>
 8001d9e:	0022      	movs	r2, r4
 8001da0:	4302      	orrs	r2, r0
 8001da2:	2f00      	cmp	r7, #0
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x400>
 8001da6:	e0ef      	b.n	8001f88 <__aeabi_dsub+0x5e0>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x406>
 8001dac:	e0e5      	b.n	8001f7a <__aeabi_dsub+0x5d2>
 8001dae:	4662      	mov	r2, ip
 8001db0:	9902      	ldr	r1, [sp, #8]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x410>
 8001db6:	e0c5      	b.n	8001f44 <__aeabi_dsub+0x59c>
 8001db8:	4663      	mov	r3, ip
 8001dba:	18c5      	adds	r5, r0, r3
 8001dbc:	468c      	mov	ip, r1
 8001dbe:	4285      	cmp	r5, r0
 8001dc0:	4180      	sbcs	r0, r0
 8001dc2:	4464      	add	r4, ip
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	1824      	adds	r4, r4, r0
 8001dc8:	0223      	lsls	r3, r4, #8
 8001dca:	d502      	bpl.n	8001dd2 <__aeabi_dsub+0x42a>
 8001dcc:	4bb9      	ldr	r3, [pc, #740]	@ (80020b4 <__aeabi_dsub+0x70c>)
 8001dce:	3701      	adds	r7, #1
 8001dd0:	401c      	ands	r4, r3
 8001dd2:	46ba      	mov	sl, r7
 8001dd4:	9503      	str	r5, [sp, #12]
 8001dd6:	e7d5      	b.n	8001d84 <__aeabi_dsub+0x3dc>
 8001dd8:	4662      	mov	r2, ip
 8001dda:	1a85      	subs	r5, r0, r2
 8001ddc:	42a8      	cmp	r0, r5
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	4252      	negs	r2, r2
 8001de2:	4691      	mov	r9, r2
 8001de4:	9b02      	ldr	r3, [sp, #8]
 8001de6:	1ae3      	subs	r3, r4, r3
 8001de8:	001a      	movs	r2, r3
 8001dea:	464b      	mov	r3, r9
 8001dec:	1ad2      	subs	r2, r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	4691      	mov	r9, r2
 8001df2:	021a      	lsls	r2, r3, #8
 8001df4:	d46c      	bmi.n	8001ed0 <__aeabi_dsub+0x528>
 8001df6:	464a      	mov	r2, r9
 8001df8:	464c      	mov	r4, r9
 8001dfa:	432a      	orrs	r2, r5
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x458>
 8001dfe:	e63a      	b.n	8001a76 <__aeabi_dsub+0xce>
 8001e00:	2600      	movs	r6, #0
 8001e02:	2400      	movs	r4, #0
 8001e04:	2500      	movs	r5, #0
 8001e06:	e678      	b.n	8001afa <__aeabi_dsub+0x152>
 8001e08:	9902      	ldr	r1, [sp, #8]
 8001e0a:	4653      	mov	r3, sl
 8001e0c:	000d      	movs	r5, r1
 8001e0e:	3a20      	subs	r2, #32
 8001e10:	40d5      	lsrs	r5, r2
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d006      	beq.n	8001e24 <__aeabi_dsub+0x47c>
 8001e16:	2240      	movs	r2, #64	@ 0x40
 8001e18:	1ad2      	subs	r2, r2, r3
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	4662      	mov	r2, ip
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4693      	mov	fp, r2
 8001e24:	465b      	mov	r3, fp
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	4193      	sbcs	r3, r2
 8001e2a:	431d      	orrs	r5, r3
 8001e2c:	e619      	b.n	8001a62 <__aeabi_dsub+0xba>
 8001e2e:	4653      	mov	r3, sl
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x490>
 8001e36:	e0c6      	b.n	8001fc6 <__aeabi_dsub+0x61e>
 8001e38:	4e9d      	ldr	r6, [pc, #628]	@ (80020b0 <__aeabi_dsub+0x708>)
 8001e3a:	45b2      	cmp	sl, r6
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x498>
 8001e3e:	e6bd      	b.n	8001bbc <__aeabi_dsub+0x214>
 8001e40:	4688      	mov	r8, r1
 8001e42:	000e      	movs	r6, r1
 8001e44:	2501      	movs	r5, #1
 8001e46:	2a38      	cmp	r2, #56	@ 0x38
 8001e48:	dc10      	bgt.n	8001e6c <__aeabi_dsub+0x4c4>
 8001e4a:	2a1f      	cmp	r2, #31
 8001e4c:	dc7f      	bgt.n	8001f4e <__aeabi_dsub+0x5a6>
 8001e4e:	2120      	movs	r1, #32
 8001e50:	0025      	movs	r5, r4
 8001e52:	1a89      	subs	r1, r1, r2
 8001e54:	0007      	movs	r7, r0
 8001e56:	4088      	lsls	r0, r1
 8001e58:	408d      	lsls	r5, r1
 8001e5a:	40d7      	lsrs	r7, r2
 8001e5c:	40d4      	lsrs	r4, r2
 8001e5e:	1e41      	subs	r1, r0, #1
 8001e60:	4188      	sbcs	r0, r1
 8001e62:	9b02      	ldr	r3, [sp, #8]
 8001e64:	433d      	orrs	r5, r7
 8001e66:	1b1b      	subs	r3, r3, r4
 8001e68:	4305      	orrs	r5, r0
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	4662      	mov	r2, ip
 8001e6e:	1b55      	subs	r5, r2, r5
 8001e70:	45ac      	cmp	ip, r5
 8001e72:	4192      	sbcs	r2, r2
 8001e74:	9b02      	ldr	r3, [sp, #8]
 8001e76:	4252      	negs	r2, r2
 8001e78:	464f      	mov	r7, r9
 8001e7a:	1a9c      	subs	r4, r3, r2
 8001e7c:	e5f6      	b.n	8001a6c <__aeabi_dsub+0xc4>
 8001e7e:	2d00      	cmp	r5, #0
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x4dc>
 8001e82:	e0b7      	b.n	8001ff4 <__aeabi_dsub+0x64c>
 8001e84:	2a00      	cmp	r2, #0
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x4e2>
 8001e88:	e0f0      	b.n	800206c <__aeabi_dsub+0x6c4>
 8001e8a:	2601      	movs	r6, #1
 8001e8c:	400e      	ands	r6, r1
 8001e8e:	4663      	mov	r3, ip
 8001e90:	9802      	ldr	r0, [sp, #8]
 8001e92:	08d9      	lsrs	r1, r3, #3
 8001e94:	0742      	lsls	r2, r0, #29
 8001e96:	430a      	orrs	r2, r1
 8001e98:	08c4      	lsrs	r4, r0, #3
 8001e9a:	e696      	b.n	8001bca <__aeabi_dsub+0x222>
 8001e9c:	4c85      	ldr	r4, [pc, #532]	@ (80020b4 <__aeabi_dsub+0x70c>)
 8001e9e:	1aff      	subs	r7, r7, r3
 8001ea0:	4014      	ands	r4, r2
 8001ea2:	0762      	lsls	r2, r4, #29
 8001ea4:	08e4      	lsrs	r4, r4, #3
 8001ea6:	e760      	b.n	8001d6a <__aeabi_dsub+0x3c2>
 8001ea8:	4981      	ldr	r1, [pc, #516]	@ (80020b0 <__aeabi_dsub+0x708>)
 8001eaa:	428a      	cmp	r2, r1
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x508>
 8001eae:	e0c9      	b.n	8002044 <__aeabi_dsub+0x69c>
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	18c1      	adds	r1, r0, r3
 8001eb4:	4281      	cmp	r1, r0
 8001eb6:	4180      	sbcs	r0, r0
 8001eb8:	9b02      	ldr	r3, [sp, #8]
 8001eba:	4240      	negs	r0, r0
 8001ebc:	18e3      	adds	r3, r4, r3
 8001ebe:	181b      	adds	r3, r3, r0
 8001ec0:	07dd      	lsls	r5, r3, #31
 8001ec2:	085c      	lsrs	r4, r3, #1
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	0849      	lsrs	r1, r1, #1
 8001ec8:	430d      	orrs	r5, r1
 8001eca:	0017      	movs	r7, r2
 8001ecc:	402b      	ands	r3, r5
 8001ece:	e710      	b.n	8001cf2 <__aeabi_dsub+0x34a>
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	1a1d      	subs	r5, r3, r0
 8001ed4:	45ac      	cmp	ip, r5
 8001ed6:	4192      	sbcs	r2, r2
 8001ed8:	2601      	movs	r6, #1
 8001eda:	9b02      	ldr	r3, [sp, #8]
 8001edc:	4252      	negs	r2, r2
 8001ede:	1b1c      	subs	r4, r3, r4
 8001ee0:	4688      	mov	r8, r1
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	400e      	ands	r6, r1
 8001ee6:	e5c6      	b.n	8001a76 <__aeabi_dsub+0xce>
 8001ee8:	4663      	mov	r3, ip
 8001eea:	18c5      	adds	r5, r0, r3
 8001eec:	9b02      	ldr	r3, [sp, #8]
 8001eee:	4285      	cmp	r5, r0
 8001ef0:	4180      	sbcs	r0, r0
 8001ef2:	469c      	mov	ip, r3
 8001ef4:	4240      	negs	r0, r0
 8001ef6:	4464      	add	r4, ip
 8001ef8:	1824      	adds	r4, r4, r0
 8001efa:	2701      	movs	r7, #1
 8001efc:	0223      	lsls	r3, r4, #8
 8001efe:	d400      	bmi.n	8001f02 <__aeabi_dsub+0x55a>
 8001f00:	e6f5      	b.n	8001cee <__aeabi_dsub+0x346>
 8001f02:	2702      	movs	r7, #2
 8001f04:	e641      	b.n	8001b8a <__aeabi_dsub+0x1e2>
 8001f06:	4663      	mov	r3, ip
 8001f08:	1ac5      	subs	r5, r0, r3
 8001f0a:	42a8      	cmp	r0, r5
 8001f0c:	4180      	sbcs	r0, r0
 8001f0e:	9b02      	ldr	r3, [sp, #8]
 8001f10:	4240      	negs	r0, r0
 8001f12:	1ae4      	subs	r4, r4, r3
 8001f14:	2701      	movs	r7, #1
 8001f16:	1a24      	subs	r4, r4, r0
 8001f18:	e5a8      	b.n	8001a6c <__aeabi_dsub+0xc4>
 8001f1a:	9d02      	ldr	r5, [sp, #8]
 8001f1c:	4652      	mov	r2, sl
 8001f1e:	002b      	movs	r3, r5
 8001f20:	3a20      	subs	r2, #32
 8001f22:	40d3      	lsrs	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	4653      	mov	r3, sl
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d006      	beq.n	8001f3a <__aeabi_dsub+0x592>
 8001f2c:	2240      	movs	r2, #64	@ 0x40
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	002b      	movs	r3, r5
 8001f32:	4093      	lsls	r3, r2
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	4693      	mov	fp, r2
 8001f3a:	465d      	mov	r5, fp
 8001f3c:	1e6b      	subs	r3, r5, #1
 8001f3e:	419d      	sbcs	r5, r3
 8001f40:	430d      	orrs	r5, r1
 8001f42:	e615      	b.n	8001b70 <__aeabi_dsub+0x1c8>
 8001f44:	0762      	lsls	r2, r4, #29
 8001f46:	08c0      	lsrs	r0, r0, #3
 8001f48:	4302      	orrs	r2, r0
 8001f4a:	08e4      	lsrs	r4, r4, #3
 8001f4c:	e70d      	b.n	8001d6a <__aeabi_dsub+0x3c2>
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0027      	movs	r7, r4
 8001f52:	3920      	subs	r1, #32
 8001f54:	40cf      	lsrs	r7, r1
 8001f56:	2a20      	cmp	r2, #32
 8001f58:	d005      	beq.n	8001f66 <__aeabi_dsub+0x5be>
 8001f5a:	2140      	movs	r1, #64	@ 0x40
 8001f5c:	1a8a      	subs	r2, r1, r2
 8001f5e:	4094      	lsls	r4, r2
 8001f60:	0025      	movs	r5, r4
 8001f62:	4305      	orrs	r5, r0
 8001f64:	9503      	str	r5, [sp, #12]
 8001f66:	9d03      	ldr	r5, [sp, #12]
 8001f68:	1e6a      	subs	r2, r5, #1
 8001f6a:	4195      	sbcs	r5, r2
 8001f6c:	433d      	orrs	r5, r7
 8001f6e:	e77d      	b.n	8001e6c <__aeabi_dsub+0x4c4>
 8001f70:	2a00      	cmp	r2, #0
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dsub+0x5ce>
 8001f74:	e744      	b.n	8001e00 <__aeabi_dsub+0x458>
 8001f76:	2601      	movs	r6, #1
 8001f78:	400e      	ands	r6, r1
 8001f7a:	4663      	mov	r3, ip
 8001f7c:	08d9      	lsrs	r1, r3, #3
 8001f7e:	9b02      	ldr	r3, [sp, #8]
 8001f80:	075a      	lsls	r2, r3, #29
 8001f82:	430a      	orrs	r2, r1
 8001f84:	08dc      	lsrs	r4, r3, #3
 8001f86:	e6f0      	b.n	8001d6a <__aeabi_dsub+0x3c2>
 8001f88:	2a00      	cmp	r2, #0
 8001f8a:	d028      	beq.n	8001fde <__aeabi_dsub+0x636>
 8001f8c:	4662      	mov	r2, ip
 8001f8e:	9f02      	ldr	r7, [sp, #8]
 8001f90:	08c0      	lsrs	r0, r0, #3
 8001f92:	433a      	orrs	r2, r7
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x5f0>
 8001f96:	e6dc      	b.n	8001d52 <__aeabi_dsub+0x3aa>
 8001f98:	0762      	lsls	r2, r4, #29
 8001f9a:	4310      	orrs	r0, r2
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	08e4      	lsrs	r4, r4, #3
 8001fa0:	0312      	lsls	r2, r2, #12
 8001fa2:	4214      	tst	r4, r2
 8001fa4:	d009      	beq.n	8001fba <__aeabi_dsub+0x612>
 8001fa6:	08fd      	lsrs	r5, r7, #3
 8001fa8:	4215      	tst	r5, r2
 8001faa:	d106      	bne.n	8001fba <__aeabi_dsub+0x612>
 8001fac:	4663      	mov	r3, ip
 8001fae:	2601      	movs	r6, #1
 8001fb0:	002c      	movs	r4, r5
 8001fb2:	08d8      	lsrs	r0, r3, #3
 8001fb4:	077b      	lsls	r3, r7, #29
 8001fb6:	4318      	orrs	r0, r3
 8001fb8:	400e      	ands	r6, r1
 8001fba:	0f42      	lsrs	r2, r0, #29
 8001fbc:	00c0      	lsls	r0, r0, #3
 8001fbe:	08c0      	lsrs	r0, r0, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4302      	orrs	r2, r0
 8001fc4:	e601      	b.n	8001bca <__aeabi_dsub+0x222>
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	1a1d      	subs	r5, r3, r0
 8001fca:	45ac      	cmp	ip, r5
 8001fcc:	4192      	sbcs	r2, r2
 8001fce:	9b02      	ldr	r3, [sp, #8]
 8001fd0:	4252      	negs	r2, r2
 8001fd2:	1b1c      	subs	r4, r3, r4
 8001fd4:	000e      	movs	r6, r1
 8001fd6:	4688      	mov	r8, r1
 8001fd8:	2701      	movs	r7, #1
 8001fda:	1aa4      	subs	r4, r4, r2
 8001fdc:	e546      	b.n	8001a6c <__aeabi_dsub+0xc4>
 8001fde:	4663      	mov	r3, ip
 8001fe0:	08d9      	lsrs	r1, r3, #3
 8001fe2:	9b02      	ldr	r3, [sp, #8]
 8001fe4:	075a      	lsls	r2, r3, #29
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	08dc      	lsrs	r4, r3, #3
 8001fea:	e5ee      	b.n	8001bca <__aeabi_dsub+0x222>
 8001fec:	4663      	mov	r3, ip
 8001fee:	9c02      	ldr	r4, [sp, #8]
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	e6c7      	b.n	8001d84 <__aeabi_dsub+0x3dc>
 8001ff4:	08c0      	lsrs	r0, r0, #3
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x654>
 8001ffa:	e6aa      	b.n	8001d52 <__aeabi_dsub+0x3aa>
 8001ffc:	0762      	lsls	r2, r4, #29
 8001ffe:	4310      	orrs	r0, r2
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	08e4      	lsrs	r4, r4, #3
 8002004:	0312      	lsls	r2, r2, #12
 8002006:	4214      	tst	r4, r2
 8002008:	d0d7      	beq.n	8001fba <__aeabi_dsub+0x612>
 800200a:	9f02      	ldr	r7, [sp, #8]
 800200c:	08fd      	lsrs	r5, r7, #3
 800200e:	4215      	tst	r5, r2
 8002010:	d1d3      	bne.n	8001fba <__aeabi_dsub+0x612>
 8002012:	4663      	mov	r3, ip
 8002014:	2601      	movs	r6, #1
 8002016:	08d8      	lsrs	r0, r3, #3
 8002018:	077b      	lsls	r3, r7, #29
 800201a:	002c      	movs	r4, r5
 800201c:	4318      	orrs	r0, r3
 800201e:	400e      	ands	r6, r1
 8002020:	e7cb      	b.n	8001fba <__aeabi_dsub+0x612>
 8002022:	000a      	movs	r2, r1
 8002024:	0027      	movs	r7, r4
 8002026:	3a20      	subs	r2, #32
 8002028:	40d7      	lsrs	r7, r2
 800202a:	2920      	cmp	r1, #32
 800202c:	d005      	beq.n	800203a <__aeabi_dsub+0x692>
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	1a52      	subs	r2, r2, r1
 8002032:	4094      	lsls	r4, r2
 8002034:	0025      	movs	r5, r4
 8002036:	4305      	orrs	r5, r0
 8002038:	9503      	str	r5, [sp, #12]
 800203a:	9d03      	ldr	r5, [sp, #12]
 800203c:	1e6a      	subs	r2, r5, #1
 800203e:	4195      	sbcs	r5, r2
 8002040:	432f      	orrs	r7, r5
 8002042:	e610      	b.n	8001c66 <__aeabi_dsub+0x2be>
 8002044:	0014      	movs	r4, r2
 8002046:	2500      	movs	r5, #0
 8002048:	2200      	movs	r2, #0
 800204a:	e556      	b.n	8001afa <__aeabi_dsub+0x152>
 800204c:	9b02      	ldr	r3, [sp, #8]
 800204e:	4460      	add	r0, ip
 8002050:	4699      	mov	r9, r3
 8002052:	4560      	cmp	r0, ip
 8002054:	4192      	sbcs	r2, r2
 8002056:	444c      	add	r4, r9
 8002058:	4252      	negs	r2, r2
 800205a:	0005      	movs	r5, r0
 800205c:	18a4      	adds	r4, r4, r2
 800205e:	e74c      	b.n	8001efa <__aeabi_dsub+0x552>
 8002060:	001a      	movs	r2, r3
 8002062:	001c      	movs	r4, r3
 8002064:	432a      	orrs	r2, r5
 8002066:	d000      	beq.n	800206a <__aeabi_dsub+0x6c2>
 8002068:	e6b3      	b.n	8001dd2 <__aeabi_dsub+0x42a>
 800206a:	e6c9      	b.n	8001e00 <__aeabi_dsub+0x458>
 800206c:	2480      	movs	r4, #128	@ 0x80
 800206e:	2600      	movs	r6, #0
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	e5ae      	b.n	8001bd2 <__aeabi_dsub+0x22a>
 8002074:	2120      	movs	r1, #32
 8002076:	2500      	movs	r5, #0
 8002078:	1a09      	subs	r1, r1, r0
 800207a:	e517      	b.n	8001aac <__aeabi_dsub+0x104>
 800207c:	2200      	movs	r2, #0
 800207e:	2500      	movs	r5, #0
 8002080:	4c0b      	ldr	r4, [pc, #44]	@ (80020b0 <__aeabi_dsub+0x708>)
 8002082:	e53a      	b.n	8001afa <__aeabi_dsub+0x152>
 8002084:	2d00      	cmp	r5, #0
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x6e2>
 8002088:	e5f6      	b.n	8001c78 <__aeabi_dsub+0x2d0>
 800208a:	464b      	mov	r3, r9
 800208c:	1bda      	subs	r2, r3, r7
 800208e:	4692      	mov	sl, r2
 8002090:	2f00      	cmp	r7, #0
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x6ee>
 8002094:	e66f      	b.n	8001d76 <__aeabi_dsub+0x3ce>
 8002096:	2a38      	cmp	r2, #56	@ 0x38
 8002098:	dc05      	bgt.n	80020a6 <__aeabi_dsub+0x6fe>
 800209a:	2680      	movs	r6, #128	@ 0x80
 800209c:	0436      	lsls	r6, r6, #16
 800209e:	4334      	orrs	r4, r6
 80020a0:	4688      	mov	r8, r1
 80020a2:	000e      	movs	r6, r1
 80020a4:	e6d1      	b.n	8001e4a <__aeabi_dsub+0x4a2>
 80020a6:	4688      	mov	r8, r1
 80020a8:	000e      	movs	r6, r1
 80020aa:	2501      	movs	r5, #1
 80020ac:	e6de      	b.n	8001e6c <__aeabi_dsub+0x4c4>
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	000007ff 	.word	0x000007ff
 80020b4:	ff7fffff 	.word	0xff7fffff
 80020b8:	000007fe 	.word	0x000007fe
 80020bc:	2d00      	cmp	r5, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_dsub+0x71a>
 80020c0:	e668      	b.n	8001d94 <__aeabi_dsub+0x3ec>
 80020c2:	464b      	mov	r3, r9
 80020c4:	1bd9      	subs	r1, r3, r7
 80020c6:	2f00      	cmp	r7, #0
 80020c8:	d101      	bne.n	80020ce <__aeabi_dsub+0x726>
 80020ca:	468a      	mov	sl, r1
 80020cc:	e5a7      	b.n	8001c1e <__aeabi_dsub+0x276>
 80020ce:	2701      	movs	r7, #1
 80020d0:	2938      	cmp	r1, #56	@ 0x38
 80020d2:	dd00      	ble.n	80020d6 <__aeabi_dsub+0x72e>
 80020d4:	e5c7      	b.n	8001c66 <__aeabi_dsub+0x2be>
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0412      	lsls	r2, r2, #16
 80020da:	4314      	orrs	r4, r2
 80020dc:	e5af      	b.n	8001c3e <__aeabi_dsub+0x296>
 80020de:	46c0      	nop			@ (mov r8, r8)

080020e0 <__aeabi_dcmpun>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46c6      	mov	lr, r8
 80020e4:	031e      	lsls	r6, r3, #12
 80020e6:	0b36      	lsrs	r6, r6, #12
 80020e8:	46b0      	mov	r8, r6
 80020ea:	4e0d      	ldr	r6, [pc, #52]	@ (8002120 <__aeabi_dcmpun+0x40>)
 80020ec:	030c      	lsls	r4, r1, #12
 80020ee:	004d      	lsls	r5, r1, #1
 80020f0:	005f      	lsls	r7, r3, #1
 80020f2:	b500      	push	{lr}
 80020f4:	0b24      	lsrs	r4, r4, #12
 80020f6:	0d6d      	lsrs	r5, r5, #21
 80020f8:	0d7f      	lsrs	r7, r7, #21
 80020fa:	42b5      	cmp	r5, r6
 80020fc:	d00b      	beq.n	8002116 <__aeabi_dcmpun+0x36>
 80020fe:	4908      	ldr	r1, [pc, #32]	@ (8002120 <__aeabi_dcmpun+0x40>)
 8002100:	2000      	movs	r0, #0
 8002102:	428f      	cmp	r7, r1
 8002104:	d104      	bne.n	8002110 <__aeabi_dcmpun+0x30>
 8002106:	4646      	mov	r6, r8
 8002108:	4316      	orrs	r6, r2
 800210a:	0030      	movs	r0, r6
 800210c:	1e43      	subs	r3, r0, #1
 800210e:	4198      	sbcs	r0, r3
 8002110:	bc80      	pop	{r7}
 8002112:	46b8      	mov	r8, r7
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	4304      	orrs	r4, r0
 8002118:	2001      	movs	r0, #1
 800211a:	2c00      	cmp	r4, #0
 800211c:	d1f8      	bne.n	8002110 <__aeabi_dcmpun+0x30>
 800211e:	e7ee      	b.n	80020fe <__aeabi_dcmpun+0x1e>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__aeabi_d2iz>:
 8002124:	000b      	movs	r3, r1
 8002126:	0002      	movs	r2, r0
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	4d16      	ldr	r5, [pc, #88]	@ (8002184 <__aeabi_d2iz+0x60>)
 800212c:	030c      	lsls	r4, r1, #12
 800212e:	b082      	sub	sp, #8
 8002130:	0049      	lsls	r1, r1, #1
 8002132:	2000      	movs	r0, #0
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	0b24      	lsrs	r4, r4, #12
 800213a:	0d49      	lsrs	r1, r1, #21
 800213c:	0fde      	lsrs	r6, r3, #31
 800213e:	42a9      	cmp	r1, r5
 8002140:	dd04      	ble.n	800214c <__aeabi_d2iz+0x28>
 8002142:	4811      	ldr	r0, [pc, #68]	@ (8002188 <__aeabi_d2iz+0x64>)
 8002144:	4281      	cmp	r1, r0
 8002146:	dd03      	ble.n	8002150 <__aeabi_d2iz+0x2c>
 8002148:	4b10      	ldr	r3, [pc, #64]	@ (800218c <__aeabi_d2iz+0x68>)
 800214a:	18f0      	adds	r0, r6, r3
 800214c:	b002      	add	sp, #8
 800214e:	bd70      	pop	{r4, r5, r6, pc}
 8002150:	2080      	movs	r0, #128	@ 0x80
 8002152:	0340      	lsls	r0, r0, #13
 8002154:	4320      	orrs	r0, r4
 8002156:	4c0e      	ldr	r4, [pc, #56]	@ (8002190 <__aeabi_d2iz+0x6c>)
 8002158:	1a64      	subs	r4, r4, r1
 800215a:	2c1f      	cmp	r4, #31
 800215c:	dd08      	ble.n	8002170 <__aeabi_d2iz+0x4c>
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <__aeabi_d2iz+0x70>)
 8002160:	1a5b      	subs	r3, r3, r1
 8002162:	40d8      	lsrs	r0, r3
 8002164:	0003      	movs	r3, r0
 8002166:	4258      	negs	r0, r3
 8002168:	2e00      	cmp	r6, #0
 800216a:	d1ef      	bne.n	800214c <__aeabi_d2iz+0x28>
 800216c:	0018      	movs	r0, r3
 800216e:	e7ed      	b.n	800214c <__aeabi_d2iz+0x28>
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <__aeabi_d2iz+0x74>)
 8002172:	9a00      	ldr	r2, [sp, #0]
 8002174:	469c      	mov	ip, r3
 8002176:	0003      	movs	r3, r0
 8002178:	4461      	add	r1, ip
 800217a:	408b      	lsls	r3, r1
 800217c:	40e2      	lsrs	r2, r4
 800217e:	4313      	orrs	r3, r2
 8002180:	e7f1      	b.n	8002166 <__aeabi_d2iz+0x42>
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f824 	bl	80021f8 <__clzsi2>
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <__aeabi_i2d+0x58>)
 80021b2:	1a1b      	subs	r3, r3, r0
 80021b4:	055b      	lsls	r3, r3, #21
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	280a      	cmp	r0, #10
 80021ba:	dc14      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021bc:	0002      	movs	r2, r0
 80021be:	002e      	movs	r6, r5
 80021c0:	3215      	adds	r2, #21
 80021c2:	4096      	lsls	r6, r2
 80021c4:	220b      	movs	r2, #11
 80021c6:	1a12      	subs	r2, r2, r0
 80021c8:	40d5      	lsrs	r5, r2
 80021ca:	032d      	lsls	r5, r5, #12
 80021cc:	0b2d      	lsrs	r5, r5, #12
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	032d      	lsls	r5, r5, #12
 80021ec:	2600      	movs	r6, #0
 80021ee:	0b2d      	lsrs	r5, r5, #12
 80021f0:	e7f2      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	0000041e 	.word	0x0000041e

080021f8 <__clzsi2>:
 80021f8:	211c      	movs	r1, #28
 80021fa:	2301      	movs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	4298      	cmp	r0, r3
 8002200:	d301      	bcc.n	8002206 <__clzsi2+0xe>
 8002202:	0c00      	lsrs	r0, r0, #16
 8002204:	3910      	subs	r1, #16
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	4298      	cmp	r0, r3
 800220a:	d301      	bcc.n	8002210 <__clzsi2+0x18>
 800220c:	0a00      	lsrs	r0, r0, #8
 800220e:	3908      	subs	r1, #8
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	4298      	cmp	r0, r3
 8002214:	d301      	bcc.n	800221a <__clzsi2+0x22>
 8002216:	0900      	lsrs	r0, r0, #4
 8002218:	3904      	subs	r1, #4
 800221a:	a202      	add	r2, pc, #8	@ (adr r2, 8002224 <__clzsi2+0x2c>)
 800221c:	5c10      	ldrb	r0, [r2, r0]
 800221e:	1840      	adds	r0, r0, r1
 8002220:	4770      	bx	lr
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	02020304 	.word	0x02020304
 8002228:	01010101 	.word	0x01010101
	...

08002234 <test_leds>:
#define TOGGLE(PIN) HAL_GPIO_TogglePin(PIN ## _GPIO_Port, PIN ## _Pin)
#define SHORT_TIMEOUT 10

void test_leds(void);

void test_leds(){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	ON(RED);
 8002238:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <test_leds+0xc0>)
 800223a:	2201      	movs	r2, #1
 800223c:	2108      	movs	r1, #8
 800223e:	0018      	movs	r0, r3
 8002240:	f002 fb92 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f001 f831 	bl	80032ac <HAL_Delay>
	ON(GREEN);
 800224a:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <test_leds+0xc0>)
 800224c:	2201      	movs	r2, #1
 800224e:	2110      	movs	r1, #16
 8002250:	0018      	movs	r0, r3
 8002252:	f002 fb89 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002256:	200a      	movs	r0, #10
 8002258:	f001 f828 	bl	80032ac <HAL_Delay>
	ON(BLUE1);
 800225c:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <test_leds+0xc0>)
 800225e:	2201      	movs	r2, #1
 8002260:	2120      	movs	r1, #32
 8002262:	0018      	movs	r0, r3
 8002264:	f002 fb80 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002268:	200a      	movs	r0, #10
 800226a:	f001 f81f 	bl	80032ac <HAL_Delay>
	ON(BLUE2);
 800226e:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <test_leds+0xc0>)
 8002270:	2201      	movs	r2, #1
 8002272:	2140      	movs	r1, #64	@ 0x40
 8002274:	0018      	movs	r0, r3
 8002276:	f002 fb77 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800227a:	200a      	movs	r0, #10
 800227c:	f001 f816 	bl	80032ac <HAL_Delay>
	ON(BLUE3);
 8002280:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <test_leds+0xc0>)
 8002282:	2201      	movs	r2, #1
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	0018      	movs	r0, r3
 8002288:	f002 fb6e 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800228c:	200a      	movs	r0, #10
 800228e:	f001 f80d 	bl	80032ac <HAL_Delay>
	OFF(RED);
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <test_leds+0xc0>)
 8002294:	2200      	movs	r2, #0
 8002296:	2108      	movs	r1, #8
 8002298:	0018      	movs	r0, r3
 800229a:	f002 fb65 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800229e:	200a      	movs	r0, #10
 80022a0:	f001 f804 	bl	80032ac <HAL_Delay>
	OFF(GREEN);
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <test_leds+0xc0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	2110      	movs	r1, #16
 80022aa:	0018      	movs	r0, r3
 80022ac:	f002 fb5c 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022b0:	200a      	movs	r0, #10
 80022b2:	f000 fffb 	bl	80032ac <HAL_Delay>
	OFF(BLUE1);
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <test_leds+0xc0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	2120      	movs	r1, #32
 80022bc:	0018      	movs	r0, r3
 80022be:	f002 fb53 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022c2:	200a      	movs	r0, #10
 80022c4:	f000 fff2 	bl	80032ac <HAL_Delay>
	OFF(BLUE2);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <test_leds+0xc0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	2140      	movs	r1, #64	@ 0x40
 80022ce:	0018      	movs	r0, r3
 80022d0:	f002 fb4a 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022d4:	200a      	movs	r0, #10
 80022d6:	f000 ffe9 	bl	80032ac <HAL_Delay>
	OFF(BLUE3);
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <test_leds+0xc0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	0018      	movs	r0, r3
 80022e2:	f002 fb41 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022e6:	200a      	movs	r0, #10
 80022e8:	f000 ffe0 	bl	80032ac <HAL_Delay>

}
 80022ec:	46c0      	nop			@ (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	50000400 	.word	0x50000400

080022f8 <custom_printf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void custom_printf(UART_HandleTypeDef *huart, const char *format, ...) {
 80022f8:	b40e      	push	{r1, r2, r3}
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b0c4      	sub	sp, #272	@ 0x110
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, format);
 8002302:	2390      	movs	r3, #144	@ 0x90
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2286      	movs	r2, #134	@ 0x86
 800230a:	0052      	lsls	r2, r2, #1
 800230c:	18b9      	adds	r1, r7, r2
 800230e:	600b      	str	r3, [r1, #0]

    char buffer[256]; // Adjust buffer size as needed

    // Format the string
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002310:	18bb      	adds	r3, r7, r2
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	228e      	movs	r2, #142	@ 0x8e
 8002316:	0052      	lsls	r2, r2, #1
 8002318:	18ba      	adds	r2, r7, r2
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0049      	lsls	r1, r1, #1
 8002320:	240c      	movs	r4, #12
 8002322:	1938      	adds	r0, r7, r4
 8002324:	f005 f856 	bl	80073d4 <vsniprintf>

    // Send the formatted string via UART
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002328:	193b      	adds	r3, r7, r4
 800232a:	0018      	movs	r0, r3
 800232c:	f7fd fee8 	bl	8000100 <strlen>
 8002330:	0003      	movs	r3, r0
 8002332:	b29a      	uxth	r2, r3
 8002334:	2301      	movs	r3, #1
 8002336:	425b      	negs	r3, r3
 8002338:	1939      	adds	r1, r7, r4
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f003 feca 	bl	80060d4 <HAL_UART_Transmit>

    va_end(args);
}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b044      	add	sp, #272	@ 0x110
 8002346:	bc90      	pop	{r4, r7}
 8002348:	bc08      	pop	{r3}
 800234a:	b003      	add	sp, #12
 800234c:	4718      	bx	r3
	...

08002350 <calctemp>:


void calctemp() {
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	b08b      	sub	sp, #44	@ 0x2c
 8002354:	af00      	add	r7, sp, #0
	// gets °C data from raw adc data
	for (int i = 0; i < NUMSENSORS; i++) {
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	e0a2      	b.n	80024a2 <calctemp+0x152>
		uint16_t value = adc_values[i] - AD_CORRECTION;
 800235c:	4b55      	ldr	r3, [pc, #340]	@ (80024b4 <calctemp+0x164>)
 800235e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	58d2      	ldr	r2, [r2, r3]
 8002364:	2616      	movs	r6, #22
 8002366:	19bb      	adds	r3, r7, r6
 8002368:	801a      	strh	r2, [r3, #0]
		double voltage = VREF / (double) 4096 * (value-AD_OFFSET);
 800236a:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <calctemp+0x168>)
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	4b52      	ldr	r3, [pc, #328]	@ (80024bc <calctemp+0x16c>)
 8002374:	f7fe fc0c 	bl	8000b90 <__aeabi_ddiv>
 8002378:	0002      	movs	r2, r0
 800237a:	000b      	movs	r3, r1
 800237c:	0014      	movs	r4, r2
 800237e:	001d      	movs	r5, r3
 8002380:	19bb      	adds	r3, r7, r6
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3b33      	subs	r3, #51	@ 0x33
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ff08 	bl	800219c <__aeabi_i2d>
 800238c:	0002      	movs	r2, r0
 800238e:	000b      	movs	r3, r1
 8002390:	0020      	movs	r0, r4
 8002392:	0029      	movs	r1, r5
 8002394:	f7ff f840 	bl	8001418 <__aeabi_dmul>
 8002398:	0002      	movs	r2, r0
 800239a:	000b      	movs	r3, r1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	60fb      	str	r3, [r7, #12]
		custom_printf(&huart3, "%03d,",adc_values[i]);
 80023a0:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <calctemp+0x164>)
 80023a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	58d2      	ldr	r2, [r2, r3]
 80023a8:	4945      	ldr	r1, [pc, #276]	@ (80024c0 <calctemp+0x170>)
 80023aa:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <calctemp+0x174>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff ffa3 	bl	80022f8 <custom_printf>
		double ntc_resistance = voltage / (VREF - voltage) * DIVIDER_RESISTANCE;
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <calctemp+0x168>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f7ff faf4 	bl	80019a8 <__aeabi_dsub>
 80023c0:	0002      	movs	r2, r0
 80023c2:	000b      	movs	r3, r1
 80023c4:	68b8      	ldr	r0, [r7, #8]
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	f7fe fbe2 	bl	8000b90 <__aeabi_ddiv>
 80023cc:	0002      	movs	r2, r0
 80023ce:	000b      	movs	r3, r1
 80023d0:	0010      	movs	r0, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <calctemp+0x178>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f7ff f81d 	bl	8001418 <__aeabi_dmul>
 80023de:	0002      	movs	r2, r0
 80023e0:	000b      	movs	r3, r1
 80023e2:	603a      	str	r2, [r7, #0]
 80023e4:	607b      	str	r3, [r7, #4]
		double temperature = (double) ntc_resistance
				/ (double) NOMINAL_RESISTANCE;
 80023e6:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <calctemp+0x17c>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
		double temperature = (double) ntc_resistance
 80023ec:	6838      	ldr	r0, [r7, #0]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f7fe fbce 	bl	8000b90 <__aeabi_ddiv>
 80023f4:	0002      	movs	r2, r0
 80023f6:	000b      	movs	r3, r1
 80023f8:	61ba      	str	r2, [r7, #24]
 80023fa:	61fb      	str	r3, [r7, #28]
		temperature = log(temperature);
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	0010      	movs	r0, r2
 8002402:	0019      	movs	r1, r3
 8002404:	f005 fc70 	bl	8007ce8 <log>
 8002408:	0002      	movs	r2, r0
 800240a:	000b      	movs	r3, r1
 800240c:	61ba      	str	r2, [r7, #24]
 800240e:	61fb      	str	r3, [r7, #28]
		temperature /= BETA;
 8002410:	2200      	movs	r2, #0
 8002412:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <calctemp+0x180>)
 8002414:	69b8      	ldr	r0, [r7, #24]
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	f7fe fbba 	bl	8000b90 <__aeabi_ddiv>
 800241c:	0002      	movs	r2, r0
 800241e:	000b      	movs	r3, r1
 8002420:	61ba      	str	r2, [r7, #24]
 8002422:	61fb      	str	r3, [r7, #28]
		temperature += 1.0 / NOMINAL_TEMPERATURE;
 8002424:	4a2b      	ldr	r2, [pc, #172]	@ (80024d4 <calctemp+0x184>)
 8002426:	4b2c      	ldr	r3, [pc, #176]	@ (80024d8 <calctemp+0x188>)
 8002428:	69b8      	ldr	r0, [r7, #24]
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	f7fe f84c 	bl	80004c8 <__aeabi_dadd>
 8002430:	0002      	movs	r2, r0
 8002432:	000b      	movs	r3, r1
 8002434:	61ba      	str	r2, [r7, #24]
 8002436:	61fb      	str	r3, [r7, #28]
		temperature = 1.0 / temperature;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2000      	movs	r0, #0
 800243e:	4927      	ldr	r1, [pc, #156]	@ (80024dc <calctemp+0x18c>)
 8002440:	f7fe fba6 	bl	8000b90 <__aeabi_ddiv>
 8002444:	0002      	movs	r2, r0
 8002446:	000b      	movs	r3, r1
 8002448:	61ba      	str	r2, [r7, #24]
 800244a:	61fb      	str	r3, [r7, #28]
		temperature -= 273.15;
 800244c:	4a24      	ldr	r2, [pc, #144]	@ (80024e0 <calctemp+0x190>)
 800244e:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <calctemp+0x194>)
 8002450:	69b8      	ldr	r0, [r7, #24]
 8002452:	69f9      	ldr	r1, [r7, #28]
 8002454:	f7ff faa8 	bl	80019a8 <__aeabi_dsub>
 8002458:	0002      	movs	r2, r0
 800245a:	000b      	movs	r3, r1
 800245c:	61ba      	str	r2, [r7, #24]
 800245e:	61fb      	str	r3, [r7, #28]

		if (temperature < RANGE_L || temperature > RANGE_H) {
 8002460:	2200      	movs	r2, #0
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <calctemp+0x198>)
 8002464:	69b8      	ldr	r0, [r7, #24]
 8002466:	69f9      	ldr	r1, [r7, #28]
 8002468:	f7fd ffe8 	bl	800043c <__aeabi_dcmplt>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d107      	bne.n	8002480 <calctemp+0x130>
 8002470:	2200      	movs	r2, #0
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <calctemp+0x19c>)
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	69f9      	ldr	r1, [r7, #28]
 8002478:	f7fd fff4 	bl	8000464 <__aeabi_dcmpgt>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d003      	beq.n	8002488 <calctemp+0x138>
			temperature = INVALID_VAL;
 8002480:	2200      	movs	r2, #0
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <calctemp+0x1a0>)
 8002484:	61ba      	str	r2, [r7, #24]
 8002486:	61fb      	str	r3, [r7, #28]
		}

		temperatures_data[i] = temperature;
 8002488:	69b8      	ldr	r0, [r7, #24]
 800248a:	69f9      	ldr	r1, [r7, #28]
 800248c:	f7fd fffe 	bl	800048c <__aeabi_d2uiz>
 8002490:	0003      	movs	r3, r0
 8002492:	b299      	uxth	r1, r3
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <calctemp+0x1a4>)
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	0052      	lsls	r2, r2, #1
 800249a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < NUMSENSORS; i++) {
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	3301      	adds	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	dc00      	bgt.n	80024aa <calctemp+0x15a>
 80024a8:	e758      	b.n	800235c <calctemp+0xc>
	}
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b00b      	add	sp, #44	@ 0x2c
 80024b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b4:	2000028c 	.word	0x2000028c
 80024b8:	20000010 	.word	0x20000010
 80024bc:	40b00000 	.word	0x40b00000
 80024c0:	080080dc 	.word	0x080080dc
 80024c4:	200001f8 	.word	0x200001f8
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000000 	.word	0x20000000
 80024d0:	40ab1c00 	.word	0x40ab1c00
 80024d4:	dcb5db83 	.word	0xdcb5db83
 80024d8:	3f6b79e1 	.word	0x3f6b79e1
 80024dc:	3ff00000 	.word	0x3ff00000
 80024e0:	66666666 	.word	0x66666666
 80024e4:	40711266 	.word	0x40711266
 80024e8:	c0440000 	.word	0xc0440000
 80024ec:	40690000 	.word	0x40690000
 80024f0:	406fe000 	.word	0x406fe000
 80024f4:	200002ac 	.word	0x200002ac

080024f8 <select_adc_channel>:
		}
	}
	return counter;
}
//-------------------------------------------------------
void select_adc_channel(int channel) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002500:	230c      	movs	r3, #12
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	0018      	movs	r0, r3
 8002506:	230c      	movs	r3, #12
 8002508:	001a      	movs	r2, r3
 800250a:	2100      	movs	r1, #0
 800250c:	f004 ff6e 	bl	80073ec <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
	switch (channel) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b07      	cmp	r3, #7
 8002514:	d82d      	bhi.n	8002572 <select_adc_channel+0x7a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <select_adc_channel+0xac>)
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	469f      	mov	pc, r3
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8002522:	230c      	movs	r3, #12
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
		break;
 800252a:	e026      	b.n	800257a <select_adc_channel+0x82>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 800252c:	230c      	movs	r3, #12
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <select_adc_channel+0xb0>)
 8002532:	601a      	str	r2, [r3, #0]
		break;
 8002534:	e021      	b.n	800257a <select_adc_channel+0x82>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 8002536:	230c      	movs	r3, #12
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <select_adc_channel+0xb4>)
 800253c:	601a      	str	r2, [r3, #0]
		break;
 800253e:	e01c      	b.n	800257a <select_adc_channel+0x82>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 8002540:	230c      	movs	r3, #12
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <select_adc_channel+0xb8>)
 8002546:	601a      	str	r2, [r3, #0]
		break;
 8002548:	e017      	b.n	800257a <select_adc_channel+0x82>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 800254a:	230c      	movs	r3, #12
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <select_adc_channel+0xbc>)
 8002550:	601a      	str	r2, [r3, #0]
		break;
 8002552:	e012      	b.n	800257a <select_adc_channel+0x82>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 8002554:	230c      	movs	r3, #12
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	4a17      	ldr	r2, [pc, #92]	@ (80025b8 <select_adc_channel+0xc0>)
 800255a:	601a      	str	r2, [r3, #0]
		break;
 800255c:	e00d      	b.n	800257a <select_adc_channel+0x82>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 800255e:	230c      	movs	r3, #12
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <select_adc_channel+0xc4>)
 8002564:	601a      	str	r2, [r3, #0]
		break;
 8002566:	e008      	b.n	800257a <select_adc_channel+0x82>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 8002568:	230c      	movs	r3, #12
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <select_adc_channel+0xc8>)
 800256e:	601a      	str	r2, [r3, #0]
		break;
 8002570:	e003      	b.n	800257a <select_adc_channel+0x82>
	default:
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002572:	230c      	movs	r3, #12
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <select_adc_channel+0xcc>)
 8002578:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800257a:	210c      	movs	r1, #12
 800257c:	187b      	adds	r3, r7, r1
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002588:	187a      	adds	r2, r7, r1
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <select_adc_channel+0xd0>)
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f001 fb02 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d001      	beq.n	800259c <select_adc_channel+0xa4>
		Error_Handler();
 8002598:	f000 fb9c 	bl	8002cd4 <Error_Handler>
	}
}
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	08008150 	.word	0x08008150
 80025a8:	04000002 	.word	0x04000002
 80025ac:	08000004 	.word	0x08000004
 80025b0:	0c000008 	.word	0x0c000008
 80025b4:	10000010 	.word	0x10000010
 80025b8:	14000020 	.word	0x14000020
 80025bc:	18000040 	.word	0x18000040
 80025c0:	1c000080 	.word	0x1c000080
 80025c4:	b0001000 	.word	0xb0001000
 80025c8:	20000090 	.word	0x20000090

080025cc <convert>:
//----------------------------------------------

void convert() {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
	int p;

	for (p = 0; p < NUMSENSORS; p++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	e027      	b.n	8002628 <convert+0x5c>
		select_adc_channel(p);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff ff8c 	bl	80024f8 <select_adc_channel>
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80025e0:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <convert+0x6c>)
 80025e2:	0018      	movs	r0, r3
 80025e4:	f001 f9ae 	bl	8003944 <HAL_ADC_Start>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <convert+0x24>
			Error_Handler();
 80025ec:	f000 fb72 	bl	8002cd4 <Error_Handler>
		}
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80025f0:	2301      	movs	r3, #1
 80025f2:	425a      	negs	r2, r3
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <convert+0x6c>)
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f001 fa2d 	bl	8003a58 <HAL_ADC_PollForConversion>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <convert+0x3a>
			Error_Handler();
 8002602:	f000 fb67 	bl	8002cd4 <Error_Handler>
		}
		adc_values[p] = HAL_ADC_GetValue(&hadc1);
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <convert+0x6c>)
 8002608:	0018      	movs	r0, r3
 800260a:	f001 fab9 	bl	8003b80 <HAL_ADC_GetValue>
 800260e:	0003      	movs	r3, r0
 8002610:	0019      	movs	r1, r3
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <convert+0x70>)
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(&hadc1);
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <convert+0x6c>)
 800261c:	0018      	movs	r0, r3
 800261e:	f001 f9df 	bl	80039e0 <HAL_ADC_Stop>
	for (p = 0; p < NUMSENSORS; p++) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3301      	adds	r3, #1
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b07      	cmp	r3, #7
 800262c:	ddd4      	ble.n	80025d8 <convert+0xc>

	}
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000090 	.word	0x20000090
 800263c:	2000028c 	.word	0x2000028c

08002640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	46ce      	mov	lr, r9
 8002644:	4647      	mov	r7, r8
 8002646:	b580      	push	{r7, lr}
 8002648:	b089      	sub	sp, #36	@ 0x24
 800264a:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
int length=0;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002650:	f000 fda6 	bl	80031a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002654:	f000 f872 	bl	800273c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002658:	f000 fabc 	bl	8002bd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800265c:	f000 f8c8 	bl	80027f0 <MX_ADC1_Init>
  MX_CRC_Init();
 8002660:	f000 f9b0 	bl	80029c4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8002664:	f000 fa34 	bl	8002ad0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002668:	f000 fa80 	bl	8002b6c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800266c:	f000 f9ce 	bl	8002a0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	test_leds();
 8002670:	f7ff fde0 	bl	8002234 <test_leds>
	ON(ENSPWR);
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	0059      	lsls	r1, r3, #1
 8002678:	23a0      	movs	r3, #160	@ 0xa0
 800267a:	05db      	lsls	r3, r3, #23
 800267c:	2201      	movs	r2, #1
 800267e:	0018      	movs	r0, r3
 8002680:	f002 f972 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002684:	2064      	movs	r0, #100	@ 0x64
 8002686:	f000 fe11 	bl	80032ac <HAL_Delay>
	convert();
 800268a:	f7ff ff9f 	bl	80025cc <convert>
	calctemp();
 800268e:	f7ff fe5f 	bl	8002350 <calctemp>
	convert();
 8002692:	f7ff ff9b 	bl	80025cc <convert>
	calctemp();
 8002696:	f7ff fe5b 	bl	8002350 <calctemp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		convert();
 800269a:	f7ff ff97 	bl	80025cc <convert>
//	  msglength=sprintf(tx_buffer,"ADC %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
		calctemp();
 800269e:	f7ff fe57 	bl	8002350 <calctemp>
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
//------------------------------------------------------------------------
		// wait for rising edge
		//while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin))
			;
		ON(GREEN);
 80026a2:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <main+0xe8>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	2110      	movs	r1, #16
 80026a8:	0018      	movs	r0, r3
 80026aa:	f002 f95d 	bl	8004968 <HAL_GPIO_WritePin>

		 // send
		 //sendData();
		 */
		//sendDataCal();
		length=sprintf(tx_buffer,"%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d \r\n", temperatures_data[0], temperatures_data[1], temperatures_data[2], temperatures_data[3], temperatures_data[4], temperatures_data[5], temperatures_data[6], temperatures_data[7]);
 80026ae:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <main+0xec>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4698      	mov	r8, r3
 80026b4:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <main+0xec>)
 80026b6:	885b      	ldrh	r3, [r3, #2]
 80026b8:	4699      	mov	r9, r3
 80026ba:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <main+0xec>)
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	001a      	movs	r2, r3
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <main+0xec>)
 80026c2:	88db      	ldrh	r3, [r3, #6]
 80026c4:	001c      	movs	r4, r3
 80026c6:	4b19      	ldr	r3, [pc, #100]	@ (800272c <main+0xec>)
 80026c8:	891b      	ldrh	r3, [r3, #8]
 80026ca:	001d      	movs	r5, r3
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <main+0xec>)
 80026ce:	895b      	ldrh	r3, [r3, #10]
 80026d0:	001e      	movs	r6, r3
 80026d2:	4b16      	ldr	r3, [pc, #88]	@ (800272c <main+0xec>)
 80026d4:	899b      	ldrh	r3, [r3, #12]
 80026d6:	469c      	mov	ip, r3
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <main+0xec>)
 80026da:	89db      	ldrh	r3, [r3, #14]
 80026dc:	4914      	ldr	r1, [pc, #80]	@ (8002730 <main+0xf0>)
 80026de:	4815      	ldr	r0, [pc, #84]	@ (8002734 <main+0xf4>)
 80026e0:	9305      	str	r3, [sp, #20]
 80026e2:	4663      	mov	r3, ip
 80026e4:	9304      	str	r3, [sp, #16]
 80026e6:	9603      	str	r6, [sp, #12]
 80026e8:	9502      	str	r5, [sp, #8]
 80026ea:	9401      	str	r4, [sp, #4]
 80026ec:	9200      	str	r2, [sp, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	4642      	mov	r2, r8
 80026f2:	f004 fe23 	bl	800733c <siprintf>
 80026f6:	0003      	movs	r3, r0
 80026f8:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, length, 20);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	490d      	ldr	r1, [pc, #52]	@ (8002734 <main+0xf4>)
 8002700:	480d      	ldr	r0, [pc, #52]	@ (8002738 <main+0xf8>)
 8002702:	2314      	movs	r3, #20
 8002704:	f003 fce6 	bl	80060d4 <HAL_UART_Transmit>
		OFF(GREEN);
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <main+0xe8>)
 800270a:	2200      	movs	r2, #0
 800270c:	2110      	movs	r1, #16
 800270e:	0018      	movs	r0, r3
 8002710:	f002 f92a 	bl	8004968 <HAL_GPIO_WritePin>
		// wait for falling edge
		//while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
		HAL_Delay(1000);
 8002714:	23fa      	movs	r3, #250	@ 0xfa
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fdc7 	bl	80032ac <HAL_Delay>


//------------------------------------------------------------------------
		HAL_Delay(100);
 800271e:	2064      	movs	r0, #100	@ 0x64
 8002720:	f000 fdc4 	bl	80032ac <HAL_Delay>
		convert();
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	e7b8      	b.n	800269a <main+0x5a>
 8002728:	50000400 	.word	0x50000400
 800272c:	200002ac 	.word	0x200002ac
 8002730:	080080e4 	.word	0x080080e4
 8002734:	200002bc 	.word	0x200002bc
 8002738:	200001f8 	.word	0x200001f8

0800273c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b093      	sub	sp, #76	@ 0x4c
 8002740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002742:	2414      	movs	r4, #20
 8002744:	193b      	adds	r3, r7, r4
 8002746:	0018      	movs	r0, r3
 8002748:	2334      	movs	r3, #52	@ 0x34
 800274a:	001a      	movs	r2, r3
 800274c:	2100      	movs	r1, #0
 800274e:	f004 fe4d 	bl	80073ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	0018      	movs	r0, r3
 8002756:	2310      	movs	r3, #16
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	f004 fe46 	bl	80073ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	0018      	movs	r0, r3
 8002766:	f002 f91d 	bl	80049a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800276a:	193b      	adds	r3, r7, r4
 800276c:	2202      	movs	r2, #2
 800276e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002770:	193b      	adds	r3, r7, r4
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	0052      	lsls	r2, r2, #1
 8002776:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002778:	0021      	movs	r1, r4
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2202      	movs	r2, #2
 800278a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2202      	movs	r2, #2
 8002790:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2200      	movs	r2, #0
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2208      	movs	r2, #8
 800279c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	22c0      	movs	r2, #192	@ 0xc0
 80027a2:	02d2      	lsls	r2, r2, #11
 80027a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	0592      	lsls	r2, r2, #22
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	0018      	movs	r0, r3
 80027b2:	f002 f943 	bl	8004a3c <HAL_RCC_OscConfig>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d001      	beq.n	80027be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80027ba:	f000 fa8b 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	2202      	movs	r2, #2
 80027c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2102      	movs	r1, #2
 80027da:	0018      	movs	r0, r3
 80027dc:	f002 fc3e 	bl	800505c <HAL_RCC_ClockConfig>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80027e4:	f000 fa76 	bl	8002cd4 <Error_Handler>
  }
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b013      	add	sp, #76	@ 0x4c
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	0018      	movs	r0, r3
 80027fa:	230c      	movs	r3, #12
 80027fc:	001a      	movs	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f004 fdf4 	bl	80073ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002804:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002806:	4a67      	ldr	r2, [pc, #412]	@ (80029a4 <MX_ADC1_Init+0x1b4>)
 8002808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800280a:	4b65      	ldr	r3, [pc, #404]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800280c:	2280      	movs	r2, #128	@ 0x80
 800280e:	0312      	lsls	r2, r2, #12
 8002810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002812:	4b63      	ldr	r3, [pc, #396]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002818:	4b61      	ldr	r3, [pc, #388]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800281e:	4b60      	ldr	r3, [pc, #384]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0392      	lsls	r2, r2, #14
 8002824:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002826:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002828:	2208      	movs	r2, #8
 800282a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800282c:	4b5c      	ldr	r3, [pc, #368]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800282e:	2200      	movs	r2, #0
 8002830:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002832:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002834:	2200      	movs	r2, #0
 8002836:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800283a:	2200      	movs	r2, #0
 800283c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 800283e:	4b58      	ldr	r3, [pc, #352]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002840:	2208      	movs	r2, #8
 8002842:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002844:	4b56      	ldr	r3, [pc, #344]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002846:	2220      	movs	r2, #32
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800284c:	4b54      	ldr	r3, [pc, #336]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002852:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002854:	2200      	movs	r2, #0
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002858:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800285a:	222c      	movs	r2, #44	@ 0x2c
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002860:	4b4f      	ldr	r3, [pc, #316]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002866:	4b4e      	ldr	r3, [pc, #312]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002868:	2207      	movs	r2, #7
 800286a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800286c:	4b4c      	ldr	r3, [pc, #304]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800286e:	2200      	movs	r2, #0
 8002870:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002872:	4b4b      	ldr	r3, [pc, #300]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002874:	223c      	movs	r2, #60	@ 0x3c
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800287a:	4b49      	ldr	r3, [pc, #292]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 800287c:	2200      	movs	r2, #0
 800287e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002880:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002882:	0018      	movs	r0, r3
 8002884:	f000 feb6 	bl	80035f4 <HAL_ADC_Init>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d001      	beq.n	8002890 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800288c:	f000 fa22 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a2:	1d3a      	adds	r2, r7, #4
 80028a4:	4b3e      	ldr	r3, [pc, #248]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f001 f975 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d001      	beq.n	80028b6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80028b2:	f000 fa0f 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4a3b      	ldr	r2, [pc, #236]	@ (80029a8 <MX_ADC1_Init+0x1b8>)
 80028ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2204      	movs	r2, #4
 80028c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028c2:	1d3a      	adds	r2, r7, #4
 80028c4:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f001 f965 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d001      	beq.n	80028d6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80028d2:	f000 f9ff 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <MX_ADC1_Init+0x1bc>)
 80028da:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2208      	movs	r2, #8
 80028e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e2:	1d3a      	adds	r2, r7, #4
 80028e4:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f001 f955 	bl	8003b98 <HAL_ADC_ConfigChannel>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80028f2:	f000 f9ef 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4a2d      	ldr	r2, [pc, #180]	@ (80029b0 <MX_ADC1_Init+0x1c0>)
 80028fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	220c      	movs	r2, #12
 8002900:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002902:	1d3a      	adds	r2, r7, #4
 8002904:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f001 f945 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d001      	beq.n	8002916 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002912:	f000 f9df 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <MX_ADC1_Init+0x1c4>)
 800291a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	2210      	movs	r2, #16
 8002920:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002922:	1d3a      	adds	r2, r7, #4
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f001 f935 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8002932:	f000 f9cf 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <MX_ADC1_Init+0x1c8>)
 800293a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2214      	movs	r2, #20
 8002940:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002942:	1d3a      	adds	r2, r7, #4
 8002944:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f001 f925 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d001      	beq.n	8002956 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 8002952:	f000 f9bf 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <MX_ADC1_Init+0x1cc>)
 800295a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2218      	movs	r2, #24
 8002960:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f001 f915 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8002972:	f000 f9af 	bl	8002cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <MX_ADC1_Init+0x1d0>)
 800297a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	221c      	movs	r2, #28
 8002980:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002982:	1d3a      	adds	r2, r7, #4
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <MX_ADC1_Init+0x1b0>)
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f001 f905 	bl	8003b98 <HAL_ADC_ConfigChannel>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8002992:	f000 f99f 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	20000090 	.word	0x20000090
 80029a4:	40012400 	.word	0x40012400
 80029a8:	04000002 	.word	0x04000002
 80029ac:	08000004 	.word	0x08000004
 80029b0:	0c000008 	.word	0x0c000008
 80029b4:	10000010 	.word	0x10000010
 80029b8:	14000020 	.word	0x14000020
 80029bc:	18000040 	.word	0x18000040
 80029c0:	1c000080 	.word	0x1c000080

080029c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <MX_CRC_Init+0x44>)
 80029cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <MX_CRC_Init+0x40>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 fcae 	bl	8004350 <HAL_CRC_Init>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d001      	beq.n	80029fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80029f8:	f000 f96c 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	200000f4 	.word	0x200000f4
 8002a08:	40023000 	.word	0x40023000

08002a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	@ 0x28
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a12:	231c      	movs	r3, #28
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	0018      	movs	r0, r3
 8002a18:	230c      	movs	r3, #12
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f004 fce5 	bl	80073ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a22:	003b      	movs	r3, r7
 8002a24:	0018      	movs	r0, r3
 8002a26:	231c      	movs	r3, #28
 8002a28:	001a      	movs	r2, r3
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f004 fcde 	bl	80073ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a32:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <MX_TIM3_Init+0xbc>)
 8002a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a44:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <MX_TIM3_Init+0xc0>)
 8002a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a56:	0018      	movs	r0, r3
 8002a58:	f002 fdde 	bl	8005618 <HAL_TIM_PWM_Init>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a60:	f000 f938 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	211c      	movs	r1, #28
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a72:	187a      	adds	r2, r7, r1
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002a76:	0011      	movs	r1, r2
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f003 fa6d 	bl	8005f58 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002a82:	f000 f927 	bl	8002cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	003b      	movs	r3, r7
 8002a88:	2260      	movs	r2, #96	@ 0x60
 8002a8a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002a8c:	003b      	movs	r3, r7
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a92:	003b      	movs	r3, r7
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a98:	003b      	movs	r3, r7
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a9e:	0039      	movs	r1, r7
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f002 fe0f 	bl	80056c8 <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002aae:	f000 f911 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <MX_TIM3_Init+0xb8>)
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f9f1 	bl	8002e9c <HAL_TIM_MspPostInit>

}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b00a      	add	sp, #40	@ 0x28
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	20000118 	.word	0x20000118
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	0000ffff 	.word	0x0000ffff

08002ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ad4:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002ad6:	4a24      	ldr	r2, [pc, #144]	@ (8002b68 <MX_USART1_UART_Init+0x98>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ada:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002adc:	22e1      	movs	r2, #225	@ 0xe1
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f003 fa84 	bl	8006028 <HAL_UART_Init>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d001      	beq.n	8002b28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b24:	f000 f8d6 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f004 fb25 	bl	800717c <HAL_UARTEx_SetTxFifoThreshold>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b36:	f000 f8cd 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f004 fb5c 	bl	80071fc <HAL_UARTEx_SetRxFifoThreshold>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b48:	f000 f8c4 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <MX_USART1_UART_Init+0x94>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f004 fada 	bl	8007108 <HAL_UARTEx_DisableFifoMode>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b58:	f000 f8bc 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	20000164 	.word	0x20000164
 8002b68:	40013800 	.word	0x40013800

08002b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b70:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <MX_USART3_UART_Init+0x64>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b78:	22e1      	movs	r2, #225	@ 0xe1
 8002b7a:	0252      	lsls	r2, r2, #9
 8002b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <MX_USART3_UART_Init+0x60>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f003 fa36 	bl	8006028 <HAL_UART_Init>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bc0:	f000 f888 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	200001f8 	.word	0x200001f8
 8002bd0:	40004800 	.word	0x40004800

08002bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	240c      	movs	r4, #12
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	0018      	movs	r0, r3
 8002be0:	2314      	movs	r3, #20
 8002be2:	001a      	movs	r2, r3
 8002be4:	2100      	movs	r1, #0
 8002be6:	f004 fc01 	bl	80073ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	4b37      	ldr	r3, [pc, #220]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c06:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c08:	2101      	movs	r1, #1
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c20:	2102      	movs	r1, #2
 8002c22:	430a      	orrs	r2, r1
 8002c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <MX_GPIO_Init+0xf4>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENSPWR_GPIO_Port, ENSPWR_Pin, GPIO_PIN_RESET);
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	0059      	lsls	r1, r3, #1
 8002c36:	23a0      	movs	r3, #160	@ 0xa0
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f001 fe93 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <MX_GPIO_Init+0xf8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	21f8      	movs	r1, #248	@ 0xf8
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fe8d 	bl	8004968 <HAL_GPIO_WritePin>
                          |BLUE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	0192      	lsls	r2, r2, #6
 8002c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd0 <MX_GPIO_Init+0xfc>)
 8002c66:	0019      	movs	r1, r3
 8002c68:	0010      	movs	r0, r2
 8002c6a:	f001 fd19 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENSPWR_Pin */
  GPIO_InitStruct.Pin = ENSPWR_Pin;
 8002c6e:	0021      	movs	r1, r4
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	0052      	lsls	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	000c      	movs	r4, r1
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENSPWR_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	193a      	adds	r2, r7, r4
 8002c8e:	23a0      	movs	r3, #160	@ 0xa0
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fd03 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE1_Pin BLUE2_Pin
                           BLUE3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002c9a:	0021      	movs	r1, r4
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	22f8      	movs	r2, #248	@ 0xf8
 8002ca0:	601a      	str	r2, [r3, #0]
                          |BLUE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <MX_GPIO_Init+0xf8>)
 8002cb8:	0019      	movs	r1, r3
 8002cba:	0010      	movs	r0, r2
 8002cbc:	f001 fcf0 	bl	80046a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b009      	add	sp, #36	@ 0x24
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	50000400 	.word	0x50000400
 8002cd0:	50000800 	.word	0x50000800

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	e7fd      	b.n	8002cdc <Error_Handler+0x8>

08002ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d04:	2180      	movs	r1, #128	@ 0x80
 8002d06:	0549      	lsls	r1, r1, #21
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <HAL_MspInit+0x4c>)
 8002d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	055b      	lsls	r3, r3, #21
 8002d14:	4013      	ands	r3, r2
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002d1a:	23c0      	movs	r3, #192	@ 0xc0
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 fae8 	bl	80032f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b093      	sub	sp, #76	@ 0x4c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	2334      	movs	r3, #52	@ 0x34
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	2314      	movs	r3, #20
 8002d40:	001a      	movs	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f004 fb52 	bl	80073ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d48:	2418      	movs	r4, #24
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	231c      	movs	r3, #28
 8002d50:	001a      	movs	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	f004 fb4a 	bl	80073ec <memset>
  if(hadc->Instance==ADC1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e14 <HAL_ADC_MspInit+0xe4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d154      	bne.n	8002e0c <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2280      	movs	r2, #128	@ 0x80
 8002d66:	01d2      	lsls	r2, r2, #7
 8002d68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	0018      	movs	r0, r3
 8002d74:	f002 fb1c 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002d7c:	f7ff ffaa 	bl	8002cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d84:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	0349      	lsls	r1, r1, #13
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d8e:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	035b      	lsls	r3, r3, #13
 8002d96:	4013      	ands	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002d9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db8:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002dba:	2102      	movs	r1, #2
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_ADC_MspInit+0xe8>)
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8002dcc:	2434      	movs	r4, #52	@ 0x34
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	22ff      	movs	r2, #255	@ 0xff
 8002dd2:	601a      	str	r2, [r3, #0]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	193a      	adds	r2, r7, r4
 8002de2:	23a0      	movs	r3, #160	@ 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f001 fc59 	bl	80046a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AREFIN_Pin;
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	2203      	movs	r2, #3
 8002df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AREFIN_GPIO_Port, &GPIO_InitStruct);
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_ADC_MspInit+0xec>)
 8002e04:	0019      	movs	r1, r3
 8002e06:	0010      	movs	r0, r2
 8002e08:	f001 fc4a 	bl	80046a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b013      	add	sp, #76	@ 0x4c
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	40012400 	.word	0x40012400
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	50000400 	.word	0x50000400

08002e20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_CRC_MspInit+0x38>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10d      	bne.n	8002e4e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_CRC_MspInit+0x3c>)
 8002e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_CRC_MspInit+0x3c>)
 8002e38:	2180      	movs	r1, #128	@ 0x80
 8002e3a:	0149      	lsls	r1, r1, #5
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_CRC_MspInit+0x3c>)
 8002e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	40023000 	.word	0x40023000
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a09      	ldr	r2, [pc, #36]	@ (8002e94 <HAL_TIM_PWM_MspInit+0x34>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10b      	bne.n	8002e8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e72:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <HAL_TIM_PWM_MspInit+0x38>)
 8002e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_TIM_PWM_MspInit+0x38>)
 8002e78:	2102      	movs	r1, #2
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_TIM_PWM_MspInit+0x38>)
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	240c      	movs	r4, #12
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	2314      	movs	r3, #20
 8002eac:	001a      	movs	r2, r3
 8002eae:	2100      	movs	r1, #0
 8002eb0:	f004 fa9c 	bl	80073ec <memset>
  if(htim->Instance==TIM3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <HAL_TIM_MspPostInit+0x70>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d121      	bne.n	8002f02 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <HAL_TIM_MspPostInit+0x74>)
 8002ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec2:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <HAL_TIM_MspPostInit+0x74>)
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_TIM_MspPostInit+0x74>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2202      	movs	r2, #2
 8002edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	187b      	adds	r3, r7, r1
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	2200      	movs	r2, #0
 8002eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	4a06      	ldr	r2, [pc, #24]	@ (8002f14 <HAL_TIM_MspPostInit+0x78>)
 8002efa:	0019      	movs	r1, r3
 8002efc:	0010      	movs	r0, r2
 8002efe:	f001 fbcf 	bl	80046a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b009      	add	sp, #36	@ 0x24
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40021000 	.word	0x40021000
 8002f14:	50000400 	.word	0x50000400

08002f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b093      	sub	sp, #76	@ 0x4c
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	2334      	movs	r3, #52	@ 0x34
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	0018      	movs	r0, r3
 8002f26:	2314      	movs	r3, #20
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f004 fa5e 	bl	80073ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f30:	2418      	movs	r4, #24
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	0018      	movs	r0, r3
 8002f36:	231c      	movs	r3, #28
 8002f38:	001a      	movs	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	f004 fa56 	bl	80073ec <memset>
  if(huart->Instance==USART1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a46      	ldr	r2, [pc, #280]	@ (8003060 <HAL_UART_MspInit+0x148>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d148      	bne.n	8002fdc <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f002 fa29 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f62:	f7ff feb7 	bl	8002cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f66:	4b3f      	ldr	r3, [pc, #252]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f6c:	2180      	movs	r1, #128	@ 0x80
 8002f6e:	01c9      	lsls	r1, r1, #7
 8002f70:	430a      	orrs	r2, r1
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f8e:	4b35      	ldr	r3, [pc, #212]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	2201      	movs	r2, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_Pin|U1RX_Pin;
 8002f9a:	2134      	movs	r1, #52	@ 0x34
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	22c0      	movs	r2, #192	@ 0xc0
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2201      	movs	r2, #1
 8002fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	187a      	adds	r2, r7, r1
 8002fbe:	23a0      	movs	r3, #160	@ 0xa0
 8002fc0:	05db      	lsls	r3, r3, #23
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f001 fb6b 	bl	80046a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	201b      	movs	r0, #27
 8002fd0:	f001 f98c 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fd4:	201b      	movs	r0, #27
 8002fd6:	f001 f99e 	bl	8004316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fda:	e03d      	b.n	8003058 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a21      	ldr	r2, [pc, #132]	@ (8003068 <HAL_UART_MspInit+0x150>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d138      	bne.n	8003058 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	02c9      	lsls	r1, r1, #11
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8002ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	02db      	lsls	r3, r3, #11
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8003004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003006:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8003008:	2102      	movs	r1, #2
 800300a:	430a      	orrs	r2, r1
 800300c:	635a      	str	r2, [r3, #52]	@ 0x34
 800300e:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <HAL_UART_MspInit+0x14c>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U3TX_Pin|U3RX_Pin;
 800301a:	2134      	movs	r1, #52	@ 0x34
 800301c:	187b      	adds	r3, r7, r1
 800301e:	22c0      	movs	r2, #192	@ 0xc0
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2202      	movs	r2, #2
 8003028:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	187b      	adds	r3, r7, r1
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	187b      	adds	r3, r7, r1
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003036:	187b      	adds	r3, r7, r1
 8003038:	2204      	movs	r2, #4
 800303a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	187b      	adds	r3, r7, r1
 800303e:	4a0b      	ldr	r2, [pc, #44]	@ (800306c <HAL_UART_MspInit+0x154>)
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f001 fb2c 	bl	80046a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	201d      	movs	r0, #29
 800304e:	f001 f94d 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8003052:	201d      	movs	r0, #29
 8003054:	f001 f95f 	bl	8004316 <HAL_NVIC_EnableIRQ>
}
 8003058:	46c0      	nop			@ (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b013      	add	sp, #76	@ 0x4c
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	40013800 	.word	0x40013800
 8003064:	40021000 	.word	0x40021000
 8003068:	40004800 	.word	0x40004800
 800306c:	50000400 	.word	0x50000400

08003070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	e7fd      	b.n	8003074 <NMI_Handler+0x4>

08003078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	e7fd      	b.n	800307c <HardFault_Handler+0x4>

08003080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003098:	f000 f8ec 	bl	8003274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030a8:	4b03      	ldr	r3, [pc, #12]	@ (80030b8 <USART1_IRQHandler+0x14>)
 80030aa:	0018      	movs	r0, r3
 80030ac:	f003 f8b6 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	20000164 	.word	0x20000164

080030bc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <USART3_4_IRQHandler+0x14>)
 80030c2:	0018      	movs	r0, r3
 80030c4:	f003 f8aa 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	200001f8 	.word	0x200001f8

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	@ (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f004 f97a 	bl	80073fc <__errno>
 8003108:	0003      	movs	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	2301      	movs	r3, #1
 8003110:	425b      	negs	r3, r3
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	18d2      	adds	r2, r2, r3
 8003122:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <_sbrk+0x64>)
 8003124:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b006      	add	sp, #24
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20009000 	.word	0x20009000
 8003134:	00000400 	.word	0x00000400
 8003138:	200003bc 	.word	0x200003bc
 800313c:	20000510 	.word	0x20000510

08003140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800314c:	480d      	ldr	r0, [pc, #52]	@ (8003184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003150:	f7ff fff6 	bl	8003140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003154:	480c      	ldr	r0, [pc, #48]	@ (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003156:	490d      	ldr	r1, [pc, #52]	@ (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <LoopForever+0xe>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800316c:	4c0a      	ldr	r4, [pc, #40]	@ (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800317a:	f004 f945 	bl	8007408 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800317e:	f7ff fa5f 	bl	8002640 <main>

08003182 <LoopForever>:

LoopForever:
  b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
  ldr   r0, =_estack
 8003184:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003190:	08008288 	.word	0x08008288
  ldr r2, =_sbss
 8003194:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003198:	2000050c 	.word	0x2000050c

0800319c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_IRQHandler>
	...

080031a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_Init+0x3c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_Init+0x3c>)
 80031b2:	2180      	movs	r1, #128	@ 0x80
 80031b4:	0049      	lsls	r1, r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ba:	2003      	movs	r0, #3
 80031bc:	f000 f810 	bl	80031e0 <HAL_InitTick>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d003      	beq.n	80031cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e001      	b.n	80031d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031cc:	f7ff fd88 	bl	8002ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40022000 	.word	0x40022000

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e8:	230f      	movs	r3, #15
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_InitTick+0x88>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02b      	beq.n	8003250 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031f8:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <HAL_InitTick+0x8c>)
 80031fa:	681c      	ldr	r4, [r3, #0]
 80031fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <HAL_InitTick+0x88>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	0019      	movs	r1, r3
 8003202:	23fa      	movs	r3, #250	@ 0xfa
 8003204:	0098      	lsls	r0, r3, #2
 8003206:	f7fc ff8d 	bl	8000124 <__udivsi3>
 800320a:	0003      	movs	r3, r0
 800320c:	0019      	movs	r1, r3
 800320e:	0020      	movs	r0, r4
 8003210:	f7fc ff88 	bl	8000124 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	0018      	movs	r0, r3
 8003218:	f001 f88d 	bl	8004336 <HAL_SYSTICK_Config>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d112      	bne.n	8003246 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d80a      	bhi.n	800323c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	2301      	movs	r3, #1
 800322a:	425b      	negs	r3, r3
 800322c:	2200      	movs	r2, #0
 800322e:	0018      	movs	r0, r3
 8003230:	f001 f85c 	bl	80042ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_InitTick+0x90>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00d      	b.n	8003258 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e008      	b.n	8003258 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003246:	230f      	movs	r3, #15
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e003      	b.n	8003258 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003250:	230f      	movs	r3, #15
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b005      	add	sp, #20
 8003264:	bd90      	pop	{r4, r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	20000020 	.word	0x20000020
 800326c:	20000018 	.word	0x20000018
 8003270:	2000001c 	.word	0x2000001c

08003274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_IncTick+0x1c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	001a      	movs	r2, r3
 800327e:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_IncTick+0x20>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	18d2      	adds	r2, r2, r3
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_IncTick+0x20>)
 8003286:	601a      	str	r2, [r3, #0]
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	20000020 	.word	0x20000020
 8003294:	200003c0 	.word	0x200003c0

08003298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b02      	ldr	r3, [pc, #8]	@ (80032a8 <HAL_GetTick+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	200003c0 	.word	0x200003c0

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff fff0 	bl	8003298 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	001a      	movs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	f7ff ffe0 	bl	8003298 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	20000020 	.word	0x20000020

080032f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a06      	ldr	r2, [pc, #24]	@ (800331c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	40010000 	.word	0x40010000
 800331c:	fffff9ff 	.word	0xfffff9ff

08003320 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a05      	ldr	r2, [pc, #20]	@ (8003344 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003330:	401a      	ands	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	fe3fffff 	.word	0xfe3fffff

08003348 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	23e0      	movs	r3, #224	@ 0xe0
 8003356:	045b      	lsls	r3, r3, #17
 8003358:	4013      	ands	r3, r2
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}

08003362 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	2104      	movs	r1, #4
 8003376:	400a      	ands	r2, r1
 8003378:	2107      	movs	r1, #7
 800337a:	4091      	lsls	r1, r2
 800337c:	000a      	movs	r2, r1
 800337e:	43d2      	mvns	r2, r2
 8003380:	401a      	ands	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2104      	movs	r1, #4
 8003386:	400b      	ands	r3, r1
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4099      	lsls	r1, r3
 800338c:	000b      	movs	r3, r1
 800338e:	431a      	orrs	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}

0800339c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	2104      	movs	r1, #4
 80033ae:	400a      	ands	r2, r1
 80033b0:	2107      	movs	r1, #7
 80033b2:	4091      	lsls	r1, r2
 80033b4:	000a      	movs	r2, r1
 80033b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2104      	movs	r1, #4
 80033bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80033be:	40da      	lsrs	r2, r3
 80033c0:	0013      	movs	r3, r2
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}

080033ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	23c0      	movs	r3, #192	@ 0xc0
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	4013      	ands	r3, r2
 80033dc:	d101      	bne.n	80033e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}

080033ec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	211f      	movs	r1, #31
 8003400:	400a      	ands	r2, r1
 8003402:	210f      	movs	r1, #15
 8003404:	4091      	lsls	r1, r2
 8003406:	000a      	movs	r2, r1
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	210f      	movs	r1, #15
 8003412:	4019      	ands	r1, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	201f      	movs	r0, #31
 8003418:	4003      	ands	r3, r0
 800341a:	4099      	lsls	r1, r3
 800341c:	000b      	movs	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b004      	add	sp, #16
 800342a:	bd80      	pop	{r7, pc}

0800342c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	0b5b      	lsrs	r3, r3, #13
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}

0800344e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	0352      	lsls	r2, r2, #13
 8003460:	0b52      	lsrs	r2, r2, #13
 8003462:	43d2      	mvns	r2, r2
 8003464:	401a      	ands	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	0212      	lsls	r2, r2, #8
 8003488:	43d2      	mvns	r2, r2
 800348a:	401a      	ands	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	400b      	ands	r3, r1
 8003494:	4904      	ldr	r1, [pc, #16]	@ (80034a8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003496:	400b      	ands	r3, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	07ffff00 	.word	0x07ffff00

080034ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	2280      	movs	r2, #128	@ 0x80
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	6fffffe8 	.word	0x6fffffe8

080034d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	055b      	lsls	r3, r3, #21
 80034e4:	401a      	ands	r2, r3
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	055b      	lsls	r3, r3, #21
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d101      	bne.n	80034f2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a04      	ldr	r2, [pc, #16]	@ (800351c <LL_ADC_Enable+0x20>)
 800350a:	4013      	ands	r3, r2
 800350c:	2201      	movs	r2, #1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}
 800351c:	7fffffe8 	.word	0x7fffffe8

08003520 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <LL_ADC_Disable+0x20>)
 800352e:	4013      	ands	r3, r2
 8003530:	2202      	movs	r2, #2
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}
 8003540:	7fffffe8 	.word	0x7fffffe8

08003544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <LL_ADC_IsEnabled+0x18>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LL_ADC_IsEnabled+0x1a>
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}

08003566 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d101      	bne.n	800357e <LL_ADC_IsDisableOngoing+0x18>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <LL_ADC_IsDisableOngoing+0x1a>
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <LL_ADC_REG_StartConversion+0x20>)
 8003596:	4013      	ands	r3, r2
 8003598:	2204      	movs	r2, #4
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	7fffffe8 	.word	0x7fffffe8

080035ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <LL_ADC_REG_StopConversion+0x20>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	2210      	movs	r2, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	7fffffe8 	.word	0x7fffffe8

080035d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d101      	bne.n	80035e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	231f      	movs	r3, #31
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003604:	2300      	movs	r3, #0
 8003606:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e17f      	b.n	800391a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff fb83 	bl	8002d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2254      	movs	r2, #84	@ 0x54
 8003634:	2100      	movs	r1, #0
 8003636:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff ff49 	bl	80034d4 <LL_ADC_IsInternalRegulatorEnabled>
 8003642:	1e03      	subs	r3, r0, #0
 8003644:	d115      	bne.n	8003672 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff ff2e 	bl	80034ac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003650:	4bb4      	ldr	r3, [pc, #720]	@ (8003924 <HAL_ADC_Init+0x330>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	49b4      	ldr	r1, [pc, #720]	@ (8003928 <HAL_ADC_Init+0x334>)
 8003656:	0018      	movs	r0, r3
 8003658:	f7fc fd64 	bl	8000124 <__udivsi3>
 800365c:	0003      	movs	r3, r0
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003664:	e002      	b.n	800366c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3b01      	subs	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f9      	bne.n	8003666 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff ff2c 	bl	80034d4 <LL_ADC_IsInternalRegulatorEnabled>
 800367c:	1e03      	subs	r3, r0, #0
 800367e:	d10f      	bne.n	80036a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	2210      	movs	r2, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	2201      	movs	r2, #1
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003698:	231f      	movs	r3, #31
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7ff ff93 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 80036aa:	0003      	movs	r3, r0
 80036ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	2210      	movs	r2, #16
 80036b4:	4013      	ands	r3, r2
 80036b6:	d000      	beq.n	80036ba <HAL_ADC_Init+0xc6>
 80036b8:	e122      	b.n	8003900 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d000      	beq.n	80036c2 <HAL_ADC_Init+0xce>
 80036c0:	e11e      	b.n	8003900 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c6:	4a99      	ldr	r2, [pc, #612]	@ (800392c <HAL_ADC_Init+0x338>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2202      	movs	r2, #2
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ff34 	bl	8003544 <LL_ADC_IsEnabled>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d000      	beq.n	80036e2 <HAL_ADC_Init+0xee>
 80036e0:	e0ad      	b.n	800383e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7e1b      	ldrb	r3, [r3, #24]
 80036ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80036ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7e5b      	ldrb	r3, [r3, #25]
 80036f2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7e9b      	ldrb	r3, [r3, #26]
 80036fa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_ADC_Init+0x118>
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	e000      	b.n	800370e <HAL_ADC_Init+0x11a>
 800370c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800370e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003714:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	da04      	bge.n	8003728 <HAL_ADC_Init+0x134>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	e001      	b.n	800372c <HAL_ADC_Init+0x138>
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800372c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	212c      	movs	r1, #44	@ 0x2c
 8003732:	5c5b      	ldrb	r3, [r3, r1]
 8003734:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003736:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d115      	bne.n	8003774 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7e9b      	ldrb	r3, [r3, #26]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	0252      	lsls	r2, r2, #9
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	e00b      	b.n	8003774 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	2220      	movs	r2, #32
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	2201      	movs	r2, #1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003780:	23e0      	movs	r3, #224	@ 0xe0
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800378a:	4313      	orrs	r3, r2
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a65      	ldr	r2, [pc, #404]	@ (8003930 <HAL_ADC_Init+0x33c>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0f9b      	lsrs	r3, r3, #30
 80037ae:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037b4:	4313      	orrs	r3, r2
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	223c      	movs	r2, #60	@ 0x3c
 80037c0:	5c9b      	ldrb	r3, [r3, r2]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d111      	bne.n	80037ea <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0f9b      	lsrs	r3, r3, #30
 80037cc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037d2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80037d8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80037de:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	2201      	movs	r2, #1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	4a50      	ldr	r2, [pc, #320]	@ (8003934 <HAL_ADC_Init+0x340>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	23c0      	movs	r3, #192	@ 0xc0
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	429a      	cmp	r2, r3
 800380a:	d018      	beq.n	800383e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	05db      	lsls	r3, r3, #23
 8003814:	429a      	cmp	r2, r3
 8003816:	d012      	beq.n	800383e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800381c:	2380      	movs	r3, #128	@ 0x80
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	429a      	cmp	r2, r3
 8003822:	d00c      	beq.n	800383e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003824:	4b44      	ldr	r3, [pc, #272]	@ (8003938 <HAL_ADC_Init+0x344>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a44      	ldr	r2, [pc, #272]	@ (800393c <HAL_ADC_Init+0x348>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	23f0      	movs	r3, #240	@ 0xf0
 8003834:	039b      	lsls	r3, r3, #14
 8003836:	401a      	ands	r2, r3
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_ADC_Init+0x344>)
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003846:	001a      	movs	r2, r3
 8003848:	2100      	movs	r1, #0
 800384a:	f7ff fd8a 	bl	8003362 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003856:	493a      	ldr	r1, [pc, #232]	@ (8003940 <HAL_ADC_Init+0x34c>)
 8003858:	001a      	movs	r2, r3
 800385a:	f7ff fd82 	bl	8003362 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2110      	movs	r1, #16
 8003872:	4249      	negs	r1, r1
 8003874:	430a      	orrs	r2, r1
 8003876:	629a      	str	r2, [r3, #40]	@ 0x28
 8003878:	e018      	b.n	80038ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	039b      	lsls	r3, r3, #14
 8003882:	429a      	cmp	r2, r3
 8003884:	d112      	bne.n	80038ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	3b01      	subs	r3, #1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	221c      	movs	r2, #28
 8003896:	4013      	ands	r3, r2
 8003898:	2210      	movs	r2, #16
 800389a:	4252      	negs	r2, r2
 800389c:	409a      	lsls	r2, r3
 800389e:	0011      	movs	r1, r2
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff fd72 	bl	800339c <LL_ADC_GetSamplingTimeCommonChannels>
 80038b8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	2203      	movs	r2, #3
 80038ce:	4393      	bics	r3, r2
 80038d0:	2201      	movs	r2, #1
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038d8:	e01c      	b.n	8003914 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	2212      	movs	r2, #18
 80038e0:	4393      	bics	r3, r2
 80038e2:	2210      	movs	r2, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	2201      	movs	r2, #1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80038f6:	231f      	movs	r3, #31
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038fe:	e009      	b.n	8003914 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003904:	2210      	movs	r2, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800390c:	231f      	movs	r3, #31
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003914:	231f      	movs	r3, #31
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b008      	add	sp, #32
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	20000018 	.word	0x20000018
 8003928:	00030d40 	.word	0x00030d40
 800392c:	fffffefd 	.word	0xfffffefd
 8003930:	ffde0201 	.word	0xffde0201
 8003934:	1ffffc02 	.word	0x1ffffc02
 8003938:	40012708 	.word	0x40012708
 800393c:	ffc3ffff 	.word	0xffc3ffff
 8003940:	07ffff04 	.word	0x07ffff04

08003944 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff fe3d 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003956:	1e03      	subs	r3, r0, #0
 8003958:	d135      	bne.n	80039c6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2254      	movs	r2, #84	@ 0x54
 800395e:	5c9b      	ldrb	r3, [r3, r2]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_ADC_Start+0x24>
 8003964:	2302      	movs	r3, #2
 8003966:	e035      	b.n	80039d4 <HAL_ADC_Start+0x90>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2254      	movs	r2, #84	@ 0x54
 800396c:	2101      	movs	r1, #1
 800396e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003970:	250f      	movs	r5, #15
 8003972:	197c      	adds	r4, r7, r5
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fb28 	bl	8003fcc <ADC_Enable>
 800397c:	0003      	movs	r3, r0
 800397e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003980:	197b      	adds	r3, r7, r5
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d119      	bne.n	80039bc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <HAL_ADC_Start+0x98>)
 800398e:	4013      	ands	r3, r2
 8003990:	2280      	movs	r2, #128	@ 0x80
 8003992:	0052      	lsls	r2, r2, #1
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	221c      	movs	r2, #28
 80039a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2254      	movs	r2, #84	@ 0x54
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fde7 	bl	8003588 <LL_ADC_REG_StartConversion>
 80039ba:	e008      	b.n	80039ce <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2254      	movs	r2, #84	@ 0x54
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]
 80039c4:	e003      	b.n	80039ce <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039c6:	230f      	movs	r3, #15
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80039ce:	230f      	movs	r3, #15
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	781b      	ldrb	r3, [r3, #0]
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bdb0      	pop	{r4, r5, r7, pc}
 80039dc:	fffff0fe 	.word	0xfffff0fe

080039e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2254      	movs	r2, #84	@ 0x54
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_Stop+0x16>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e029      	b.n	8003a4a <HAL_ADC_Stop+0x6a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2254      	movs	r2, #84	@ 0x54
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039fe:	250f      	movs	r5, #15
 8003a00:	197c      	adds	r4, r7, r5
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fa9f 	bl	8003f48 <ADC_ConversionStop>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a0e:	197b      	adds	r3, r7, r5
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a16:	197c      	adds	r4, r7, r5
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 fb5c 	bl	80040d8 <ADC_Disable>
 8003a20:	0003      	movs	r3, r0
 8003a22:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a24:	197b      	adds	r3, r7, r5
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <HAL_ADC_Stop+0x74>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	2201      	movs	r2, #1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2254      	movs	r2, #84	@ 0x54
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003a44:	230f      	movs	r3, #15
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b004      	add	sp, #16
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	fffffefe 	.word	0xfffffefe

08003a58 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d102      	bne.n	8003a70 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e00f      	b.n	8003a90 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a80:	2220      	movs	r2, #32
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e072      	b.n	8003b72 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a90:	f7ff fc02 	bl	8003298 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a98:	e01f      	b.n	8003ada <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	d01c      	beq.n	8003ada <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aa0:	f7ff fbfa 	bl	8003298 <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <HAL_ADC_PollForConversion+0x5e>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d111      	bne.n	8003ada <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d10b      	bne.n	8003ada <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2254      	movs	r2, #84	@ 0x54
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04b      	b.n	8003b72 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d0d9      	beq.n	8003a9a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7ff fc66 	bl	80033ca <LL_ADC_REG_IsTriggerSourceSWStart>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d02e      	beq.n	8003b60 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7e9b      	ldrb	r3, [r3, #26]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d12a      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d123      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff fd57 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d110      	bne.n	8003b48 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	210c      	movs	r1, #12
 8003b32:	438a      	bics	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	4a10      	ldr	r2, [pc, #64]	@ (8003b7c <HAL_ADC_PollForConversion+0x124>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2201      	movs	r2, #1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b46:	e00b      	b.n	8003b60 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7e1b      	ldrb	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	220c      	movs	r2, #12
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	fffffefe 	.word	0xfffffefe

08003b80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2317      	movs	r3, #23
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2254      	movs	r2, #84	@ 0x54
 8003bb2:	5c9b      	ldrb	r3, [r3, r2]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x24>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e1c0      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x3a6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2254      	movs	r2, #84	@ 0x54
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fd01 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d000      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x3c>
 8003bd2:	e1a3      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d100      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x46>
 8003bdc:	e143      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	2380      	movs	r3, #128	@ 0x80
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d004      	beq.n	8003bf4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bee:	4ac1      	ldr	r2, [pc, #772]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x35c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	0010      	movs	r0, r2
 8003c00:	f7ff fc14 	bl	800342c <LL_ADC_REG_SetSequencerChAdd>
 8003c04:	e0c9      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	211f      	movs	r1, #31
 8003c10:	400b      	ands	r3, r1
 8003c12:	210f      	movs	r1, #15
 8003c14:	4099      	lsls	r1, r3
 8003c16:	000b      	movs	r3, r1
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	035b      	lsls	r3, r3, #13
 8003c24:	0b5b      	lsrs	r3, r3, #13
 8003c26:	d105      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x9c>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0e9b      	lsrs	r3, r3, #26
 8003c2e:	221f      	movs	r2, #31
 8003c30:	4013      	ands	r3, r2
 8003c32:	e098      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d000      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0xa8>
 8003c3e:	e091      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x1cc>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d000      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0xb4>
 8003c4a:	e089      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x1c8>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2204      	movs	r2, #4
 8003c52:	4013      	ands	r3, r2
 8003c54:	d000      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0xc0>
 8003c56:	e081      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x1c4>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d000      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0xcc>
 8003c62:	e079      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x1c0>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0xd8>
 8003c6e:	e071      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x1bc>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2220      	movs	r2, #32
 8003c76:	4013      	ands	r3, r2
 8003c78:	d000      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0xe4>
 8003c7a:	e069      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x1b8>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2240      	movs	r2, #64	@ 0x40
 8003c82:	4013      	ands	r3, r2
 8003c84:	d000      	beq.n	8003c88 <HAL_ADC_ConfigChannel+0xf0>
 8003c86:	e061      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1b4>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2280      	movs	r2, #128	@ 0x80
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d000      	beq.n	8003c94 <HAL_ADC_ConfigChannel+0xfc>
 8003c92:	e059      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x1b0>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d151      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1ac>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d149      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1a8>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d141      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x1a4>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d139      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1a0>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	015b      	lsls	r3, r3, #5
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d131      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x19c>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	019b      	lsls	r3, r3, #6
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d129      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x198>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	01db      	lsls	r3, r3, #7
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d121      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x194>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	@ 0x80
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d119      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x190>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d111      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x18c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	029b      	lsls	r3, r3, #10
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d109      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x188>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	02db      	lsls	r3, r3, #11
 8003d14:	4013      	ands	r3, r2
 8003d16:	d001      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x184>
 8003d18:	2312      	movs	r3, #18
 8003d1a:	e024      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e022      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d20:	2311      	movs	r3, #17
 8003d22:	e020      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d24:	2310      	movs	r3, #16
 8003d26:	e01e      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d28:	230f      	movs	r3, #15
 8003d2a:	e01c      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	230e      	movs	r3, #14
 8003d2e:	e01a      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	230d      	movs	r3, #13
 8003d32:	e018      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	230c      	movs	r3, #12
 8003d36:	e016      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	230b      	movs	r3, #11
 8003d3a:	e014      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	e012      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	2309      	movs	r3, #9
 8003d42:	e010      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d44:	2308      	movs	r3, #8
 8003d46:	e00e      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d48:	2307      	movs	r3, #7
 8003d4a:	e00c      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d4c:	2306      	movs	r3, #6
 8003d4e:	e00a      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d50:	2305      	movs	r3, #5
 8003d52:	e008      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e006      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e004      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x1ce>
 8003d64:	2300      	movs	r3, #0
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6852      	ldr	r2, [r2, #4]
 8003d6a:	201f      	movs	r0, #31
 8003d6c:	4002      	ands	r2, r0
 8003d6e:	4093      	lsls	r3, r2
 8003d70:	000a      	movs	r2, r1
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d808      	bhi.n	8003d9a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	001a      	movs	r2, r3
 8003d96:	f7ff fb29 	bl	80033ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	001a      	movs	r2, r3
 8003da8:	f7ff fb64 	bl	8003474 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db00      	blt.n	8003db6 <HAL_ADC_ConfigChannel+0x21e>
 8003db4:	e0bc      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003db6:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fac5 	bl	8003348 <LL_ADC_GetCommonPathInternalCh>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8003efc <HAL_ADC_ConfigChannel+0x364>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d122      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dd4:	d11d      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2280      	movs	r2, #128	@ 0x80
 8003dda:	0412      	lsls	r2, r2, #16
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	4a46      	ldr	r2, [pc, #280]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003de0:	0019      	movs	r1, r3
 8003de2:	0010      	movs	r0, r2
 8003de4:	f7ff fa9c 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de8:	4b45      	ldr	r3, [pc, #276]	@ (8003f00 <HAL_ADC_ConfigChannel+0x368>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4945      	ldr	r1, [pc, #276]	@ (8003f04 <HAL_ADC_ConfigChannel+0x36c>)
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7fc f998 	bl	8000124 <__udivsi3>
 8003df4:	0003      	movs	r3, r0
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	0013      	movs	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e02:	e002      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f9      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e10:	e08e      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3c      	ldr	r2, [pc, #240]	@ (8003f08 <HAL_ADC_ConfigChannel+0x370>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10e      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	045b      	lsls	r3, r3, #17
 8003e22:	4013      	ands	r3, r2
 8003e24:	d109      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2280      	movs	r2, #128	@ 0x80
 8003e2a:	0452      	lsls	r2, r2, #17
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003e30:	0019      	movs	r1, r3
 8003e32:	0010      	movs	r0, r2
 8003e34:	f7ff fa74 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
 8003e38:	e07a      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a33      	ldr	r2, [pc, #204]	@ (8003f0c <HAL_ADC_ConfigChannel+0x374>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d000      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x2ae>
 8003e44:	e074      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	03db      	lsls	r3, r3, #15
 8003e4c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e4e:	d000      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x2ba>
 8003e50:	e06e      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	03d2      	lsls	r2, r2, #15
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	0010      	movs	r0, r2
 8003e60:	f7ff fa5e 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
 8003e64:	e064      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d004      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x35c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d107      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0019      	movs	r1, r3
 8003e86:	0010      	movs	r0, r2
 8003e88:	f7ff fae1 	bl	800344e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da4d      	bge.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e94:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7ff fa56 	bl	8003348 <LL_ADC_GetCommonPathInternalCh>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <HAL_ADC_ConfigChannel+0x364>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_ADC_ConfigChannel+0x378>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f7ff fa33 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
 8003eba:	e039      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a11      	ldr	r2, [pc, #68]	@ (8003f08 <HAL_ADC_ConfigChannel+0x370>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4a12      	ldr	r2, [pc, #72]	@ (8003f14 <HAL_ADC_ConfigChannel+0x37c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003ece:	0019      	movs	r1, r3
 8003ed0:	0010      	movs	r0, r2
 8003ed2:	f7ff fa25 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
 8003ed6:	e02b      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0b      	ldr	r2, [pc, #44]	@ (8003f0c <HAL_ADC_ConfigChannel+0x374>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d126      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <HAL_ADC_ConfigChannel+0x380>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	4a03      	ldr	r2, [pc, #12]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x360>)
 8003eea:	0019      	movs	r1, r3
 8003eec:	0010      	movs	r0, r2
 8003eee:	f7ff fa17 	bl	8003320 <LL_ADC_SetCommonPathInternalCh>
 8003ef2:	e01d      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x398>
 8003ef4:	80000004 	.word	0x80000004
 8003ef8:	40012708 	.word	0x40012708
 8003efc:	b0001000 	.word	0xb0001000
 8003f00:	20000018 	.word	0x20000018
 8003f04:	00030d40 	.word	0x00030d40
 8003f08:	b8004000 	.word	0xb8004000
 8003f0c:	b4002000 	.word	0xb4002000
 8003f10:	ff7fffff 	.word	0xff7fffff
 8003f14:	feffffff 	.word	0xfeffffff
 8003f18:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	2220      	movs	r2, #32
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f28:	2317      	movs	r3, #23
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2254      	movs	r2, #84	@ 0x54
 8003f34:	2100      	movs	r1, #0
 8003f36:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003f38:	2317      	movs	r3, #23
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	781b      	ldrb	r3, [r3, #0]
}
 8003f3e:	0018      	movs	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b006      	add	sp, #24
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)

08003f48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff fb3b 	bl	80035d0 <LL_ADC_REG_IsConversionOngoing>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d031      	beq.n	8003fc2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7ff faff 	bl	8003566 <LL_ADC_IsDisableOngoing>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d104      	bne.n	8003f76 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fb1b 	bl	80035ac <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f76:	f7ff f98f 	bl	8003298 <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f7e:	e01a      	b.n	8003fb6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f80:	f7ff f98a 	bl	8003298 <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d913      	bls.n	8003fb6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003faa:	2201      	movs	r2, #1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e006      	b.n	8003fc4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d1de      	bne.n	8003f80 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fab1 	bl	8003544 <LL_ADC_IsEnabled>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d000      	beq.n	8003fe8 <ADC_Enable+0x1c>
 8003fe6:	e069      	b.n	80040bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	4a36      	ldr	r2, [pc, #216]	@ (80040c8 <ADC_Enable+0xfc>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00d      	beq.n	8004010 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	2201      	movs	r2, #1
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e056      	b.n	80040be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fa71 	bl	80034fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800401a:	4b2c      	ldr	r3, [pc, #176]	@ (80040cc <ADC_Enable+0x100>)
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff f993 	bl	8003348 <LL_ADC_GetCommonPathInternalCh>
 8004022:	0002      	movs	r2, r0
 8004024:	2380      	movs	r3, #128	@ 0x80
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	4013      	ands	r3, r2
 800402a:	d00f      	beq.n	800404c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402c:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <ADC_Enable+0x104>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4928      	ldr	r1, [pc, #160]	@ (80040d4 <ADC_Enable+0x108>)
 8004032:	0018      	movs	r0, r3
 8004034:	f7fc f876 	bl	8000124 <__udivsi3>
 8004038:	0003      	movs	r3, r0
 800403a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800403c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800403e:	e002      	b.n	8004046 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7e5b      	ldrb	r3, [r3, #25]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d033      	beq.n	80040bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004054:	f7ff f920 	bl	8003298 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800405c:	e027      	b.n	80040ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff fa6e 	bl	8003544 <LL_ADC_IsEnabled>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d104      	bne.n	8004076 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff fa43 	bl	80034fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004076:	f7ff f90f 	bl	8003298 <HAL_GetTick>
 800407a:	0002      	movs	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d914      	bls.n	80040ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	2b01      	cmp	r3, #1
 8004090:	d00d      	beq.n	80040ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	2210      	movs	r2, #16
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	2201      	movs	r2, #1
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e007      	b.n	80040be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2201      	movs	r2, #1
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d1d0      	bne.n	800405e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b004      	add	sp, #16
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	80000017 	.word	0x80000017
 80040cc:	40012708 	.word	0x40012708
 80040d0:	20000018 	.word	0x20000018
 80040d4:	00030d40 	.word	0x00030d40

080040d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fa3e 	bl	8003566 <LL_ADC_IsDisableOngoing>
 80040ea:	0003      	movs	r3, r0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff fa26 	bl	8003544 <LL_ADC_IsEnabled>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d046      	beq.n	800418a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d143      	bne.n	800418a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2205      	movs	r2, #5
 800410a:	4013      	ands	r3, r2
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10d      	bne.n	800412c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fa03 	bl	8003520 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2203      	movs	r2, #3
 8004120:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004122:	f7ff f8b9 	bl	8003298 <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800412a:	e028      	b.n	800417e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	2210      	movs	r2, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413c:	2201      	movs	r2, #1
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e021      	b.n	800418c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004148:	f7ff f8a6 	bl	8003298 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d913      	bls.n	800417e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2201      	movs	r2, #1
 800415e:	4013      	ands	r3, r2
 8004160:	d00d      	beq.n	800417e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	2210      	movs	r2, #16
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	2201      	movs	r2, #1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e006      	b.n	800418c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d1de      	bne.n	8004148 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	1dfb      	adds	r3, r7, #7
 800419e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	1dfb      	adds	r3, r7, #7
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80041a6:	d809      	bhi.n	80041bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	231f      	movs	r3, #31
 80041b0:	401a      	ands	r2, r3
 80041b2:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <__NVIC_EnableIRQ+0x30>)
 80041b4:	2101      	movs	r1, #1
 80041b6:	4091      	lsls	r1, r2
 80041b8:	000a      	movs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b590      	push	{r4, r7, lr}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	0002      	movs	r2, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b7f      	cmp	r3, #127	@ 0x7f
 80041dc:	d828      	bhi.n	8004230 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041de:	4a2f      	ldr	r2, [pc, #188]	@ (800429c <__NVIC_SetPriority+0xd4>)
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	33c0      	adds	r3, #192	@ 0xc0
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	589b      	ldr	r3, [r3, r2]
 80041ee:	1dfa      	adds	r2, r7, #7
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	0011      	movs	r1, r2
 80041f4:	2203      	movs	r2, #3
 80041f6:	400a      	ands	r2, r1
 80041f8:	00d2      	lsls	r2, r2, #3
 80041fa:	21ff      	movs	r1, #255	@ 0xff
 80041fc:	4091      	lsls	r1, r2
 80041fe:	000a      	movs	r2, r1
 8004200:	43d2      	mvns	r2, r2
 8004202:	401a      	ands	r2, r3
 8004204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	22ff      	movs	r2, #255	@ 0xff
 800420c:	401a      	ands	r2, r3
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0018      	movs	r0, r3
 8004214:	2303      	movs	r3, #3
 8004216:	4003      	ands	r3, r0
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800421c:	481f      	ldr	r0, [pc, #124]	@ (800429c <__NVIC_SetPriority+0xd4>)
 800421e:	1dfb      	adds	r3, r7, #7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b25b      	sxtb	r3, r3
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	430a      	orrs	r2, r1
 8004228:	33c0      	adds	r3, #192	@ 0xc0
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800422e:	e031      	b.n	8004294 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004230:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <__NVIC_SetPriority+0xd8>)
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	0019      	movs	r1, r3
 8004238:	230f      	movs	r3, #15
 800423a:	400b      	ands	r3, r1
 800423c:	3b08      	subs	r3, #8
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3306      	adds	r3, #6
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	3304      	adds	r3, #4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1dfa      	adds	r2, r7, #7
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	0011      	movs	r1, r2
 8004250:	2203      	movs	r2, #3
 8004252:	400a      	ands	r2, r1
 8004254:	00d2      	lsls	r2, r2, #3
 8004256:	21ff      	movs	r1, #255	@ 0xff
 8004258:	4091      	lsls	r1, r2
 800425a:	000a      	movs	r2, r1
 800425c:	43d2      	mvns	r2, r2
 800425e:	401a      	ands	r2, r3
 8004260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	22ff      	movs	r2, #255	@ 0xff
 8004268:	401a      	ands	r2, r3
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	2303      	movs	r3, #3
 8004272:	4003      	ands	r3, r0
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004278:	4809      	ldr	r0, [pc, #36]	@ (80042a0 <__NVIC_SetPriority+0xd8>)
 800427a:	1dfb      	adds	r3, r7, #7
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	001c      	movs	r4, r3
 8004280:	230f      	movs	r3, #15
 8004282:	4023      	ands	r3, r4
 8004284:	3b08      	subs	r3, #8
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	430a      	orrs	r2, r1
 800428a:	3306      	adds	r3, #6
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	18c3      	adds	r3, r0, r3
 8004290:	3304      	adds	r3, #4
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	46c0      	nop			@ (mov r8, r8)
 8004296:	46bd      	mov	sp, r7
 8004298:	b003      	add	sp, #12
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	2380      	movs	r3, #128	@ 0x80
 80042b2:	045b      	lsls	r3, r3, #17
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d301      	bcc.n	80042bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b8:	2301      	movs	r3, #1
 80042ba:	e010      	b.n	80042de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042bc:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <SysTick_Config+0x44>)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	3a01      	subs	r2, #1
 80042c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042c4:	2301      	movs	r3, #1
 80042c6:	425b      	negs	r3, r3
 80042c8:	2103      	movs	r1, #3
 80042ca:	0018      	movs	r0, r3
 80042cc:	f7ff ff7c 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <SysTick_Config+0x44>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042d6:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <SysTick_Config+0x44>)
 80042d8:	2207      	movs	r2, #7
 80042da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	e000e010 	.word	0xe000e010

080042ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	210f      	movs	r1, #15
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	1c02      	adds	r2, r0, #0
 80042fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	187b      	adds	r3, r7, r1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	b25b      	sxtb	r3, r3
 8004306:	0011      	movs	r1, r2
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff ff5d 	bl	80041c8 <__NVIC_SetPriority>
}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	0002      	movs	r2, r0
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b25b      	sxtb	r3, r3
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff ff33 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff ffaf 	bl	80042a4 <SysTick_Config>
 8004346:	0003      	movs	r3, r0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e056      	b.n	8004410 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7f5b      	ldrb	r3, [r3, #29]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7fe fd53 	bl	8002e20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <HAL_CRC_Init+0xc8>)
 800438e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2118      	movs	r1, #24
 800439c:	438a      	bics	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	e00b      	b.n	80043ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f835 	bl	800441c <HAL_CRCEx_Polynomial_Set>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d001      	beq.n	80043ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e02a      	b.n	8004410 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	795b      	ldrb	r3, [r3, #5]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	4252      	negs	r2, r2
 80043ca:	611a      	str	r2, [r3, #16]
 80043cc:	e004      	b.n	80043d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6912      	ldr	r2, [r2, #16]
 80043d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2260      	movs	r2, #96	@ 0x60
 80043e0:	4393      	bics	r3, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2280      	movs	r2, #128	@ 0x80
 80043f8:	4393      	bics	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	04c11db7 	.word	0x04c11db7

0800441c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004428:	2117      	movs	r1, #23
 800442a:	187b      	adds	r3, r7, r1
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004430:	231f      	movs	r3, #31
 8004432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2201      	movs	r2, #1
 8004438:	4013      	ands	r3, r2
 800443a:	d103      	bne.n	8004444 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e045      	b.n	80044d0 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	613a      	str	r2, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_CRCEx_Polynomial_Set+0x46>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	221f      	movs	r2, #31
 8004454:	4013      	ands	r3, r2
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	40da      	lsrs	r2, r3
 800445a:	0013      	movs	r3, r2
 800445c:	2201      	movs	r2, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d0f1      	beq.n	8004446 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b18      	cmp	r3, #24
 8004466:	d00f      	beq.n	8004488 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b18      	cmp	r3, #24
 800446c:	d824      	bhi.n	80044b8 <HAL_CRCEx_Polynomial_Set+0x9c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b10      	cmp	r3, #16
 8004472:	d011      	beq.n	8004498 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d81e      	bhi.n	80044b8 <HAL_CRCEx_Polynomial_Set+0x9c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_CRCEx_Polynomial_Set+0xa6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b08      	cmp	r3, #8
 8004484:	d010      	beq.n	80044a8 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004486:	e017      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d91b      	bls.n	80044c6 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 800448e:	2317      	movs	r3, #23
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004496:	e016      	b.n	80044c6 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b07      	cmp	r3, #7
 800449c:	d915      	bls.n	80044ca <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 800449e:	2317      	movs	r3, #23
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80044a6:	e010      	b.n	80044ca <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d90f      	bls.n	80044ce <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80044ae:	2317      	movs	r3, #23
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80044b6:	e00a      	b.n	80044ce <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80044b8:	2317      	movs	r3, #23
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
        break;
 80044c0:	e006      	b.n	80044d0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	e004      	b.n	80044d0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	e002      	b.n	80044d0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	e000      	b.n	80044d0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80044ce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80044d0:	2317      	movs	r3, #23
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2218      	movs	r2, #24
 80044ea:	4393      	bics	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80044f8:	2317      	movs	r3, #23
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	781b      	ldrb	r3, [r3, #0]
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b006      	add	sp, #24
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e050      	b.n	80045bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2225      	movs	r2, #37	@ 0x25
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d008      	beq.n	8004538 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2204      	movs	r2, #4
 800452a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	@ 0x24
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e041      	b.n	80045bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	210e      	movs	r1, #14
 8004544:	438a      	bics	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	491c      	ldr	r1, [pc, #112]	@ (80045c4 <HAL_DMA_Abort+0xbc>)
 8004554:	400a      	ands	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2101      	movs	r1, #1
 8004564:	438a      	bics	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004568:	4b17      	ldr	r3, [pc, #92]	@ (80045c8 <HAL_DMA_Abort+0xc0>)
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	221c      	movs	r2, #28
 8004572:	4013      	ands	r3, r2
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <HAL_DMA_Abort+0xc0>)
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004586:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	490a      	ldr	r1, [pc, #40]	@ (80045c4 <HAL_DMA_Abort+0xbc>)
 800459c:	400a      	ands	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80045a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2225      	movs	r2, #37	@ 0x25
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2224      	movs	r2, #36	@ 0x24
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	fffffeff 	.word	0xfffffeff
 80045c8:	40020000 	.word	0x40020000

080045cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d4:	210f      	movs	r1, #15
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2225      	movs	r2, #37	@ 0x25
 80045e0:	5c9b      	ldrb	r3, [r3, r2]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d006      	beq.n	80045f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2204      	movs	r2, #4
 80045ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e049      	b.n	800468a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	210e      	movs	r1, #14
 8004602:	438a      	bics	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2101      	movs	r1, #1
 8004612:	438a      	bics	r2, r1
 8004614:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004620:	491d      	ldr	r1, [pc, #116]	@ (8004698 <HAL_DMA_Abort_IT+0xcc>)
 8004622:	400a      	ands	r2, r1
 8004624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <HAL_DMA_Abort_IT+0xd0>)
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	221c      	movs	r2, #28
 8004630:	4013      	ands	r3, r2
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_DMA_Abort_IT+0xd0>)
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004644:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004658:	490f      	ldr	r1, [pc, #60]	@ (8004698 <HAL_DMA_Abort_IT+0xcc>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004666:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2225      	movs	r2, #37	@ 0x25
 800466c:	2101      	movs	r1, #1
 800466e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	@ 0x24
 8004674:	2100      	movs	r1, #0
 8004676:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	0010      	movs	r0, r2
 8004688:	4798      	blx	r3
    }
  }
  return status;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	781b      	ldrb	r3, [r3, #0]
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b004      	add	sp, #16
 8004696:	bd80      	pop	{r7, pc}
 8004698:	fffffeff 	.word	0xfffffeff
 800469c:	40020000 	.word	0x40020000

080046a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ae:	e147      	b.n	8004940 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2101      	movs	r1, #1
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4091      	lsls	r1, r2
 80046ba:	000a      	movs	r2, r1
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d100      	bne.n	80046c8 <HAL_GPIO_Init+0x28>
 80046c6:	e138      	b.n	800493a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2203      	movs	r2, #3
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d005      	beq.n	80046e0 <HAL_GPIO_Init+0x40>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2203      	movs	r2, #3
 80046da:	4013      	ands	r3, r2
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d130      	bne.n	8004742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	409a      	lsls	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	43da      	mvns	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	409a      	lsls	r2, r3
 8004702:	0013      	movs	r3, r2
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004716:	2201      	movs	r2, #1
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	409a      	lsls	r2, r3
 800471c:	0013      	movs	r3, r2
 800471e:	43da      	mvns	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	2201      	movs	r2, #1
 800472e:	401a      	ands	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	409a      	lsls	r2, r3
 8004734:	0013      	movs	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2203      	movs	r2, #3
 8004748:	4013      	ands	r3, r2
 800474a:	2b03      	cmp	r3, #3
 800474c:	d017      	beq.n	800477e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	2203      	movs	r2, #3
 800475a:	409a      	lsls	r2, r3
 800475c:	0013      	movs	r3, r2
 800475e:	43da      	mvns	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4013      	ands	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	0013      	movs	r3, r2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2203      	movs	r2, #3
 8004784:	4013      	ands	r3, r2
 8004786:	2b02      	cmp	r3, #2
 8004788:	d123      	bne.n	80047d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	08da      	lsrs	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3208      	adds	r2, #8
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	58d3      	ldr	r3, [r2, r3]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2207      	movs	r2, #7
 800479c:	4013      	ands	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	409a      	lsls	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	43da      	mvns	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2107      	movs	r1, #7
 80047b6:	400b      	ands	r3, r1
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	409a      	lsls	r2, r3
 80047bc:	0013      	movs	r3, r2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	0092      	lsls	r2, r2, #2
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	409a      	lsls	r2, r3
 80047e0:	0013      	movs	r3, r2
 80047e2:	43da      	mvns	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2203      	movs	r2, #3
 80047f0:	401a      	ands	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	409a      	lsls	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	23c0      	movs	r3, #192	@ 0xc0
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	4013      	ands	r3, r2
 8004810:	d100      	bne.n	8004814 <HAL_GPIO_Init+0x174>
 8004812:	e092      	b.n	800493a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004814:	4a50      	ldr	r2, [pc, #320]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3318      	adds	r3, #24
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	589b      	ldr	r3, [r3, r2]
 8004820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2203      	movs	r2, #3
 8004826:	4013      	ands	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	220f      	movs	r2, #15
 800482c:	409a      	lsls	r2, r3
 800482e:	0013      	movs	r3, r2
 8004830:	43da      	mvns	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	23a0      	movs	r3, #160	@ 0xa0
 800483c:	05db      	lsls	r3, r3, #23
 800483e:	429a      	cmp	r2, r3
 8004840:	d013      	beq.n	800486a <HAL_GPIO_Init+0x1ca>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a45      	ldr	r2, [pc, #276]	@ (800495c <HAL_GPIO_Init+0x2bc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_Init+0x1c6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a44      	ldr	r2, [pc, #272]	@ (8004960 <HAL_GPIO_Init+0x2c0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_Init+0x1c2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a43      	ldr	r2, [pc, #268]	@ (8004964 <HAL_GPIO_Init+0x2c4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_Init+0x1be>
 800485a:	2303      	movs	r3, #3
 800485c:	e006      	b.n	800486c <HAL_GPIO_Init+0x1cc>
 800485e:	2305      	movs	r3, #5
 8004860:	e004      	b.n	800486c <HAL_GPIO_Init+0x1cc>
 8004862:	2302      	movs	r3, #2
 8004864:	e002      	b.n	800486c <HAL_GPIO_Init+0x1cc>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x1cc>
 800486a:	2300      	movs	r3, #0
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	2103      	movs	r1, #3
 8004870:	400a      	ands	r2, r1
 8004872:	00d2      	lsls	r2, r2, #3
 8004874:	4093      	lsls	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800487c:	4936      	ldr	r1, [pc, #216]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3318      	adds	r3, #24
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800488a:	4b33      	ldr	r3, [pc, #204]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	43da      	mvns	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	035b      	lsls	r3, r3, #13
 80048a2:	4013      	ands	r3, r2
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80048b4:	4b28      	ldr	r3, [pc, #160]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43da      	mvns	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	039b      	lsls	r3, r3, #14
 80048cc:	4013      	ands	r3, r2
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048de:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 80048e0:	2384      	movs	r3, #132	@ 0x84
 80048e2:	58d3      	ldr	r3, [r2, r3]
 80048e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	43da      	mvns	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4013      	ands	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	029b      	lsls	r3, r3, #10
 80048f8:	4013      	ands	r3, r2
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004904:	4914      	ldr	r1, [pc, #80]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 8004906:	2284      	movs	r2, #132	@ 0x84
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800490c:	4a12      	ldr	r2, [pc, #72]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	58d3      	ldr	r3, [r2, r3]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	43da      	mvns	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	4013      	ands	r3, r2
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004932:	4909      	ldr	r1, [pc, #36]	@ (8004958 <HAL_GPIO_Init+0x2b8>)
 8004934:	2280      	movs	r2, #128	@ 0x80
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	40da      	lsrs	r2, r3
 8004948:	1e13      	subs	r3, r2, #0
 800494a:	d000      	beq.n	800494e <HAL_GPIO_Init+0x2ae>
 800494c:	e6b0      	b.n	80046b0 <HAL_GPIO_Init+0x10>
  }
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40021800 	.word	0x40021800
 800495c:	50000400 	.word	0x50000400
 8004960:	50000800 	.word	0x50000800
 8004964:	50000c00 	.word	0x50000c00

08004968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	0008      	movs	r0, r1
 8004972:	0011      	movs	r1, r2
 8004974:	1cbb      	adds	r3, r7, #2
 8004976:	1c02      	adds	r2, r0, #0
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	1c7b      	adds	r3, r7, #1
 800497c:	1c0a      	adds	r2, r1, #0
 800497e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004980:	1c7b      	adds	r3, r7, #1
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004988:	1cbb      	adds	r3, r7, #2
 800498a:	881a      	ldrh	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004990:	e003      	b.n	800499a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004992:	1cbb      	adds	r3, r7, #2
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80049ac:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	4b17      	ldr	r3, [pc, #92]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d11f      	bne.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	0013      	movs	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4912      	ldr	r1, [pc, #72]	@ (8004a20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7fb fba4 	bl	8000124 <__udivsi3>
 80049dc:	0003      	movs	r3, r0
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049e2:	e008      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e001      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e009      	b.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f6:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	401a      	ands	r2, r3
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d0ed      	beq.n	80049e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	40007000 	.word	0x40007000
 8004a18:	fffff9ff 	.word	0xfffff9ff
 8004a1c:	20000018 	.word	0x20000018
 8004a20:	000f4240 	.word	0x000f4240

08004a24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a28:	4b03      	ldr	r3, [pc, #12]	@ (8004a38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	23e0      	movs	r3, #224	@ 0xe0
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	4013      	ands	r3, r2
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000

08004a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e2f3      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	4013      	ands	r3, r2
 8004a56:	d100      	bne.n	8004a5a <HAL_RCC_OscConfig+0x1e>
 8004a58:	e07c      	b.n	8004b54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	4bc3      	ldr	r3, [pc, #780]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2238      	movs	r2, #56	@ 0x38
 8004a60:	4013      	ands	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a64:	4bc0      	ldr	r3, [pc, #768]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2203      	movs	r2, #3
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3e>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d002      	beq.n	8004a80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10b      	bne.n	8004a98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	4bb9      	ldr	r3, [pc, #740]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d062      	beq.n	8004b52 <HAL_RCC_OscConfig+0x116>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d15e      	bne.n	8004b52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e2ce      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	2380      	movs	r3, #128	@ 0x80
 8004a9e:	025b      	lsls	r3, r3, #9
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x78>
 8004aa4:	4bb0      	ldr	r3, [pc, #704]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4baf      	ldr	r3, [pc, #700]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004aaa:	2180      	movs	r1, #128	@ 0x80
 8004aac:	0249      	lsls	r1, r1, #9
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	e020      	b.n	8004af6 <HAL_RCC_OscConfig+0xba>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	23a0      	movs	r3, #160	@ 0xa0
 8004aba:	02db      	lsls	r3, r3, #11
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d10e      	bne.n	8004ade <HAL_RCC_OscConfig+0xa2>
 8004ac0:	4ba9      	ldr	r3, [pc, #676]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4ba8      	ldr	r3, [pc, #672]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ac6:	2180      	movs	r1, #128	@ 0x80
 8004ac8:	02c9      	lsls	r1, r1, #11
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	4ba6      	ldr	r3, [pc, #664]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4ba5      	ldr	r3, [pc, #660]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ad4:	2180      	movs	r1, #128	@ 0x80
 8004ad6:	0249      	lsls	r1, r1, #9
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e00b      	b.n	8004af6 <HAL_RCC_OscConfig+0xba>
 8004ade:	4ba2      	ldr	r3, [pc, #648]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4ba1      	ldr	r3, [pc, #644]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ae4:	49a1      	ldr	r1, [pc, #644]	@ (8004d6c <HAL_RCC_OscConfig+0x330>)
 8004ae6:	400a      	ands	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	4b9f      	ldr	r3, [pc, #636]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b9e      	ldr	r3, [pc, #632]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004af0:	499f      	ldr	r1, [pc, #636]	@ (8004d70 <HAL_RCC_OscConfig+0x334>)
 8004af2:	400a      	ands	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d014      	beq.n	8004b28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fe fbcb 	bl	8003298 <HAL_GetTick>
 8004b02:	0003      	movs	r3, r0
 8004b04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe fbc6 	bl	8003298 <HAL_GetTick>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e28d      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1a:	4b93      	ldr	r3, [pc, #588]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	4013      	ands	r3, r2
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xcc>
 8004b26:	e015      	b.n	8004b54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fe fbb6 	bl	8003298 <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b32:	f7fe fbb1 	bl	8003298 <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	@ 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e278      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b44:	4b88      	ldr	r3, [pc, #544]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0xf6>
 8004b50:	e000      	b.n	8004b54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d100      	bne.n	8004b60 <HAL_RCC_OscConfig+0x124>
 8004b5e:	e099      	b.n	8004c94 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b60:	4b81      	ldr	r3, [pc, #516]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2238      	movs	r2, #56	@ 0x38
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4013      	ands	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d102      	bne.n	8004b80 <HAL_RCC_OscConfig+0x144>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d002      	beq.n	8004b86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d135      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b86:	4b78      	ldr	r3, [pc, #480]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x162>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e24b      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b72      	ldr	r3, [pc, #456]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4a74      	ldr	r2, [pc, #464]	@ (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	4b6e      	ldr	r3, [pc, #440]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bba:	4b6b      	ldr	r3, [pc, #428]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	4b67      	ldr	r3, [pc, #412]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bce:	4b66      	ldr	r3, [pc, #408]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	4a68      	ldr	r2, [pc, #416]	@ (8004d7c <HAL_RCC_OscConfig+0x340>)
 8004bda:	40da      	lsrs	r2, r3
 8004bdc:	4b68      	ldr	r3, [pc, #416]	@ (8004d80 <HAL_RCC_OscConfig+0x344>)
 8004bde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004be0:	4b68      	ldr	r3, [pc, #416]	@ (8004d84 <HAL_RCC_OscConfig+0x348>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe fafb 	bl	80031e0 <HAL_InitTick>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d051      	beq.n	8004c92 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e221      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d030      	beq.n	8004c5c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8004d78 <HAL_RCC_OscConfig+0x33c>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	4b57      	ldr	r3, [pc, #348]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c0e:	4b56      	ldr	r3, [pc, #344]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b55      	ldr	r3, [pc, #340]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c14:	2180      	movs	r1, #128	@ 0x80
 8004c16:	0049      	lsls	r1, r1, #1
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fb3c 	bl	8003298 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fe fb37 	bl	8003298 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e1fe      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c38:	4b4b      	ldr	r3, [pc, #300]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2380      	movs	r3, #128	@ 0x80
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4013      	ands	r3, r2
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	4b48      	ldr	r3, [pc, #288]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a4a      	ldr	r2, [pc, #296]	@ (8004d74 <HAL_RCC_OscConfig+0x338>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	4b44      	ldr	r3, [pc, #272]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	e01b      	b.n	8004c94 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004c5c:	4b42      	ldr	r3, [pc, #264]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b41      	ldr	r3, [pc, #260]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c62:	4949      	ldr	r1, [pc, #292]	@ (8004d88 <HAL_RCC_OscConfig+0x34c>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fe fb16 	bl	8003298 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe fb11 	bl	8003298 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1d8      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c84:	4b38      	ldr	r3, [pc, #224]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	@ 0x80
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x236>
 8004c90:	e000      	b.n	8004c94 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c92:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d047      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c9e:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2238      	movs	r2, #56	@ 0x38
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b18      	cmp	r3, #24
 8004ca8:	d10a      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cae:	2202      	movs	r2, #2
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d03c      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d138      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e1ba      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004cc8:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ccc:	4b26      	ldr	r3, [pc, #152]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fae0 	bl	8003298 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fe fadb 	bl	8003298 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a2      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d0f1      	beq.n	8004cde <HAL_RCC_OscConfig+0x2a2>
 8004cfa:	e018      	b.n	8004d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004cfe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d00:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d02:	2101      	movs	r1, #1
 8004d04:	438a      	bics	r2, r1
 8004d06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fe fac6 	bl	8003298 <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fe fac1 	bl	8003298 <HAL_GetTick>
 8004d16:	0002      	movs	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e188      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d24:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d28:	2202      	movs	r2, #2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d1f1      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2204      	movs	r2, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	d100      	bne.n	8004d3a <HAL_RCC_OscConfig+0x2fe>
 8004d38:	e0c6      	b.n	8004ec8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3a:	231f      	movs	r3, #31
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d42:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2238      	movs	r2, #56	@ 0x38
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d11e      	bne.n	8004d8c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <HAL_RCC_OscConfig+0x32c>)
 8004d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	d100      	bne.n	8004d5a <HAL_RCC_OscConfig+0x31e>
 8004d58:	e0b6      	b.n	8004ec8 <HAL_RCC_OscConfig+0x48c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d000      	beq.n	8004d64 <HAL_RCC_OscConfig+0x328>
 8004d62:	e0b1      	b.n	8004ec8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e166      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	fffeffff 	.word	0xfffeffff
 8004d70:	fffbffff 	.word	0xfffbffff
 8004d74:	ffff80ff 	.word	0xffff80ff
 8004d78:	ffffc7ff 	.word	0xffffc7ff
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	20000018 	.word	0x20000018
 8004d84:	2000001c 	.word	0x2000001c
 8004d88:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d8c:	4bac      	ldr	r3, [pc, #688]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	055b      	lsls	r3, r3, #21
 8004d94:	4013      	ands	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_OscConfig+0x360>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x362>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	4ba7      	ldr	r3, [pc, #668]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da6:	4ba6      	ldr	r3, [pc, #664]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004da8:	2180      	movs	r1, #128	@ 0x80
 8004daa:	0549      	lsls	r1, r1, #21
 8004dac:	430a      	orrs	r2, r1
 8004dae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004db0:	4ba3      	ldr	r3, [pc, #652]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	055b      	lsls	r3, r3, #21
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004dbe:	231f      	movs	r3, #31
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc6:	4b9f      	ldr	r3, [pc, #636]	@ (8005044 <HAL_RCC_OscConfig+0x608>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	@ 0x80
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d11a      	bne.n	8004e08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005044 <HAL_RCC_OscConfig+0x608>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b9b      	ldr	r3, [pc, #620]	@ (8005044 <HAL_RCC_OscConfig+0x608>)
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	0049      	lsls	r1, r1, #1
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004de0:	f7fe fa5a 	bl	8003298 <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7fe fa55 	bl	8003298 <HAL_GetTick>
 8004dee:	0002      	movs	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e11c      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfc:	4b91      	ldr	r3, [pc, #580]	@ (8005044 <HAL_RCC_OscConfig+0x608>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3e2>
 8004e10:	4b8b      	ldr	r3, [pc, #556]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e14:	4b8a      	ldr	r3, [pc, #552]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e16:	2101      	movs	r1, #1
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e1c:	e01c      	b.n	8004e58 <HAL_RCC_OscConfig+0x41c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x404>
 8004e26:	4b86      	ldr	r3, [pc, #536]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e2a:	4b85      	ldr	r3, [pc, #532]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e32:	4b83      	ldr	r3, [pc, #524]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e36:	4b82      	ldr	r3, [pc, #520]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0x41c>
 8004e40:	4b7f      	ldr	r3, [pc, #508]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e44:	4b7e      	ldr	r3, [pc, #504]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e46:	2101      	movs	r1, #1
 8004e48:	438a      	bics	r2, r1
 8004e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e50:	4b7b      	ldr	r3, [pc, #492]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d014      	beq.n	8004e8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe fa1a 	bl	8003298 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e68:	e009      	b.n	8004e7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fe fa15 	bl	8003298 <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	4a74      	ldr	r2, [pc, #464]	@ (8005048 <HAL_RCC_OscConfig+0x60c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0db      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7e:	4b70      	ldr	r3, [pc, #448]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x42e>
 8004e88:	e013      	b.n	8004eb2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8a:	f7fe fa05 	bl	8003298 <HAL_GetTick>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e92:	e009      	b.n	8004ea8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fe fa00 	bl	8003298 <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8005048 <HAL_RCC_OscConfig+0x60c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0c6      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea8:	4b65      	ldr	r3, [pc, #404]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	2202      	movs	r2, #2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004eb2:	231f      	movs	r3, #31
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ebc:	4b60      	ldr	r3, [pc, #384]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ec0:	4b5f      	ldr	r3, [pc, #380]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004ec2:	4962      	ldr	r1, [pc, #392]	@ (800504c <HAL_RCC_OscConfig+0x610>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d100      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x496>
 8004ed0:	e0b0      	b.n	8005034 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2238      	movs	r2, #56	@ 0x38
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d100      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4a4>
 8004ede:	e078      	b.n	8004fd2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d153      	bne.n	8004f90 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b55      	ldr	r3, [pc, #340]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b54      	ldr	r3, [pc, #336]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004eee:	4958      	ldr	r1, [pc, #352]	@ (8005050 <HAL_RCC_OscConfig+0x614>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe f9d0 	bl	8003298 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fe f9cb 	bl	8003298 <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e092      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	4b4b      	ldr	r3, [pc, #300]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	049b      	lsls	r3, r3, #18
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d1f0      	bne.n	8004efe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f1c:	4b48      	ldr	r3, [pc, #288]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a4c      	ldr	r2, [pc, #304]	@ (8005054 <HAL_RCC_OscConfig+0x618>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	431a      	orrs	r2, r3
 8004f44:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f46:	430a      	orrs	r2, r1
 8004f48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f50:	2180      	movs	r1, #128	@ 0x80
 8004f52:	0449      	lsls	r1, r1, #17
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004f58:	4b39      	ldr	r3, [pc, #228]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	4b38      	ldr	r3, [pc, #224]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f5e:	2180      	movs	r1, #128	@ 0x80
 8004f60:	0549      	lsls	r1, r1, #21
 8004f62:	430a      	orrs	r2, r1
 8004f64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fe f997 	bl	8003298 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f70:	f7fe f992 	bl	8003298 <HAL_GetTick>
 8004f74:	0002      	movs	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e059      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	049b      	lsls	r3, r3, #18
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x534>
 8004f8e:	e051      	b.n	8005034 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f90:	4b2b      	ldr	r3, [pc, #172]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b2a      	ldr	r3, [pc, #168]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004f96:	492e      	ldr	r1, [pc, #184]	@ (8005050 <HAL_RCC_OscConfig+0x614>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fe f97c 	bl	8003298 <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe f977 	bl	8003298 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e03e      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb8:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	049b      	lsls	r3, r3, #18
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d1f0      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004fca:	4923      	ldr	r1, [pc, #140]	@ (8005058 <HAL_RCC_OscConfig+0x61c>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	e030      	b.n	8005034 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e02b      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004fde:	4b18      	ldr	r3, [pc, #96]	@ (8005040 <HAL_RCC_OscConfig+0x604>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	401a      	ands	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d11e      	bne.n	8005030 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2270      	movs	r2, #112	@ 0x70
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d117      	bne.n	8005030 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	23fe      	movs	r3, #254	@ 0xfe
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d10e      	bne.n	8005030 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	23f8      	movs	r3, #248	@ 0xf8
 8005016:	039b      	lsls	r3, r3, #14
 8005018:	401a      	ands	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0f5b      	lsrs	r3, r3, #29
 8005026:	075a      	lsls	r2, r3, #29
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b008      	add	sp, #32
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	40021000 	.word	0x40021000
 8005044:	40007000 	.word	0x40007000
 8005048:	00001388 	.word	0x00001388
 800504c:	efffffff 	.word	0xefffffff
 8005050:	feffffff 	.word	0xfeffffff
 8005054:	1fc1808c 	.word	0x1fc1808c
 8005058:	effefffc 	.word	0xeffefffc

0800505c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0e9      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005070:	4b76      	ldr	r3, [pc, #472]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2207      	movs	r2, #7
 8005076:	4013      	ands	r3, r2
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d91e      	bls.n	80050bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	4b73      	ldr	r3, [pc, #460]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2207      	movs	r2, #7
 8005084:	4393      	bics	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	4b70      	ldr	r3, [pc, #448]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005090:	f7fe f902 	bl	8003298 <HAL_GetTick>
 8005094:	0003      	movs	r3, r0
 8005096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005098:	e009      	b.n	80050ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509a:	f7fe f8fd 	bl	8003298 <HAL_GetTick>
 800509e:	0002      	movs	r2, r0
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005250 <HAL_RCC_ClockConfig+0x1f4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0ca      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050ae:	4b67      	ldr	r3, [pc, #412]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2207      	movs	r2, #7
 80050b4:	4013      	ands	r3, r2
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1ee      	bne.n	800509a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2202      	movs	r2, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	d015      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	d006      	beq.n	80050de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050d0:	4b60      	ldr	r3, [pc, #384]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	4b5f      	ldr	r3, [pc, #380]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 80050d6:	21e0      	movs	r1, #224	@ 0xe0
 80050d8:	01c9      	lsls	r1, r1, #7
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050de:	4b5d      	ldr	r3, [pc, #372]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005258 <HAL_RCC_ClockConfig+0x1fc>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	4013      	ands	r3, r2
 80050fa:	d057      	beq.n	80051ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d107      	bne.n	8005114 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005104:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	4013      	ands	r3, r2
 800510e:	d12b      	bne.n	8005168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e097      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d107      	bne.n	800512c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511c:	4b4d      	ldr	r3, [pc, #308]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	049b      	lsls	r3, r3, #18
 8005124:	4013      	ands	r3, r2
 8005126:	d11f      	bne.n	8005168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e08b      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005134:	4b47      	ldr	r3, [pc, #284]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4013      	ands	r3, r2
 800513e:	d113      	bne.n	8005168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e07f      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d106      	bne.n	800515a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800514c:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800514e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005150:	2202      	movs	r2, #2
 8005152:	4013      	ands	r3, r2
 8005154:	d108      	bne.n	8005168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e074      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515a:	4b3e      	ldr	r3, [pc, #248]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e06d      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005168:	4b3a      	ldr	r3, [pc, #232]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2207      	movs	r2, #7
 800516e:	4393      	bics	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b37      	ldr	r3, [pc, #220]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517c:	f7fe f88c 	bl	8003298 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005184:	e009      	b.n	800519a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005186:	f7fe f887 	bl	8003298 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	4a2f      	ldr	r2, [pc, #188]	@ (8005250 <HAL_RCC_ClockConfig+0x1f4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e054      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	4b2e      	ldr	r3, [pc, #184]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2238      	movs	r2, #56	@ 0x38
 80051a0:	401a      	ands	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1ec      	bne.n	8005186 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b27      	ldr	r3, [pc, #156]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2207      	movs	r2, #7
 80051b2:	4013      	ands	r3, r2
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d21e      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b24      	ldr	r3, [pc, #144]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2207      	movs	r2, #7
 80051c0:	4393      	bics	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	4b21      	ldr	r3, [pc, #132]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051cc:	f7fe f864 	bl	8003298 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051d4:	e009      	b.n	80051ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d6:	f7fe f85f 	bl	8003298 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_RCC_ClockConfig+0x1f4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e02c      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051ea:	4b18      	ldr	r3, [pc, #96]	@ (800524c <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2207      	movs	r2, #7
 80051f0:	4013      	ands	r3, r2
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1ee      	bne.n	80051d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2204      	movs	r2, #4
 80051fe:	4013      	ands	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	4a15      	ldr	r2, [pc, #84]	@ (800525c <HAL_RCC_ClockConfig+0x200>)
 8005208:	4013      	ands	r3, r2
 800520a:	0019      	movs	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005216:	f000 f829 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800521a:	0001      	movs	r1, r0
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <HAL_RCC_ClockConfig+0x1f8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	220f      	movs	r2, #15
 8005224:	401a      	ands	r2, r3
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <HAL_RCC_ClockConfig+0x204>)
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	58d3      	ldr	r3, [r2, r3]
 800522c:	221f      	movs	r2, #31
 800522e:	4013      	ands	r3, r2
 8005230:	000a      	movs	r2, r1
 8005232:	40da      	lsrs	r2, r3
 8005234:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <HAL_RCC_ClockConfig+0x208>)
 8005236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCC_ClockConfig+0x20c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0018      	movs	r0, r3
 800523e:	f7fd ffcf 	bl	80031e0 <HAL_InitTick>
 8005242:	0003      	movs	r3, r0
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b004      	add	sp, #16
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40022000 	.word	0x40022000
 8005250:	00001388 	.word	0x00001388
 8005254:	40021000 	.word	0x40021000
 8005258:	fffff0ff 	.word	0xfffff0ff
 800525c:	ffff8fff 	.word	0xffff8fff
 8005260:	08008170 	.word	0x08008170
 8005264:	20000018 	.word	0x20000018
 8005268:	2000001c 	.word	0x2000001c

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005272:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2238      	movs	r2, #56	@ 0x38
 8005278:	4013      	ands	r3, r2
 800527a:	d10f      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800527c:	4b39      	ldr	r3, [pc, #228]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0adb      	lsrs	r3, r3, #11
 8005282:	2207      	movs	r2, #7
 8005284:	4013      	ands	r3, r2
 8005286:	2201      	movs	r2, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	4835      	ldr	r0, [pc, #212]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005292:	f7fa ff47 	bl	8000124 <__udivsi3>
 8005296:	0003      	movs	r3, r0
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e05d      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800529c:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2238      	movs	r2, #56	@ 0x38
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d102      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a8:	4b30      	ldr	r3, [pc, #192]	@ (800536c <HAL_RCC_GetSysClockFreq+0x100>)
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e054      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2238      	movs	r2, #56	@ 0x38
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d138      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80052ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2203      	movs	r2, #3
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c4:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	2207      	movs	r2, #7
 80052cc:	4013      	ands	r3, r2
 80052ce:	3301      	adds	r3, #1
 80052d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4824      	ldr	r0, [pc, #144]	@ (800536c <HAL_RCC_GetSysClockFreq+0x100>)
 80052dc:	f7fa ff22 	bl	8000124 <__udivsi3>
 80052e0:	0003      	movs	r3, r0
 80052e2:	0019      	movs	r1, r3
 80052e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	0a1b      	lsrs	r3, r3, #8
 80052ea:	227f      	movs	r2, #127	@ 0x7f
 80052ec:	4013      	ands	r3, r2
 80052ee:	434b      	muls	r3, r1
 80052f0:	617b      	str	r3, [r7, #20]
        break;
 80052f2:	e00d      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	481c      	ldr	r0, [pc, #112]	@ (8005368 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052f8:	f7fa ff14 	bl	8000124 <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	0019      	movs	r1, r3
 8005300:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	227f      	movs	r2, #127	@ 0x7f
 8005308:	4013      	ands	r3, r2
 800530a:	434b      	muls	r3, r1
 800530c:	617b      	str	r3, [r7, #20]
        break;
 800530e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005310:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	0f5b      	lsrs	r3, r3, #29
 8005316:	2207      	movs	r2, #7
 8005318:	4013      	ands	r3, r2
 800531a:	3301      	adds	r3, #1
 800531c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f7fa feff 	bl	8000124 <__udivsi3>
 8005326:	0003      	movs	r3, r0
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e015      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800532c:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2238      	movs	r2, #56	@ 0x38
 8005332:	4013      	ands	r3, r2
 8005334:	2b20      	cmp	r3, #32
 8005336:	d103      	bne.n	8005340 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e00b      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005340:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2238      	movs	r2, #56	@ 0x38
 8005346:	4013      	ands	r3, r2
 8005348:	2b18      	cmp	r3, #24
 800534a:	d103      	bne.n	8005354 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800534c:	23fa      	movs	r3, #250	@ 0xfa
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e001      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005358:	693b      	ldr	r3, [r7, #16]
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b006      	add	sp, #24
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	40021000 	.word	0x40021000
 8005368:	00f42400 	.word	0x00f42400
 800536c:	007a1200 	.word	0x007a1200

08005370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005374:	4b02      	ldr	r3, [pc, #8]	@ (8005380 <HAL_RCC_GetHCLKFreq+0x10>)
 8005376:	681b      	ldr	r3, [r3, #0]
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	20000018 	.word	0x20000018

08005384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005384:	b5b0      	push	{r4, r5, r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005388:	f7ff fff2 	bl	8005370 <HAL_RCC_GetHCLKFreq>
 800538c:	0004      	movs	r4, r0
 800538e:	f7ff fb49 	bl	8004a24 <LL_RCC_GetAPB1Prescaler>
 8005392:	0003      	movs	r3, r0
 8005394:	0b1a      	lsrs	r2, r3, #12
 8005396:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005398:	0092      	lsls	r2, r2, #2
 800539a:	58d3      	ldr	r3, [r2, r3]
 800539c:	221f      	movs	r2, #31
 800539e:	4013      	ands	r3, r2
 80053a0:	40dc      	lsrs	r4, r3
 80053a2:	0023      	movs	r3, r4
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bdb0      	pop	{r4, r5, r7, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	080081b0 	.word	0x080081b0

080053b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80053b8:	2313      	movs	r3, #19
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053c0:	2312      	movs	r3, #18
 80053c2:	18fb      	adds	r3, r7, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	2380      	movs	r3, #128	@ 0x80
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	4013      	ands	r3, r2
 80053d2:	d100      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80053d4:	e0a3      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d6:	2011      	movs	r0, #17
 80053d8:	183b      	adds	r3, r7, r0
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053de:	4b86      	ldr	r3, [pc, #536]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	055b      	lsls	r3, r3, #21
 80053e6:	4013      	ands	r3, r2
 80053e8:	d110      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ea:	4b83      	ldr	r3, [pc, #524]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ee:	4b82      	ldr	r3, [pc, #520]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	0549      	lsls	r1, r1, #21
 80053f4:	430a      	orrs	r2, r1
 80053f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053f8:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	055b      	lsls	r3, r3, #21
 8005400:	4013      	ands	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005406:	183b      	adds	r3, r7, r0
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540c:	4b7b      	ldr	r3, [pc, #492]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b7a      	ldr	r3, [pc, #488]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	0049      	lsls	r1, r1, #1
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541a:	f7fd ff3d 	bl	8003298 <HAL_GetTick>
 800541e:	0003      	movs	r3, r0
 8005420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005422:	e00b      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fd ff38 	bl	8003298 <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d904      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005432:	2313      	movs	r3, #19
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2203      	movs	r2, #3
 8005438:	701a      	strb	r2, [r3, #0]
        break;
 800543a:	e005      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800543c:	4b6f      	ldr	r3, [pc, #444]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2380      	movs	r3, #128	@ 0x80
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4013      	ands	r3, r2
 8005446:	d0ed      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005448:	2313      	movs	r3, #19
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d154      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005452:	4b69      	ldr	r3, [pc, #420]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005456:	23c0      	movs	r3, #192	@ 0xc0
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4013      	ands	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	429a      	cmp	r2, r3
 800546c:	d014      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800546e:	4b62      	ldr	r3, [pc, #392]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005472:	4a63      	ldr	r2, [pc, #396]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005474:	4013      	ands	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005478:	4b5f      	ldr	r3, [pc, #380]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800547a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800547c:	4b5e      	ldr	r3, [pc, #376]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800547e:	2180      	movs	r1, #128	@ 0x80
 8005480:	0249      	lsls	r1, r1, #9
 8005482:	430a      	orrs	r2, r1
 8005484:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005486:	4b5c      	ldr	r3, [pc, #368]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800548a:	4b5b      	ldr	r3, [pc, #364]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800548c:	495d      	ldr	r1, [pc, #372]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800548e:	400a      	ands	r2, r1
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005492:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2201      	movs	r2, #1
 800549c:	4013      	ands	r3, r2
 800549e:	d016      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd fefa 	bl	8003298 <HAL_GetTick>
 80054a4:	0003      	movs	r3, r0
 80054a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a8:	e00c      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fd fef5 	bl	8003298 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	4a54      	ldr	r2, [pc, #336]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d904      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80054ba:	2313      	movs	r3, #19
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
            break;
 80054c2:	e004      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	4b4c      	ldr	r3, [pc, #304]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c8:	2202      	movs	r2, #2
 80054ca:	4013      	ands	r3, r2
 80054cc:	d0ed      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80054ce:	2313      	movs	r3, #19
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054d8:	4b47      	ldr	r3, [pc, #284]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054dc:	4a48      	ldr	r2, [pc, #288]	@ (8005600 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	4b44      	ldr	r3, [pc, #272]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054ec:	e00c      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ee:	2312      	movs	r3, #18
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2213      	movs	r2, #19
 80054f4:	18ba      	adds	r2, r7, r2
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e005      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	2312      	movs	r3, #18
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	2213      	movs	r2, #19
 8005502:	18ba      	adds	r2, r7, r2
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005508:	2311      	movs	r3, #17
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d105      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005512:	4b39      	ldr	r3, [pc, #228]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005516:	4b38      	ldr	r3, [pc, #224]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005518:	493c      	ldr	r1, [pc, #240]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800551a:	400a      	ands	r2, r1
 800551c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	4013      	ands	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005528:	4b33      	ldr	r3, [pc, #204]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800552a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552c:	2203      	movs	r2, #3
 800552e:	4393      	bics	r3, r2
 8005530:	0019      	movs	r1, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4b30      	ldr	r3, [pc, #192]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005538:	430a      	orrs	r2, r1
 800553a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2202      	movs	r2, #2
 8005542:	4013      	ands	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005546:	4b2c      	ldr	r3, [pc, #176]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	220c      	movs	r2, #12
 800554c:	4393      	bics	r3, r2
 800554e:	0019      	movs	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	4b28      	ldr	r3, [pc, #160]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005556:	430a      	orrs	r2, r1
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2220      	movs	r2, #32
 8005560:	4013      	ands	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005564:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	4a29      	ldr	r2, [pc, #164]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005574:	430a      	orrs	r2, r1
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	4013      	ands	r3, r2
 8005582:	d015      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005584:	4b1c      	ldr	r3, [pc, #112]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	0899      	lsrs	r1, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	2380      	movs	r3, #128	@ 0x80
 800559c:	05db      	lsls	r3, r3, #23
 800559e:	429a      	cmp	r2, r3
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055a2:	4b15      	ldr	r3, [pc, #84]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	0249      	lsls	r1, r1, #9
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	2380      	movs	r3, #128	@ 0x80
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4013      	ands	r3, r2
 80055ba:	d016      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	4a14      	ldr	r2, [pc, #80]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	0019      	movs	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055cc:	430a      	orrs	r2, r1
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	429a      	cmp	r2, r3
 80055da:	d106      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055e2:	2180      	movs	r1, #128	@ 0x80
 80055e4:	0249      	lsls	r1, r1, #9
 80055e6:	430a      	orrs	r2, r1
 80055e8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055ea:	2312      	movs	r3, #18
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b006      	add	sp, #24
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40007000 	.word	0x40007000
 8005600:	fffffcff 	.word	0xfffffcff
 8005604:	fffeffff 	.word	0xfffeffff
 8005608:	00001388 	.word	0x00001388
 800560c:	efffffff 	.word	0xefffffff
 8005610:	ffffcfff 	.word	0xffffcfff
 8005614:	ffff3fff 	.word	0xffff3fff

08005618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e04a      	b.n	80056c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	223d      	movs	r2, #61	@ 0x3d
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	223c      	movs	r2, #60	@ 0x3c
 800563a:	2100      	movs	r1, #0
 800563c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f7fd fc0d 	bl	8002e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223d      	movs	r2, #61	@ 0x3d
 800564a:	2102      	movs	r1, #2
 800564c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3304      	adds	r3, #4
 8005656:	0019      	movs	r1, r3
 8005658:	0010      	movs	r0, r2
 800565a:	f000 f935 	bl	80058c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2248      	movs	r2, #72	@ 0x48
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	223e      	movs	r2, #62	@ 0x3e
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	223f      	movs	r2, #63	@ 0x3f
 8005672:	2101      	movs	r1, #1
 8005674:	5499      	strb	r1, [r3, r2]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2240      	movs	r2, #64	@ 0x40
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2241      	movs	r2, #65	@ 0x41
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2242      	movs	r2, #66	@ 0x42
 800568a:	2101      	movs	r1, #1
 800568c:	5499      	strb	r1, [r3, r2]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2243      	movs	r2, #67	@ 0x43
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2244      	movs	r2, #68	@ 0x44
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2245      	movs	r2, #69	@ 0x45
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2246      	movs	r2, #70	@ 0x46
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2247      	movs	r2, #71	@ 0x47
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	223d      	movs	r2, #61	@ 0x3d
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d4:	2317      	movs	r3, #23
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	223c      	movs	r2, #60	@ 0x3c
 80056e0:	5c9b      	ldrb	r3, [r3, r2]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x22>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0e5      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	223c      	movs	r2, #60	@ 0x3c
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b14      	cmp	r3, #20
 80056f6:	d900      	bls.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x32>
 80056f8:	e0d1      	b.n	800589e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	4b70      	ldr	r3, [pc, #448]	@ (80058c0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	0011      	movs	r1, r2
 800570e:	0018      	movs	r0, r3
 8005710:	f000 f95e 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2108      	movs	r1, #8
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2104      	movs	r1, #4
 8005730:	438a      	bics	r2, r1
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
      break;
 8005746:	e0af      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	0011      	movs	r1, r2
 8005750:	0018      	movs	r0, r3
 8005752:	f000 f9c7 	bl	8005ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2180      	movs	r1, #128	@ 0x80
 8005762:	0109      	lsls	r1, r1, #4
 8005764:	430a      	orrs	r2, r1
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4954      	ldr	r1, [pc, #336]	@ (80058c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005774:	400a      	ands	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e08c      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0011      	movs	r1, r2
 8005796:	0018      	movs	r0, r3
 8005798:	f000 fa28 	bl	8005bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2108      	movs	r1, #8
 80057a8:	430a      	orrs	r2, r1
 80057aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2104      	movs	r1, #4
 80057b8:	438a      	bics	r2, r1
 80057ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69d9      	ldr	r1, [r3, #28]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	61da      	str	r2, [r3, #28]
      break;
 80057ce:	e06b      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 fa8f 	bl	8005cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	0109      	lsls	r1, r1, #4
 80057ec:	430a      	orrs	r2, r1
 80057ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4932      	ldr	r1, [pc, #200]	@ (80058c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80057fc:	400a      	ands	r2, r1
 80057fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69d9      	ldr	r1, [r3, #28]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	61da      	str	r2, [r3, #28]
      break;
 8005814:	e048      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0011      	movs	r1, r2
 800581e:	0018      	movs	r0, r3
 8005820:	f000 fad6 	bl	8005dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2108      	movs	r1, #8
 8005830:	430a      	orrs	r2, r1
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2104      	movs	r1, #4
 8005840:	438a      	bics	r2, r1
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005856:	e027      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	0011      	movs	r1, r2
 8005860:	0018      	movs	r0, r3
 8005862:	f000 fb15 	bl	8005e90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2180      	movs	r1, #128	@ 0x80
 8005872:	0109      	lsls	r1, r1, #4
 8005874:	430a      	orrs	r2, r1
 8005876:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4910      	ldr	r1, [pc, #64]	@ (80058c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005884:	400a      	ands	r2, r1
 8005886:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800589c:	e004      	b.n	80058a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800589e:	2317      	movs	r3, #23
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
      break;
 80058a6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	223c      	movs	r2, #60	@ 0x3c
 80058ac:	2100      	movs	r1, #0
 80058ae:	5499      	strb	r1, [r3, r2]

  return status;
 80058b0:	2317      	movs	r3, #23
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	781b      	ldrb	r3, [r3, #0]
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b006      	add	sp, #24
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	080081d0 	.word	0x080081d0
 80058c4:	fffffbff 	.word	0xfffffbff

080058c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a36      	ldr	r2, [pc, #216]	@ (80059b4 <TIM_Base_SetConfig+0xec>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0x20>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a35      	ldr	r2, [pc, #212]	@ (80059b8 <TIM_Base_SetConfig+0xf0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d108      	bne.n	80058fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2270      	movs	r2, #112	@ 0x70
 80058ec:	4393      	bics	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2d      	ldr	r2, [pc, #180]	@ (80059b4 <TIM_Base_SetConfig+0xec>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <TIM_Base_SetConfig+0x62>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	@ (80059b8 <TIM_Base_SetConfig+0xf0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00f      	beq.n	800592a <TIM_Base_SetConfig+0x62>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	@ (80059bc <TIM_Base_SetConfig+0xf4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00b      	beq.n	800592a <TIM_Base_SetConfig+0x62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	@ (80059c0 <TIM_Base_SetConfig+0xf8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d007      	beq.n	800592a <TIM_Base_SetConfig+0x62>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	@ (80059c4 <TIM_Base_SetConfig+0xfc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_Base_SetConfig+0x62>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <TIM_Base_SetConfig+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d108      	bne.n	800593c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <TIM_Base_SetConfig+0x104>)
 800592e:	4013      	ands	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	4393      	bics	r3, r2
 8005942:	001a      	movs	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <TIM_Base_SetConfig+0xec>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00b      	beq.n	8005982 <TIM_Base_SetConfig+0xba>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <TIM_Base_SetConfig+0xf8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d007      	beq.n	8005982 <TIM_Base_SetConfig+0xba>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <TIM_Base_SetConfig+0xfc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_Base_SetConfig+0xba>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <TIM_Base_SetConfig+0x100>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d103      	bne.n	800598a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2201      	movs	r2, #1
 8005996:	4013      	ands	r3, r2
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2201      	movs	r2, #1
 80059a2:	4393      	bics	r3, r2
 80059a4:	001a      	movs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	611a      	str	r2, [r3, #16]
  }
}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b004      	add	sp, #16
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40002000 	.word	0x40002000
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800
 80059cc:	fffffcff 	.word	0xfffffcff

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4393      	bics	r3, r2
 80059e8:	001a      	movs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a32      	ldr	r2, [pc, #200]	@ (8005ac8 <TIM_OC1_SetConfig+0xf8>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2203      	movs	r2, #3
 8005a06:	4393      	bics	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2202      	movs	r2, #2
 8005a18:	4393      	bics	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a28      	ldr	r2, [pc, #160]	@ (8005acc <TIM_OC1_SetConfig+0xfc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC1_SetConfig+0x76>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a27      	ldr	r2, [pc, #156]	@ (8005ad0 <TIM_OC1_SetConfig+0x100>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0x76>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a26      	ldr	r2, [pc, #152]	@ (8005ad4 <TIM_OC1_SetConfig+0x104>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a25      	ldr	r2, [pc, #148]	@ (8005ad8 <TIM_OC1_SetConfig+0x108>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d10c      	bne.n	8005a60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2208      	movs	r2, #8
 8005a4a:	4393      	bics	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2204      	movs	r2, #4
 8005a5c:	4393      	bics	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1a      	ldr	r2, [pc, #104]	@ (8005acc <TIM_OC1_SetConfig+0xfc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_OC1_SetConfig+0xb0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <TIM_OC1_SetConfig+0x100>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_OC1_SetConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <TIM_OC1_SetConfig+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC1_SetConfig+0xb0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <TIM_OC1_SetConfig+0x108>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d111      	bne.n	8005aa4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4a16      	ldr	r2, [pc, #88]	@ (8005adc <TIM_OC1_SetConfig+0x10c>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <TIM_OC1_SetConfig+0x110>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b006      	add	sp, #24
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	fffeff8f 	.word	0xfffeff8f
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	fffffeff 	.word	0xfffffeff
 8005ae0:	fffffdff 	.word	0xfffffdff

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	2210      	movs	r2, #16
 8005afa:	4393      	bics	r3, r2
 8005afc:	001a      	movs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a2e      	ldr	r2, [pc, #184]	@ (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd0 <TIM_OC2_SetConfig+0xec>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	4393      	bics	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a24      	ldr	r2, [pc, #144]	@ (8005bd4 <TIM_OC2_SetConfig+0xf0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10d      	bne.n	8005b62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2280      	movs	r2, #128	@ 0x80
 8005b4a:	4393      	bics	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2240      	movs	r2, #64	@ 0x40
 8005b5e:	4393      	bics	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <TIM_OC2_SetConfig+0xf0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_OC2_SetConfig+0x9e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd8 <TIM_OC2_SetConfig+0xf4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_OC2_SetConfig+0x9e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a19      	ldr	r2, [pc, #100]	@ (8005bdc <TIM_OC2_SetConfig+0xf8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC2_SetConfig+0x9e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <TIM_OC2_SetConfig+0xfc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d113      	bne.n	8005baa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4a17      	ldr	r2, [pc, #92]	@ (8005be4 <TIM_OC2_SetConfig+0x100>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4a16      	ldr	r2, [pc, #88]	@ (8005be8 <TIM_OC2_SetConfig+0x104>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b006      	add	sp, #24
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	feff8fff 	.word	0xfeff8fff
 8005bd0:	fffffcff 	.word	0xfffffcff
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800
 8005be4:	fffffbff 	.word	0xfffffbff
 8005be8:	fffff7ff 	.word	0xfffff7ff

08005bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	4a33      	ldr	r2, [pc, #204]	@ (8005cd0 <TIM_OC3_SetConfig+0xe4>)
 8005c02:	401a      	ands	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a2f      	ldr	r2, [pc, #188]	@ (8005cd4 <TIM_OC3_SetConfig+0xe8>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	4393      	bics	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4a29      	ldr	r2, [pc, #164]	@ (8005cd8 <TIM_OC3_SetConfig+0xec>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a25      	ldr	r2, [pc, #148]	@ (8005cdc <TIM_OC3_SetConfig+0xf0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10d      	bne.n	8005c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4a24      	ldr	r2, [pc, #144]	@ (8005ce0 <TIM_OC3_SetConfig+0xf4>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <TIM_OC3_SetConfig+0xf8>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1c      	ldr	r2, [pc, #112]	@ (8005cdc <TIM_OC3_SetConfig+0xf0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00b      	beq.n	8005c86 <TIM_OC3_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce8 <TIM_OC3_SetConfig+0xfc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <TIM_OC3_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	@ (8005cec <TIM_OC3_SetConfig+0x100>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC3_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <TIM_OC3_SetConfig+0x104>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d113      	bne.n	8005cae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf4 <TIM_OC3_SetConfig+0x108>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4a19      	ldr	r2, [pc, #100]	@ (8005cf8 <TIM_OC3_SetConfig+0x10c>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b006      	add	sp, #24
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	fffffeff 	.word	0xfffffeff
 8005cd4:	fffeff8f 	.word	0xfffeff8f
 8005cd8:	fffffdff 	.word	0xfffffdff
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	fffff7ff 	.word	0xfffff7ff
 8005ce4:	fffffbff 	.word	0xfffffbff
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800
 8005cf4:	ffffefff 	.word	0xffffefff
 8005cf8:	ffffdfff 	.word	0xffffdfff

08005cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <TIM_OC4_SetConfig+0xb0>)
 8005d12:	401a      	ands	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a22      	ldr	r2, [pc, #136]	@ (8005db0 <TIM_OC4_SetConfig+0xb4>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4a21      	ldr	r2, [pc, #132]	@ (8005db4 <TIM_OC4_SetConfig+0xb8>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	4a1d      	ldr	r2, [pc, #116]	@ (8005db8 <TIM_OC4_SetConfig+0xbc>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a19      	ldr	r2, [pc, #100]	@ (8005dbc <TIM_OC4_SetConfig+0xc0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_OC4_SetConfig+0x78>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <TIM_OC4_SetConfig+0xc4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_OC4_SetConfig+0x78>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a17      	ldr	r2, [pc, #92]	@ (8005dc4 <TIM_OC4_SetConfig+0xc8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC4_SetConfig+0x78>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <TIM_OC4_SetConfig+0xcc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d109      	bne.n	8005d88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4a15      	ldr	r2, [pc, #84]	@ (8005dcc <TIM_OC4_SetConfig+0xd0>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	019b      	lsls	r3, r3, #6
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b006      	add	sp, #24
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	ffffefff 	.word	0xffffefff
 8005db0:	feff8fff 	.word	0xfeff8fff
 8005db4:	fffffcff 	.word	0xfffffcff
 8005db8:	ffffdfff 	.word	0xffffdfff
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	ffffbfff 	.word	0xffffbfff

08005dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	4a23      	ldr	r2, [pc, #140]	@ (8005e74 <TIM_OC5_SetConfig+0xa4>)
 8005de6:	401a      	ands	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <TIM_OC5_SetConfig+0xa8>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <TIM_OC5_SetConfig+0xac>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a17      	ldr	r2, [pc, #92]	@ (8005e80 <TIM_OC5_SetConfig+0xb0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_OC5_SetConfig+0x6e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a16      	ldr	r2, [pc, #88]	@ (8005e84 <TIM_OC5_SetConfig+0xb4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_OC5_SetConfig+0x6e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <TIM_OC5_SetConfig+0xb8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_OC5_SetConfig+0x6e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a14      	ldr	r2, [pc, #80]	@ (8005e8c <TIM_OC5_SetConfig+0xbc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d109      	bne.n	8005e52 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4a0c      	ldr	r2, [pc, #48]	@ (8005e74 <TIM_OC5_SetConfig+0xa4>)
 8005e42:	4013      	ands	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b006      	add	sp, #24
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	fffeffff 	.word	0xfffeffff
 8005e78:	fffeff8f 	.word	0xfffeff8f
 8005e7c:	fffdffff 	.word	0xfffdffff
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	4a24      	ldr	r2, [pc, #144]	@ (8005f38 <TIM_OC6_SetConfig+0xa8>)
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a20      	ldr	r2, [pc, #128]	@ (8005f3c <TIM_OC6_SetConfig+0xac>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4a1c      	ldr	r2, [pc, #112]	@ (8005f40 <TIM_OC6_SetConfig+0xb0>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	@ (8005f44 <TIM_OC6_SetConfig+0xb4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_OC6_SetConfig+0x70>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a17      	ldr	r2, [pc, #92]	@ (8005f48 <TIM_OC6_SetConfig+0xb8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_OC6_SetConfig+0x70>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <TIM_OC6_SetConfig+0xbc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC6_SetConfig+0x70>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <TIM_OC6_SetConfig+0xc0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d109      	bne.n	8005f14 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4a14      	ldr	r2, [pc, #80]	@ (8005f54 <TIM_OC6_SetConfig+0xc4>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b006      	add	sp, #24
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	ffefffff 	.word	0xffefffff
 8005f3c:	feff8fff 	.word	0xfeff8fff
 8005f40:	ffdfffff 	.word	0xffdfffff
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800
 8005f54:	fffbffff 	.word	0xfffbffff

08005f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	223c      	movs	r2, #60	@ 0x3c
 8005f66:	5c9b      	ldrb	r3, [r3, r2]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e04f      	b.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	223c      	movs	r2, #60	@ 0x3c
 8005f74:	2101      	movs	r1, #1
 8005f76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	223d      	movs	r2, #61	@ 0x3d
 8005f7c:	2102      	movs	r1, #2
 8005f7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d108      	bne.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2270      	movs	r2, #112	@ 0x70
 8005fb0:	4393      	bics	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a13      	ldr	r2, [pc, #76]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a11      	ldr	r2, [pc, #68]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2280      	movs	r2, #128	@ 0x80
 8005fe8:	4393      	bics	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	223d      	movs	r2, #61	@ 0x3d
 8006002:	2101      	movs	r1, #1
 8006004:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	223c      	movs	r2, #60	@ 0x3c
 800600a:	2100      	movs	r1, #0
 800600c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b004      	add	sp, #16
 8006016:	bd80      	pop	{r7, pc}
 8006018:	40012c00 	.word	0x40012c00
 800601c:	ff0fffff 	.word	0xff0fffff
 8006020:	40000400 	.word	0x40000400
 8006024:	40014000 	.word	0x40014000

08006028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e046      	b.n	80060c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2288      	movs	r2, #136	@ 0x88
 800603e:	589b      	ldr	r3, [r3, r2]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2284      	movs	r2, #132	@ 0x84
 8006048:	2100      	movs	r1, #0
 800604a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f7fc ff62 	bl	8002f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2288      	movs	r2, #136	@ 0x88
 8006058:	2124      	movs	r1, #36	@ 0x24
 800605a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2101      	movs	r1, #1
 8006068:	438a      	bics	r2, r1
 800606a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 fdb6 	bl	8006be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0018      	movs	r0, r3
 8006080:	f000 fc0e 	bl	80068a0 <UART_SetConfig>
 8006084:	0003      	movs	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e01c      	b.n	80060c8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	490d      	ldr	r1, [pc, #52]	@ (80060d0 <HAL_UART_Init+0xa8>)
 800609a:	400a      	ands	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	212a      	movs	r1, #42	@ 0x2a
 80060aa:	438a      	bics	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2101      	movs	r1, #1
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	0018      	movs	r0, r3
 80060c2:	f000 fe45 	bl	8006d50 <UART_CheckIdleState>
 80060c6:	0003      	movs	r3, r0
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b002      	add	sp, #8
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	ffffb7ff 	.word	0xffffb7ff

080060d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	@ 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2288      	movs	r2, #136	@ 0x88
 80060e8:	589b      	ldr	r3, [r3, r2]
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d000      	beq.n	80060f0 <HAL_UART_Transmit+0x1c>
 80060ee:	e090      	b.n	8006212 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_Transmit+0x2a>
 80060f6:	1dbb      	adds	r3, r7, #6
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e088      	b.n	8006214 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	2380      	movs	r3, #128	@ 0x80
 8006108:	015b      	lsls	r3, r3, #5
 800610a:	429a      	cmp	r2, r3
 800610c:	d109      	bne.n	8006122 <HAL_UART_Transmit+0x4e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2201      	movs	r2, #1
 800611a:	4013      	ands	r3, r2
 800611c:	d001      	beq.n	8006122 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e078      	b.n	8006214 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2290      	movs	r2, #144	@ 0x90
 8006126:	2100      	movs	r1, #0
 8006128:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2288      	movs	r2, #136	@ 0x88
 800612e:	2121      	movs	r1, #33	@ 0x21
 8006130:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006132:	f7fd f8b1 	bl	8003298 <HAL_GetTick>
 8006136:	0003      	movs	r3, r0
 8006138:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1dba      	adds	r2, r7, #6
 800613e:	2154      	movs	r1, #84	@ 0x54
 8006140:	8812      	ldrh	r2, [r2, #0]
 8006142:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1dba      	adds	r2, r7, #6
 8006148:	2156      	movs	r1, #86	@ 0x56
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	015b      	lsls	r3, r3, #5
 8006156:	429a      	cmp	r2, r3
 8006158:	d108      	bne.n	800616c <HAL_UART_Transmit+0x98>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	e003      	b.n	8006174 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006174:	e030      	b.n	80061d8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	0013      	movs	r3, r2
 8006180:	2200      	movs	r2, #0
 8006182:	2180      	movs	r1, #128	@ 0x80
 8006184:	f000 fe8e 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d005      	beq.n	8006198 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2288      	movs	r2, #136	@ 0x88
 8006190:	2120      	movs	r1, #32
 8006192:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e03d      	b.n	8006214 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	001a      	movs	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	05d2      	lsls	r2, r2, #23
 80061aa:	0dd2      	lsrs	r2, r2, #23
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	3302      	adds	r3, #2
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e007      	b.n	80061c6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2256      	movs	r2, #86	@ 0x56
 80061ca:	5a9b      	ldrh	r3, [r3, r2]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b299      	uxth	r1, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2256      	movs	r2, #86	@ 0x56
 80061d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2256      	movs	r2, #86	@ 0x56
 80061dc:	5a9b      	ldrh	r3, [r3, r2]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1c8      	bne.n	8006176 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	0013      	movs	r3, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	2140      	movs	r1, #64	@ 0x40
 80061f2:	f000 fe57 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2288      	movs	r2, #136	@ 0x88
 80061fe:	2120      	movs	r1, #32
 8006200:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e006      	b.n	8006214 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2288      	movs	r2, #136	@ 0x88
 800620a:	2120      	movs	r1, #32
 800620c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b008      	add	sp, #32
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800621c:	b5b0      	push	{r4, r5, r7, lr}
 800621e:	b0aa      	sub	sp, #168	@ 0xa8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	22a4      	movs	r2, #164	@ 0xa4
 800622c:	18b9      	adds	r1, r7, r2
 800622e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	20a0      	movs	r0, #160	@ 0xa0
 8006238:	1839      	adds	r1, r7, r0
 800623a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	249c      	movs	r4, #156	@ 0x9c
 8006244:	1939      	adds	r1, r7, r4
 8006246:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006248:	0011      	movs	r1, r2
 800624a:	18bb      	adds	r3, r7, r2
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4aa2      	ldr	r2, [pc, #648]	@ (80064d8 <HAL_UART_IRQHandler+0x2bc>)
 8006250:	4013      	ands	r3, r2
 8006252:	2298      	movs	r2, #152	@ 0x98
 8006254:	18bd      	adds	r5, r7, r2
 8006256:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006258:	18bb      	adds	r3, r7, r2
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11a      	bne.n	8006296 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006260:	187b      	adds	r3, r7, r1
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2220      	movs	r2, #32
 8006266:	4013      	ands	r3, r2
 8006268:	d015      	beq.n	8006296 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800626a:	183b      	adds	r3, r7, r0
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2220      	movs	r2, #32
 8006270:	4013      	ands	r3, r2
 8006272:	d105      	bne.n	8006280 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006274:	193b      	adds	r3, r7, r4
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	055b      	lsls	r3, r3, #21
 800627c:	4013      	ands	r3, r2
 800627e:	d00a      	beq.n	8006296 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006284:	2b00      	cmp	r3, #0
 8006286:	d100      	bne.n	800628a <HAL_UART_IRQHandler+0x6e>
 8006288:	e2dc      	b.n	8006844 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	0010      	movs	r0, r2
 8006292:	4798      	blx	r3
      }
      return;
 8006294:	e2d6      	b.n	8006844 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006296:	2398      	movs	r3, #152	@ 0x98
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d100      	bne.n	80062a2 <HAL_UART_IRQHandler+0x86>
 80062a0:	e122      	b.n	80064e8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062a2:	239c      	movs	r3, #156	@ 0x9c
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a8c      	ldr	r2, [pc, #560]	@ (80064dc <HAL_UART_IRQHandler+0x2c0>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	d106      	bne.n	80062bc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062ae:	23a0      	movs	r3, #160	@ 0xa0
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a8a      	ldr	r2, [pc, #552]	@ (80064e0 <HAL_UART_IRQHandler+0x2c4>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	d100      	bne.n	80062bc <HAL_UART_IRQHandler+0xa0>
 80062ba:	e115      	b.n	80064e8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062bc:	23a4      	movs	r3, #164	@ 0xa4
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2201      	movs	r2, #1
 80062c4:	4013      	ands	r3, r2
 80062c6:	d012      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
 80062c8:	23a0      	movs	r3, #160	@ 0xa0
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4013      	ands	r3, r2
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2201      	movs	r2, #1
 80062dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2290      	movs	r2, #144	@ 0x90
 80062e2:	589b      	ldr	r3, [r3, r2]
 80062e4:	2201      	movs	r2, #1
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2190      	movs	r1, #144	@ 0x90
 80062ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062ee:	23a4      	movs	r3, #164	@ 0xa4
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2202      	movs	r2, #2
 80062f6:	4013      	ands	r3, r2
 80062f8:	d011      	beq.n	800631e <HAL_UART_IRQHandler+0x102>
 80062fa:	239c      	movs	r3, #156	@ 0x9c
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2202      	movs	r2, #2
 800630c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2290      	movs	r2, #144	@ 0x90
 8006312:	589b      	ldr	r3, [r3, r2]
 8006314:	2204      	movs	r2, #4
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2190      	movs	r1, #144	@ 0x90
 800631c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800631e:	23a4      	movs	r3, #164	@ 0xa4
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2204      	movs	r2, #4
 8006326:	4013      	ands	r3, r2
 8006328:	d011      	beq.n	800634e <HAL_UART_IRQHandler+0x132>
 800632a:	239c      	movs	r3, #156	@ 0x9c
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	4013      	ands	r3, r2
 8006334:	d00b      	beq.n	800634e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2204      	movs	r2, #4
 800633c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2290      	movs	r2, #144	@ 0x90
 8006342:	589b      	ldr	r3, [r3, r2]
 8006344:	2202      	movs	r2, #2
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2190      	movs	r1, #144	@ 0x90
 800634c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800634e:	23a4      	movs	r3, #164	@ 0xa4
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2208      	movs	r2, #8
 8006356:	4013      	ands	r3, r2
 8006358:	d017      	beq.n	800638a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800635a:	23a0      	movs	r3, #160	@ 0xa0
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2220      	movs	r2, #32
 8006362:	4013      	ands	r3, r2
 8006364:	d105      	bne.n	8006372 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006366:	239c      	movs	r3, #156	@ 0x9c
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5b      	ldr	r2, [pc, #364]	@ (80064dc <HAL_UART_IRQHandler+0x2c0>)
 800636e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006370:	d00b      	beq.n	800638a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2208      	movs	r2, #8
 8006378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2290      	movs	r2, #144	@ 0x90
 800637e:	589b      	ldr	r3, [r3, r2]
 8006380:	2208      	movs	r2, #8
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2190      	movs	r1, #144	@ 0x90
 8006388:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800638a:	23a4      	movs	r3, #164	@ 0xa4
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	4013      	ands	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_UART_IRQHandler+0x1a4>
 8006398:	23a0      	movs	r3, #160	@ 0xa0
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	04db      	lsls	r3, r3, #19
 80063a2:	4013      	ands	r3, r2
 80063a4:	d00c      	beq.n	80063c0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2280      	movs	r2, #128	@ 0x80
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2290      	movs	r2, #144	@ 0x90
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2220      	movs	r2, #32
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2190      	movs	r1, #144	@ 0x90
 80063be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2290      	movs	r2, #144	@ 0x90
 80063c4:	589b      	ldr	r3, [r3, r2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d100      	bne.n	80063cc <HAL_UART_IRQHandler+0x1b0>
 80063ca:	e23d      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063cc:	23a4      	movs	r3, #164	@ 0xa4
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2220      	movs	r2, #32
 80063d4:	4013      	ands	r3, r2
 80063d6:	d015      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063d8:	23a0      	movs	r3, #160	@ 0xa0
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2220      	movs	r2, #32
 80063e0:	4013      	ands	r3, r2
 80063e2:	d106      	bne.n	80063f2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063e4:	239c      	movs	r3, #156	@ 0x9c
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	2380      	movs	r3, #128	@ 0x80
 80063ec:	055b      	lsls	r3, r3, #21
 80063ee:	4013      	ands	r3, r2
 80063f0:	d008      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	0010      	movs	r0, r2
 8006402:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2290      	movs	r2, #144	@ 0x90
 8006408:	589b      	ldr	r3, [r3, r2]
 800640a:	2194      	movs	r1, #148	@ 0x94
 800640c:	187a      	adds	r2, r7, r1
 800640e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2240      	movs	r2, #64	@ 0x40
 8006418:	4013      	ands	r3, r2
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d004      	beq.n	8006428 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800641e:	187b      	adds	r3, r7, r1
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2228      	movs	r2, #40	@ 0x28
 8006424:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006426:	d04c      	beq.n	80064c2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0018      	movs	r0, r3
 800642c:	f000 fdaa 	bl	8006f84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	4013      	ands	r3, r2
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d13c      	bne.n	80064b8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	2090      	movs	r0, #144	@ 0x90
 8006448:	183a      	adds	r2, r7, r0
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	2301      	movs	r3, #1
 800644e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2140      	movs	r1, #64	@ 0x40
 8006464:	438a      	bics	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	183b      	adds	r3, r7, r0
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2280      	movs	r2, #128	@ 0x80
 800647a:	589b      	ldr	r3, [r3, r2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d016      	beq.n	80064ae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2280      	movs	r2, #128	@ 0x80
 8006484:	589b      	ldr	r3, [r3, r2]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <HAL_UART_IRQHandler+0x2c8>)
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2280      	movs	r2, #128	@ 0x80
 800648e:	589b      	ldr	r3, [r3, r2]
 8006490:	0018      	movs	r0, r3
 8006492:	f7fe f89b 	bl	80045cc <HAL_DMA_Abort_IT>
 8006496:	1e03      	subs	r3, r0, #0
 8006498:	d01c      	beq.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2280      	movs	r2, #128	@ 0x80
 800649e:	589b      	ldr	r3, [r3, r2]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	2180      	movs	r1, #128	@ 0x80
 80064a6:	5852      	ldr	r2, [r2, r1]
 80064a8:	0010      	movs	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e012      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 f9e1 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b6:	e00d      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 f9dc 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	e008      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 f9d7 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2290      	movs	r2, #144	@ 0x90
 80064ce:	2100      	movs	r1, #0
 80064d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80064d2:	e1b9      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	46c0      	nop			@ (mov r8, r8)
    return;
 80064d6:	e1b7      	b.n	8006848 <HAL_UART_IRQHandler+0x62c>
 80064d8:	0000080f 	.word	0x0000080f
 80064dc:	10000001 	.word	0x10000001
 80064e0:	04000120 	.word	0x04000120
 80064e4:	08007051 	.word	0x08007051

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d000      	beq.n	80064f2 <HAL_UART_IRQHandler+0x2d6>
 80064f0:	e13e      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064f2:	23a4      	movs	r3, #164	@ 0xa4
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2210      	movs	r2, #16
 80064fa:	4013      	ands	r3, r2
 80064fc:	d100      	bne.n	8006500 <HAL_UART_IRQHandler+0x2e4>
 80064fe:	e137      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006500:	23a0      	movs	r3, #160	@ 0xa0
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	4013      	ands	r3, r2
 800650a:	d100      	bne.n	800650e <HAL_UART_IRQHandler+0x2f2>
 800650c:	e130      	b.n	8006770 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2210      	movs	r2, #16
 8006514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2240      	movs	r2, #64	@ 0x40
 800651e:	4013      	ands	r3, r2
 8006520:	2b40      	cmp	r3, #64	@ 0x40
 8006522:	d000      	beq.n	8006526 <HAL_UART_IRQHandler+0x30a>
 8006524:	e0a4      	b.n	8006670 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2280      	movs	r2, #128	@ 0x80
 800652a:	589b      	ldr	r3, [r3, r2]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	217e      	movs	r1, #126	@ 0x7e
 8006532:	187b      	adds	r3, r7, r1
 8006534:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006536:	187b      	adds	r3, r7, r1
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <HAL_UART_IRQHandler+0x324>
 800653e:	e185      	b.n	800684c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	225c      	movs	r2, #92	@ 0x5c
 8006544:	5a9b      	ldrh	r3, [r3, r2]
 8006546:	187a      	adds	r2, r7, r1
 8006548:	8812      	ldrh	r2, [r2, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d300      	bcc.n	8006550 <HAL_UART_IRQHandler+0x334>
 800654e:	e17d      	b.n	800684c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	187a      	adds	r2, r7, r1
 8006554:	215e      	movs	r1, #94	@ 0x5e
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2280      	movs	r2, #128	@ 0x80
 800655e:	589b      	ldr	r3, [r3, r2]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2220      	movs	r2, #32
 8006566:	4013      	ands	r3, r2
 8006568:	d170      	bne.n	800664c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656a:	f3ef 8310 	mrs	r3, PRIMASK
 800656e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006574:	2301      	movs	r3, #1
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657a:	f383 8810 	msr	PRIMASK, r3
}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	49b4      	ldr	r1, [pc, #720]	@ (800685c <HAL_UART_IRQHandler+0x640>)
 800658c:	400a      	ands	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	f383 8810 	msr	PRIMASK, r3
}
 800659a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659c:	f3ef 8310 	mrs	r3, PRIMASK
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80065a6:	2301      	movs	r3, #1
 80065a8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			@ (mov r8, r8)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2101      	movs	r1, #1
 80065be:	438a      	bics	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]
 80065c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065c4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c8:	f383 8810 	msr	PRIMASK, r3
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ce:	f3ef 8310 	mrs	r3, PRIMASK
 80065d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80065d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80065d8:	2301      	movs	r3, #1
 80065da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			@ (mov r8, r8)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2140      	movs	r1, #64	@ 0x40
 80065f0:	438a      	bics	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fa:	f383 8810 	msr	PRIMASK, r3
}
 80065fe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	228c      	movs	r2, #140	@ 0x8c
 8006604:	2120      	movs	r1, #32
 8006606:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660e:	f3ef 8310 	mrs	r3, PRIMASK
 8006612:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006618:	2301      	movs	r3, #1
 800661a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800661c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800661e:	f383 8810 	msr	PRIMASK, r3
}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2110      	movs	r1, #16
 8006630:	438a      	bics	r2, r1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006636:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800663a:	f383 8810 	msr	PRIMASK, r3
}
 800663e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2280      	movs	r2, #128	@ 0x80
 8006644:	589b      	ldr	r3, [r3, r2]
 8006646:	0018      	movs	r0, r3
 8006648:	f7fd ff5e 	bl	8004508 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	225c      	movs	r2, #92	@ 0x5c
 8006656:	5a9a      	ldrh	r2, [r3, r2]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	215e      	movs	r1, #94	@ 0x5e
 800665c:	5a5b      	ldrh	r3, [r3, r1]
 800665e:	b29b      	uxth	r3, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0011      	movs	r1, r2
 8006668:	0018      	movs	r0, r3
 800666a:	f000 f90d 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800666e:	e0ed      	b.n	800684c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	225c      	movs	r2, #92	@ 0x5c
 8006674:	5a99      	ldrh	r1, [r3, r2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	225e      	movs	r2, #94	@ 0x5e
 800667a:	5a9b      	ldrh	r3, [r3, r2]
 800667c:	b29a      	uxth	r2, r3
 800667e:	208e      	movs	r0, #142	@ 0x8e
 8006680:	183b      	adds	r3, r7, r0
 8006682:	1a8a      	subs	r2, r1, r2
 8006684:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	225e      	movs	r2, #94	@ 0x5e
 800668a:	5a9b      	ldrh	r3, [r3, r2]
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d100      	bne.n	8006694 <HAL_UART_IRQHandler+0x478>
 8006692:	e0dd      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006694:	183b      	adds	r3, r7, r0
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d100      	bne.n	800669e <HAL_UART_IRQHandler+0x482>
 800669c:	e0d8      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669e:	f3ef 8310 	mrs	r3, PRIMASK
 80066a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a6:	2488      	movs	r4, #136	@ 0x88
 80066a8:	193a      	adds	r2, r7, r4
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	2301      	movs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f383 8810 	msr	PRIMASK, r3
}
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4967      	ldr	r1, [pc, #412]	@ (8006860 <HAL_UART_IRQHandler+0x644>)
 80066c4:	400a      	ands	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	193b      	adds	r3, r7, r4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f383 8810 	msr	PRIMASK, r3
}
 80066d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	61bb      	str	r3, [r7, #24]
  return(result);
 80066dc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066de:	2484      	movs	r4, #132	@ 0x84
 80066e0:	193a      	adds	r2, r7, r4
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	2301      	movs	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f383 8810 	msr	PRIMASK, r3
}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	495a      	ldr	r1, [pc, #360]	@ (8006864 <HAL_UART_IRQHandler+0x648>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	193b      	adds	r3, r7, r4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f383 8810 	msr	PRIMASK, r3
}
 800670c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	228c      	movs	r2, #140	@ 0x8c
 8006712:	2120      	movs	r1, #32
 8006714:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006722:	f3ef 8310 	mrs	r3, PRIMASK
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	2480      	movs	r4, #128	@ 0x80
 800672c:	193a      	adds	r2, r7, r4
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	2301      	movs	r3, #1
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	f383 8810 	msr	PRIMASK, r3
}
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2110      	movs	r1, #16
 8006748:	438a      	bics	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	193b      	adds	r3, r7, r4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006754:	f383 8810 	msr	PRIMASK, r3
}
 8006758:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006760:	183b      	adds	r3, r7, r0
 8006762:	881a      	ldrh	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0011      	movs	r1, r2
 8006768:	0018      	movs	r0, r3
 800676a:	f000 f88d 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800676e:	e06f      	b.n	8006850 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006770:	23a4      	movs	r3, #164	@ 0xa4
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	035b      	lsls	r3, r3, #13
 800677a:	4013      	ands	r3, r2
 800677c:	d010      	beq.n	80067a0 <HAL_UART_IRQHandler+0x584>
 800677e:	239c      	movs	r3, #156	@ 0x9c
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	03db      	lsls	r3, r3, #15
 8006788:	4013      	ands	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2280      	movs	r2, #128	@ 0x80
 8006792:	0352      	lsls	r2, r2, #13
 8006794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f000 fc9c 	bl	80070d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800679e:	e05a      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067a0:	23a4      	movs	r3, #164	@ 0xa4
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2280      	movs	r2, #128	@ 0x80
 80067a8:	4013      	ands	r3, r2
 80067aa:	d016      	beq.n	80067da <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067ac:	23a0      	movs	r3, #160	@ 0xa0
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2280      	movs	r2, #128	@ 0x80
 80067b4:	4013      	ands	r3, r2
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067b8:	239c      	movs	r3, #156	@ 0x9c
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	041b      	lsls	r3, r3, #16
 80067c2:	4013      	ands	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d042      	beq.n	8006854 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	0010      	movs	r0, r2
 80067d6:	4798      	blx	r3
    }
    return;
 80067d8:	e03c      	b.n	8006854 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067da:	23a4      	movs	r3, #164	@ 0xa4
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2240      	movs	r2, #64	@ 0x40
 80067e2:	4013      	ands	r3, r2
 80067e4:	d00a      	beq.n	80067fc <HAL_UART_IRQHandler+0x5e0>
 80067e6:	23a0      	movs	r3, #160	@ 0xa0
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2240      	movs	r2, #64	@ 0x40
 80067ee:	4013      	ands	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 fc42 	bl	800707e <UART_EndTransmit_IT>
    return;
 80067fa:	e02c      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067fc:	23a4      	movs	r3, #164	@ 0xa4
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	4013      	ands	r3, r2
 8006808:	d00b      	beq.n	8006822 <HAL_UART_IRQHandler+0x606>
 800680a:	23a0      	movs	r3, #160	@ 0xa0
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	05db      	lsls	r3, r3, #23
 8006814:	4013      	ands	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f000 fc6b 	bl	80070f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006820:	e019      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006822:	23a4      	movs	r3, #164	@ 0xa4
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	2380      	movs	r3, #128	@ 0x80
 800682a:	045b      	lsls	r3, r3, #17
 800682c:	4013      	ands	r3, r2
 800682e:	d012      	beq.n	8006856 <HAL_UART_IRQHandler+0x63a>
 8006830:	23a0      	movs	r3, #160	@ 0xa0
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da0d      	bge.n	8006856 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0018      	movs	r0, r3
 800683e:	f000 fc52 	bl	80070e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006842:	e008      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	e006      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
    return;
 8006848:	46c0      	nop			@ (mov r8, r8)
 800684a:	e004      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 800684c:	46c0      	nop			@ (mov r8, r8)
 800684e:	e002      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
      return;
 8006850:	46c0      	nop			@ (mov r8, r8)
 8006852:	e000      	b.n	8006856 <HAL_UART_IRQHandler+0x63a>
    return;
 8006854:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006856:	46bd      	mov	sp, r7
 8006858:	b02a      	add	sp, #168	@ 0xa8
 800685a:	bdb0      	pop	{r4, r5, r7, pc}
 800685c:	fffffeff 	.word	0xfffffeff
 8006860:	fffffedf 	.word	0xfffffedf
 8006864:	effffffe 	.word	0xeffffffe

08006868 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006870:	46c0      	nop			@ (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006880:	46c0      	nop			@ (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	000a      	movs	r2, r1
 8006892:	1cbb      	adds	r3, r7, #2
 8006894:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b002      	add	sp, #8
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a8:	231a      	movs	r3, #26
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4abc      	ldr	r2, [pc, #752]	@ (8006bc0 <UART_SetConfig+0x320>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	0019      	movs	r1, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4ab7      	ldr	r2, [pc, #732]	@ (8006bc4 <UART_SetConfig+0x324>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	0019      	movs	r1, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	4313      	orrs	r3, r2
 8006904:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4aae      	ldr	r2, [pc, #696]	@ (8006bc8 <UART_SetConfig+0x328>)
 800690e:	4013      	ands	r3, r2
 8006910:	0019      	movs	r1, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	430a      	orrs	r2, r1
 800691a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	220f      	movs	r2, #15
 8006924:	4393      	bics	r3, r2
 8006926:	0019      	movs	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4aa4      	ldr	r2, [pc, #656]	@ (8006bcc <UART_SetConfig+0x32c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d127      	bne.n	800698e <UART_SetConfig+0xee>
 800693e:	4ba4      	ldr	r3, [pc, #656]	@ (8006bd0 <UART_SetConfig+0x330>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	2203      	movs	r2, #3
 8006944:	4013      	ands	r3, r2
 8006946:	2b03      	cmp	r3, #3
 8006948:	d017      	beq.n	800697a <UART_SetConfig+0xda>
 800694a:	d81b      	bhi.n	8006984 <UART_SetConfig+0xe4>
 800694c:	2b02      	cmp	r3, #2
 800694e:	d00a      	beq.n	8006966 <UART_SetConfig+0xc6>
 8006950:	d818      	bhi.n	8006984 <UART_SetConfig+0xe4>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <UART_SetConfig+0xbc>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d00a      	beq.n	8006970 <UART_SetConfig+0xd0>
 800695a:	e013      	b.n	8006984 <UART_SetConfig+0xe4>
 800695c:	231b      	movs	r3, #27
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e058      	b.n	8006a18 <UART_SetConfig+0x178>
 8006966:	231b      	movs	r3, #27
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	2202      	movs	r2, #2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	e053      	b.n	8006a18 <UART_SetConfig+0x178>
 8006970:	231b      	movs	r3, #27
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	2204      	movs	r2, #4
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e04e      	b.n	8006a18 <UART_SetConfig+0x178>
 800697a:	231b      	movs	r3, #27
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	2208      	movs	r2, #8
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e049      	b.n	8006a18 <UART_SetConfig+0x178>
 8006984:	231b      	movs	r3, #27
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2210      	movs	r2, #16
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e044      	b.n	8006a18 <UART_SetConfig+0x178>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a90      	ldr	r2, [pc, #576]	@ (8006bd4 <UART_SetConfig+0x334>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d127      	bne.n	80069e8 <UART_SetConfig+0x148>
 8006998:	4b8d      	ldr	r3, [pc, #564]	@ (8006bd0 <UART_SetConfig+0x330>)
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	220c      	movs	r2, #12
 800699e:	4013      	ands	r3, r2
 80069a0:	2b0c      	cmp	r3, #12
 80069a2:	d017      	beq.n	80069d4 <UART_SetConfig+0x134>
 80069a4:	d81b      	bhi.n	80069de <UART_SetConfig+0x13e>
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d00a      	beq.n	80069c0 <UART_SetConfig+0x120>
 80069aa:	d818      	bhi.n	80069de <UART_SetConfig+0x13e>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <UART_SetConfig+0x116>
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d00a      	beq.n	80069ca <UART_SetConfig+0x12a>
 80069b4:	e013      	b.n	80069de <UART_SetConfig+0x13e>
 80069b6:	231b      	movs	r3, #27
 80069b8:	18fb      	adds	r3, r7, r3
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e02b      	b.n	8006a18 <UART_SetConfig+0x178>
 80069c0:	231b      	movs	r3, #27
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	2202      	movs	r2, #2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	e026      	b.n	8006a18 <UART_SetConfig+0x178>
 80069ca:	231b      	movs	r3, #27
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	2204      	movs	r2, #4
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e021      	b.n	8006a18 <UART_SetConfig+0x178>
 80069d4:	231b      	movs	r3, #27
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	2208      	movs	r2, #8
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e01c      	b.n	8006a18 <UART_SetConfig+0x178>
 80069de:	231b      	movs	r3, #27
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	2210      	movs	r2, #16
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e017      	b.n	8006a18 <UART_SetConfig+0x178>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7a      	ldr	r2, [pc, #488]	@ (8006bd8 <UART_SetConfig+0x338>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d104      	bne.n	80069fc <UART_SetConfig+0x15c>
 80069f2:	231b      	movs	r3, #27
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	2200      	movs	r2, #0
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e00d      	b.n	8006a18 <UART_SetConfig+0x178>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a76      	ldr	r2, [pc, #472]	@ (8006bdc <UART_SetConfig+0x33c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d104      	bne.n	8006a10 <UART_SetConfig+0x170>
 8006a06:	231b      	movs	r3, #27
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e003      	b.n	8006a18 <UART_SetConfig+0x178>
 8006a10:	231b      	movs	r3, #27
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	2210      	movs	r2, #16
 8006a16:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	2380      	movs	r3, #128	@ 0x80
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d000      	beq.n	8006a26 <UART_SetConfig+0x186>
 8006a24:	e065      	b.n	8006af2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006a26:	231b      	movs	r3, #27
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d015      	beq.n	8006a5c <UART_SetConfig+0x1bc>
 8006a30:	dc18      	bgt.n	8006a64 <UART_SetConfig+0x1c4>
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d00d      	beq.n	8006a52 <UART_SetConfig+0x1b2>
 8006a36:	dc15      	bgt.n	8006a64 <UART_SetConfig+0x1c4>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <UART_SetConfig+0x1a2>
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0x1ac>
 8006a40:	e010      	b.n	8006a64 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7fe fc9f 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8006a46:	0003      	movs	r3, r0
 8006a48:	617b      	str	r3, [r7, #20]
        break;
 8006a4a:	e012      	b.n	8006a72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a4c:	4b64      	ldr	r3, [pc, #400]	@ (8006be0 <UART_SetConfig+0x340>)
 8006a4e:	617b      	str	r3, [r7, #20]
        break;
 8006a50:	e00f      	b.n	8006a72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a52:	f7fe fc0b 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006a56:	0003      	movs	r3, r0
 8006a58:	617b      	str	r3, [r7, #20]
        break;
 8006a5a:	e00a      	b.n	8006a72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5c:	2380      	movs	r3, #128	@ 0x80
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	617b      	str	r3, [r7, #20]
        break;
 8006a62:	e006      	b.n	8006a72 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a68:	231a      	movs	r3, #26
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
        break;
 8006a70:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d100      	bne.n	8006a7a <UART_SetConfig+0x1da>
 8006a78:	e08d      	b.n	8006b96 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a7e:	4b59      	ldr	r3, [pc, #356]	@ (8006be4 <UART_SetConfig+0x344>)
 8006a80:	0052      	lsls	r2, r2, #1
 8006a82:	5ad3      	ldrh	r3, [r2, r3]
 8006a84:	0019      	movs	r1, r3
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7f9 fb4c 	bl	8000124 <__udivsi3>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	005a      	lsls	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	18d2      	adds	r2, r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	0010      	movs	r0, r2
 8006aa0:	f7f9 fb40 	bl	8000124 <__udivsi3>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d91c      	bls.n	8006ae8 <UART_SetConfig+0x248>
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	2380      	movs	r3, #128	@ 0x80
 8006ab2:	025b      	lsls	r3, r3, #9
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d217      	bcs.n	8006ae8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	200e      	movs	r0, #14
 8006abe:	183b      	adds	r3, r7, r0
 8006ac0:	210f      	movs	r1, #15
 8006ac2:	438a      	bics	r2, r1
 8006ac4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2207      	movs	r2, #7
 8006ace:	4013      	ands	r3, r2
 8006ad0:	b299      	uxth	r1, r3
 8006ad2:	183b      	adds	r3, r7, r0
 8006ad4:	183a      	adds	r2, r7, r0
 8006ad6:	8812      	ldrh	r2, [r2, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	183a      	adds	r2, r7, r0
 8006ae2:	8812      	ldrh	r2, [r2, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	e056      	b.n	8006b96 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae8:	231a      	movs	r3, #26
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e051      	b.n	8006b96 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006af2:	231b      	movs	r3, #27
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d015      	beq.n	8006b28 <UART_SetConfig+0x288>
 8006afc:	dc18      	bgt.n	8006b30 <UART_SetConfig+0x290>
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d00d      	beq.n	8006b1e <UART_SetConfig+0x27e>
 8006b02:	dc15      	bgt.n	8006b30 <UART_SetConfig+0x290>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <UART_SetConfig+0x26e>
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d005      	beq.n	8006b18 <UART_SetConfig+0x278>
 8006b0c:	e010      	b.n	8006b30 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0e:	f7fe fc39 	bl	8005384 <HAL_RCC_GetPCLK1Freq>
 8006b12:	0003      	movs	r3, r0
 8006b14:	617b      	str	r3, [r7, #20]
        break;
 8006b16:	e012      	b.n	8006b3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b31      	ldr	r3, [pc, #196]	@ (8006be0 <UART_SetConfig+0x340>)
 8006b1a:	617b      	str	r3, [r7, #20]
        break;
 8006b1c:	e00f      	b.n	8006b3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fe fba5 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006b22:	0003      	movs	r3, r0
 8006b24:	617b      	str	r3, [r7, #20]
        break;
 8006b26:	e00a      	b.n	8006b3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b28:	2380      	movs	r3, #128	@ 0x80
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	617b      	str	r3, [r7, #20]
        break;
 8006b2e:	e006      	b.n	8006b3e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b34:	231a      	movs	r3, #26
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	2201      	movs	r2, #1
 8006b3a:	701a      	strb	r2, [r3, #0]
        break;
 8006b3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d028      	beq.n	8006b96 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b48:	4b26      	ldr	r3, [pc, #152]	@ (8006be4 <UART_SetConfig+0x344>)
 8006b4a:	0052      	lsls	r2, r2, #1
 8006b4c:	5ad3      	ldrh	r3, [r2, r3]
 8006b4e:	0019      	movs	r1, r3
 8006b50:	6978      	ldr	r0, [r7, #20]
 8006b52:	f7f9 fae7 	bl	8000124 <__udivsi3>
 8006b56:	0003      	movs	r3, r0
 8006b58:	001a      	movs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	18d2      	adds	r2, r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	0019      	movs	r1, r3
 8006b68:	0010      	movs	r0, r2
 8006b6a:	f7f9 fadb 	bl	8000124 <__udivsi3>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d90a      	bls.n	8006b8e <UART_SetConfig+0x2ee>
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	2380      	movs	r3, #128	@ 0x80
 8006b7c:	025b      	lsls	r3, r3, #9
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d205      	bcs.n	8006b8e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	e003      	b.n	8006b96 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8e:	231a      	movs	r3, #26
 8006b90:	18fb      	adds	r3, r7, r3
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	226a      	movs	r2, #106	@ 0x6a
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2268      	movs	r2, #104	@ 0x68
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bb2:	231a      	movs	r3, #26
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	781b      	ldrb	r3, [r3, #0]
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b008      	add	sp, #32
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	cfff69f3 	.word	0xcfff69f3
 8006bc4:	ffffcfff 	.word	0xffffcfff
 8006bc8:	11fff4ff 	.word	0x11fff4ff
 8006bcc:	40013800 	.word	0x40013800
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	40004400 	.word	0x40004400
 8006bd8:	40004800 	.word	0x40004800
 8006bdc:	40004c00 	.word	0x40004c00
 8006be0:	00f42400 	.word	0x00f42400
 8006be4:	08008224 	.word	0x08008224

08006be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a4a      	ldr	r2, [pc, #296]	@ (8006d2c <UART_AdvFeatureConfig+0x144>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	0019      	movs	r1, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	2201      	movs	r2, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4a43      	ldr	r2, [pc, #268]	@ (8006d30 <UART_AdvFeatureConfig+0x148>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	0019      	movs	r1, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	2202      	movs	r2, #2
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4a3b      	ldr	r2, [pc, #236]	@ (8006d34 <UART_AdvFeatureConfig+0x14c>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	0019      	movs	r1, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4a34      	ldr	r2, [pc, #208]	@ (8006d38 <UART_AdvFeatureConfig+0x150>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	0019      	movs	r1, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d00b      	beq.n	8006c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a2c      	ldr	r2, [pc, #176]	@ (8006d3c <UART_AdvFeatureConfig+0x154>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4a25      	ldr	r2, [pc, #148]	@ (8006d40 <UART_AdvFeatureConfig+0x158>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	0019      	movs	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	2240      	movs	r2, #64	@ 0x40
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <UART_AdvFeatureConfig+0x15c>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	0019      	movs	r1, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	035b      	lsls	r3, r3, #13
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d10b      	bne.n	8006d02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <UART_AdvFeatureConfig+0x160>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d06:	2280      	movs	r2, #128	@ 0x80
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4a0e      	ldr	r2, [pc, #56]	@ (8006d4c <UART_AdvFeatureConfig+0x164>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	0019      	movs	r1, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }
}
 8006d24:	46c0      	nop			@ (mov r8, r8)
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b002      	add	sp, #8
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	ffff7fff 	.word	0xffff7fff
 8006d30:	fffdffff 	.word	0xfffdffff
 8006d34:	fffeffff 	.word	0xfffeffff
 8006d38:	fffbffff 	.word	0xfffbffff
 8006d3c:	ffffefff 	.word	0xffffefff
 8006d40:	ffffdfff 	.word	0xffffdfff
 8006d44:	ffefffff 	.word	0xffefffff
 8006d48:	ff9fffff 	.word	0xff9fffff
 8006d4c:	fff7ffff 	.word	0xfff7ffff

08006d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b092      	sub	sp, #72	@ 0x48
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2290      	movs	r2, #144	@ 0x90
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d60:	f7fc fa9a 	bl	8003298 <HAL_GetTick>
 8006d64:	0003      	movs	r3, r0
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2208      	movs	r2, #8
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d12d      	bne.n	8006dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d78:	2280      	movs	r2, #128	@ 0x80
 8006d7a:	0391      	lsls	r1, r2, #14
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4a47      	ldr	r2, [pc, #284]	@ (8006e9c <UART_CheckIdleState+0x14c>)
 8006d80:	9200      	str	r2, [sp, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f000 f88e 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d022      	beq.n	8006dd2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d96:	2301      	movs	r3, #1
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	f383 8810 	msr	PRIMASK, r3
}
 8006da0:	46c0      	nop			@ (mov r8, r8)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2180      	movs	r1, #128	@ 0x80
 8006dae:	438a      	bics	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	f383 8810 	msr	PRIMASK, r3
}
 8006dbc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2288      	movs	r2, #136	@ 0x88
 8006dc2:	2120      	movs	r1, #32
 8006dc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2284      	movs	r2, #132	@ 0x84
 8006dca:	2100      	movs	r1, #0
 8006dcc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e060      	b.n	8006e94 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2204      	movs	r2, #4
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d146      	bne.n	8006e6e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de2:	2280      	movs	r2, #128	@ 0x80
 8006de4:	03d1      	lsls	r1, r2, #15
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e9c <UART_CheckIdleState+0x14c>)
 8006dea:	9200      	str	r2, [sp, #0]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f000 f859 	bl	8006ea4 <UART_WaitOnFlagUntilTimeout>
 8006df2:	1e03      	subs	r3, r0, #0
 8006df4:	d03b      	beq.n	8006e6e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e00:	2301      	movs	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4922      	ldr	r1, [pc, #136]	@ (8006ea0 <UART_CheckIdleState+0x150>)
 8006e18:	400a      	ands	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f383 8810 	msr	PRIMASK, r3
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e28:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e32:	2301      	movs	r3, #1
 8006e34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f383 8810 	msr	PRIMASK, r3
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2101      	movs	r1, #1
 8006e4a:	438a      	bics	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f383 8810 	msr	PRIMASK, r3
}
 8006e58:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	228c      	movs	r2, #140	@ 0x8c
 8006e5e:	2120      	movs	r1, #32
 8006e60:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2284      	movs	r2, #132	@ 0x84
 8006e66:	2100      	movs	r1, #0
 8006e68:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e012      	b.n	8006e94 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2288      	movs	r2, #136	@ 0x88
 8006e72:	2120      	movs	r1, #32
 8006e74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	228c      	movs	r2, #140	@ 0x8c
 8006e7a:	2120      	movs	r1, #32
 8006e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2284      	movs	r2, #132	@ 0x84
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b010      	add	sp, #64	@ 0x40
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	01ffffff 	.word	0x01ffffff
 8006ea0:	fffffedf 	.word	0xfffffedf

08006ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	1dfb      	adds	r3, r7, #7
 8006eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb4:	e051      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	d04e      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebc:	f7fc f9ec 	bl	8003298 <HAL_GetTick>
 8006ec0:	0002      	movs	r2, r0
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e051      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d03b      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b80      	cmp	r3, #128	@ 0x80
 8006ee6:	d038      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d035      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d111      	bne.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 f83c 	bl	8006f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2290      	movs	r2, #144	@ 0x90
 8006f10:	2108      	movs	r1, #8
 8006f12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2284      	movs	r2, #132	@ 0x84
 8006f18:	2100      	movs	r1, #0
 8006f1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e02c      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	2380      	movs	r3, #128	@ 0x80
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	401a      	ands	r2, r3
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d112      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2280      	movs	r2, #128	@ 0x80
 8006f3a:	0112      	lsls	r2, r2, #4
 8006f3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 f81f 	bl	8006f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2290      	movs	r2, #144	@ 0x90
 8006f4a:	2120      	movs	r1, #32
 8006f4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2284      	movs	r2, #132	@ 0x84
 8006f52:	2100      	movs	r1, #0
 8006f54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e00f      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	425a      	negs	r2, r3
 8006f6a:	4153      	adcs	r3, r2
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	001a      	movs	r2, r3
 8006f70:	1dfb      	adds	r3, r7, #7
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d09e      	beq.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b004      	add	sp, #16
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08e      	sub	sp, #56	@ 0x38
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f90:	617b      	str	r3, [r7, #20]
  return(result);
 8006f92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f383 8810 	msr	PRIMASK, r3
}
 8006fa0:	46c0      	nop			@ (mov r8, r8)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4926      	ldr	r1, [pc, #152]	@ (8007048 <UART_EndRxTransfer+0xc4>)
 8006fae:	400a      	ands	r2, r1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f383 8810 	msr	PRIMASK, r3
}
 8006fbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc2:	623b      	str	r3, [r7, #32]
  return(result);
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc8:	2301      	movs	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	f383 8810 	msr	PRIMASK, r3
}
 8006fd2:	46c0      	nop			@ (mov r8, r8)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	491b      	ldr	r1, [pc, #108]	@ (800704c <UART_EndRxTransfer+0xc8>)
 8006fe0:	400a      	ands	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	f383 8810 	msr	PRIMASK, r3
}
 8006fee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d118      	bne.n	800702a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007002:	2301      	movs	r3, #1
 8007004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f383 8810 	msr	PRIMASK, r3
}
 800700c:	46c0      	nop			@ (mov r8, r8)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2110      	movs	r1, #16
 800701a:	438a      	bics	r2, r1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f383 8810 	msr	PRIMASK, r3
}
 8007028:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	228c      	movs	r2, #140	@ 0x8c
 800702e:	2120      	movs	r1, #32
 8007030:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800703e:	46c0      	nop			@ (mov r8, r8)
 8007040:	46bd      	mov	sp, r7
 8007042:	b00e      	add	sp, #56	@ 0x38
 8007044:	bd80      	pop	{r7, pc}
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	fffffedf 	.word	0xfffffedf
 800704c:	effffffe 	.word	0xeffffffe

08007050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	225e      	movs	r2, #94	@ 0x5e
 8007062:	2100      	movs	r1, #0
 8007064:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2256      	movs	r2, #86	@ 0x56
 800706a:	2100      	movs	r1, #0
 800706c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	0018      	movs	r0, r3
 8007072:	f7ff fc01 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b004      	add	sp, #16
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007086:	f3ef 8310 	mrs	r3, PRIMASK
 800708a:	60bb      	str	r3, [r7, #8]
  return(result);
 800708c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	2301      	movs	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2140      	movs	r1, #64	@ 0x40
 80070a8:	438a      	bics	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f383 8810 	msr	PRIMASK, r3
}
 80070b6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2288      	movs	r2, #136	@ 0x88
 80070bc:	2120      	movs	r1, #32
 80070be:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7ff fbcd 	bl	8006868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b006      	add	sp, #24
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	46bd      	mov	sp, r7
 80070e2:	b002      	add	sp, #8
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070ee:	46c0      	nop			@ (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b002      	add	sp, #8
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	46bd      	mov	sp, r7
 8007102:	b002      	add	sp, #8
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2284      	movs	r2, #132	@ 0x84
 8007114:	5c9b      	ldrb	r3, [r3, r2]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UARTEx_DisableFifoMode+0x16>
 800711a:	2302      	movs	r3, #2
 800711c:	e027      	b.n	800716e <HAL_UARTEx_DisableFifoMode+0x66>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2284      	movs	r2, #132	@ 0x84
 8007122:	2101      	movs	r1, #1
 8007124:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2288      	movs	r2, #136	@ 0x88
 800712a:	2124      	movs	r1, #36	@ 0x24
 800712c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2101      	movs	r1, #1
 8007142:	438a      	bics	r2, r1
 8007144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a0b      	ldr	r2, [pc, #44]	@ (8007178 <HAL_UARTEx_DisableFifoMode+0x70>)
 800714a:	4013      	ands	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2288      	movs	r2, #136	@ 0x88
 8007160:	2120      	movs	r1, #32
 8007162:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2284      	movs	r2, #132	@ 0x84
 8007168:	2100      	movs	r1, #0
 800716a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	0018      	movs	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	b004      	add	sp, #16
 8007174:	bd80      	pop	{r7, pc}
 8007176:	46c0      	nop			@ (mov r8, r8)
 8007178:	dfffffff 	.word	0xdfffffff

0800717c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2284      	movs	r2, #132	@ 0x84
 800718a:	5c9b      	ldrb	r3, [r3, r2]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007190:	2302      	movs	r3, #2
 8007192:	e02e      	b.n	80071f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2284      	movs	r2, #132	@ 0x84
 8007198:	2101      	movs	r1, #1
 800719a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2288      	movs	r2, #136	@ 0x88
 80071a0:	2124      	movs	r1, #36	@ 0x24
 80071a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2101      	movs	r1, #1
 80071b8:	438a      	bics	r2, r1
 80071ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	08d9      	lsrs	r1, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	0018      	movs	r0, r3
 80071d4:	f000 f854 	bl	8007280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2288      	movs	r2, #136	@ 0x88
 80071e4:	2120      	movs	r1, #32
 80071e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2284      	movs	r2, #132	@ 0x84
 80071ec:	2100      	movs	r1, #0
 80071ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b004      	add	sp, #16
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2284      	movs	r2, #132	@ 0x84
 800720a:	5c9b      	ldrb	r3, [r3, r2]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007210:	2302      	movs	r3, #2
 8007212:	e02f      	b.n	8007274 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2284      	movs	r2, #132	@ 0x84
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2288      	movs	r2, #136	@ 0x88
 8007220:	2124      	movs	r1, #36	@ 0x24
 8007222:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2101      	movs	r1, #1
 8007238:	438a      	bics	r2, r1
 800723a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4a0e      	ldr	r2, [pc, #56]	@ (800727c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007244:	4013      	ands	r3, r2
 8007246:	0019      	movs	r1, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0018      	movs	r0, r3
 8007256:	f000 f813 	bl	8007280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2288      	movs	r2, #136	@ 0x88
 8007266:	2120      	movs	r1, #32
 8007268:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2284      	movs	r2, #132	@ 0x84
 800726e:	2100      	movs	r1, #0
 8007270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b004      	add	sp, #16
 800727a:	bd80      	pop	{r7, pc}
 800727c:	f1ffffff 	.word	0xf1ffffff

08007280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800728c:	2b00      	cmp	r3, #0
 800728e:	d108      	bne.n	80072a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	226a      	movs	r2, #106	@ 0x6a
 8007294:	2101      	movs	r1, #1
 8007296:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2268      	movs	r2, #104	@ 0x68
 800729c:	2101      	movs	r1, #1
 800729e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a0:	e043      	b.n	800732a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072a2:	260f      	movs	r6, #15
 80072a4:	19bb      	adds	r3, r7, r6
 80072a6:	2208      	movs	r2, #8
 80072a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072aa:	200e      	movs	r0, #14
 80072ac:	183b      	adds	r3, r7, r0
 80072ae:	2208      	movs	r2, #8
 80072b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0e5b      	lsrs	r3, r3, #25
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	240d      	movs	r4, #13
 80072be:	193b      	adds	r3, r7, r4
 80072c0:	2107      	movs	r1, #7
 80072c2:	400a      	ands	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	0f5b      	lsrs	r3, r3, #29
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	250c      	movs	r5, #12
 80072d2:	197b      	adds	r3, r7, r5
 80072d4:	2107      	movs	r1, #7
 80072d6:	400a      	ands	r2, r1
 80072d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072da:	183b      	adds	r3, r7, r0
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	197a      	adds	r2, r7, r5
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	4914      	ldr	r1, [pc, #80]	@ (8007334 <UARTEx_SetNbDataToProcess+0xb4>)
 80072e4:	5c8a      	ldrb	r2, [r1, r2]
 80072e6:	435a      	muls	r2, r3
 80072e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80072ea:	197b      	adds	r3, r7, r5
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <UARTEx_SetNbDataToProcess+0xb8>)
 80072f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072f2:	0019      	movs	r1, r3
 80072f4:	f7f8 ffa0 	bl	8000238 <__divsi3>
 80072f8:	0003      	movs	r3, r0
 80072fa:	b299      	uxth	r1, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	226a      	movs	r2, #106	@ 0x6a
 8007300:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007302:	19bb      	adds	r3, r7, r6
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	193a      	adds	r2, r7, r4
 8007308:	7812      	ldrb	r2, [r2, #0]
 800730a:	490a      	ldr	r1, [pc, #40]	@ (8007334 <UARTEx_SetNbDataToProcess+0xb4>)
 800730c:	5c8a      	ldrb	r2, [r1, r2]
 800730e:	435a      	muls	r2, r3
 8007310:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007312:	193b      	adds	r3, r7, r4
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4a08      	ldr	r2, [pc, #32]	@ (8007338 <UARTEx_SetNbDataToProcess+0xb8>)
 8007318:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731a:	0019      	movs	r1, r3
 800731c:	f7f8 ff8c 	bl	8000238 <__divsi3>
 8007320:	0003      	movs	r3, r0
 8007322:	b299      	uxth	r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2268      	movs	r2, #104	@ 0x68
 8007328:	5299      	strh	r1, [r3, r2]
}
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	46bd      	mov	sp, r7
 800732e:	b005      	add	sp, #20
 8007330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007332:	46c0      	nop			@ (mov r8, r8)
 8007334:	0800823c 	.word	0x0800823c
 8007338:	08008244 	.word	0x08008244

0800733c <siprintf>:
 800733c:	b40e      	push	{r1, r2, r3}
 800733e:	b500      	push	{lr}
 8007340:	490b      	ldr	r1, [pc, #44]	@ (8007370 <siprintf+0x34>)
 8007342:	b09c      	sub	sp, #112	@ 0x70
 8007344:	ab1d      	add	r3, sp, #116	@ 0x74
 8007346:	9002      	str	r0, [sp, #8]
 8007348:	9006      	str	r0, [sp, #24]
 800734a:	9107      	str	r1, [sp, #28]
 800734c:	9104      	str	r1, [sp, #16]
 800734e:	4809      	ldr	r0, [pc, #36]	@ (8007374 <siprintf+0x38>)
 8007350:	4909      	ldr	r1, [pc, #36]	@ (8007378 <siprintf+0x3c>)
 8007352:	cb04      	ldmia	r3!, {r2}
 8007354:	9105      	str	r1, [sp, #20]
 8007356:	6800      	ldr	r0, [r0, #0]
 8007358:	a902      	add	r1, sp, #8
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f000 f9d6 	bl	800770c <_svfiprintf_r>
 8007360:	2200      	movs	r2, #0
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	b01c      	add	sp, #112	@ 0x70
 8007368:	bc08      	pop	{r3}
 800736a:	b003      	add	sp, #12
 800736c:	4718      	bx	r3
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	7fffffff 	.word	0x7fffffff
 8007374:	20000024 	.word	0x20000024
 8007378:	ffff0208 	.word	0xffff0208

0800737c <_vsniprintf_r>:
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	0014      	movs	r4, r2
 8007380:	0005      	movs	r5, r0
 8007382:	001a      	movs	r2, r3
 8007384:	b09b      	sub	sp, #108	@ 0x6c
 8007386:	2c00      	cmp	r4, #0
 8007388:	da05      	bge.n	8007396 <_vsniprintf_r+0x1a>
 800738a:	238b      	movs	r3, #139	@ 0x8b
 800738c:	6003      	str	r3, [r0, #0]
 800738e:	2001      	movs	r0, #1
 8007390:	4240      	negs	r0, r0
 8007392:	b01b      	add	sp, #108	@ 0x6c
 8007394:	bd30      	pop	{r4, r5, pc}
 8007396:	2382      	movs	r3, #130	@ 0x82
 8007398:	4668      	mov	r0, sp
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	8183      	strh	r3, [r0, #12]
 800739e:	2300      	movs	r3, #0
 80073a0:	9100      	str	r1, [sp, #0]
 80073a2:	9104      	str	r1, [sp, #16]
 80073a4:	429c      	cmp	r4, r3
 80073a6:	d000      	beq.n	80073aa <_vsniprintf_r+0x2e>
 80073a8:	1e63      	subs	r3, r4, #1
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	2301      	movs	r3, #1
 80073b0:	4669      	mov	r1, sp
 80073b2:	425b      	negs	r3, r3
 80073b4:	81cb      	strh	r3, [r1, #14]
 80073b6:	0028      	movs	r0, r5
 80073b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80073ba:	f000 f9a7 	bl	800770c <_svfiprintf_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	da01      	bge.n	80073c6 <_vsniprintf_r+0x4a>
 80073c2:	238b      	movs	r3, #139	@ 0x8b
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	d0e3      	beq.n	8007392 <_vsniprintf_r+0x16>
 80073ca:	2200      	movs	r2, #0
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	e7df      	b.n	8007392 <_vsniprintf_r+0x16>
	...

080073d4 <vsniprintf>:
 80073d4:	b513      	push	{r0, r1, r4, lr}
 80073d6:	4c04      	ldr	r4, [pc, #16]	@ (80073e8 <vsniprintf+0x14>)
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	0013      	movs	r3, r2
 80073dc:	000a      	movs	r2, r1
 80073de:	0001      	movs	r1, r0
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	f7ff ffcb 	bl	800737c <_vsniprintf_r>
 80073e6:	bd16      	pop	{r1, r2, r4, pc}
 80073e8:	20000024 	.word	0x20000024

080073ec <memset>:
 80073ec:	0003      	movs	r3, r0
 80073ee:	1882      	adds	r2, r0, r2
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d100      	bne.n	80073f6 <memset+0xa>
 80073f4:	4770      	bx	lr
 80073f6:	7019      	strb	r1, [r3, #0]
 80073f8:	3301      	adds	r3, #1
 80073fa:	e7f9      	b.n	80073f0 <memset+0x4>

080073fc <__errno>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	@ (8007404 <__errno+0x8>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4770      	bx	lr
 8007402:	46c0      	nop			@ (mov r8, r8)
 8007404:	20000024 	.word	0x20000024

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	2600      	movs	r6, #0
 800740c:	4c0c      	ldr	r4, [pc, #48]	@ (8007440 <__libc_init_array+0x38>)
 800740e:	4d0d      	ldr	r5, [pc, #52]	@ (8007444 <__libc_init_array+0x3c>)
 8007410:	1b64      	subs	r4, r4, r5
 8007412:	10a4      	asrs	r4, r4, #2
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	2600      	movs	r6, #0
 800741a:	f000 fe53 	bl	80080c4 <_init>
 800741e:	4c0a      	ldr	r4, [pc, #40]	@ (8007448 <__libc_init_array+0x40>)
 8007420:	4d0a      	ldr	r5, [pc, #40]	@ (800744c <__libc_init_array+0x44>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	00b3      	lsls	r3, r6, #2
 800742e:	58eb      	ldr	r3, [r5, r3]
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	00b3      	lsls	r3, r6, #2
 8007438:	58eb      	ldr	r3, [r5, r3]
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	08008280 	.word	0x08008280
 8007444:	08008280 	.word	0x08008280
 8007448:	08008284 	.word	0x08008284
 800744c:	08008280 	.word	0x08008280

08007450 <__retarget_lock_acquire_recursive>:
 8007450:	4770      	bx	lr

08007452 <__retarget_lock_release_recursive>:
 8007452:	4770      	bx	lr

08007454 <_free_r>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	0005      	movs	r5, r0
 8007458:	1e0c      	subs	r4, r1, #0
 800745a:	d010      	beq.n	800747e <_free_r+0x2a>
 800745c:	3c04      	subs	r4, #4
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	da00      	bge.n	8007466 <_free_r+0x12>
 8007464:	18e4      	adds	r4, r4, r3
 8007466:	0028      	movs	r0, r5
 8007468:	f000 f8e0 	bl	800762c <__malloc_lock>
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <_free_r+0x90>)
 800746e:	6813      	ldr	r3, [r2, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <_free_r+0x2c>
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6014      	str	r4, [r2, #0]
 8007478:	0028      	movs	r0, r5
 800747a:	f000 f8df 	bl	800763c <__malloc_unlock>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	42a3      	cmp	r3, r4
 8007482:	d908      	bls.n	8007496 <_free_r+0x42>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	1821      	adds	r1, r4, r0
 8007488:	428b      	cmp	r3, r1
 800748a:	d1f3      	bne.n	8007474 <_free_r+0x20>
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	1809      	adds	r1, r1, r0
 8007492:	6021      	str	r1, [r4, #0]
 8007494:	e7ee      	b.n	8007474 <_free_r+0x20>
 8007496:	001a      	movs	r2, r3
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <_free_r+0x4e>
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d9f9      	bls.n	8007496 <_free_r+0x42>
 80074a2:	6811      	ldr	r1, [r2, #0]
 80074a4:	1850      	adds	r0, r2, r1
 80074a6:	42a0      	cmp	r0, r4
 80074a8:	d10b      	bne.n	80074c2 <_free_r+0x6e>
 80074aa:	6820      	ldr	r0, [r4, #0]
 80074ac:	1809      	adds	r1, r1, r0
 80074ae:	1850      	adds	r0, r2, r1
 80074b0:	6011      	str	r1, [r2, #0]
 80074b2:	4283      	cmp	r3, r0
 80074b4:	d1e0      	bne.n	8007478 <_free_r+0x24>
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	1841      	adds	r1, r0, r1
 80074bc:	6011      	str	r1, [r2, #0]
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7da      	b.n	8007478 <_free_r+0x24>
 80074c2:	42a0      	cmp	r0, r4
 80074c4:	d902      	bls.n	80074cc <_free_r+0x78>
 80074c6:	230c      	movs	r3, #12
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	e7d5      	b.n	8007478 <_free_r+0x24>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	1821      	adds	r1, r4, r0
 80074d0:	428b      	cmp	r3, r1
 80074d2:	d103      	bne.n	80074dc <_free_r+0x88>
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	1809      	adds	r1, r1, r0
 80074da:	6021      	str	r1, [r4, #0]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	6054      	str	r4, [r2, #4]
 80074e0:	e7ca      	b.n	8007478 <_free_r+0x24>
 80074e2:	46c0      	nop			@ (mov r8, r8)
 80074e4:	20000508 	.word	0x20000508

080074e8 <sbrk_aligned>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007528 <sbrk_aligned+0x40>)
 80074ec:	000d      	movs	r5, r1
 80074ee:	6831      	ldr	r1, [r6, #0]
 80074f0:	0004      	movs	r4, r0
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d102      	bne.n	80074fc <sbrk_aligned+0x14>
 80074f6:	f000 fb99 	bl	8007c2c <_sbrk_r>
 80074fa:	6030      	str	r0, [r6, #0]
 80074fc:	0029      	movs	r1, r5
 80074fe:	0020      	movs	r0, r4
 8007500:	f000 fb94 	bl	8007c2c <_sbrk_r>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d103      	bne.n	8007510 <sbrk_aligned+0x28>
 8007508:	2501      	movs	r5, #1
 800750a:	426d      	negs	r5, r5
 800750c:	0028      	movs	r0, r5
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	2303      	movs	r3, #3
 8007512:	1cc5      	adds	r5, r0, #3
 8007514:	439d      	bics	r5, r3
 8007516:	42a8      	cmp	r0, r5
 8007518:	d0f8      	beq.n	800750c <sbrk_aligned+0x24>
 800751a:	1a29      	subs	r1, r5, r0
 800751c:	0020      	movs	r0, r4
 800751e:	f000 fb85 	bl	8007c2c <_sbrk_r>
 8007522:	3001      	adds	r0, #1
 8007524:	d1f2      	bne.n	800750c <sbrk_aligned+0x24>
 8007526:	e7ef      	b.n	8007508 <sbrk_aligned+0x20>
 8007528:	20000504 	.word	0x20000504

0800752c <_malloc_r>:
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752e:	2203      	movs	r2, #3
 8007530:	1ccb      	adds	r3, r1, #3
 8007532:	4393      	bics	r3, r2
 8007534:	3308      	adds	r3, #8
 8007536:	0005      	movs	r5, r0
 8007538:	001f      	movs	r7, r3
 800753a:	2b0c      	cmp	r3, #12
 800753c:	d234      	bcs.n	80075a8 <_malloc_r+0x7c>
 800753e:	270c      	movs	r7, #12
 8007540:	42b9      	cmp	r1, r7
 8007542:	d833      	bhi.n	80075ac <_malloc_r+0x80>
 8007544:	0028      	movs	r0, r5
 8007546:	f000 f871 	bl	800762c <__malloc_lock>
 800754a:	4e37      	ldr	r6, [pc, #220]	@ (8007628 <_malloc_r+0xfc>)
 800754c:	6833      	ldr	r3, [r6, #0]
 800754e:	001c      	movs	r4, r3
 8007550:	2c00      	cmp	r4, #0
 8007552:	d12f      	bne.n	80075b4 <_malloc_r+0x88>
 8007554:	0039      	movs	r1, r7
 8007556:	0028      	movs	r0, r5
 8007558:	f7ff ffc6 	bl	80074e8 <sbrk_aligned>
 800755c:	0004      	movs	r4, r0
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d15f      	bne.n	8007622 <_malloc_r+0xf6>
 8007562:	6834      	ldr	r4, [r6, #0]
 8007564:	9400      	str	r4, [sp, #0]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d14a      	bne.n	8007602 <_malloc_r+0xd6>
 800756c:	2c00      	cmp	r4, #0
 800756e:	d052      	beq.n	8007616 <_malloc_r+0xea>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	0028      	movs	r0, r5
 8007574:	18e3      	adds	r3, r4, r3
 8007576:	9900      	ldr	r1, [sp, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	f000 fb57 	bl	8007c2c <_sbrk_r>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	4283      	cmp	r3, r0
 8007582:	d148      	bne.n	8007616 <_malloc_r+0xea>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	0028      	movs	r0, r5
 8007588:	1aff      	subs	r7, r7, r3
 800758a:	0039      	movs	r1, r7
 800758c:	f7ff ffac 	bl	80074e8 <sbrk_aligned>
 8007590:	3001      	adds	r0, #1
 8007592:	d040      	beq.n	8007616 <_malloc_r+0xea>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	19db      	adds	r3, r3, r7
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	6833      	ldr	r3, [r6, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d133      	bne.n	800760a <_malloc_r+0xde>
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	e019      	b.n	80075dc <_malloc_r+0xb0>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dac9      	bge.n	8007540 <_malloc_r+0x14>
 80075ac:	230c      	movs	r3, #12
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	1bc9      	subs	r1, r1, r7
 80075b8:	d420      	bmi.n	80075fc <_malloc_r+0xd0>
 80075ba:	290b      	cmp	r1, #11
 80075bc:	d90a      	bls.n	80075d4 <_malloc_r+0xa8>
 80075be:	19e2      	adds	r2, r4, r7
 80075c0:	6027      	str	r7, [r4, #0]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d104      	bne.n	80075d0 <_malloc_r+0xa4>
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	6011      	str	r1, [r2, #0]
 80075cc:	6053      	str	r3, [r2, #4]
 80075ce:	e005      	b.n	80075dc <_malloc_r+0xb0>
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	e7f9      	b.n	80075c8 <_malloc_r+0x9c>
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	d10e      	bne.n	80075f8 <_malloc_r+0xcc>
 80075da:	6032      	str	r2, [r6, #0]
 80075dc:	0028      	movs	r0, r5
 80075de:	f000 f82d 	bl	800763c <__malloc_unlock>
 80075e2:	0020      	movs	r0, r4
 80075e4:	2207      	movs	r2, #7
 80075e6:	300b      	adds	r0, #11
 80075e8:	1d23      	adds	r3, r4, #4
 80075ea:	4390      	bics	r0, r2
 80075ec:	1ac2      	subs	r2, r0, r3
 80075ee:	4298      	cmp	r0, r3
 80075f0:	d0df      	beq.n	80075b2 <_malloc_r+0x86>
 80075f2:	1a1b      	subs	r3, r3, r0
 80075f4:	50a3      	str	r3, [r4, r2]
 80075f6:	e7dc      	b.n	80075b2 <_malloc_r+0x86>
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	e7ef      	b.n	80075dc <_malloc_r+0xb0>
 80075fc:	0023      	movs	r3, r4
 80075fe:	6864      	ldr	r4, [r4, #4]
 8007600:	e7a6      	b.n	8007550 <_malloc_r+0x24>
 8007602:	9c00      	ldr	r4, [sp, #0]
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	e7ad      	b.n	8007566 <_malloc_r+0x3a>
 800760a:	001a      	movs	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	42a3      	cmp	r3, r4
 8007610:	d1fb      	bne.n	800760a <_malloc_r+0xde>
 8007612:	2300      	movs	r3, #0
 8007614:	e7da      	b.n	80075cc <_malloc_r+0xa0>
 8007616:	230c      	movs	r3, #12
 8007618:	0028      	movs	r0, r5
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f000 f80e 	bl	800763c <__malloc_unlock>
 8007620:	e7c6      	b.n	80075b0 <_malloc_r+0x84>
 8007622:	6007      	str	r7, [r0, #0]
 8007624:	e7da      	b.n	80075dc <_malloc_r+0xb0>
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	20000508 	.word	0x20000508

0800762c <__malloc_lock>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4802      	ldr	r0, [pc, #8]	@ (8007638 <__malloc_lock+0xc>)
 8007630:	f7ff ff0e 	bl	8007450 <__retarget_lock_acquire_recursive>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	20000500 	.word	0x20000500

0800763c <__malloc_unlock>:
 800763c:	b510      	push	{r4, lr}
 800763e:	4802      	ldr	r0, [pc, #8]	@ (8007648 <__malloc_unlock+0xc>)
 8007640:	f7ff ff07 	bl	8007452 <__retarget_lock_release_recursive>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	20000500 	.word	0x20000500

0800764c <__ssputs_r>:
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	688e      	ldr	r6, [r1, #8]
 8007650:	b085      	sub	sp, #20
 8007652:	001f      	movs	r7, r3
 8007654:	000c      	movs	r4, r1
 8007656:	680b      	ldr	r3, [r1, #0]
 8007658:	9002      	str	r0, [sp, #8]
 800765a:	9203      	str	r2, [sp, #12]
 800765c:	42be      	cmp	r6, r7
 800765e:	d830      	bhi.n	80076c2 <__ssputs_r+0x76>
 8007660:	210c      	movs	r1, #12
 8007662:	5e62      	ldrsh	r2, [r4, r1]
 8007664:	2190      	movs	r1, #144	@ 0x90
 8007666:	00c9      	lsls	r1, r1, #3
 8007668:	420a      	tst	r2, r1
 800766a:	d028      	beq.n	80076be <__ssputs_r+0x72>
 800766c:	2003      	movs	r0, #3
 800766e:	6921      	ldr	r1, [r4, #16]
 8007670:	1a5b      	subs	r3, r3, r1
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6963      	ldr	r3, [r4, #20]
 8007676:	4343      	muls	r3, r0
 8007678:	9801      	ldr	r0, [sp, #4]
 800767a:	0fdd      	lsrs	r5, r3, #31
 800767c:	18ed      	adds	r5, r5, r3
 800767e:	1c7b      	adds	r3, r7, #1
 8007680:	181b      	adds	r3, r3, r0
 8007682:	106d      	asrs	r5, r5, #1
 8007684:	42ab      	cmp	r3, r5
 8007686:	d900      	bls.n	800768a <__ssputs_r+0x3e>
 8007688:	001d      	movs	r5, r3
 800768a:	0552      	lsls	r2, r2, #21
 800768c:	d528      	bpl.n	80076e0 <__ssputs_r+0x94>
 800768e:	0029      	movs	r1, r5
 8007690:	9802      	ldr	r0, [sp, #8]
 8007692:	f7ff ff4b 	bl	800752c <_malloc_r>
 8007696:	1e06      	subs	r6, r0, #0
 8007698:	d02c      	beq.n	80076f4 <__ssputs_r+0xa8>
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	6921      	ldr	r1, [r4, #16]
 800769e:	f000 fae2 	bl	8007c66 <memcpy>
 80076a2:	89a2      	ldrh	r2, [r4, #12]
 80076a4:	4b18      	ldr	r3, [pc, #96]	@ (8007708 <__ssputs_r+0xbc>)
 80076a6:	401a      	ands	r2, r3
 80076a8:	2380      	movs	r3, #128	@ 0x80
 80076aa:	4313      	orrs	r3, r2
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	6126      	str	r6, [r4, #16]
 80076b2:	18f6      	adds	r6, r6, r3
 80076b4:	6026      	str	r6, [r4, #0]
 80076b6:	003e      	movs	r6, r7
 80076b8:	6165      	str	r5, [r4, #20]
 80076ba:	1aed      	subs	r5, r5, r3
 80076bc:	60a5      	str	r5, [r4, #8]
 80076be:	42be      	cmp	r6, r7
 80076c0:	d900      	bls.n	80076c4 <__ssputs_r+0x78>
 80076c2:	003e      	movs	r6, r7
 80076c4:	0032      	movs	r2, r6
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	f000 fa9b 	bl	8007c04 <memmove>
 80076ce:	2000      	movs	r0, #0
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	1b9b      	subs	r3, r3, r6
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	199b      	adds	r3, r3, r6
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	b005      	add	sp, #20
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	002a      	movs	r2, r5
 80076e2:	9802      	ldr	r0, [sp, #8]
 80076e4:	f000 fac8 	bl	8007c78 <_realloc_r>
 80076e8:	1e06      	subs	r6, r0, #0
 80076ea:	d1e0      	bne.n	80076ae <__ssputs_r+0x62>
 80076ec:	6921      	ldr	r1, [r4, #16]
 80076ee:	9802      	ldr	r0, [sp, #8]
 80076f0:	f7ff feb0 	bl	8007454 <_free_r>
 80076f4:	230c      	movs	r3, #12
 80076f6:	2001      	movs	r0, #1
 80076f8:	9a02      	ldr	r2, [sp, #8]
 80076fa:	4240      	negs	r0, r0
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	89a2      	ldrh	r2, [r4, #12]
 8007700:	3334      	adds	r3, #52	@ 0x34
 8007702:	4313      	orrs	r3, r2
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	e7e9      	b.n	80076dc <__ssputs_r+0x90>
 8007708:	fffffb7f 	.word	0xfffffb7f

0800770c <_svfiprintf_r>:
 800770c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770e:	b0a1      	sub	sp, #132	@ 0x84
 8007710:	9003      	str	r0, [sp, #12]
 8007712:	001d      	movs	r5, r3
 8007714:	898b      	ldrh	r3, [r1, #12]
 8007716:	000f      	movs	r7, r1
 8007718:	0016      	movs	r6, r2
 800771a:	061b      	lsls	r3, r3, #24
 800771c:	d511      	bpl.n	8007742 <_svfiprintf_r+0x36>
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10e      	bne.n	8007742 <_svfiprintf_r+0x36>
 8007724:	2140      	movs	r1, #64	@ 0x40
 8007726:	f7ff ff01 	bl	800752c <_malloc_r>
 800772a:	6038      	str	r0, [r7, #0]
 800772c:	6138      	str	r0, [r7, #16]
 800772e:	2800      	cmp	r0, #0
 8007730:	d105      	bne.n	800773e <_svfiprintf_r+0x32>
 8007732:	230c      	movs	r3, #12
 8007734:	9a03      	ldr	r2, [sp, #12]
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	2001      	movs	r0, #1
 800773a:	4240      	negs	r0, r0
 800773c:	e0cf      	b.n	80078de <_svfiprintf_r+0x1d2>
 800773e:	2340      	movs	r3, #64	@ 0x40
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	2300      	movs	r3, #0
 8007744:	ac08      	add	r4, sp, #32
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	3320      	adds	r3, #32
 800774a:	7663      	strb	r3, [r4, #25]
 800774c:	3310      	adds	r3, #16
 800774e:	76a3      	strb	r3, [r4, #26]
 8007750:	9507      	str	r5, [sp, #28]
 8007752:	0035      	movs	r5, r6
 8007754:	782b      	ldrb	r3, [r5, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <_svfiprintf_r+0x52>
 800775a:	2b25      	cmp	r3, #37	@ 0x25
 800775c:	d148      	bne.n	80077f0 <_svfiprintf_r+0xe4>
 800775e:	1bab      	subs	r3, r5, r6
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	42b5      	cmp	r5, r6
 8007764:	d00b      	beq.n	800777e <_svfiprintf_r+0x72>
 8007766:	0032      	movs	r2, r6
 8007768:	0039      	movs	r1, r7
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	f7ff ff6e 	bl	800764c <__ssputs_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d100      	bne.n	8007776 <_svfiprintf_r+0x6a>
 8007774:	e0ae      	b.n	80078d4 <_svfiprintf_r+0x1c8>
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	9a05      	ldr	r2, [sp, #20]
 800777a:	189b      	adds	r3, r3, r2
 800777c:	6163      	str	r3, [r4, #20]
 800777e:	782b      	ldrb	r3, [r5, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d100      	bne.n	8007786 <_svfiprintf_r+0x7a>
 8007784:	e0a6      	b.n	80078d4 <_svfiprintf_r+0x1c8>
 8007786:	2201      	movs	r2, #1
 8007788:	2300      	movs	r3, #0
 800778a:	4252      	negs	r2, r2
 800778c:	6062      	str	r2, [r4, #4]
 800778e:	a904      	add	r1, sp, #16
 8007790:	3254      	adds	r2, #84	@ 0x54
 8007792:	1852      	adds	r2, r2, r1
 8007794:	1c6e      	adds	r6, r5, #1
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	60e3      	str	r3, [r4, #12]
 800779a:	60a3      	str	r3, [r4, #8]
 800779c:	7013      	strb	r3, [r2, #0]
 800779e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80077a0:	4b54      	ldr	r3, [pc, #336]	@ (80078f4 <_svfiprintf_r+0x1e8>)
 80077a2:	2205      	movs	r2, #5
 80077a4:	0018      	movs	r0, r3
 80077a6:	7831      	ldrb	r1, [r6, #0]
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	f000 fa51 	bl	8007c50 <memchr>
 80077ae:	1c75      	adds	r5, r6, #1
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d11f      	bne.n	80077f4 <_svfiprintf_r+0xe8>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	06d3      	lsls	r3, r2, #27
 80077b8:	d504      	bpl.n	80077c4 <_svfiprintf_r+0xb8>
 80077ba:	2353      	movs	r3, #83	@ 0x53
 80077bc:	a904      	add	r1, sp, #16
 80077be:	185b      	adds	r3, r3, r1
 80077c0:	2120      	movs	r1, #32
 80077c2:	7019      	strb	r1, [r3, #0]
 80077c4:	0713      	lsls	r3, r2, #28
 80077c6:	d504      	bpl.n	80077d2 <_svfiprintf_r+0xc6>
 80077c8:	2353      	movs	r3, #83	@ 0x53
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	185b      	adds	r3, r3, r1
 80077ce:	212b      	movs	r1, #43	@ 0x2b
 80077d0:	7019      	strb	r1, [r3, #0]
 80077d2:	7833      	ldrb	r3, [r6, #0]
 80077d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077d6:	d016      	beq.n	8007806 <_svfiprintf_r+0xfa>
 80077d8:	0035      	movs	r5, r6
 80077da:	2100      	movs	r1, #0
 80077dc:	200a      	movs	r0, #10
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	782a      	ldrb	r2, [r5, #0]
 80077e2:	1c6e      	adds	r6, r5, #1
 80077e4:	3a30      	subs	r2, #48	@ 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d950      	bls.n	800788c <_svfiprintf_r+0x180>
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d111      	bne.n	8007812 <_svfiprintf_r+0x106>
 80077ee:	e017      	b.n	8007820 <_svfiprintf_r+0x114>
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7af      	b.n	8007754 <_svfiprintf_r+0x48>
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	1ac0      	subs	r0, r0, r3
 80077fa:	2301      	movs	r3, #1
 80077fc:	4083      	lsls	r3, r0
 80077fe:	4313      	orrs	r3, r2
 8007800:	002e      	movs	r6, r5
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	e7cc      	b.n	80077a0 <_svfiprintf_r+0x94>
 8007806:	9b07      	ldr	r3, [sp, #28]
 8007808:	1d19      	adds	r1, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9107      	str	r1, [sp, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	db01      	blt.n	8007816 <_svfiprintf_r+0x10a>
 8007812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007814:	e004      	b.n	8007820 <_svfiprintf_r+0x114>
 8007816:	425b      	negs	r3, r3
 8007818:	60e3      	str	r3, [r4, #12]
 800781a:	2302      	movs	r3, #2
 800781c:	4313      	orrs	r3, r2
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	782b      	ldrb	r3, [r5, #0]
 8007822:	2b2e      	cmp	r3, #46	@ 0x2e
 8007824:	d10c      	bne.n	8007840 <_svfiprintf_r+0x134>
 8007826:	786b      	ldrb	r3, [r5, #1]
 8007828:	2b2a      	cmp	r3, #42	@ 0x2a
 800782a:	d134      	bne.n	8007896 <_svfiprintf_r+0x18a>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	3502      	adds	r5, #2
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	9207      	str	r2, [sp, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da01      	bge.n	800783e <_svfiprintf_r+0x132>
 800783a:	2301      	movs	r3, #1
 800783c:	425b      	negs	r3, r3
 800783e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007840:	4e2d      	ldr	r6, [pc, #180]	@ (80078f8 <_svfiprintf_r+0x1ec>)
 8007842:	2203      	movs	r2, #3
 8007844:	0030      	movs	r0, r6
 8007846:	7829      	ldrb	r1, [r5, #0]
 8007848:	f000 fa02 	bl	8007c50 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d006      	beq.n	800785e <_svfiprintf_r+0x152>
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	1b80      	subs	r0, r0, r6
 8007854:	4083      	lsls	r3, r0
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	3501      	adds	r5, #1
 800785a:	4313      	orrs	r3, r2
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	7829      	ldrb	r1, [r5, #0]
 8007860:	2206      	movs	r2, #6
 8007862:	4826      	ldr	r0, [pc, #152]	@ (80078fc <_svfiprintf_r+0x1f0>)
 8007864:	1c6e      	adds	r6, r5, #1
 8007866:	7621      	strb	r1, [r4, #24]
 8007868:	f000 f9f2 	bl	8007c50 <memchr>
 800786c:	2800      	cmp	r0, #0
 800786e:	d038      	beq.n	80078e2 <_svfiprintf_r+0x1d6>
 8007870:	4b23      	ldr	r3, [pc, #140]	@ (8007900 <_svfiprintf_r+0x1f4>)
 8007872:	2b00      	cmp	r3, #0
 8007874:	d122      	bne.n	80078bc <_svfiprintf_r+0x1b0>
 8007876:	2207      	movs	r2, #7
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	3307      	adds	r3, #7
 800787c:	4393      	bics	r3, r2
 800787e:	3308      	adds	r3, #8
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	9a04      	ldr	r2, [sp, #16]
 8007886:	189b      	adds	r3, r3, r2
 8007888:	6163      	str	r3, [r4, #20]
 800788a:	e762      	b.n	8007752 <_svfiprintf_r+0x46>
 800788c:	4343      	muls	r3, r0
 800788e:	0035      	movs	r5, r6
 8007890:	2101      	movs	r1, #1
 8007892:	189b      	adds	r3, r3, r2
 8007894:	e7a4      	b.n	80077e0 <_svfiprintf_r+0xd4>
 8007896:	2300      	movs	r3, #0
 8007898:	200a      	movs	r0, #10
 800789a:	0019      	movs	r1, r3
 800789c:	3501      	adds	r5, #1
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	782a      	ldrb	r2, [r5, #0]
 80078a2:	1c6e      	adds	r6, r5, #1
 80078a4:	3a30      	subs	r2, #48	@ 0x30
 80078a6:	2a09      	cmp	r2, #9
 80078a8:	d903      	bls.n	80078b2 <_svfiprintf_r+0x1a6>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c8      	beq.n	8007840 <_svfiprintf_r+0x134>
 80078ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80078b0:	e7c6      	b.n	8007840 <_svfiprintf_r+0x134>
 80078b2:	4341      	muls	r1, r0
 80078b4:	0035      	movs	r5, r6
 80078b6:	2301      	movs	r3, #1
 80078b8:	1889      	adds	r1, r1, r2
 80078ba:	e7f1      	b.n	80078a0 <_svfiprintf_r+0x194>
 80078bc:	aa07      	add	r2, sp, #28
 80078be:	9200      	str	r2, [sp, #0]
 80078c0:	0021      	movs	r1, r4
 80078c2:	003a      	movs	r2, r7
 80078c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <_svfiprintf_r+0x1f8>)
 80078c6:	9803      	ldr	r0, [sp, #12]
 80078c8:	e000      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078ca:	bf00      	nop
 80078cc:	9004      	str	r0, [sp, #16]
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	d1d6      	bne.n	8007882 <_svfiprintf_r+0x176>
 80078d4:	89bb      	ldrh	r3, [r7, #12]
 80078d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80078d8:	065b      	lsls	r3, r3, #25
 80078da:	d500      	bpl.n	80078de <_svfiprintf_r+0x1d2>
 80078dc:	e72c      	b.n	8007738 <_svfiprintf_r+0x2c>
 80078de:	b021      	add	sp, #132	@ 0x84
 80078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e2:	aa07      	add	r2, sp, #28
 80078e4:	9200      	str	r2, [sp, #0]
 80078e6:	0021      	movs	r1, r4
 80078e8:	003a      	movs	r2, r7
 80078ea:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <_svfiprintf_r+0x1f8>)
 80078ec:	9803      	ldr	r0, [sp, #12]
 80078ee:	f000 f87b 	bl	80079e8 <_printf_i>
 80078f2:	e7eb      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078f4:	0800824c 	.word	0x0800824c
 80078f8:	08008252 	.word	0x08008252
 80078fc:	08008256 	.word	0x08008256
 8007900:	00000000 	.word	0x00000000
 8007904:	0800764d 	.word	0x0800764d

08007908 <_printf_common>:
 8007908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800790a:	0016      	movs	r6, r2
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	688a      	ldr	r2, [r1, #8]
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	000c      	movs	r4, r1
 8007914:	9000      	str	r0, [sp, #0]
 8007916:	4293      	cmp	r3, r2
 8007918:	da00      	bge.n	800791c <_printf_common+0x14>
 800791a:	0013      	movs	r3, r2
 800791c:	0022      	movs	r2, r4
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	3243      	adds	r2, #67	@ 0x43
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	2a00      	cmp	r2, #0
 8007926:	d001      	beq.n	800792c <_printf_common+0x24>
 8007928:	3301      	adds	r3, #1
 800792a:	6033      	str	r3, [r6, #0]
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	069b      	lsls	r3, r3, #26
 8007930:	d502      	bpl.n	8007938 <_printf_common+0x30>
 8007932:	6833      	ldr	r3, [r6, #0]
 8007934:	3302      	adds	r3, #2
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	2306      	movs	r3, #6
 800793c:	0015      	movs	r5, r2
 800793e:	401d      	ands	r5, r3
 8007940:	421a      	tst	r2, r3
 8007942:	d027      	beq.n	8007994 <_printf_common+0x8c>
 8007944:	0023      	movs	r3, r4
 8007946:	3343      	adds	r3, #67	@ 0x43
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	1e5a      	subs	r2, r3, #1
 800794c:	4193      	sbcs	r3, r2
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	0692      	lsls	r2, r2, #26
 8007952:	d430      	bmi.n	80079b6 <_printf_common+0xae>
 8007954:	0022      	movs	r2, r4
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	9800      	ldr	r0, [sp, #0]
 800795a:	9d08      	ldr	r5, [sp, #32]
 800795c:	3243      	adds	r2, #67	@ 0x43
 800795e:	47a8      	blx	r5
 8007960:	3001      	adds	r0, #1
 8007962:	d025      	beq.n	80079b0 <_printf_common+0xa8>
 8007964:	2206      	movs	r2, #6
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	2500      	movs	r5, #0
 800796a:	4013      	ands	r3, r2
 800796c:	2b04      	cmp	r3, #4
 800796e:	d105      	bne.n	800797c <_printf_common+0x74>
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	68e5      	ldr	r5, [r4, #12]
 8007974:	1aed      	subs	r5, r5, r3
 8007976:	43eb      	mvns	r3, r5
 8007978:	17db      	asrs	r3, r3, #31
 800797a:	401d      	ands	r5, r3
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	4293      	cmp	r3, r2
 8007982:	dd01      	ble.n	8007988 <_printf_common+0x80>
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	18ed      	adds	r5, r5, r3
 8007988:	2600      	movs	r6, #0
 800798a:	42b5      	cmp	r5, r6
 800798c:	d120      	bne.n	80079d0 <_printf_common+0xc8>
 800798e:	2000      	movs	r0, #0
 8007990:	e010      	b.n	80079b4 <_printf_common+0xac>
 8007992:	3501      	adds	r5, #1
 8007994:	68e3      	ldr	r3, [r4, #12]
 8007996:	6832      	ldr	r2, [r6, #0]
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	42ab      	cmp	r3, r5
 800799c:	ddd2      	ble.n	8007944 <_printf_common+0x3c>
 800799e:	0022      	movs	r2, r4
 80079a0:	2301      	movs	r3, #1
 80079a2:	9901      	ldr	r1, [sp, #4]
 80079a4:	9800      	ldr	r0, [sp, #0]
 80079a6:	9f08      	ldr	r7, [sp, #32]
 80079a8:	3219      	adds	r2, #25
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1f0      	bne.n	8007992 <_printf_common+0x8a>
 80079b0:	2001      	movs	r0, #1
 80079b2:	4240      	negs	r0, r0
 80079b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b6:	2030      	movs	r0, #48	@ 0x30
 80079b8:	18e1      	adds	r1, r4, r3
 80079ba:	3143      	adds	r1, #67	@ 0x43
 80079bc:	7008      	strb	r0, [r1, #0]
 80079be:	0021      	movs	r1, r4
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	3145      	adds	r1, #69	@ 0x45
 80079c4:	7809      	ldrb	r1, [r1, #0]
 80079c6:	18a2      	adds	r2, r4, r2
 80079c8:	3243      	adds	r2, #67	@ 0x43
 80079ca:	3302      	adds	r3, #2
 80079cc:	7011      	strb	r1, [r2, #0]
 80079ce:	e7c1      	b.n	8007954 <_printf_common+0x4c>
 80079d0:	0022      	movs	r2, r4
 80079d2:	2301      	movs	r3, #1
 80079d4:	9901      	ldr	r1, [sp, #4]
 80079d6:	9800      	ldr	r0, [sp, #0]
 80079d8:	9f08      	ldr	r7, [sp, #32]
 80079da:	321a      	adds	r2, #26
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa8>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d1      	b.n	800798a <_printf_common+0x82>
	...

080079e8 <_printf_i>:
 80079e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ea:	b08b      	sub	sp, #44	@ 0x2c
 80079ec:	9206      	str	r2, [sp, #24]
 80079ee:	000a      	movs	r2, r1
 80079f0:	3243      	adds	r2, #67	@ 0x43
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	9005      	str	r0, [sp, #20]
 80079f6:	9203      	str	r2, [sp, #12]
 80079f8:	7e0a      	ldrb	r2, [r1, #24]
 80079fa:	000c      	movs	r4, r1
 80079fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079fe:	2a78      	cmp	r2, #120	@ 0x78
 8007a00:	d809      	bhi.n	8007a16 <_printf_i+0x2e>
 8007a02:	2a62      	cmp	r2, #98	@ 0x62
 8007a04:	d80b      	bhi.n	8007a1e <_printf_i+0x36>
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d100      	bne.n	8007a0c <_printf_i+0x24>
 8007a0a:	e0bc      	b.n	8007b86 <_printf_i+0x19e>
 8007a0c:	497b      	ldr	r1, [pc, #492]	@ (8007bfc <_printf_i+0x214>)
 8007a0e:	9104      	str	r1, [sp, #16]
 8007a10:	2a58      	cmp	r2, #88	@ 0x58
 8007a12:	d100      	bne.n	8007a16 <_printf_i+0x2e>
 8007a14:	e090      	b.n	8007b38 <_printf_i+0x150>
 8007a16:	0025      	movs	r5, r4
 8007a18:	3542      	adds	r5, #66	@ 0x42
 8007a1a:	702a      	strb	r2, [r5, #0]
 8007a1c:	e022      	b.n	8007a64 <_printf_i+0x7c>
 8007a1e:	0010      	movs	r0, r2
 8007a20:	3863      	subs	r0, #99	@ 0x63
 8007a22:	2815      	cmp	r0, #21
 8007a24:	d8f7      	bhi.n	8007a16 <_printf_i+0x2e>
 8007a26:	f7f8 fb73 	bl	8000110 <__gnu_thumb1_case_shi>
 8007a2a:	0016      	.short	0x0016
 8007a2c:	fff6001f 	.word	0xfff6001f
 8007a30:	fff6fff6 	.word	0xfff6fff6
 8007a34:	001ffff6 	.word	0x001ffff6
 8007a38:	fff6fff6 	.word	0xfff6fff6
 8007a3c:	fff6fff6 	.word	0xfff6fff6
 8007a40:	003600a1 	.word	0x003600a1
 8007a44:	fff60080 	.word	0xfff60080
 8007a48:	00b2fff6 	.word	0x00b2fff6
 8007a4c:	0036fff6 	.word	0x0036fff6
 8007a50:	fff6fff6 	.word	0xfff6fff6
 8007a54:	0084      	.short	0x0084
 8007a56:	0025      	movs	r5, r4
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	3542      	adds	r5, #66	@ 0x42
 8007a5c:	1d11      	adds	r1, r2, #4
 8007a5e:	6019      	str	r1, [r3, #0]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	702b      	strb	r3, [r5, #0]
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0a0      	b.n	8007baa <_printf_i+0x1c2>
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	6809      	ldr	r1, [r1, #0]
 8007a6c:	1d02      	adds	r2, r0, #4
 8007a6e:	060d      	lsls	r5, r1, #24
 8007a70:	d50b      	bpl.n	8007a8a <_printf_i+0xa2>
 8007a72:	6806      	ldr	r6, [r0, #0]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	da03      	bge.n	8007a82 <_printf_i+0x9a>
 8007a7a:	232d      	movs	r3, #45	@ 0x2d
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	4276      	negs	r6, r6
 8007a80:	7013      	strb	r3, [r2, #0]
 8007a82:	4b5e      	ldr	r3, [pc, #376]	@ (8007bfc <_printf_i+0x214>)
 8007a84:	270a      	movs	r7, #10
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	e018      	b.n	8007abc <_printf_i+0xd4>
 8007a8a:	6806      	ldr	r6, [r0, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	0649      	lsls	r1, r1, #25
 8007a90:	d5f1      	bpl.n	8007a76 <_printf_i+0x8e>
 8007a92:	b236      	sxth	r6, r6
 8007a94:	e7ef      	b.n	8007a76 <_printf_i+0x8e>
 8007a96:	6808      	ldr	r0, [r1, #0]
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	c940      	ldmia	r1!, {r6}
 8007a9c:	0605      	lsls	r5, r0, #24
 8007a9e:	d402      	bmi.n	8007aa6 <_printf_i+0xbe>
 8007aa0:	0640      	lsls	r0, r0, #25
 8007aa2:	d500      	bpl.n	8007aa6 <_printf_i+0xbe>
 8007aa4:	b2b6      	uxth	r6, r6
 8007aa6:	6019      	str	r1, [r3, #0]
 8007aa8:	4b54      	ldr	r3, [pc, #336]	@ (8007bfc <_printf_i+0x214>)
 8007aaa:	270a      	movs	r7, #10
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ab0:	d100      	bne.n	8007ab4 <_printf_i+0xcc>
 8007ab2:	3f02      	subs	r7, #2
 8007ab4:	0023      	movs	r3, r4
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	3343      	adds	r3, #67	@ 0x43
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db03      	blt.n	8007acc <_printf_i+0xe4>
 8007ac4:	2104      	movs	r1, #4
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	438a      	bics	r2, r1
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d102      	bne.n	8007ad6 <_printf_i+0xee>
 8007ad0:	9d03      	ldr	r5, [sp, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <_printf_i+0x108>
 8007ad6:	9d03      	ldr	r5, [sp, #12]
 8007ad8:	0030      	movs	r0, r6
 8007ada:	0039      	movs	r1, r7
 8007adc:	f7f8 fba8 	bl	8000230 <__aeabi_uidivmod>
 8007ae0:	9b04      	ldr	r3, [sp, #16]
 8007ae2:	3d01      	subs	r5, #1
 8007ae4:	5c5b      	ldrb	r3, [r3, r1]
 8007ae6:	702b      	strb	r3, [r5, #0]
 8007ae8:	0033      	movs	r3, r6
 8007aea:	0006      	movs	r6, r0
 8007aec:	429f      	cmp	r7, r3
 8007aee:	d9f3      	bls.n	8007ad8 <_printf_i+0xf0>
 8007af0:	2f08      	cmp	r7, #8
 8007af2:	d109      	bne.n	8007b08 <_printf_i+0x120>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	07db      	lsls	r3, r3, #31
 8007af8:	d506      	bpl.n	8007b08 <_printf_i+0x120>
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	dc02      	bgt.n	8007b08 <_printf_i+0x120>
 8007b02:	2330      	movs	r3, #48	@ 0x30
 8007b04:	3d01      	subs	r5, #1
 8007b06:	702b      	strb	r3, [r5, #0]
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	1b5b      	subs	r3, r3, r5
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	0021      	movs	r1, r4
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	9805      	ldr	r0, [sp, #20]
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	aa09      	add	r2, sp, #36	@ 0x24
 8007b1a:	f7ff fef5 	bl	8007908 <_printf_common>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d148      	bne.n	8007bb4 <_printf_i+0x1cc>
 8007b22:	2001      	movs	r0, #1
 8007b24:	4240      	negs	r0, r0
 8007b26:	b00b      	add	sp, #44	@ 0x2c
 8007b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	6809      	ldr	r1, [r1, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	6022      	str	r2, [r4, #0]
 8007b32:	2278      	movs	r2, #120	@ 0x78
 8007b34:	4932      	ldr	r1, [pc, #200]	@ (8007c00 <_printf_i+0x218>)
 8007b36:	9104      	str	r1, [sp, #16]
 8007b38:	0021      	movs	r1, r4
 8007b3a:	3145      	adds	r1, #69	@ 0x45
 8007b3c:	700a      	strb	r2, [r1, #0]
 8007b3e:	6819      	ldr	r1, [r3, #0]
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	c940      	ldmia	r1!, {r6}
 8007b44:	0610      	lsls	r0, r2, #24
 8007b46:	d402      	bmi.n	8007b4e <_printf_i+0x166>
 8007b48:	0650      	lsls	r0, r2, #25
 8007b4a:	d500      	bpl.n	8007b4e <_printf_i+0x166>
 8007b4c:	b2b6      	uxth	r6, r6
 8007b4e:	6019      	str	r1, [r3, #0]
 8007b50:	07d3      	lsls	r3, r2, #31
 8007b52:	d502      	bpl.n	8007b5a <_printf_i+0x172>
 8007b54:	2320      	movs	r3, #32
 8007b56:	4313      	orrs	r3, r2
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	d001      	beq.n	8007b62 <_printf_i+0x17a>
 8007b5e:	2710      	movs	r7, #16
 8007b60:	e7a8      	b.n	8007ab4 <_printf_i+0xcc>
 8007b62:	2220      	movs	r2, #32
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	4393      	bics	r3, r2
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	e7f8      	b.n	8007b5e <_printf_i+0x176>
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	680d      	ldr	r5, [r1, #0]
 8007b70:	1d10      	adds	r0, r2, #4
 8007b72:	6949      	ldr	r1, [r1, #20]
 8007b74:	6018      	str	r0, [r3, #0]
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	062e      	lsls	r6, r5, #24
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0x198>
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <_printf_i+0x19e>
 8007b80:	066d      	lsls	r5, r5, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0x194>
 8007b84:	8019      	strh	r1, [r3, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9d03      	ldr	r5, [sp, #12]
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	e7bf      	b.n	8007b0e <_printf_i+0x126>
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	1d11      	adds	r1, r2, #4
 8007b92:	6019      	str	r1, [r3, #0]
 8007b94:	6815      	ldr	r5, [r2, #0]
 8007b96:	2100      	movs	r1, #0
 8007b98:	0028      	movs	r0, r5
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	f000 f858 	bl	8007c50 <memchr>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d001      	beq.n	8007ba8 <_printf_i+0x1c0>
 8007ba4:	1b40      	subs	r0, r0, r5
 8007ba6:	6060      	str	r0, [r4, #4]
 8007ba8:	6863      	ldr	r3, [r4, #4]
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	2300      	movs	r3, #0
 8007bae:	9a03      	ldr	r2, [sp, #12]
 8007bb0:	7013      	strb	r3, [r2, #0]
 8007bb2:	e7ac      	b.n	8007b0e <_printf_i+0x126>
 8007bb4:	002a      	movs	r2, r5
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	9906      	ldr	r1, [sp, #24]
 8007bba:	9805      	ldr	r0, [sp, #20]
 8007bbc:	9d07      	ldr	r5, [sp, #28]
 8007bbe:	47a8      	blx	r5
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d0ae      	beq.n	8007b22 <_printf_i+0x13a>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	079b      	lsls	r3, r3, #30
 8007bc8:	d415      	bmi.n	8007bf6 <_printf_i+0x20e>
 8007bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bcc:	68e0      	ldr	r0, [r4, #12]
 8007bce:	4298      	cmp	r0, r3
 8007bd0:	daa9      	bge.n	8007b26 <_printf_i+0x13e>
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	e7a7      	b.n	8007b26 <_printf_i+0x13e>
 8007bd6:	0022      	movs	r2, r4
 8007bd8:	2301      	movs	r3, #1
 8007bda:	9906      	ldr	r1, [sp, #24]
 8007bdc:	9805      	ldr	r0, [sp, #20]
 8007bde:	9e07      	ldr	r6, [sp, #28]
 8007be0:	3219      	adds	r2, #25
 8007be2:	47b0      	blx	r6
 8007be4:	3001      	adds	r0, #1
 8007be6:	d09c      	beq.n	8007b22 <_printf_i+0x13a>
 8007be8:	3501      	adds	r5, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dcf0      	bgt.n	8007bd6 <_printf_i+0x1ee>
 8007bf4:	e7e9      	b.n	8007bca <_printf_i+0x1e2>
 8007bf6:	2500      	movs	r5, #0
 8007bf8:	e7f7      	b.n	8007bea <_printf_i+0x202>
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	0800825d 	.word	0x0800825d
 8007c00:	0800826e 	.word	0x0800826e

08007c04 <memmove>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	4288      	cmp	r0, r1
 8007c08:	d806      	bhi.n	8007c18 <memmove+0x14>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d008      	beq.n	8007c22 <memmove+0x1e>
 8007c10:	5ccc      	ldrb	r4, [r1, r3]
 8007c12:	54c4      	strb	r4, [r0, r3]
 8007c14:	3301      	adds	r3, #1
 8007c16:	e7f9      	b.n	8007c0c <memmove+0x8>
 8007c18:	188b      	adds	r3, r1, r2
 8007c1a:	4298      	cmp	r0, r3
 8007c1c:	d2f5      	bcs.n	8007c0a <memmove+0x6>
 8007c1e:	3a01      	subs	r2, #1
 8007c20:	d200      	bcs.n	8007c24 <memmove+0x20>
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	5c8b      	ldrb	r3, [r1, r2]
 8007c26:	5483      	strb	r3, [r0, r2]
 8007c28:	e7f9      	b.n	8007c1e <memmove+0x1a>
	...

08007c2c <_sbrk_r>:
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	4d06      	ldr	r5, [pc, #24]	@ (8007c4c <_sbrk_r+0x20>)
 8007c32:	0004      	movs	r4, r0
 8007c34:	0008      	movs	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fb fa4c 	bl	80030d4 <_sbrk>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d103      	bne.n	8007c48 <_sbrk_r+0x1c>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d000      	beq.n	8007c48 <_sbrk_r+0x1c>
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	bd70      	pop	{r4, r5, r6, pc}
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	200004fc 	.word	0x200004fc

08007c50 <memchr>:
 8007c50:	b2c9      	uxtb	r1, r1
 8007c52:	1882      	adds	r2, r0, r2
 8007c54:	4290      	cmp	r0, r2
 8007c56:	d101      	bne.n	8007c5c <memchr+0xc>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	4770      	bx	lr
 8007c5c:	7803      	ldrb	r3, [r0, #0]
 8007c5e:	428b      	cmp	r3, r1
 8007c60:	d0fb      	beq.n	8007c5a <memchr+0xa>
 8007c62:	3001      	adds	r0, #1
 8007c64:	e7f6      	b.n	8007c54 <memchr+0x4>

08007c66 <memcpy>:
 8007c66:	2300      	movs	r3, #0
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d100      	bne.n	8007c70 <memcpy+0xa>
 8007c6e:	bd10      	pop	{r4, pc}
 8007c70:	5ccc      	ldrb	r4, [r1, r3]
 8007c72:	54c4      	strb	r4, [r0, r3]
 8007c74:	3301      	adds	r3, #1
 8007c76:	e7f8      	b.n	8007c6a <memcpy+0x4>

08007c78 <_realloc_r>:
 8007c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7a:	0006      	movs	r6, r0
 8007c7c:	000c      	movs	r4, r1
 8007c7e:	0015      	movs	r5, r2
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d105      	bne.n	8007c90 <_realloc_r+0x18>
 8007c84:	0011      	movs	r1, r2
 8007c86:	f7ff fc51 	bl	800752c <_malloc_r>
 8007c8a:	0004      	movs	r4, r0
 8007c8c:	0020      	movs	r0, r4
 8007c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d103      	bne.n	8007c9c <_realloc_r+0x24>
 8007c94:	f7ff fbde 	bl	8007454 <_free_r>
 8007c98:	2400      	movs	r4, #0
 8007c9a:	e7f7      	b.n	8007c8c <_realloc_r+0x14>
 8007c9c:	f000 f81b 	bl	8007cd6 <_malloc_usable_size_r>
 8007ca0:	0007      	movs	r7, r0
 8007ca2:	4285      	cmp	r5, r0
 8007ca4:	d802      	bhi.n	8007cac <_realloc_r+0x34>
 8007ca6:	0843      	lsrs	r3, r0, #1
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	d3ef      	bcc.n	8007c8c <_realloc_r+0x14>
 8007cac:	0029      	movs	r1, r5
 8007cae:	0030      	movs	r0, r6
 8007cb0:	f7ff fc3c 	bl	800752c <_malloc_r>
 8007cb4:	9001      	str	r0, [sp, #4]
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d0ee      	beq.n	8007c98 <_realloc_r+0x20>
 8007cba:	002a      	movs	r2, r5
 8007cbc:	42bd      	cmp	r5, r7
 8007cbe:	d900      	bls.n	8007cc2 <_realloc_r+0x4a>
 8007cc0:	003a      	movs	r2, r7
 8007cc2:	0021      	movs	r1, r4
 8007cc4:	9801      	ldr	r0, [sp, #4]
 8007cc6:	f7ff ffce 	bl	8007c66 <memcpy>
 8007cca:	0021      	movs	r1, r4
 8007ccc:	0030      	movs	r0, r6
 8007cce:	f7ff fbc1 	bl	8007454 <_free_r>
 8007cd2:	9c01      	ldr	r4, [sp, #4]
 8007cd4:	e7da      	b.n	8007c8c <_realloc_r+0x14>

08007cd6 <_malloc_usable_size_r>:
 8007cd6:	1f0b      	subs	r3, r1, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	1f18      	subs	r0, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da01      	bge.n	8007ce4 <_malloc_usable_size_r+0xe>
 8007ce0:	580b      	ldr	r3, [r1, r0]
 8007ce2:	18c0      	adds	r0, r0, r3
 8007ce4:	4770      	bx	lr
	...

08007ce8 <log>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	0004      	movs	r4, r0
 8007cec:	000d      	movs	r5, r1
 8007cee:	f000 f837 	bl	8007d60 <__ieee754_log>
 8007cf2:	0022      	movs	r2, r4
 8007cf4:	0006      	movs	r6, r0
 8007cf6:	000f      	movs	r7, r1
 8007cf8:	002b      	movs	r3, r5
 8007cfa:	0020      	movs	r0, r4
 8007cfc:	0029      	movs	r1, r5
 8007cfe:	f7fa f9ef 	bl	80020e0 <__aeabi_dcmpun>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d115      	bne.n	8007d32 <log+0x4a>
 8007d06:	2200      	movs	r2, #0
 8007d08:	2300      	movs	r3, #0
 8007d0a:	0020      	movs	r0, r4
 8007d0c:	0029      	movs	r1, r5
 8007d0e:	f7f8 fba9 	bl	8000464 <__aeabi_dcmpgt>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d10d      	bne.n	8007d32 <log+0x4a>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2300      	movs	r3, #0
 8007d1a:	0020      	movs	r0, r4
 8007d1c:	0029      	movs	r1, r5
 8007d1e:	f7f8 fb87 	bl	8000430 <__aeabi_dcmpeq>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d008      	beq.n	8007d38 <log+0x50>
 8007d26:	f7ff fb69 	bl	80073fc <__errno>
 8007d2a:	2322      	movs	r3, #34	@ 0x22
 8007d2c:	2600      	movs	r6, #0
 8007d2e:	4f07      	ldr	r7, [pc, #28]	@ (8007d4c <log+0x64>)
 8007d30:	6003      	str	r3, [r0, #0]
 8007d32:	0030      	movs	r0, r6
 8007d34:	0039      	movs	r1, r7
 8007d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d38:	f7ff fb60 	bl	80073fc <__errno>
 8007d3c:	2321      	movs	r3, #33	@ 0x21
 8007d3e:	6003      	str	r3, [r0, #0]
 8007d40:	4803      	ldr	r0, [pc, #12]	@ (8007d50 <log+0x68>)
 8007d42:	f000 f807 	bl	8007d54 <nan>
 8007d46:	0006      	movs	r6, r0
 8007d48:	000f      	movs	r7, r1
 8007d4a:	e7f2      	b.n	8007d32 <log+0x4a>
 8007d4c:	fff00000 	.word	0xfff00000
 8007d50:	08008251 	.word	0x08008251

08007d54 <nan>:
 8007d54:	2000      	movs	r0, #0
 8007d56:	4901      	ldr	r1, [pc, #4]	@ (8007d5c <nan+0x8>)
 8007d58:	4770      	bx	lr
 8007d5a:	46c0      	nop			@ (mov r8, r8)
 8007d5c:	7ff80000 	.word	0x7ff80000

08007d60 <__ieee754_log>:
 8007d60:	2380      	movs	r3, #128	@ 0x80
 8007d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d64:	035b      	lsls	r3, r3, #13
 8007d66:	000e      	movs	r6, r1
 8007d68:	b08d      	sub	sp, #52	@ 0x34
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	da23      	bge.n	8007db6 <__ieee754_log+0x56>
 8007d6e:	004b      	lsls	r3, r1, #1
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	4303      	orrs	r3, r0
 8007d74:	d107      	bne.n	8007d86 <__ieee754_log+0x26>
 8007d76:	2200      	movs	r2, #0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	49b4      	ldr	r1, [pc, #720]	@ (8008050 <__ieee754_log+0x2f0>)
 8007d7e:	f7f8 ff07 	bl	8000b90 <__aeabi_ddiv>
 8007d82:	b00d      	add	sp, #52	@ 0x34
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	2900      	cmp	r1, #0
 8007d88:	da06      	bge.n	8007d98 <__ieee754_log+0x38>
 8007d8a:	0002      	movs	r2, r0
 8007d8c:	000b      	movs	r3, r1
 8007d8e:	f7f9 fe0b 	bl	80019a8 <__aeabi_dsub>
 8007d92:	2200      	movs	r2, #0
 8007d94:	2300      	movs	r3, #0
 8007d96:	e7f2      	b.n	8007d7e <__ieee754_log+0x1e>
 8007d98:	4bae      	ldr	r3, [pc, #696]	@ (8008054 <__ieee754_log+0x2f4>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f9 fb3c 	bl	8001418 <__aeabi_dmul>
 8007da0:	2336      	movs	r3, #54	@ 0x36
 8007da2:	000e      	movs	r6, r1
 8007da4:	425b      	negs	r3, r3
 8007da6:	4aac      	ldr	r2, [pc, #688]	@ (8008058 <__ieee754_log+0x2f8>)
 8007da8:	4296      	cmp	r6, r2
 8007daa:	dd06      	ble.n	8007dba <__ieee754_log+0x5a>
 8007dac:	0002      	movs	r2, r0
 8007dae:	000b      	movs	r3, r1
 8007db0:	f7f8 fb8a 	bl	80004c8 <__aeabi_dadd>
 8007db4:	e7e5      	b.n	8007d82 <__ieee754_log+0x22>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e7f5      	b.n	8007da6 <__ieee754_log+0x46>
 8007dba:	4ca8      	ldr	r4, [pc, #672]	@ (800805c <__ieee754_log+0x2fc>)
 8007dbc:	1532      	asrs	r2, r6, #20
 8007dbe:	1912      	adds	r2, r2, r4
 8007dc0:	0336      	lsls	r6, r6, #12
 8007dc2:	4ca7      	ldr	r4, [pc, #668]	@ (8008060 <__ieee754_log+0x300>)
 8007dc4:	18d2      	adds	r2, r2, r3
 8007dc6:	0b33      	lsrs	r3, r6, #12
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	191b      	adds	r3, r3, r4
 8007dcc:	2480      	movs	r4, #128	@ 0x80
 8007dce:	0364      	lsls	r4, r4, #13
 8007dd0:	4023      	ands	r3, r4
 8007dd2:	4ca4      	ldr	r4, [pc, #656]	@ (8008064 <__ieee754_log+0x304>)
 8007dd4:	9d02      	ldr	r5, [sp, #8]
 8007dd6:	405c      	eors	r4, r3
 8007dd8:	151b      	asrs	r3, r3, #20
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	4325      	orrs	r5, r4
 8007dde:	2200      	movs	r2, #0
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	0029      	movs	r1, r5
 8007de4:	4b9f      	ldr	r3, [pc, #636]	@ (8008064 <__ieee754_log+0x304>)
 8007de6:	f7f9 fddf 	bl	80019a8 <__aeabi_dsub>
 8007dea:	9b02      	ldr	r3, [sp, #8]
 8007dec:	0006      	movs	r6, r0
 8007dee:	3302      	adds	r3, #2
 8007df0:	031b      	lsls	r3, r3, #12
 8007df2:	000f      	movs	r7, r1
 8007df4:	2200      	movs	r2, #0
 8007df6:	0b1b      	lsrs	r3, r3, #12
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	dc64      	bgt.n	8007ec6 <__ieee754_log+0x166>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f7f8 fb17 	bl	8000430 <__aeabi_dcmpeq>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d019      	beq.n	8007e3a <__ieee754_log+0xda>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d100      	bne.n	8007e0e <__ieee754_log+0xae>
 8007e0c:	e11c      	b.n	8008048 <__ieee754_log+0x2e8>
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7fa f9c4 	bl	800219c <__aeabi_i2d>
 8007e14:	4a94      	ldr	r2, [pc, #592]	@ (8008068 <__ieee754_log+0x308>)
 8007e16:	4b95      	ldr	r3, [pc, #596]	@ (800806c <__ieee754_log+0x30c>)
 8007e18:	0004      	movs	r4, r0
 8007e1a:	000d      	movs	r5, r1
 8007e1c:	f7f9 fafc 	bl	8001418 <__aeabi_dmul>
 8007e20:	4a93      	ldr	r2, [pc, #588]	@ (8008070 <__ieee754_log+0x310>)
 8007e22:	0006      	movs	r6, r0
 8007e24:	000f      	movs	r7, r1
 8007e26:	4b93      	ldr	r3, [pc, #588]	@ (8008074 <__ieee754_log+0x314>)
 8007e28:	0020      	movs	r0, r4
 8007e2a:	0029      	movs	r1, r5
 8007e2c:	f7f9 faf4 	bl	8001418 <__aeabi_dmul>
 8007e30:	0002      	movs	r2, r0
 8007e32:	000b      	movs	r3, r1
 8007e34:	0030      	movs	r0, r6
 8007e36:	0039      	movs	r1, r7
 8007e38:	e7ba      	b.n	8007db0 <__ieee754_log+0x50>
 8007e3a:	4a8f      	ldr	r2, [pc, #572]	@ (8008078 <__ieee754_log+0x318>)
 8007e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800807c <__ieee754_log+0x31c>)
 8007e3e:	0030      	movs	r0, r6
 8007e40:	0039      	movs	r1, r7
 8007e42:	f7f9 fae9 	bl	8001418 <__aeabi_dmul>
 8007e46:	0002      	movs	r2, r0
 8007e48:	000b      	movs	r3, r1
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	498c      	ldr	r1, [pc, #560]	@ (8008080 <__ieee754_log+0x320>)
 8007e4e:	f7f9 fdab 	bl	80019a8 <__aeabi_dsub>
 8007e52:	0032      	movs	r2, r6
 8007e54:	0004      	movs	r4, r0
 8007e56:	000d      	movs	r5, r1
 8007e58:	003b      	movs	r3, r7
 8007e5a:	0030      	movs	r0, r6
 8007e5c:	0039      	movs	r1, r7
 8007e5e:	f7f9 fadb 	bl	8001418 <__aeabi_dmul>
 8007e62:	000b      	movs	r3, r1
 8007e64:	0002      	movs	r2, r0
 8007e66:	0029      	movs	r1, r5
 8007e68:	0020      	movs	r0, r4
 8007e6a:	f7f9 fad5 	bl	8001418 <__aeabi_dmul>
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	9002      	str	r0, [sp, #8]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <__ieee754_log+0x126>
 8007e78:	0002      	movs	r2, r0
 8007e7a:	000b      	movs	r3, r1
 8007e7c:	0030      	movs	r0, r6
 8007e7e:	0039      	movs	r1, r7
 8007e80:	f7f9 fd92 	bl	80019a8 <__aeabi_dsub>
 8007e84:	e77d      	b.n	8007d82 <__ieee754_log+0x22>
 8007e86:	9800      	ldr	r0, [sp, #0]
 8007e88:	f7fa f988 	bl	800219c <__aeabi_i2d>
 8007e8c:	4a76      	ldr	r2, [pc, #472]	@ (8008068 <__ieee754_log+0x308>)
 8007e8e:	4b77      	ldr	r3, [pc, #476]	@ (800806c <__ieee754_log+0x30c>)
 8007e90:	0004      	movs	r4, r0
 8007e92:	000d      	movs	r5, r1
 8007e94:	f7f9 fac0 	bl	8001418 <__aeabi_dmul>
 8007e98:	4a75      	ldr	r2, [pc, #468]	@ (8008070 <__ieee754_log+0x310>)
 8007e9a:	9000      	str	r0, [sp, #0]
 8007e9c:	9101      	str	r1, [sp, #4]
 8007e9e:	4b75      	ldr	r3, [pc, #468]	@ (8008074 <__ieee754_log+0x314>)
 8007ea0:	0020      	movs	r0, r4
 8007ea2:	0029      	movs	r1, r5
 8007ea4:	f7f9 fab8 	bl	8001418 <__aeabi_dmul>
 8007ea8:	0002      	movs	r2, r0
 8007eaa:	000b      	movs	r3, r1
 8007eac:	9802      	ldr	r0, [sp, #8]
 8007eae:	9903      	ldr	r1, [sp, #12]
 8007eb0:	f7f9 fd7a 	bl	80019a8 <__aeabi_dsub>
 8007eb4:	0032      	movs	r2, r6
 8007eb6:	003b      	movs	r3, r7
 8007eb8:	f7f9 fd76 	bl	80019a8 <__aeabi_dsub>
 8007ebc:	0002      	movs	r2, r0
 8007ebe:	000b      	movs	r3, r1
 8007ec0:	9800      	ldr	r0, [sp, #0]
 8007ec2:	9901      	ldr	r1, [sp, #4]
 8007ec4:	e7dc      	b.n	8007e80 <__ieee754_log+0x120>
 8007ec6:	2380      	movs	r3, #128	@ 0x80
 8007ec8:	05db      	lsls	r3, r3, #23
 8007eca:	f7f8 fafd 	bl	80004c8 <__aeabi_dadd>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	000b      	movs	r3, r1
 8007ed2:	0030      	movs	r0, r6
 8007ed4:	0039      	movs	r1, r7
 8007ed6:	f7f8 fe5b 	bl	8000b90 <__aeabi_ddiv>
 8007eda:	9004      	str	r0, [sp, #16]
 8007edc:	9105      	str	r1, [sp, #20]
 8007ede:	9800      	ldr	r0, [sp, #0]
 8007ee0:	f7fa f95c 	bl	800219c <__aeabi_i2d>
 8007ee4:	9a04      	ldr	r2, [sp, #16]
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	9006      	str	r0, [sp, #24]
 8007eea:	9107      	str	r1, [sp, #28]
 8007eec:	0010      	movs	r0, r2
 8007eee:	0019      	movs	r1, r3
 8007ef0:	f7f9 fa92 	bl	8001418 <__aeabi_dmul>
 8007ef4:	4a63      	ldr	r2, [pc, #396]	@ (8008084 <__ieee754_log+0x324>)
 8007ef6:	9b02      	ldr	r3, [sp, #8]
 8007ef8:	4694      	mov	ip, r2
 8007efa:	4463      	add	r3, ip
 8007efc:	0002      	movs	r2, r0
 8007efe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f00:	000b      	movs	r3, r1
 8007f02:	9008      	str	r0, [sp, #32]
 8007f04:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f06:	f7f9 fa87 	bl	8001418 <__aeabi_dmul>
 8007f0a:	0004      	movs	r4, r0
 8007f0c:	000d      	movs	r5, r1
 8007f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8008088 <__ieee754_log+0x328>)
 8007f10:	4b5e      	ldr	r3, [pc, #376]	@ (800808c <__ieee754_log+0x32c>)
 8007f12:	f7f9 fa81 	bl	8001418 <__aeabi_dmul>
 8007f16:	4a5e      	ldr	r2, [pc, #376]	@ (8008090 <__ieee754_log+0x330>)
 8007f18:	4b5e      	ldr	r3, [pc, #376]	@ (8008094 <__ieee754_log+0x334>)
 8007f1a:	f7f8 fad5 	bl	80004c8 <__aeabi_dadd>
 8007f1e:	0022      	movs	r2, r4
 8007f20:	002b      	movs	r3, r5
 8007f22:	f7f9 fa79 	bl	8001418 <__aeabi_dmul>
 8007f26:	4a5c      	ldr	r2, [pc, #368]	@ (8008098 <__ieee754_log+0x338>)
 8007f28:	4b5c      	ldr	r3, [pc, #368]	@ (800809c <__ieee754_log+0x33c>)
 8007f2a:	f7f8 facd 	bl	80004c8 <__aeabi_dadd>
 8007f2e:	0022      	movs	r2, r4
 8007f30:	002b      	movs	r3, r5
 8007f32:	f7f9 fa71 	bl	8001418 <__aeabi_dmul>
 8007f36:	4a5a      	ldr	r2, [pc, #360]	@ (80080a0 <__ieee754_log+0x340>)
 8007f38:	4b5a      	ldr	r3, [pc, #360]	@ (80080a4 <__ieee754_log+0x344>)
 8007f3a:	f7f8 fac5 	bl	80004c8 <__aeabi_dadd>
 8007f3e:	9a08      	ldr	r2, [sp, #32]
 8007f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f42:	f7f9 fa69 	bl	8001418 <__aeabi_dmul>
 8007f46:	4a58      	ldr	r2, [pc, #352]	@ (80080a8 <__ieee754_log+0x348>)
 8007f48:	9008      	str	r0, [sp, #32]
 8007f4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f4c:	4b57      	ldr	r3, [pc, #348]	@ (80080ac <__ieee754_log+0x34c>)
 8007f4e:	0020      	movs	r0, r4
 8007f50:	0029      	movs	r1, r5
 8007f52:	f7f9 fa61 	bl	8001418 <__aeabi_dmul>
 8007f56:	4a56      	ldr	r2, [pc, #344]	@ (80080b0 <__ieee754_log+0x350>)
 8007f58:	4b56      	ldr	r3, [pc, #344]	@ (80080b4 <__ieee754_log+0x354>)
 8007f5a:	f7f8 fab5 	bl	80004c8 <__aeabi_dadd>
 8007f5e:	0022      	movs	r2, r4
 8007f60:	002b      	movs	r3, r5
 8007f62:	f7f9 fa59 	bl	8001418 <__aeabi_dmul>
 8007f66:	4a54      	ldr	r2, [pc, #336]	@ (80080b8 <__ieee754_log+0x358>)
 8007f68:	4b54      	ldr	r3, [pc, #336]	@ (80080bc <__ieee754_log+0x35c>)
 8007f6a:	f7f8 faad 	bl	80004c8 <__aeabi_dadd>
 8007f6e:	0022      	movs	r2, r4
 8007f70:	002b      	movs	r3, r5
 8007f72:	f7f9 fa51 	bl	8001418 <__aeabi_dmul>
 8007f76:	0002      	movs	r2, r0
 8007f78:	000b      	movs	r3, r1
 8007f7a:	9808      	ldr	r0, [sp, #32]
 8007f7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f7e:	f7f8 faa3 	bl	80004c8 <__aeabi_dadd>
 8007f82:	9a02      	ldr	r2, [sp, #8]
 8007f84:	4b4e      	ldr	r3, [pc, #312]	@ (80080c0 <__ieee754_log+0x360>)
 8007f86:	0004      	movs	r4, r0
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f8c:	000d      	movs	r5, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dd34      	ble.n	8007ffe <__ieee754_log+0x29e>
 8007f94:	2200      	movs	r2, #0
 8007f96:	4b3a      	ldr	r3, [pc, #232]	@ (8008080 <__ieee754_log+0x320>)
 8007f98:	0030      	movs	r0, r6
 8007f9a:	0039      	movs	r1, r7
 8007f9c:	f7f9 fa3c 	bl	8001418 <__aeabi_dmul>
 8007fa0:	0032      	movs	r2, r6
 8007fa2:	003b      	movs	r3, r7
 8007fa4:	f7f9 fa38 	bl	8001418 <__aeabi_dmul>
 8007fa8:	0002      	movs	r2, r0
 8007faa:	000b      	movs	r3, r1
 8007fac:	9002      	str	r0, [sp, #8]
 8007fae:	9103      	str	r1, [sp, #12]
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	0029      	movs	r1, r5
 8007fb4:	f7f8 fa88 	bl	80004c8 <__aeabi_dadd>
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	f7f9 fa2c 	bl	8001418 <__aeabi_dmul>
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	0004      	movs	r4, r0
 8007fc4:	000d      	movs	r5, r1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d106      	bne.n	8007fd8 <__ieee754_log+0x278>
 8007fca:	0002      	movs	r2, r0
 8007fcc:	000b      	movs	r3, r1
 8007fce:	9802      	ldr	r0, [sp, #8]
 8007fd0:	9903      	ldr	r1, [sp, #12]
 8007fd2:	f7f9 fce9 	bl	80019a8 <__aeabi_dsub>
 8007fd6:	e74f      	b.n	8007e78 <__ieee754_log+0x118>
 8007fd8:	4a23      	ldr	r2, [pc, #140]	@ (8008068 <__ieee754_log+0x308>)
 8007fda:	4b24      	ldr	r3, [pc, #144]	@ (800806c <__ieee754_log+0x30c>)
 8007fdc:	9806      	ldr	r0, [sp, #24]
 8007fde:	9907      	ldr	r1, [sp, #28]
 8007fe0:	f7f9 fa1a 	bl	8001418 <__aeabi_dmul>
 8007fe4:	4a22      	ldr	r2, [pc, #136]	@ (8008070 <__ieee754_log+0x310>)
 8007fe6:	9000      	str	r0, [sp, #0]
 8007fe8:	9101      	str	r1, [sp, #4]
 8007fea:	9806      	ldr	r0, [sp, #24]
 8007fec:	9907      	ldr	r1, [sp, #28]
 8007fee:	4b21      	ldr	r3, [pc, #132]	@ (8008074 <__ieee754_log+0x314>)
 8007ff0:	f7f9 fa12 	bl	8001418 <__aeabi_dmul>
 8007ff4:	0022      	movs	r2, r4
 8007ff6:	002b      	movs	r3, r5
 8007ff8:	f7f8 fa66 	bl	80004c8 <__aeabi_dadd>
 8007ffc:	e754      	b.n	8007ea8 <__ieee754_log+0x148>
 8007ffe:	0002      	movs	r2, r0
 8008000:	000b      	movs	r3, r1
 8008002:	0030      	movs	r0, r6
 8008004:	0039      	movs	r1, r7
 8008006:	f7f9 fccf 	bl	80019a8 <__aeabi_dsub>
 800800a:	9a04      	ldr	r2, [sp, #16]
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	f7f9 fa03 	bl	8001418 <__aeabi_dmul>
 8008012:	9b00      	ldr	r3, [sp, #0]
 8008014:	0004      	movs	r4, r0
 8008016:	000d      	movs	r5, r1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <__ieee754_log+0x2c2>
 800801c:	0002      	movs	r2, r0
 800801e:	000b      	movs	r3, r1
 8008020:	e72c      	b.n	8007e7c <__ieee754_log+0x11c>
 8008022:	4a11      	ldr	r2, [pc, #68]	@ (8008068 <__ieee754_log+0x308>)
 8008024:	4b11      	ldr	r3, [pc, #68]	@ (800806c <__ieee754_log+0x30c>)
 8008026:	9806      	ldr	r0, [sp, #24]
 8008028:	9907      	ldr	r1, [sp, #28]
 800802a:	f7f9 f9f5 	bl	8001418 <__aeabi_dmul>
 800802e:	4a10      	ldr	r2, [pc, #64]	@ (8008070 <__ieee754_log+0x310>)
 8008030:	9000      	str	r0, [sp, #0]
 8008032:	9101      	str	r1, [sp, #4]
 8008034:	9806      	ldr	r0, [sp, #24]
 8008036:	9907      	ldr	r1, [sp, #28]
 8008038:	4b0e      	ldr	r3, [pc, #56]	@ (8008074 <__ieee754_log+0x314>)
 800803a:	f7f9 f9ed 	bl	8001418 <__aeabi_dmul>
 800803e:	0002      	movs	r2, r0
 8008040:	000b      	movs	r3, r1
 8008042:	0020      	movs	r0, r4
 8008044:	0029      	movs	r1, r5
 8008046:	e733      	b.n	8007eb0 <__ieee754_log+0x150>
 8008048:	2000      	movs	r0, #0
 800804a:	2100      	movs	r1, #0
 800804c:	e699      	b.n	8007d82 <__ieee754_log+0x22>
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	c3500000 	.word	0xc3500000
 8008054:	43500000 	.word	0x43500000
 8008058:	7fefffff 	.word	0x7fefffff
 800805c:	fffffc01 	.word	0xfffffc01
 8008060:	00095f64 	.word	0x00095f64
 8008064:	3ff00000 	.word	0x3ff00000
 8008068:	fee00000 	.word	0xfee00000
 800806c:	3fe62e42 	.word	0x3fe62e42
 8008070:	35793c76 	.word	0x35793c76
 8008074:	3dea39ef 	.word	0x3dea39ef
 8008078:	55555555 	.word	0x55555555
 800807c:	3fd55555 	.word	0x3fd55555
 8008080:	3fe00000 	.word	0x3fe00000
 8008084:	fff9eb86 	.word	0xfff9eb86
 8008088:	df3e5244 	.word	0xdf3e5244
 800808c:	3fc2f112 	.word	0x3fc2f112
 8008090:	96cb03de 	.word	0x96cb03de
 8008094:	3fc74664 	.word	0x3fc74664
 8008098:	94229359 	.word	0x94229359
 800809c:	3fd24924 	.word	0x3fd24924
 80080a0:	55555593 	.word	0x55555593
 80080a4:	3fe55555 	.word	0x3fe55555
 80080a8:	d078c69f 	.word	0xd078c69f
 80080ac:	3fc39a09 	.word	0x3fc39a09
 80080b0:	1d8e78af 	.word	0x1d8e78af
 80080b4:	3fcc71c5 	.word	0x3fcc71c5
 80080b8:	9997fa04 	.word	0x9997fa04
 80080bc:	3fd99999 	.word	0x3fd99999
 80080c0:	0006b851 	.word	0x0006b851

080080c4 <_init>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	46c0      	nop			@ (mov r8, r8)
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr

080080d0 <_fini>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	46c0      	nop			@ (mov r8, r8)
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr
