
adc_probe8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800513c  0800513c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800513c  0800513c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000005c  080051a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080051a0  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df0d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ef  00000000  00000000  0002dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000303c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a0  00000000  00000000  00030f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016caf  00000000  00000000  000317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5c1  00000000  00000000  0004844f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb37  00000000  00000000  00056a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bd4  00000000  00000000  000e5548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005018 	.word	0x08005018

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08005018 	.word	0x08005018

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <test_leds>:
#define TOGGLE(PIN) HAL_GPIO_TogglePin(PIN ## _GPIO_Port, PIN ## _Pin)
#define SHORT_TIMEOUT 10

void test_leds(void);

void test_leds(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	ON(RED);
 8000404:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <test_leds+0xc0>)
 8000406:	2201      	movs	r2, #1
 8000408:	2108      	movs	r1, #8
 800040a:	0018      	movs	r0, r3
 800040c:	f002 f988 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	; 0x64
 8000412:	f000 fe45 	bl	80010a0 <HAL_Delay>
	ON(GREEN);
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <test_leds+0xc0>)
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	0018      	movs	r0, r3
 800041e:	f002 f97f 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000422:	2064      	movs	r0, #100	; 0x64
 8000424:	f000 fe3c 	bl	80010a0 <HAL_Delay>
	ON(BLUE1);
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <test_leds+0xc0>)
 800042a:	2201      	movs	r2, #1
 800042c:	2120      	movs	r1, #32
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f976 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000434:	2064      	movs	r0, #100	; 0x64
 8000436:	f000 fe33 	bl	80010a0 <HAL_Delay>
	ON(BLUE2);
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <test_leds+0xc0>)
 800043c:	2201      	movs	r2, #1
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	0018      	movs	r0, r3
 8000442:	f002 f96d 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f000 fe2a 	bl	80010a0 <HAL_Delay>
	ON(BLUE3);
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <test_leds+0xc0>)
 800044e:	2201      	movs	r2, #1
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	0018      	movs	r0, r3
 8000454:	f002 f964 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 fe21 	bl	80010a0 <HAL_Delay>
	OFF(RED);
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <test_leds+0xc0>)
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	0018      	movs	r0, r3
 8000466:	f002 f95b 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800046a:	2064      	movs	r0, #100	; 0x64
 800046c:	f000 fe18 	bl	80010a0 <HAL_Delay>
	OFF(GREEN);
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <test_leds+0xc0>)
 8000472:	2200      	movs	r2, #0
 8000474:	2110      	movs	r1, #16
 8000476:	0018      	movs	r0, r3
 8000478:	f002 f952 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800047c:	2064      	movs	r0, #100	; 0x64
 800047e:	f000 fe0f 	bl	80010a0 <HAL_Delay>
	OFF(BLUE1);
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <test_leds+0xc0>)
 8000484:	2200      	movs	r2, #0
 8000486:	2120      	movs	r1, #32
 8000488:	0018      	movs	r0, r3
 800048a:	f002 f949 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f000 fe06 	bl	80010a0 <HAL_Delay>
	OFF(BLUE2);
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <test_leds+0xc0>)
 8000496:	2200      	movs	r2, #0
 8000498:	2140      	movs	r1, #64	; 0x40
 800049a:	0018      	movs	r0, r3
 800049c:	f002 f940 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004a0:	2064      	movs	r0, #100	; 0x64
 80004a2:	f000 fdfd 	bl	80010a0 <HAL_Delay>
	OFF(BLUE3);
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <test_leds+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f937 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80004b2:	2064      	movs	r0, #100	; 0x64
 80004b4:	f000 fdf4 	bl	80010a0 <HAL_Delay>

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	50000400 	.word	0x50000400

080004c4 <select_adc_channel>:
	}
	return counter;
}
//-------------------------------------------------------
void select_adc_channel(int channel)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80004cc:	230c      	movs	r3, #12
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	0018      	movs	r0, r3
 80004d2:	230c      	movs	r3, #12
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f004 f918 	bl	800470c <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
    switch (channel)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	d82d      	bhi.n	800053e <select_adc_channel+0x7a>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	009a      	lsls	r2, r3, #2
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <select_adc_channel+0xac>)
 80004e8:	18d3      	adds	r3, r2, r3
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	469f      	mov	pc, r3
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 80004ee:	230c      	movs	r3, #12
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
              break;
 80004f6:	e026      	b.n	8000546 <select_adc_channel+0x82>
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 80004f8:	230c      	movs	r3, #12
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <select_adc_channel+0xb0>)
 80004fe:	601a      	str	r2, [r3, #0]
              break;
 8000500:	e021      	b.n	8000546 <select_adc_channel+0x82>
        case 2:
            sConfig.Channel = ADC_CHANNEL_2;
 8000502:	230c      	movs	r3, #12
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <select_adc_channel+0xb4>)
 8000508:	601a      	str	r2, [r3, #0]
              break;
 800050a:	e01c      	b.n	8000546 <select_adc_channel+0x82>
        case 3:
            sConfig.Channel = ADC_CHANNEL_3;
 800050c:	230c      	movs	r3, #12
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	4a1a      	ldr	r2, [pc, #104]	; (800057c <select_adc_channel+0xb8>)
 8000512:	601a      	str	r2, [r3, #0]
              break;
 8000514:	e017      	b.n	8000546 <select_adc_channel+0x82>
        case 4:
            sConfig.Channel = ADC_CHANNEL_4;
 8000516:	230c      	movs	r3, #12
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	4a19      	ldr	r2, [pc, #100]	; (8000580 <select_adc_channel+0xbc>)
 800051c:	601a      	str	r2, [r3, #0]
              break;
 800051e:	e012      	b.n	8000546 <select_adc_channel+0x82>
        case 5:
            sConfig.Channel = ADC_CHANNEL_5;
 8000520:	230c      	movs	r3, #12
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <select_adc_channel+0xc0>)
 8000526:	601a      	str	r2, [r3, #0]
              break;
 8000528:	e00d      	b.n	8000546 <select_adc_channel+0x82>
        case 6:
            sConfig.Channel = ADC_CHANNEL_6;
 800052a:	230c      	movs	r3, #12
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	4a16      	ldr	r2, [pc, #88]	; (8000588 <select_adc_channel+0xc4>)
 8000530:	601a      	str	r2, [r3, #0]
              break;
 8000532:	e008      	b.n	8000546 <select_adc_channel+0x82>
        case 7:
            sConfig.Channel = ADC_CHANNEL_7;
 8000534:	230c      	movs	r3, #12
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <select_adc_channel+0xc8>)
 800053a:	601a      	str	r2, [r3, #0]
              break;
 800053c:	e003      	b.n	8000546 <select_adc_channel+0x82>
        default: sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800053e:	230c      	movs	r3, #12
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <select_adc_channel+0xcc>)
 8000544:	601a      	str	r2, [r3, #0]
    }
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000546:	210c      	movs	r1, #12
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	187a      	adds	r2, r7, r1
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <select_adc_channel+0xd0>)
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fa00 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <select_adc_channel+0xa4>
    {
      Error_Handler();
 8000564:	f000 fb12 	bl	8000b8c <Error_Handler>
    }
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b006      	add	sp, #24
 800056e:	bd80      	pop	{r7, pc}
 8000570:	08005060 	.word	0x08005060
 8000574:	04000002 	.word	0x04000002
 8000578:	08000004 	.word	0x08000004
 800057c:	0c000008 	.word	0x0c000008
 8000580:	10000010 	.word	0x10000010
 8000584:	14000020 	.word	0x14000020
 8000588:	18000040 	.word	0x18000040
 800058c:	1c000080 	.word	0x1c000080
 8000590:	b0001000 	.word	0xb0001000
 8000594:	20000078 	.word	0x20000078

08000598 <convert>:
//----------------------------------------------



void convert ()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
int p;

		for(p=0;p<NUMSENSORS;p++){
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e027      	b.n	80005f4 <convert+0x5c>
			select_adc_channel(p);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff ff8c 	bl	80004c4 <select_adc_channel>
		    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <convert+0x6c>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 f8ac 	bl	800170c <HAL_ADC_Start>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <convert+0x24>
		        Error_Handler();
 80005b8:	f000 fae8 	bl	8000b8c <Error_Handler>
		    }
		    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80005bc:	2301      	movs	r3, #1
 80005be:	425a      	negs	r2, r3
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <convert+0x6c>)
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f92b 	bl	8001820 <HAL_ADC_PollForConversion>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <convert+0x3a>
		        Error_Handler();
 80005ce:	f000 fadd 	bl	8000b8c <Error_Handler>
		    }
		    adc_values[p] = HAL_ADC_GetValue(&hadc1);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <convert+0x6c>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 f9b7 	bl	8001948 <HAL_ADC_GetValue>
 80005da:	0003      	movs	r3, r0
 80005dc:	0019      	movs	r1, r3
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <convert+0x70>)
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	50d1      	str	r1, [r2, r3]
		    HAL_ADC_Stop(&hadc1);
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <convert+0x6c>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 f8dd 	bl	80017a8 <HAL_ADC_Stop>
		for(p=0;p<NUMSENSORS;p++){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	ddd4      	ble.n	80005a4 <convert+0xc>

		}
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000078 	.word	0x20000078
 8000608:	20000328 	.word	0x20000328

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	46ce      	mov	lr, r9
 8000610:	4647      	mov	r7, r8
 8000612:	b580      	push	{r7, lr}
 8000614:	b089      	sub	sp, #36	; 0x24
 8000616:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fcbc 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f84c 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 fa34 	bl	8000a8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000624:	f000 f8a2 	bl	800076c <MX_ADC1_Init>
  MX_CRC_Init();
 8000628:	f000 f98a 	bl	8000940 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f9ac 	bl	8000988 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f9f8 	bl	8000a24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  test_leds();
 8000634:	f7ff fee4 	bl	8000400 <test_leds>
  ON(ENSPWR);
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	0059      	lsls	r1, r3, #1
 800063c:	23a0      	movs	r3, #160	; 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2201      	movs	r2, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f002 f86c 	bl	8002720 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  convert();
 8000648:	f7ff ffa6 	bl	8000598 <convert>
	  msglength=sprintf(uart_buffer,"ADC %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7]);
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0x9c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4698      	mov	r8, r3
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <main+0x9c>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4699      	mov	r9, r3
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <main+0x9c>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <main+0x9c>)
 800065e:	68d9      	ldr	r1, [r3, #12]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <main+0x9c>)
 8000662:	6918      	ldr	r0, [r3, #16]
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x9c>)
 8000666:	695c      	ldr	r4, [r3, #20]
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <main+0x9c>)
 800066a:	699d      	ldr	r5, [r3, #24]
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <main+0x9c>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4e0e      	ldr	r6, [pc, #56]	; (80006ac <main+0xa0>)
 8000672:	46b4      	mov	ip, r6
 8000674:	4e0e      	ldr	r6, [pc, #56]	; (80006b0 <main+0xa4>)
 8000676:	9305      	str	r3, [sp, #20]
 8000678:	9504      	str	r5, [sp, #16]
 800067a:	9403      	str	r4, [sp, #12]
 800067c:	9002      	str	r0, [sp, #8]
 800067e:	9101      	str	r1, [sp, #4]
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	464b      	mov	r3, r9
 8000684:	4642      	mov	r2, r8
 8000686:	4661      	mov	r1, ip
 8000688:	0030      	movs	r0, r6
 800068a:	f004 f81f 	bl	80046cc <siprintf>
 800068e:	0003      	movs	r3, r0
 8000690:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *) uart_buffer,msglength, 100);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	b29a      	uxth	r2, r3
 8000696:	4906      	ldr	r1, [pc, #24]	; (80006b0 <main+0xa4>)
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0xa8>)
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	f002 feee 	bl	800347c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f000 fcfd 	bl	80010a0 <HAL_Delay>
	  convert();
 80006a6:	e7cf      	b.n	8000648 <main+0x3c>
 80006a8:	20000328 	.word	0x20000328
 80006ac:	08005030 	.word	0x08005030
 80006b0:	20000228 	.word	0x20000228
 80006b4:	20000194 	.word	0x20000194

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b093      	sub	sp, #76	; 0x4c
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2414      	movs	r4, #20
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2334      	movs	r3, #52	; 0x34
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f004 f81f 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f004 f818 	bl	800470c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 f83b 	bl	800275c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2240      	movs	r2, #64	; 0x40
 8000700:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2202      	movs	r2, #2
 800070c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2208      	movs	r2, #8
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0292      	lsls	r2, r2, #10
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0592      	lsls	r2, r2, #22
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	187b      	adds	r3, r7, r1
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f861 	bl	80027f4 <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000736:	f000 fa29 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2102      	movs	r1, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fb5c 	bl	8002e14 <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 fa14 	bl	8000b8c <Error_Handler>
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b013      	add	sp, #76	; 0x4c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	0018      	movs	r0, r3
 8000776:	230c      	movs	r3, #12
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f003 ffc6 	bl	800470c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000780:	4b66      	ldr	r3, [pc, #408]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000782:	4a67      	ldr	r2, [pc, #412]	; (8000920 <MX_ADC1_Init+0x1b4>)
 8000784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000786:	4b65      	ldr	r3, [pc, #404]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	0312      	lsls	r2, r2, #12
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b63      	ldr	r3, [pc, #396]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b61      	ldr	r3, [pc, #388]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800079a:	4b60      	ldr	r3, [pc, #384]	; (800091c <MX_ADC1_Init+0x1b0>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0392      	lsls	r2, r2, #14
 80007a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007a2:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007a4:	2208      	movs	r2, #8
 80007a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a8:	4b5c      	ldr	r3, [pc, #368]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	4b59      	ldr	r3, [pc, #356]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007bc:	2208      	movs	r2, #8
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b56      	ldr	r3, [pc, #344]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007c2:	2220      	movs	r2, #32
 80007c4:	2100      	movs	r1, #0
 80007c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b54      	ldr	r3, [pc, #336]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b53      	ldr	r3, [pc, #332]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d4:	4b51      	ldr	r3, [pc, #324]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007d6:	222c      	movs	r2, #44	; 0x2c
 80007d8:	2100      	movs	r1, #0
 80007da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b4f      	ldr	r3, [pc, #316]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80007e2:	4b4e      	ldr	r3, [pc, #312]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007f0:	223c      	movs	r2, #60	; 0x3c
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fc:	4b47      	ldr	r3, [pc, #284]	; (800091c <MX_ADC1_Init+0x1b0>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fddc 	bl	80013bc <HAL_ADC_Init>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000808:	f000 f9c0 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3a      	adds	r2, r7, #4
 8000820:	4b3e      	ldr	r3, [pc, #248]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 f89b 	bl	8001960 <HAL_ADC_ConfigChannel>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800082e:	f000 f9ad 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4a3b      	ldr	r2, [pc, #236]	; (8000924 <MX_ADC1_Init+0x1b8>)
 8000836:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2204      	movs	r2, #4
 800083c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f001 f88b 	bl	8001960 <HAL_ADC_ConfigChannel>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800084e:	f000 f99d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4a34      	ldr	r2, [pc, #208]	; (8000928 <MX_ADC1_Init+0x1bc>)
 8000856:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2208      	movs	r2, #8
 800085c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f87b 	bl	8001960 <HAL_ADC_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800086e:	f000 f98d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4a2d      	ldr	r2, [pc, #180]	; (800092c <MX_ADC1_Init+0x1c0>)
 8000876:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	220c      	movs	r2, #12
 800087c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f001 f86b 	bl	8001960 <HAL_ADC_ConfigChannel>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800088e:	f000 f97d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <MX_ADC1_Init+0x1c4>)
 8000896:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2210      	movs	r2, #16
 800089c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_ADC1_Init+0x1b0>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 f85b 	bl	8001960 <HAL_ADC_ConfigChannel>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80008ae:	f000 f96d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <MX_ADC1_Init+0x1c8>)
 80008b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2214      	movs	r2, #20
 80008bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	1d3a      	adds	r2, r7, #4
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_ADC1_Init+0x1b0>)
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 f84b 	bl	8001960 <HAL_ADC_ConfigChannel>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80008ce:	f000 f95d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <MX_ADC1_Init+0x1cc>)
 80008d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2218      	movs	r2, #24
 80008dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	1d3a      	adds	r2, r7, #4
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ADC1_Init+0x1b0>)
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 f83b 	bl	8001960 <HAL_ADC_ConfigChannel>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80008ee:	f000 f94d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4a11      	ldr	r2, [pc, #68]	; (800093c <MX_ADC1_Init+0x1d0>)
 80008f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	221c      	movs	r2, #28
 80008fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_ADC1_Init+0x1b0>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f82b 	bl	8001960 <HAL_ADC_ConfigChannel>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800090e:	f000 f93d 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000078 	.word	0x20000078
 8000920:	40012400 	.word	0x40012400
 8000924:	04000002 	.word	0x04000002
 8000928:	08000004 	.word	0x08000004
 800092c:	0c000008 	.word	0x0c000008
 8000930:	10000010 	.word	0x10000010
 8000934:	14000020 	.word	0x14000020
 8000938:	18000040 	.word	0x18000040
 800093c:	1c000080 	.word	0x1c000080

08000940 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_CRC_Init+0x40>)
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_CRC_Init+0x44>)
 8000948:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_CRC_Init+0x40>)
 800094c:	2200      	movs	r2, #0
 800094e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_CRC_Init+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_CRC_Init+0x40>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_CRC_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_CRC_Init+0x40>)
 8000964:	2201      	movs	r2, #1
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_CRC_Init+0x40>)
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fbd4 	bl	8002118 <HAL_CRC_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000974:	f000 f90a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200000dc 	.word	0x200000dc
 8000984:	40023000 	.word	0x40023000

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <MX_USART1_UART_Init+0x98>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 8000994:	22e1      	movs	r2, #225	; 0xe1
 8000996:	0252      	lsls	r2, r2, #9
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f002 fcfc 	bl	80033d0 <HAL_UART_Init>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 f8d6 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 fd91 	bl	800450c <HAL_UARTEx_SetTxFifoThreshold>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f8cd 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 fdc8 	bl	800458c <HAL_UARTEx_SetRxFifoThreshold>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 f8c4 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f003 fd46 	bl	8004498 <HAL_UARTEx_DisableFifoMode>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f8bc 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000100 	.word	0x20000100
 8000a20:	40013800 	.word	0x40013800

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a2a:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <MX_USART3_UART_Init+0x64>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a30:	22e1      	movs	r2, #225	; 0xe1
 8000a32:	0252      	lsls	r2, r2, #9
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MX_USART3_UART_Init+0x60>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 fcae 	bl	80033d0 <HAL_UART_Init>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f888 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000194 	.word	0x20000194
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	240c      	movs	r4, #12
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	0018      	movs	r0, r3
 8000a98:	2314      	movs	r3, #20
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f003 fe35 	bl	800470c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ad8:	2102      	movs	r1, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xf4>)
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENSPWR_GPIO_Port, ENSPWR_Pin, GPIO_PIN_RESET);
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	0059      	lsls	r1, r3, #1
 8000aee:	23a0      	movs	r3, #160	; 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2200      	movs	r2, #0
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 fe13 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_GPIO_Init+0xf8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	21f8      	movs	r1, #248	; 0xf8
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fe0d 	bl	8002720 <HAL_GPIO_WritePin>
                          |BLUE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0192      	lsls	r2, r2, #6
 8000b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <MX_GPIO_Init+0xfc>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f001 fc99 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENSPWR_Pin */
  GPIO_InitStruct.Pin = ENSPWR_Pin;
 8000b26:	0021      	movs	r1, r4
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0052      	lsls	r2, r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	000c      	movs	r4, r1
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	2201      	movs	r2, #1
 8000b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENSPWR_GPIO_Port, &GPIO_InitStruct);
 8000b44:	193a      	adds	r2, r7, r4
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 fc83 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE1_Pin BLUE2_Pin
                           BLUE3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8000b52:	0021      	movs	r1, r4
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	22f8      	movs	r2, #248	; 0xf8
 8000b58:	601a      	str	r2, [r3, #0]
                          |BLUE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <MX_GPIO_Init+0xf8>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f001 fc70 	bl	8002458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b009      	add	sp, #36	; 0x24
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	50000400 	.word	0x50000400
 8000b88:	50000800 	.word	0x50000800

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_MspInit+0x44>)
 8000bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b093      	sub	sp, #76	; 0x4c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	2334      	movs	r3, #52	; 0x34
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f003 fd8a 	bl	800470c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	2418      	movs	r4, #24
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	231c      	movs	r3, #28
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 fd82 	bl	800470c <memset>
  if(hadc->Instance==ADC1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <HAL_ADC_MspInit+0xe4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d154      	bne.n	8000cbc <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	01d2      	lsls	r2, r2, #7
 8000c18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 faa0 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c2c:	f7ff ffae 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	0349      	lsls	r1, r1, #13
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	035b      	lsls	r3, r3, #13
 8000c46:	4013      	ands	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c74:	2202      	movs	r2, #2
 8000c76:	4013      	ands	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8000c7c:	2434      	movs	r4, #52	; 0x34
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	601a      	str	r2, [r3, #0]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2203      	movs	r2, #3
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fbdd 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AREFIN_Pin;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AREFIN_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_ADC_MspInit+0xec>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f001 fbce 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b013      	add	sp, #76	; 0x4c
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	40012400 	.word	0x40012400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	50000400 	.word	0x50000400

08000cd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_CRC_MspInit+0x38>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10d      	bne.n	8000cfe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0149      	lsls	r1, r1, #5
 8000cec:	430a      	orrs	r2, r1
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_CRC_MspInit+0x3c>)
 8000cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40023000 	.word	0x40023000
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b093      	sub	sp, #76	; 0x4c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	2334      	movs	r3, #52	; 0x34
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2314      	movs	r3, #20
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f003 fcf2 	bl	800470c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	2418      	movs	r4, #24
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	231c      	movs	r3, #28
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f003 fcea 	bl	800470c <memset>
  if(huart->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_UART_MspInit+0x148>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d148      	bne.n	8000dd4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fa09 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5a:	f7ff ff17 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	01c9      	lsls	r1, r1, #7
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	01db      	lsls	r3, r3, #7
 8000d74:	4013      	ands	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7e:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_Pin|U1RX_Pin;
 8000d92:	2134      	movs	r1, #52	; 0x34
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2202      	movs	r2, #2
 8000da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	187a      	adds	r2, r7, r1
 8000db6:	23a0      	movs	r3, #160	; 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 fb4b 	bl	8002458 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	201b      	movs	r0, #27
 8000dc8:	f001 f974 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dcc:	201b      	movs	r0, #27
 8000dce:	f001 f986 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd2:	e03d      	b.n	8000e50 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_UART_MspInit+0x150>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d138      	bne.n	8000e50 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	02c9      	lsls	r1, r1, #11
 8000de8:	430a      	orrs	r2, r1
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	02db      	lsls	r3, r3, #11
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000e00:	2102      	movs	r1, #2
 8000e02:	430a      	orrs	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_UART_MspInit+0x14c>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U3TX_Pin|U3RX_Pin;
 8000e12:	2134      	movs	r1, #52	; 0x34
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	22c0      	movs	r2, #192	; 0xc0
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2202      	movs	r2, #2
 8000e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2204      	movs	r2, #4
 8000e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_UART_MspInit+0x154>)
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	f001 fb0c 	bl	8002458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	201d      	movs	r0, #29
 8000e46:	f001 f935 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	f001 f947 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b013      	add	sp, #76	; 0x4c
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40013800 	.word	0x40013800
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40004800 	.word	0x40004800
 8000e64:	50000400 	.word	0x50000400

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f8ec 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <USART1_IRQHandler+0x14>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 fb88 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	20000100 	.word	0x20000100

08000eb0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <USART3_4_IRQHandler+0x14>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f002 fb7c 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000194 	.word	0x20000194

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f003 fc10 	bl	800471c <__errno>
 8000efc:	0003      	movs	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	18d2      	adds	r2, r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20009000 	.word	0x20009000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000348 	.word	0x20000348
 8000f30:	20000498 	.word	0x20000498

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff fff6 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6e:	f003 fbdb 	bl	8004728 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f72:	f7ff fb4b 	bl	800060c <main>

08000f76 <LoopForever>:

LoopForever:
  b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f84:	08005144 	.word	0x08005144
  ldr r2, =_sbss
 8000f88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f8c:	20000498 	.word	0x20000498

08000f90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Init+0x3c>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	0049      	lsls	r1, r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f810 	bl	8000fd4 <HAL_InitTick>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e001      	b.n	8000fc4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fdea 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_InitTick+0x88>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d02b      	beq.n	8001044 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_InitTick+0x8c>)
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_InitTick+0x88>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	23fa      	movs	r3, #250	; 0xfa
 8000ff8:	0098      	lsls	r0, r3, #2
 8000ffa:	f7ff f88b 	bl	8000114 <__udivsi3>
 8000ffe:	0003      	movs	r3, r0
 8001000:	0019      	movs	r1, r3
 8001002:	0020      	movs	r0, r4
 8001004:	f7ff f886 	bl	8000114 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	0018      	movs	r0, r3
 800100c:	f001 f877 	bl	80020fe <HAL_SYSTICK_Config>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d112      	bne.n	800103a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d80a      	bhi.n	8001030 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f846 	bl	80020b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_InitTick+0x90>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00d      	b.n	800104c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e008      	b.n	800104c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103a:	230f      	movs	r3, #15
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e003      	b.n	800104c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	781b      	ldrb	r3, [r3, #0]
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b005      	add	sp, #20
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000008 	.word	0x20000008
 8001060:	20000000 	.word	0x20000000
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	18d2      	adds	r2, r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000008 	.word	0x20000008
 8001088:	2000034c 	.word	0x2000034c

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	2000034c 	.word	0x2000034c

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	001a      	movs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000008 	.word	0x20000008

080010e8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	fe3fffff 	.word	0xfe3fffff

08001110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	23e0      	movs	r3, #224	; 0xe0
 800111e:	045b      	lsls	r3, r3, #17
 8001120:	4013      	ands	r3, r2
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}

0800112a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	2104      	movs	r1, #4
 800113e:	400a      	ands	r2, r1
 8001140:	2107      	movs	r1, #7
 8001142:	4091      	lsls	r1, r2
 8001144:	000a      	movs	r2, r1
 8001146:	43d2      	mvns	r2, r2
 8001148:	401a      	ands	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2104      	movs	r1, #4
 800114e:	400b      	ands	r3, r1
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4099      	lsls	r1, r3
 8001154:	000b      	movs	r3, r1
 8001156:	431a      	orrs	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b004      	add	sp, #16
 8001162:	bd80      	pop	{r7, pc}

08001164 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	2104      	movs	r1, #4
 8001176:	400a      	ands	r2, r1
 8001178:	2107      	movs	r1, #7
 800117a:	4091      	lsls	r1, r2
 800117c:	000a      	movs	r2, r1
 800117e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2104      	movs	r1, #4
 8001184:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001186:	40da      	lsrs	r2, r3
 8001188:	0013      	movs	r3, r2
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	23c0      	movs	r3, #192	; 0xc0
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4013      	ands	r3, r2
 80011a4:	d101      	bne.n	80011aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	211f      	movs	r1, #31
 80011c8:	400a      	ands	r2, r1
 80011ca:	210f      	movs	r1, #15
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0e9b      	lsrs	r3, r3, #26
 80011d8:	210f      	movs	r1, #15
 80011da:	4019      	ands	r1, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	201f      	movs	r0, #31
 80011e0:	4003      	ands	r3, r0
 80011e2:	4099      	lsls	r1, r3
 80011e4:	000b      	movs	r3, r1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	035b      	lsls	r3, r3, #13
 8001206:	0b5b      	lsrs	r3, r3, #13
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}

08001216 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	0352      	lsls	r2, r2, #13
 8001228:	0b52      	lsrs	r2, r2, #13
 800122a:	43d2      	mvns	r2, r2
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	0212      	lsls	r2, r2, #8
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	400b      	ands	r3, r1
 800125c:	4904      	ldr	r1, [pc, #16]	; (8001270 <LL_ADC_SetChannelSamplingTime+0x34>)
 800125e:	400b      	ands	r3, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	07ffff00 	.word	0x07ffff00

08001274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <LL_ADC_EnableInternalRegulator+0x24>)
 8001282:	4013      	ands	r3, r2
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0552      	lsls	r2, r2, #21
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	6fffffe8 	.word	0x6fffffe8

0800129c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	055b      	lsls	r3, r3, #21
 80012ac:	401a      	ands	r2, r3
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	055b      	lsls	r3, r3, #21
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d101      	bne.n	80012ba <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <LL_ADC_Enable+0x20>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	2201      	movs	r2, #1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	7fffffe8 	.word	0x7fffffe8

080012e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <LL_ADC_Disable+0x20>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	2202      	movs	r2, #2
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}
 8001308:	7fffffe8 	.word	0x7fffffe8

0800130c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2201      	movs	r2, #1
 800131a:	4013      	ands	r3, r2
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <LL_ADC_IsEnabled+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_ADC_IsEnabled+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}

0800132e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	2b02      	cmp	r3, #2
 8001340:	d101      	bne.n	8001346 <LL_ADC_IsDisableOngoing+0x18>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_IsDisableOngoing+0x1a>
 8001346:	2300      	movs	r3, #0
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <LL_ADC_REG_StartConversion+0x20>)
 800135e:	4013      	ands	r3, r2
 8001360:	2204      	movs	r2, #4
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	7fffffe8 	.word	0x7fffffe8

08001374 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <LL_ADC_REG_StopConversion+0x20>)
 8001382:	4013      	ands	r3, r2
 8001384:	2210      	movs	r2, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}
 8001394:	7fffffe8 	.word	0x7fffffe8

08001398 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2204      	movs	r2, #4
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	231f      	movs	r3, #31
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e17f      	b.n	80016e2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff fbf7 	bl	8000be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2254      	movs	r2, #84	; 0x54
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ff49 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d115      	bne.n	800143a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff ff2e 	bl	8001274 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001418:	4bb4      	ldr	r3, [pc, #720]	; (80016ec <HAL_ADC_Init+0x330>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	49b4      	ldr	r1, [pc, #720]	; (80016f0 <HAL_ADC_Init+0x334>)
 800141e:	0018      	movs	r0, r3
 8001420:	f7fe fe78 	bl	8000114 <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	3301      	adds	r3, #1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800142c:	e002      	b.n	8001434 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0018      	movs	r0, r3
 8001440:	f7ff ff2c 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d10f      	bne.n	8001468 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	2210      	movs	r2, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2201      	movs	r2, #1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001460:	231f      	movs	r3, #31
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ff93 	bl	8001398 <LL_ADC_REG_IsConversionOngoing>
 8001472:	0003      	movs	r3, r0
 8001474:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	2210      	movs	r2, #16
 800147c:	4013      	ands	r3, r2
 800147e:	d000      	beq.n	8001482 <HAL_ADC_Init+0xc6>
 8001480:	e122      	b.n	80016c8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d000      	beq.n	800148a <HAL_ADC_Init+0xce>
 8001488:	e11e      	b.n	80016c8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	4a99      	ldr	r2, [pc, #612]	; (80016f4 <HAL_ADC_Init+0x338>)
 8001490:	4013      	ands	r3, r2
 8001492:	2202      	movs	r2, #2
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff ff34 	bl	800130c <LL_ADC_IsEnabled>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d000      	beq.n	80014aa <HAL_ADC_Init+0xee>
 80014a8:	e0ad      	b.n	8001606 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e1b      	ldrb	r3, [r3, #24]
 80014b2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014b4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7e5b      	ldrb	r3, [r3, #25]
 80014ba:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7e9b      	ldrb	r3, [r3, #26]
 80014c2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014c4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <HAL_ADC_Init+0x118>
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	e000      	b.n	80014d6 <HAL_ADC_Init+0x11a>
 80014d4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014d6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014dc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da04      	bge.n	80014f0 <HAL_ADC_Init+0x134>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	e001      	b.n	80014f4 <HAL_ADC_Init+0x138>
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80014f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	5c5b      	ldrb	r3, [r3, r1]
 80014fc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014fe:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2220      	movs	r2, #32
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d115      	bne.n	800153c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e9b      	ldrb	r3, [r3, #26]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	0252      	lsls	r2, r2, #9
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	e00b      	b.n	800153c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	2220      	movs	r2, #32
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2201      	movs	r2, #1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001548:	23e0      	movs	r3, #224	; 0xe0
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001552:	4313      	orrs	r3, r2
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_ADC_Init+0x33c>)
 8001562:	4013      	ands	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0f9b      	lsrs	r3, r3, #30
 8001576:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800157c:	4313      	orrs	r3, r2
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	223c      	movs	r2, #60	; 0x3c
 8001588:	5c9b      	ldrb	r3, [r3, r2]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d111      	bne.n	80015b2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	0f9b      	lsrs	r3, r3, #30
 8001594:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800159a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015a0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015a6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	2201      	movs	r2, #1
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a50      	ldr	r2, [pc, #320]	; (80016fc <HAL_ADC_Init+0x340>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d018      	beq.n	8001606 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	429a      	cmp	r2, r3
 80015de:	d012      	beq.n	8001606 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	061b      	lsls	r3, r3, #24
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d00c      	beq.n	8001606 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_ADC_Init+0x344>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_ADC_Init+0x348>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	039b      	lsls	r3, r3, #14
 80015fe:	401a      	ands	r2, r3
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_ADC_Init+0x344>)
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	001a      	movs	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	f7ff fd8a 	bl	800112a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	493a      	ldr	r1, [pc, #232]	; (8001708 <HAL_ADC_Init+0x34c>)
 8001620:	001a      	movs	r2, r3
 8001622:	f7ff fd82 	bl	800112a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2110      	movs	r1, #16
 800163a:	4249      	negs	r1, r1
 800163c:	430a      	orrs	r2, r1
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
 8001640:	e018      	b.n	8001674 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	039b      	lsls	r3, r3, #14
 800164a:	429a      	cmp	r2, r3
 800164c:	d112      	bne.n	8001674 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	3b01      	subs	r3, #1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	221c      	movs	r2, #28
 800165e:	4013      	ands	r3, r2
 8001660:	2210      	movs	r2, #16
 8001662:	4252      	negs	r2, r2
 8001664:	409a      	lsls	r2, r3
 8001666:	0011      	movs	r1, r2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2100      	movs	r1, #0
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff fd72 	bl	8001164 <LL_ADC_GetSamplingTimeCommonChannels>
 8001680:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001686:	429a      	cmp	r2, r3
 8001688:	d10b      	bne.n	80016a2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	2203      	movs	r2, #3
 8001696:	4393      	bics	r3, r2
 8001698:	2201      	movs	r2, #1
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016a0:	e01c      	b.n	80016dc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	2212      	movs	r2, #18
 80016a8:	4393      	bics	r3, r2
 80016aa:	2210      	movs	r2, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80016be:	231f      	movs	r3, #31
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016c6:	e009      	b.n	80016dc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	2210      	movs	r2, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016d4:	231f      	movs	r3, #31
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016dc:	231f      	movs	r3, #31
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	781b      	ldrb	r3, [r3, #0]
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b008      	add	sp, #32
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000000 	.word	0x20000000
 80016f0:	00030d40 	.word	0x00030d40
 80016f4:	fffffefd 	.word	0xfffffefd
 80016f8:	fffe0201 	.word	0xfffe0201
 80016fc:	1ffffc02 	.word	0x1ffffc02
 8001700:	40012708 	.word	0x40012708
 8001704:	ffc3ffff 	.word	0xffc3ffff
 8001708:	07ffff04 	.word	0x07ffff04

0800170c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fe3d 	bl	8001398 <LL_ADC_REG_IsConversionOngoing>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d135      	bne.n	800178e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2254      	movs	r2, #84	; 0x54
 8001726:	5c9b      	ldrb	r3, [r3, r2]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ADC_Start+0x24>
 800172c:	2302      	movs	r3, #2
 800172e:	e035      	b.n	800179c <HAL_ADC_Start+0x90>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2254      	movs	r2, #84	; 0x54
 8001734:	2101      	movs	r1, #1
 8001736:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001738:	250f      	movs	r5, #15
 800173a:	197c      	adds	r4, r7, r5
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fb28 	bl	8001d94 <ADC_Enable>
 8001744:	0003      	movs	r3, r0
 8001746:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001748:	197b      	adds	r3, r7, r5
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d119      	bne.n	8001784 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_ADC_Start+0x98>)
 8001756:	4013      	ands	r3, r2
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0052      	lsls	r2, r2, #1
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	221c      	movs	r2, #28
 800176e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2254      	movs	r2, #84	; 0x54
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fde7 	bl	8001350 <LL_ADC_REG_StartConversion>
 8001782:	e008      	b.n	8001796 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2254      	movs	r2, #84	; 0x54
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]
 800178c:	e003      	b.n	8001796 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001796:	230f      	movs	r3, #15
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b004      	add	sp, #16
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	fffff0fe 	.word	0xfffff0fe

080017a8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2254      	movs	r2, #84	; 0x54
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Stop+0x16>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e029      	b.n	8001812 <HAL_ADC_Stop+0x6a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2254      	movs	r2, #84	; 0x54
 80017c2:	2101      	movs	r1, #1
 80017c4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80017c6:	250f      	movs	r5, #15
 80017c8:	197c      	adds	r4, r7, r5
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fa9f 	bl	8001d10 <ADC_ConversionStop>
 80017d2:	0003      	movs	r3, r0
 80017d4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d112      	bne.n	8001804 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017de:	197c      	adds	r4, r7, r5
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fb5c 	bl	8001ea0 <ADC_Disable>
 80017e8:	0003      	movs	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d107      	bne.n	8001804 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_ADC_Stop+0x74>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	2201      	movs	r2, #1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2254      	movs	r2, #84	; 0x54
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800180c:	230f      	movs	r3, #15
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	781b      	ldrb	r3, [r3, #0]
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bdb0      	pop	{r4, r5, r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	fffffefe 	.word	0xfffffefe

08001820 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d102      	bne.n	8001838 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001832:	2308      	movs	r3, #8
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e00f      	b.n	8001858 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	2220      	movs	r2, #32
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e072      	b.n	800193a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001854:	2304      	movs	r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001858:	f7ff fc18 	bl	800108c <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001860:	e01f      	b.n	80018a2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	d01c      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001868:	f7ff fc10 	bl	800108c <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d302      	bcc.n	800187e <HAL_ADC_PollForConversion+0x5e>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d111      	bne.n	80018a2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	2204      	movs	r2, #4
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2254      	movs	r2, #84	; 0x54
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04b      	b.n	800193a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0d9      	beq.n	8001862 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fc66 	bl	8001192 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d02e      	beq.n	8001928 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e9b      	ldrb	r3, [r3, #26]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12a      	bne.n	8001928 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2208      	movs	r2, #8
 80018da:	4013      	ands	r3, r2
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d123      	bne.n	8001928 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff fd57 	bl	8001398 <LL_ADC_REG_IsConversionOngoing>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d110      	bne.n	8001910 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	210c      	movs	r1, #12
 80018fa:	438a      	bics	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_ADC_PollForConversion+0x124>)
 8001904:	4013      	ands	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	659a      	str	r2, [r3, #88]	; 0x58
 800190e:	e00b      	b.n	8001928 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	2220      	movs	r2, #32
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	2201      	movs	r2, #1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e1b      	ldrb	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	220c      	movs	r2, #12
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	fffffefe 	.word	0xfffffefe

08001948 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2317      	movs	r3, #23
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2254      	movs	r2, #84	; 0x54
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x24>
 8001980:	2302      	movs	r3, #2
 8001982:	e1c0      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x3a6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2254      	movs	r2, #84	; 0x54
 8001988:	2101      	movs	r1, #1
 800198a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff fd01 	bl	8001398 <LL_ADC_REG_IsConversionOngoing>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d000      	beq.n	800199c <HAL_ADC_ConfigChannel+0x3c>
 800199a:	e1a3      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d100      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x46>
 80019a4:	e143      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019b6:	4ac1      	ldr	r2, [pc, #772]	; (8001cbc <HAL_ADC_ConfigChannel+0x35c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d108      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0019      	movs	r1, r3
 80019c6:	0010      	movs	r0, r2
 80019c8:	f7ff fc14 	bl	80011f4 <LL_ADC_REG_SetSequencerChAdd>
 80019cc:	e0c9      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	211f      	movs	r1, #31
 80019d8:	400b      	ands	r3, r1
 80019da:	210f      	movs	r1, #15
 80019dc:	4099      	lsls	r1, r3
 80019de:	000b      	movs	r3, r1
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4013      	ands	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	035b      	lsls	r3, r3, #13
 80019ec:	0b5b      	lsrs	r3, r3, #13
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x9c>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	221f      	movs	r2, #31
 80019f8:	4013      	ands	r3, r2
 80019fa:	e098      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d000      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0xa8>
 8001a06:	e091      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x1cc>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d000      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0xb4>
 8001a12:	e089      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1c8>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d000      	beq.n	8001a20 <HAL_ADC_ConfigChannel+0xc0>
 8001a1e:	e081      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x1c4>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	4013      	ands	r3, r2
 8001a28:	d000      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0xcc>
 8001a2a:	e079      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x1c0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2210      	movs	r2, #16
 8001a32:	4013      	ands	r3, r2
 8001a34:	d000      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0xd8>
 8001a36:	e071      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x1bc>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d000      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0xe4>
 8001a42:	e069      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x1b8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d000      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0xf0>
 8001a4e:	e061      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1b4>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4013      	ands	r3, r2
 8001a58:	d000      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0xfc>
 8001a5a:	e059      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d151      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x1ac>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d149      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1a8>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d141      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1a4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d139      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1a0>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	4013      	ands	r3, r2
 8001a96:	d131      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x19c>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d129      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x198>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4013      	ands	r3, r2
 8001aae:	d121      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x194>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d119      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x190>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d111      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x18c>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x188>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	02db      	lsls	r3, r3, #11
 8001adc:	4013      	ands	r3, r2
 8001ade:	d001      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x184>
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	e024      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e022      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001ae8:	2311      	movs	r3, #17
 8001aea:	e020      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001aec:	2310      	movs	r3, #16
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af0:	230f      	movs	r3, #15
 8001af2:	e01c      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af4:	230e      	movs	r3, #14
 8001af6:	e01a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001af8:	230d      	movs	r3, #13
 8001afa:	e018      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	230c      	movs	r3, #12
 8001afe:	e016      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b00:	230b      	movs	r3, #11
 8001b02:	e014      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	230a      	movs	r3, #10
 8001b06:	e012      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b08:	2309      	movs	r3, #9
 8001b0a:	e010      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	e00e      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b10:	2307      	movs	r3, #7
 8001b12:	e00c      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b14:	2306      	movs	r3, #6
 8001b16:	e00a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e008      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e006      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e004      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x1ce>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	6852      	ldr	r2, [r2, #4]
 8001b32:	201f      	movs	r0, #31
 8001b34:	4002      	ands	r2, r0
 8001b36:	4093      	lsls	r3, r2
 8001b38:	000a      	movs	r2, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d808      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	f7ff fb29 	bl	80011b4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	001a      	movs	r2, r3
 8001b70:	f7ff fb64 	bl	800123c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db00      	blt.n	8001b7e <HAL_ADC_ConfigChannel+0x21e>
 8001b7c:	e0bc      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b7e:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fac5 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001b86:	0003      	movs	r3, r0
 8001b88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_ADC_ConfigChannel+0x364>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d122      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b9c:	d11d      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0412      	lsls	r2, r2, #16
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001ba8:	0019      	movs	r1, r3
 8001baa:	0010      	movs	r0, r2
 8001bac:	f7ff fa9c 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb0:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <HAL_ADC_ConfigChannel+0x368>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4945      	ldr	r1, [pc, #276]	; (8001ccc <HAL_ADC_ConfigChannel+0x36c>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7fe faac 	bl	8000114 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bca:	e002      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bd8:	e08e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <HAL_ADC_ConfigChannel+0x370>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d10e      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	045b      	lsls	r3, r3, #17
 8001bea:	4013      	ands	r3, r2
 8001bec:	d109      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0452      	lsls	r2, r2, #17
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	0010      	movs	r0, r2
 8001bfc:	f7ff fa74 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
 8001c00:	e07a      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <HAL_ADC_ConfigChannel+0x374>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d000      	beq.n	8001c0e <HAL_ADC_ConfigChannel+0x2ae>
 8001c0c:	e074      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	03db      	lsls	r3, r3, #15
 8001c14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c16:	d000      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x2ba>
 8001c18:	e06e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	03d2      	lsls	r2, r2, #15
 8001c20:	4313      	orrs	r3, r2
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7ff fa5e 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
 8001c2c:	e064      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d004      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_ADC_ConfigChannel+0x35c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f7ff fae1 	bl	8001216 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da4d      	bge.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff fa56 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_ADC_ConfigChannel+0x364>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d108      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_ADC_ConfigChannel+0x378>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f7ff fa33 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
 8001c82:	e039      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_ADC_ConfigChannel+0x370>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d108      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_ADC_ConfigChannel+0x37c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f7ff fa25 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
 8001c9e:	e02b      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_ADC_ConfigChannel+0x374>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d126      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_ADC_ConfigChannel+0x380>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_ADC_ConfigChannel+0x360>)
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	f7ff fa17 	bl	80010e8 <LL_ADC_SetCommonPathInternalCh>
 8001cba:	e01d      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x398>
 8001cbc:	80000004 	.word	0x80000004
 8001cc0:	40012708 	.word	0x40012708
 8001cc4:	b0001000 	.word	0xb0001000
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	00030d40 	.word	0x00030d40
 8001cd0:	b8004000 	.word	0xb8004000
 8001cd4:	b4002000 	.word	0xb4002000
 8001cd8:	ff7fffff 	.word	0xff7fffff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	2220      	movs	r2, #32
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf0:	2317      	movs	r3, #23
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2254      	movs	r2, #84	; 0x54
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d00:	2317      	movs	r3, #23
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	781b      	ldrb	r3, [r3, #0]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)

08001d10 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff fb3b 	bl	8001398 <LL_ADC_REG_IsConversionOngoing>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d031      	beq.n	8001d8a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff faff 	bl	800132e <LL_ADC_IsDisableOngoing>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d104      	bne.n	8001d3e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff fb1b 	bl	8001374 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d3e:	f7ff f9a5 	bl	800108c <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d46:	e01a      	b.n	8001d7e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d48:	f7ff f9a0 	bl	800108c <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d913      	bls.n	8001d7e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	2210      	movs	r2, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2201      	movs	r2, #1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e006      	b.n	8001d8c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1de      	bne.n	8001d48 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b004      	add	sp, #16
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff fab1 	bl	800130c <LL_ADC_IsEnabled>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d000      	beq.n	8001db0 <ADC_Enable+0x1c>
 8001dae:	e069      	b.n	8001e84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <ADC_Enable+0xfc>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2201      	movs	r2, #1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e056      	b.n	8001e86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fa71 	bl	80012c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <ADC_Enable+0x100>)
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff f993 	bl	8001110 <LL_ADC_GetCommonPathInternalCh>
 8001dea:	0002      	movs	r2, r0
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	041b      	lsls	r3, r3, #16
 8001df0:	4013      	ands	r3, r2
 8001df2:	d00f      	beq.n	8001e14 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <ADC_Enable+0x104>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4928      	ldr	r1, [pc, #160]	; (8001e9c <ADC_Enable+0x108>)
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f7fe f98a 	bl	8000114 <__udivsi3>
 8001e00:	0003      	movs	r3, r0
 8001e02:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001e04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e06:	e002      	b.n	8001e0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f9      	bne.n	8001e08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e5b      	ldrb	r3, [r3, #25]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d033      	beq.n	8001e84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f936 	bl	800108c <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e24:	e027      	b.n	8001e76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fa6e 	bl	800130c <LL_ADC_IsEnabled>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d104      	bne.n	8001e3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fa43 	bl	80012c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e3e:	f7ff f925 	bl	800108c <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d914      	bls.n	8001e76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00d      	beq.n	8001e76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	2210      	movs	r2, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d1d0      	bne.n	8001e26 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	80000017 	.word	0x80000017
 8001e94:	40012708 	.word	0x40012708
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	00030d40 	.word	0x00030d40

08001ea0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fa3e 	bl	800132e <LL_ADC_IsDisableOngoing>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fa26 	bl	800130c <LL_ADC_IsEnabled>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d046      	beq.n	8001f52 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d143      	bne.n	8001f52 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10d      	bne.n	8001ef4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fa03 	bl	80012e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eea:	f7ff f8cf 	bl	800108c <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ef2:	e028      	b.n	8001f46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	2210      	movs	r2, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e021      	b.n	8001f54 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f10:	f7ff f8bc 	bl	800108c <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d913      	bls.n	8001f46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	2210      	movs	r2, #16
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e006      	b.n	8001f54 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1de      	bne.n	8001f10 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	0002      	movs	r2, r0
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6e:	d809      	bhi.n	8001f84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	231f      	movs	r3, #31
 8001f78:	401a      	ands	r2, r3
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_EnableIRQ+0x30>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	0002      	movs	r2, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa4:	d828      	bhi.n	8001ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	33c0      	adds	r3, #192	; 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	589b      	ldr	r3, [r3, r2]
 8001fb6:	1dfa      	adds	r2, r7, #7
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	0011      	movs	r1, r2
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	00d2      	lsls	r2, r2, #3
 8001fc2:	21ff      	movs	r1, #255	; 0xff
 8001fc4:	4091      	lsls	r1, r2
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	2303      	movs	r3, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	481f      	ldr	r0, [pc, #124]	; (8002064 <__NVIC_SetPriority+0xd4>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	33c0      	adds	r3, #192	; 0xc0
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ff6:	e031      	b.n	800205c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0019      	movs	r1, r3
 8002000:	230f      	movs	r3, #15
 8002002:	400b      	ands	r3, r1
 8002004:	3b08      	subs	r3, #8
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3306      	adds	r3, #6
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	3304      	adds	r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	1dfa      	adds	r2, r7, #7
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	0011      	movs	r1, r2
 8002018:	2203      	movs	r2, #3
 800201a:	400a      	ands	r2, r1
 800201c:	00d2      	lsls	r2, r2, #3
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	4091      	lsls	r1, r2
 8002022:	000a      	movs	r2, r1
 8002024:	43d2      	mvns	r2, r2
 8002026:	401a      	ands	r2, r3
 8002028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	401a      	ands	r2, r3
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0018      	movs	r0, r3
 8002038:	2303      	movs	r3, #3
 800203a:	4003      	ands	r3, r0
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	001c      	movs	r4, r3
 8002048:	230f      	movs	r3, #15
 800204a:	4023      	ands	r3, r4
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	430a      	orrs	r2, r1
 8002052:	3306      	adds	r3, #6
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	18c3      	adds	r3, r0, r3
 8002058:	3304      	adds	r3, #4
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b003      	add	sp, #12
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1e5a      	subs	r2, r3, #1
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	045b      	lsls	r3, r3, #17
 800207c:	429a      	cmp	r2, r3
 800207e:	d301      	bcc.n	8002084 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002080:	2301      	movs	r3, #1
 8002082:	e010      	b.n	80020a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <SysTick_Config+0x44>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	3a01      	subs	r2, #1
 800208a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208c:	2301      	movs	r3, #1
 800208e:	425b      	negs	r3, r3
 8002090:	2103      	movs	r1, #3
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff ff7c 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x44>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x44>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	210f      	movs	r1, #15
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	1c02      	adds	r2, r0, #0
 80020c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	0011      	movs	r1, r2
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	46bd      	mov	sp, r7
 80020da:	b004      	add	sp, #16
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	0002      	movs	r2, r0
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff ff33 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ffaf 	bl	800206c <SysTick_Config>
 800210e:	0003      	movs	r3, r0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e056      	b.n	80021d8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7f5b      	ldrb	r3, [r3, #29]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7fe fdc7 	bl	8000cd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10c      	bne.n	800216a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <HAL_CRC_Init+0xc8>)
 8002156:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2118      	movs	r1, #24
 8002164:	438a      	bics	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e00b      	b.n	8002182 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f835 	bl	80021e4 <HAL_CRCEx_Polynomial_Set>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d001      	beq.n	8002182 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e02a      	b.n	80021d8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	795b      	ldrb	r3, [r3, #5]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	4252      	negs	r2, r2
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	e004      	b.n	80021a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6912      	ldr	r2, [r2, #16]
 800219e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2260      	movs	r2, #96	; 0x60
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	04c11db7 	.word	0x04c11db7

080021e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2317      	movs	r3, #23
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021f8:	231f      	movs	r3, #31
 80021fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	613a      	str	r2, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_CRCEx_Polynomial_Set+0x36>
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	221f      	movs	r2, #31
 800220c:	4013      	ands	r3, r2
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	40da      	lsrs	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	d0f1      	beq.n	80021fe <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b18      	cmp	r3, #24
 800221e:	d00f      	beq.n	8002240 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b18      	cmp	r3, #24
 8002224:	d824      	bhi.n	8002270 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d011      	beq.n	8002250 <HAL_CRCEx_Polynomial_Set+0x6c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d81e      	bhi.n	8002270 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_CRCEx_Polynomial_Set+0x96>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d010      	beq.n	8002260 <HAL_CRCEx_Polynomial_Set+0x7c>
 800223e:	e017      	b.n	8002270 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d91b      	bls.n	800227e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002246:	2317      	movs	r3, #23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800224e:	e016      	b.n	800227e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d915      	bls.n	8002282 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002256:	2317      	movs	r3, #23
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800225e:	e010      	b.n	8002282 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	d90f      	bls.n	8002286 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8002266:	2317      	movs	r3, #23
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800226e:	e00a      	b.n	8002286 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002270:	2317      	movs	r3, #23
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
      break;
 8002278:	e006      	b.n	8002288 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	e004      	b.n	8002288 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	e002      	b.n	8002288 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e000      	b.n	8002288 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002286:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002288:	2317      	movs	r3, #23
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2218      	movs	r2, #24
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022b0:	2317      	movs	r3, #23
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b006      	add	sp, #24
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e050      	b.n	8002374 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2225      	movs	r2, #37	; 0x25
 80022d6:	5c9b      	ldrb	r3, [r3, r2]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d008      	beq.n	80022f0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e041      	b.n	8002374 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	210e      	movs	r1, #14
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	491c      	ldr	r1, [pc, #112]	; (800237c <HAL_DMA_Abort+0xbc>)
 800230c:	400a      	ands	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_DMA_Abort+0xc0>)
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	221c      	movs	r2, #28
 800232a:	4013      	ands	r3, r2
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_DMA_Abort+0xc0>)
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800233e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002352:	490a      	ldr	r1, [pc, #40]	; (800237c <HAL_DMA_Abort+0xbc>)
 8002354:	400a      	ands	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002360:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2225      	movs	r2, #37	; 0x25
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}
 800237c:	fffffeff 	.word	0xfffffeff
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	210f      	movs	r1, #15
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2225      	movs	r2, #37	; 0x25
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d006      	beq.n	80023ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2204      	movs	r2, #4
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e049      	b.n	8002442 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	210e      	movs	r1, #14
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	438a      	bics	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	491d      	ldr	r1, [pc, #116]	; (8002450 <HAL_DMA_Abort_IT+0xcc>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_DMA_Abort_IT+0xd0>)
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	221c      	movs	r2, #28
 80023e8:	4013      	ands	r3, r2
 80023ea:	2201      	movs	r2, #1
 80023ec:	409a      	lsls	r2, r3
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_DMA_Abort_IT+0xd0>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	490f      	ldr	r1, [pc, #60]	; (8002450 <HAL_DMA_Abort_IT+0xcc>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800241e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2225      	movs	r2, #37	; 0x25
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	0010      	movs	r0, r2
 8002440:	4798      	blx	r3
    }
  }
  return status;
 8002442:	230f      	movs	r3, #15
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781b      	ldrb	r3, [r3, #0]
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	fffffeff 	.word	0xfffffeff
 8002454:	40020000 	.word	0x40020000

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e147      	b.n	80026f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d100      	bne.n	8002480 <HAL_GPIO_Init+0x28>
 800247e:	e138      	b.n	80026f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	4013      	ands	r3, r2
 8002488:	2b01      	cmp	r3, #1
 800248a:	d005      	beq.n	8002498 <HAL_GPIO_Init+0x40>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	4013      	ands	r3, r2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d130      	bne.n	80024fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	409a      	lsls	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ce:	2201      	movs	r2, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
 80024d4:	0013      	movs	r3, r2
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	2201      	movs	r2, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b03      	cmp	r3, #3
 8002504:	d017      	beq.n	8002536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d123      	bne.n	800258a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	58d3      	ldr	r3, [r2, r3]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2107      	movs	r1, #7
 800256e:	400b      	ands	r3, r1
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	401a      	ands	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_GPIO_Init+0x174>
 80025ca:	e092      	b.n	80026f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3318      	adds	r3, #24
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	589b      	ldr	r3, [r3, r2]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	220f      	movs	r2, #15
 80025e4:	409a      	lsls	r2, r3
 80025e6:	0013      	movs	r3, r2
 80025e8:	43da      	mvns	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	23a0      	movs	r3, #160	; 0xa0
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x1ca>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	; (8002714 <HAL_GPIO_Init+0x2bc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x1c6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a44      	ldr	r2, [pc, #272]	; (8002718 <HAL_GPIO_Init+0x2c0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x1c2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a43      	ldr	r2, [pc, #268]	; (800271c <HAL_GPIO_Init+0x2c4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x1be>
 8002612:	2303      	movs	r3, #3
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 8002616:	2305      	movs	r3, #5
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 8002622:	2300      	movs	r3, #0
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	2103      	movs	r1, #3
 8002628:	400a      	ands	r2, r1
 800262a:	00d2      	lsls	r2, r2, #3
 800262c:	4093      	lsls	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002634:	4936      	ldr	r1, [pc, #216]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3318      	adds	r3, #24
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	035b      	lsls	r3, r3, #13
 800265a:	4013      	ands	r3, r2
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002666:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43da      	mvns	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	039b      	lsls	r3, r3, #14
 8002684:	4013      	ands	r3, r2
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002698:	2384      	movs	r3, #132	; 0x84
 800269a:	58d3      	ldr	r3, [r2, r3]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026bc:	4914      	ldr	r1, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026be:	2284      	movs	r2, #132	; 0x84
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	58d3      	ldr	r3, [r2, r3]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ea:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	40da      	lsrs	r2, r3
 8002700:	1e13      	subs	r3, r2, #0
 8002702:	d000      	beq.n	8002706 <HAL_GPIO_Init+0x2ae>
 8002704:	e6b0      	b.n	8002468 <HAL_GPIO_Init+0x10>
  }
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b006      	add	sp, #24
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021800 	.word	0x40021800
 8002714:	50000400 	.word	0x50000400
 8002718:	50000800 	.word	0x50000800
 800271c:	50000c00 	.word	0x50000c00

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	0008      	movs	r0, r1
 800272a:	0011      	movs	r1, r2
 800272c:	1cbb      	adds	r3, r7, #2
 800272e:	1c02      	adds	r2, r0, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	1c7b      	adds	r3, r7, #1
 8002734:	1c0a      	adds	r2, r1, #0
 8002736:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002738:	1c7b      	adds	r3, r7, #1
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002740:	1cbb      	adds	r3, r7, #2
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800274a:	1cbb      	adds	r3, r7, #2
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d11f      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	0013      	movs	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	189b      	adds	r3, r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4912      	ldr	r1, [pc, #72]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800278e:	0018      	movs	r0, r3
 8002790:	f7fd fcc0 	bl	8000114 <__udivsi3>
 8002794:	0003      	movs	r3, r0
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279a:	e008      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e001      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e009      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	401a      	ands	r2, r3
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0ed      	beq.n	800279c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40007000 	.word	0x40007000
 80027d0:	fffff9ff 	.word	0xfffff9ff
 80027d4:	20000000 	.word	0x20000000
 80027d8:	000f4240 	.word	0x000f4240

080027dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	23e0      	movs	r3, #224	; 0xe0
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	4013      	ands	r3, r2
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e2f3      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d100      	bne.n	8002812 <HAL_RCC_OscConfig+0x1e>
 8002810:	e07c      	b.n	800290c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4bc3      	ldr	r3, [pc, #780]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2238      	movs	r2, #56	; 0x38
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4bc0      	ldr	r3, [pc, #768]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2203      	movs	r2, #3
 8002822:	4013      	ands	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d102      	bne.n	8002832 <HAL_RCC_OscConfig+0x3e>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d002      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4bb9      	ldr	r3, [pc, #740]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	4013      	ands	r3, r2
 8002842:	d062      	beq.n	800290a <HAL_RCC_OscConfig+0x116>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d15e      	bne.n	800290a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2ce      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x78>
 800285c:	4bb0      	ldr	r3, [pc, #704]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0249      	lsls	r1, r1, #9
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e020      	b.n	80028ae <HAL_RCC_OscConfig+0xba>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	23a0      	movs	r3, #160	; 0xa0
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	429a      	cmp	r2, r3
 8002876:	d10e      	bne.n	8002896 <HAL_RCC_OscConfig+0xa2>
 8002878:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4ba8      	ldr	r3, [pc, #672]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	02c9      	lsls	r1, r1, #11
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4ba6      	ldr	r3, [pc, #664]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0249      	lsls	r1, r1, #9
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0xba>
 8002896:	4ba2      	ldr	r3, [pc, #648]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba1      	ldr	r3, [pc, #644]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800289c:	49a1      	ldr	r1, [pc, #644]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	4b9f      	ldr	r3, [pc, #636]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	499f      	ldr	r1, [pc, #636]	; (8002b28 <HAL_RCC_OscConfig+0x334>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fbe9 	bl	800108c <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbe4 	bl	800108c <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e28d      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4b93      	ldr	r3, [pc, #588]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	4013      	ands	r3, r2
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xcc>
 80028de:	e015      	b.n	800290c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fbd4 	bl	800108c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ea:	f7fe fbcf 	bl	800108c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e278      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fc:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0xf6>
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d100      	bne.n	8002918 <HAL_RCC_OscConfig+0x124>
 8002916:	e099      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2238      	movs	r2, #56	; 0x38
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2203      	movs	r2, #3
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x144>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d002      	beq.n	800293e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d135      	bne.n	80029aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293e:	4b78      	ldr	r3, [pc, #480]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4013      	ands	r3, r2
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x162>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e24b      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x338>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	4b6e      	ldr	r3, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d112      	bne.n	8002998 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002972:	4b6b      	ldr	r3, [pc, #428]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x33c>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002986:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	2207      	movs	r2, #7
 800298e:	4013      	ands	r3, r2
 8002990:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x340>)
 8002992:	40da      	lsrs	r2, r3
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x344>)
 8002996:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_OscConfig+0x348>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fb19 	bl	8000fd4 <HAL_InitTick>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d051      	beq.n	8002a4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e221      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d030      	beq.n	8002a14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <HAL_RCC_OscConfig+0x33c>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0049      	lsls	r1, r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb5a 	bl	800108c <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fb55 	bl	800108c <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1fe      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4013      	ands	r3, r2
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_RCC_OscConfig+0x338>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e01b      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	4949      	ldr	r1, [pc, #292]	; (8002b40 <HAL_RCC_OscConfig+0x34c>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fb34 	bl	800108c <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fb2f 	bl	800108c <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1d8      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3c:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x236>
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2208      	movs	r2, #8
 8002a52:	4013      	ands	r3, r2
 8002a54:	d047      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2238      	movs	r2, #56	; 0x38
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b18      	cmp	r3, #24
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d138      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e1ba      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d019      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fafe 	bl	800108c <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe faf9 	bl	800108c <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1a2      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d0f1      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2a2>
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fae4 	bl	800108c <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe fadf 	bl	800108c <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e188      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d1f1      	bne.n	8002aca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d100      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2fe>
 8002af0:	e0c6      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2238      	movs	r2, #56	; 0x38
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d11e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x31e>
 8002b10:	e0b6      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <HAL_RCC_OscConfig+0x328>
 8002b1a:	e0b1      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e166      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	fffeffff 	.word	0xfffeffff
 8002b28:	fffbffff 	.word	0xfffbffff
 8002b2c:	ffff80ff 	.word	0xffff80ff
 8002b30:	ffffc7ff 	.word	0xffffc7ff
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b44:	4bac      	ldr	r3, [pc, #688]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x360>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x362>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d011      	beq.n	8002b7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4ba7      	ldr	r3, [pc, #668]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5e:	4ba6      	ldr	r3, [pc, #664]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	0549      	lsls	r1, r1, #21
 8002b64:	430a      	orrs	r2, r1
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b68:	4ba3      	ldr	r3, [pc, #652]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	055b      	lsls	r3, r3, #21
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7e:	4b9f      	ldr	r3, [pc, #636]	; (8002dfc <HAL_RCC_OscConfig+0x608>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8a:	4b9c      	ldr	r3, [pc, #624]	; (8002dfc <HAL_RCC_OscConfig+0x608>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b9b      	ldr	r3, [pc, #620]	; (8002dfc <HAL_RCC_OscConfig+0x608>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa78 	bl	800108c <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fe fa73 	bl	800108c <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e11c      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x608>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3e2>
 8002bc8:	4b8b      	ldr	r3, [pc, #556]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bcc:	4b8a      	ldr	r3, [pc, #552]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x41c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x404>
 8002bde:	4b86      	ldr	r3, [pc, #536]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002be0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002be4:	2104      	movs	r1, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bea:	4b83      	ldr	r3, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bee:	4b82      	ldr	r3, [pc, #520]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0x41c>
 8002bf8:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c04:	4b7c      	ldr	r3, [pc, #496]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c08:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d014      	beq.n	8002c42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fa38 	bl	800108c <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fa33 	bl	800108c <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a74      	ldr	r2, [pc, #464]	; (8002e00 <HAL_RCC_OscConfig+0x60c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0db      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	4b70      	ldr	r3, [pc, #448]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x42e>
 8002c40:	e013      	b.n	8002c6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fa23 	bl	800108c <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fa1e 	bl	800108c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x60c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0c6      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c60:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c6a:	231f      	movs	r3, #31
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c78:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	4962      	ldr	r1, [pc, #392]	; (8002e04 <HAL_RCC_OscConfig+0x610>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x496>
 8002c88:	e0b0      	b.n	8002dec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2238      	movs	r2, #56	; 0x38
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d100      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4a4>
 8002c96:	e078      	b.n	8002d8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d153      	bne.n	8002d48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002ca6:	4958      	ldr	r1, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x614>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f9ee 	bl	800108c <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f9e9 	bl	800108c <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e092      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	049b      	lsls	r3, r3, #18
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	4b3e      	ldr	r3, [pc, #248]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b3c      	ldr	r3, [pc, #240]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0449      	lsls	r1, r1, #17
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d10:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0549      	lsls	r1, r1, #21
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f9b5 	bl	800108c <HAL_GetTick>
 8002d22:	0003      	movs	r3, r0
 8002d24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe f9b0 	bl	800108c <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e059      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	049b      	lsls	r3, r3, #18
 8002d42:	4013      	ands	r3, r2
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x534>
 8002d46:	e051      	b.n	8002dec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d4e:	492e      	ldr	r1, [pc, #184]	; (8002e08 <HAL_RCC_OscConfig+0x614>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe f99a 	bl	800108c <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe f995 	bl	800108c <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e03e      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	049b      	lsls	r3, r3, #18
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d82:	4923      	ldr	r1, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x61c>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	e030      	b.n	8002dec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02b      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_RCC_OscConfig+0x604>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	401a      	ands	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d11e      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2270      	movs	r2, #112	; 0x70
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d117      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	23fe      	movs	r3, #254	; 0xfe
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10e      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	23f8      	movs	r3, #248	; 0xf8
 8002dce:	039b      	lsls	r3, r3, #14
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0f5b      	lsrs	r3, r3, #29
 8002dde:	075a      	lsls	r2, r3, #29
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b008      	add	sp, #32
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	00001388 	.word	0x00001388
 8002e04:	efffffff 	.word	0xefffffff
 8002e08:	feffffff 	.word	0xfeffffff
 8002e0c:	1fc1808c 	.word	0x1fc1808c
 8002e10:	effefffc 	.word	0xeffefffc

08002e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0e9      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	4013      	ands	r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d91e      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b73      	ldr	r3, [pc, #460]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	4b70      	ldr	r3, [pc, #448]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e48:	f7fe f920 	bl	800108c <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e50:	e009      	b.n	8002e66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe f91b 	bl	800108c <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_RCC_ClockConfig+0x1f4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0ca      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1ee      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	d006      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e88:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	21e0      	movs	r1, #224	; 0xe0
 8002e90:	01c9      	lsls	r1, r1, #7
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a5d      	ldr	r2, [pc, #372]	; (8003010 <HAL_RCC_ClockConfig+0x1fc>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d057      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	029b      	lsls	r3, r3, #10
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d12b      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e097      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	049b      	lsls	r3, r3, #18
 8002edc:	4013      	ands	r3, r2
 8002ede:	d11f      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e08b      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d113      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e07f      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e074      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	4b3e      	ldr	r3, [pc, #248]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e06d      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2207      	movs	r2, #7
 8002f26:	4393      	bics	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe f8aa 	bl	800108c <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	e009      	b.n	8002f52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3e:	f7fe f8a5 	bl	800108c <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <HAL_RCC_ClockConfig+0x1f4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e054      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2238      	movs	r2, #56	; 0x38
 8002f58:	401a      	ands	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1ec      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2207      	movs	r2, #7
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d21e      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2207      	movs	r2, #7
 8002f78:	4393      	bics	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f84:	f7fe f882 	bl	800108c <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f8c:	e009      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8e:	f7fe f87d 	bl	800108c <HAL_GetTick>
 8002f92:	0002      	movs	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_RCC_ClockConfig+0x1f4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e02c      	b.n	8002ffc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	4013      	ands	r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_RCC_ClockConfig+0x200>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fce:	f000 f829 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fd2:	0001      	movs	r1, r0
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_ClockConfig+0x1f8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	220f      	movs	r2, #15
 8002fdc:	401a      	ands	r2, r3
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x204>)
 8002fe0:	0092      	lsls	r2, r2, #2
 8002fe2:	58d3      	ldr	r3, [r2, r3]
 8002fe4:	221f      	movs	r2, #31
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	000a      	movs	r2, r1
 8002fea:	40da      	lsrs	r2, r3
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x208>)
 8002fee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x20c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7fd ffed 	bl	8000fd4 <HAL_InitTick>
 8002ffa:	0003      	movs	r3, r0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40022000 	.word	0x40022000
 8003008:	00001388 	.word	0x00001388
 800300c:	40021000 	.word	0x40021000
 8003010:	fffff0ff 	.word	0xfffff0ff
 8003014:	ffff8fff 	.word	0xffff8fff
 8003018:	08005080 	.word	0x08005080
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2238      	movs	r2, #56	; 0x38
 8003030:	4013      	ands	r3, r2
 8003032:	d10f      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003034:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0adb      	lsrs	r3, r3, #11
 800303a:	2207      	movs	r2, #7
 800303c:	4013      	ands	r3, r2
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	0013      	movs	r3, r2
 8003044:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	4835      	ldr	r0, [pc, #212]	; (8003120 <HAL_RCC_GetSysClockFreq+0xfc>)
 800304a:	f7fd f863 	bl	8000114 <__udivsi3>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e05d      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2238      	movs	r2, #56	; 0x38
 800305a:	4013      	ands	r3, r2
 800305c:	2b08      	cmp	r3, #8
 800305e:	d102      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_GetSysClockFreq+0x100>)
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	e054      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2238      	movs	r2, #56	; 0x38
 800306c:	4013      	ands	r3, r2
 800306e:	2b10      	cmp	r3, #16
 8003070:	d138      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	2207      	movs	r2, #7
 8003084:	4013      	ands	r3, r2
 8003086:	3301      	adds	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4824      	ldr	r0, [pc, #144]	; (8003124 <HAL_RCC_GetSysClockFreq+0x100>)
 8003094:	f7fd f83e 	bl	8000114 <__udivsi3>
 8003098:	0003      	movs	r3, r0
 800309a:	0019      	movs	r1, r3
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	227f      	movs	r2, #127	; 0x7f
 80030a4:	4013      	ands	r3, r2
 80030a6:	434b      	muls	r3, r1
 80030a8:	617b      	str	r3, [r7, #20]
        break;
 80030aa:	e00d      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	481c      	ldr	r0, [pc, #112]	; (8003120 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030b0:	f7fd f830 	bl	8000114 <__udivsi3>
 80030b4:	0003      	movs	r3, r0
 80030b6:	0019      	movs	r1, r3
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	227f      	movs	r2, #127	; 0x7f
 80030c0:	4013      	ands	r3, r2
 80030c2:	434b      	muls	r3, r1
 80030c4:	617b      	str	r3, [r7, #20]
        break;
 80030c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0f5b      	lsrs	r3, r3, #29
 80030ce:	2207      	movs	r2, #7
 80030d0:	4013      	ands	r3, r2
 80030d2:	3301      	adds	r3, #1
 80030d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f7fd f81b 	bl	8000114 <__udivsi3>
 80030de:	0003      	movs	r3, r0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	e015      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2238      	movs	r2, #56	; 0x38
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d103      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2238      	movs	r2, #56	; 0x38
 80030fe:	4013      	ands	r3, r2
 8003100:	2b18      	cmp	r3, #24
 8003102:	d103      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003104:	23fa      	movs	r3, #250	; 0xfa
 8003106:	01db      	lsls	r3, r3, #7
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e001      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003110:	693b      	ldr	r3, [r7, #16]
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b006      	add	sp, #24
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	40021000 	.word	0x40021000
 8003120:	00f42400 	.word	0x00f42400
 8003124:	007a1200 	.word	0x007a1200

08003128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b5b0      	push	{r4, r5, r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	0004      	movs	r4, r0
 8003146:	f7ff fb49 	bl	80027dc <LL_RCC_GetAPB1Prescaler>
 800314a:	0003      	movs	r3, r0
 800314c:	0b1a      	lsrs	r2, r3, #12
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	58d3      	ldr	r3, [r2, r3]
 8003154:	221f      	movs	r2, #31
 8003156:	4013      	ands	r3, r2
 8003158:	40dc      	lsrs	r4, r3
 800315a:	0023      	movs	r3, r4
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bdb0      	pop	{r4, r5, r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	080050c0 	.word	0x080050c0

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003170:	2313      	movs	r3, #19
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003178:	2312      	movs	r3, #18
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	4013      	ands	r3, r2
 800318a:	d100      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800318c:	e0a3      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2011      	movs	r0, #17
 8003190:	183b      	adds	r3, r7, r0
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b86      	ldr	r3, [pc, #536]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	055b      	lsls	r3, r3, #21
 800319e:	4013      	ands	r3, r2
 80031a0:	d110      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b83      	ldr	r3, [pc, #524]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a6:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0549      	lsls	r1, r1, #21
 80031ac:	430a      	orrs	r2, r1
 80031ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80031b0:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	055b      	lsls	r3, r3, #21
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	183b      	adds	r3, r7, r0
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b7a      	ldr	r3, [pc, #488]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	0049      	lsls	r1, r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d2:	f7fd ff5b 	bl	800108c <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031da:	e00b      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fd ff56 	bl	800108c <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d904      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80031ea:	2313      	movs	r3, #19
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	2203      	movs	r2, #3
 80031f0:	701a      	strb	r2, [r3, #0]
        break;
 80031f2:	e005      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d0ed      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003200:	2313      	movs	r3, #19
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d154      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800320a:	4b69      	ldr	r3, [pc, #420]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800320c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800320e:	23c0      	movs	r3, #192	; 0xc0
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4013      	ands	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d019      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	429a      	cmp	r2, r3
 8003224:	d014      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003226:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003230:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003234:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	0249      	lsls	r1, r1, #9
 800323a:	430a      	orrs	r2, r1
 800323c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003240:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003244:	495d      	ldr	r1, [pc, #372]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003246:	400a      	ands	r2, r1
 8003248:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800324a:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d016      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd ff18 	bl	800108c <HAL_GetTick>
 800325c:	0003      	movs	r3, r0
 800325e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003260:	e00c      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fd ff13 	bl	800108c <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d904      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003272:	2313      	movs	r3, #19
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2203      	movs	r2, #3
 8003278:	701a      	strb	r2, [r3, #0]
            break;
 800327a:	e004      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	2202      	movs	r2, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d0ed      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003286:	2313      	movs	r3, #19
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003290:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	4a48      	ldr	r2, [pc, #288]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003296:	4013      	ands	r3, r2
 8003298:	0019      	movs	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032a0:	430a      	orrs	r2, r1
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a4:	e00c      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a6:	2312      	movs	r3, #18
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2213      	movs	r2, #19
 80032ac:	18ba      	adds	r2, r7, r2
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e005      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	2312      	movs	r3, #18
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2213      	movs	r2, #19
 80032ba:	18ba      	adds	r2, r7, r2
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c0:	2311      	movs	r3, #17
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d105      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032d0:	493c      	ldr	r1, [pc, #240]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e0:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	2203      	movs	r2, #3
 80032e6:	4393      	bics	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032f0:	430a      	orrs	r2, r1
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2202      	movs	r2, #2
 80032fa:	4013      	ands	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	220c      	movs	r2, #12
 8003304:	4393      	bics	r3, r2
 8003306:	0019      	movs	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800330e:	430a      	orrs	r2, r1
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2220      	movs	r2, #32
 8003318:	4013      	ands	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800332c:	430a      	orrs	r2, r1
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	01db      	lsls	r3, r3, #7
 8003338:	4013      	ands	r3, r2
 800333a:	d015      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	0899      	lsrs	r1, r3, #2
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800334a:	430a      	orrs	r2, r1
 800334c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	05db      	lsls	r3, r3, #23
 8003356:	429a      	cmp	r2, r3
 8003358:	d106      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0249      	lsls	r1, r1, #9
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4013      	ands	r3, r2
 8003372:	d016      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	4013      	ands	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003384:	430a      	orrs	r2, r1
 8003386:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	429a      	cmp	r2, r3
 8003392:	d106      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	0249      	lsls	r1, r1, #9
 800339e:	430a      	orrs	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033a2:	2312      	movs	r3, #18
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b006      	add	sp, #24
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
 80033b8:	fffffcff 	.word	0xfffffcff
 80033bc:	fffeffff 	.word	0xfffeffff
 80033c0:	00001388 	.word	0x00001388
 80033c4:	efffffff 	.word	0xefffffff
 80033c8:	ffffcfff 	.word	0xffffcfff
 80033cc:	ffff3fff 	.word	0xffff3fff

080033d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e046      	b.n	8003470 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2288      	movs	r2, #136	; 0x88
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2284      	movs	r2, #132	; 0x84
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fd fc8a 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2288      	movs	r2, #136	; 0x88
 8003400:	2124      	movs	r1, #36	; 0x24
 8003402:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	438a      	bics	r2, r1
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fc0e 	bl	8003c38 <UART_SetConfig>
 800341c:	0003      	movs	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e024      	b.n	8003470 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 fda5 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	490d      	ldr	r1, [pc, #52]	; (8003478 <HAL_UART_Init+0xa8>)
 8003442:	400a      	ands	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	212a      	movs	r1, #42	; 0x2a
 8003452:	438a      	bics	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2101      	movs	r1, #1
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 fe3d 	bl	80040e8 <UART_CheckIdleState>
 800346e:	0003      	movs	r3, r0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	ffffb7ff 	.word	0xffffb7ff

0800347c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	1dbb      	adds	r3, r7, #6
 800348a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2288      	movs	r2, #136	; 0x88
 8003490:	589b      	ldr	r3, [r3, r2]
 8003492:	2b20      	cmp	r3, #32
 8003494:	d000      	beq.n	8003498 <HAL_UART_Transmit+0x1c>
 8003496:	e088      	b.n	80035aa <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_Transmit+0x2a>
 800349e:	1dbb      	adds	r3, r7, #6
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e080      	b.n	80035ac <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	015b      	lsls	r3, r3, #5
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d109      	bne.n	80034ca <HAL_UART_Transmit+0x4e>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	d001      	beq.n	80034ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e070      	b.n	80035ac <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2290      	movs	r2, #144	; 0x90
 80034ce:	2100      	movs	r1, #0
 80034d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2288      	movs	r2, #136	; 0x88
 80034d6:	2121      	movs	r1, #33	; 0x21
 80034d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034da:	f7fd fdd7 	bl	800108c <HAL_GetTick>
 80034de:	0003      	movs	r3, r0
 80034e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1dba      	adds	r2, r7, #6
 80034e6:	2154      	movs	r1, #84	; 0x54
 80034e8:	8812      	ldrh	r2, [r2, #0]
 80034ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1dba      	adds	r2, r7, #6
 80034f0:	2156      	movs	r1, #86	; 0x56
 80034f2:	8812      	ldrh	r2, [r2, #0]
 80034f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	015b      	lsls	r3, r3, #5
 80034fe:	429a      	cmp	r2, r3
 8003500:	d108      	bne.n	8003514 <HAL_UART_Transmit+0x98>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e003      	b.n	800351c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800351c:	e02c      	b.n	8003578 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	0013      	movs	r3, r2
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	f000 fe2a 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e039      	b.n	80035ac <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	001a      	movs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	05d2      	lsls	r2, r2, #23
 800354a:	0dd2      	lsrs	r2, r2, #23
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2256      	movs	r2, #86	; 0x56
 800356a:	5a9b      	ldrh	r3, [r3, r2]
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b299      	uxth	r1, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2256      	movs	r2, #86	; 0x56
 8003576:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2256      	movs	r2, #86	; 0x56
 800357c:	5a9b      	ldrh	r3, [r3, r2]
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1cc      	bne.n	800351e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	0013      	movs	r3, r2
 800358e:	2200      	movs	r2, #0
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	f000 fdf7 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e006      	b.n	80035ac <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2288      	movs	r2, #136	; 0x88
 80035a2:	2120      	movs	r1, #32
 80035a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b008      	add	sp, #32
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b0aa      	sub	sp, #168	; 0xa8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	22a4      	movs	r2, #164	; 0xa4
 80035c4:	18b9      	adds	r1, r7, r2
 80035c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	20a0      	movs	r0, #160	; 0xa0
 80035d0:	1839      	adds	r1, r7, r0
 80035d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	249c      	movs	r4, #156	; 0x9c
 80035dc:	1939      	adds	r1, r7, r4
 80035de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035e0:	0011      	movs	r1, r2
 80035e2:	18bb      	adds	r3, r7, r2
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4aa2      	ldr	r2, [pc, #648]	; (8003870 <HAL_UART_IRQHandler+0x2bc>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	2298      	movs	r2, #152	; 0x98
 80035ec:	18bd      	adds	r5, r7, r2
 80035ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80035f0:	18bb      	adds	r3, r7, r2
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11a      	bne.n	800362e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2220      	movs	r2, #32
 80035fe:	4013      	ands	r3, r2
 8003600:	d015      	beq.n	800362e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003602:	183b      	adds	r3, r7, r0
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2220      	movs	r2, #32
 8003608:	4013      	ands	r3, r2
 800360a:	d105      	bne.n	8003618 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800360c:	193b      	adds	r3, r7, r4
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	055b      	lsls	r3, r3, #21
 8003614:	4013      	ands	r3, r2
 8003616:	d00a      	beq.n	800362e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	2b00      	cmp	r3, #0
 800361e:	d100      	bne.n	8003622 <HAL_UART_IRQHandler+0x6e>
 8003620:	e2dc      	b.n	8003bdc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	0010      	movs	r0, r2
 800362a:	4798      	blx	r3
      }
      return;
 800362c:	e2d6      	b.n	8003bdc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800362e:	2398      	movs	r3, #152	; 0x98
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d100      	bne.n	800363a <HAL_UART_IRQHandler+0x86>
 8003638:	e122      	b.n	8003880 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800363a:	239c      	movs	r3, #156	; 0x9c
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a8c      	ldr	r2, [pc, #560]	; (8003874 <HAL_UART_IRQHandler+0x2c0>)
 8003642:	4013      	ands	r3, r2
 8003644:	d106      	bne.n	8003654 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003646:	23a0      	movs	r3, #160	; 0xa0
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a8a      	ldr	r2, [pc, #552]	; (8003878 <HAL_UART_IRQHandler+0x2c4>)
 800364e:	4013      	ands	r3, r2
 8003650:	d100      	bne.n	8003654 <HAL_UART_IRQHandler+0xa0>
 8003652:	e115      	b.n	8003880 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003654:	23a4      	movs	r3, #164	; 0xa4
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	4013      	ands	r3, r2
 800365e:	d012      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
 8003660:	23a0      	movs	r3, #160	; 0xa0
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4013      	ands	r3, r2
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2290      	movs	r2, #144	; 0x90
 800367a:	589b      	ldr	r3, [r3, r2]
 800367c:	2201      	movs	r2, #1
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2190      	movs	r1, #144	; 0x90
 8003684:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003686:	23a4      	movs	r3, #164	; 0xa4
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2202      	movs	r2, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d011      	beq.n	80036b6 <HAL_UART_IRQHandler+0x102>
 8003692:	239c      	movs	r3, #156	; 0x9c
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	d00b      	beq.n	80036b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2202      	movs	r2, #2
 80036a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2290      	movs	r2, #144	; 0x90
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	2204      	movs	r2, #4
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2190      	movs	r1, #144	; 0x90
 80036b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036b6:	23a4      	movs	r3, #164	; 0xa4
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	4013      	ands	r3, r2
 80036c0:	d011      	beq.n	80036e6 <HAL_UART_IRQHandler+0x132>
 80036c2:	239c      	movs	r3, #156	; 0x9c
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4013      	ands	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2290      	movs	r2, #144	; 0x90
 80036da:	589b      	ldr	r3, [r3, r2]
 80036dc:	2202      	movs	r2, #2
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2190      	movs	r1, #144	; 0x90
 80036e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036e6:	23a4      	movs	r3, #164	; 0xa4
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	4013      	ands	r3, r2
 80036f0:	d017      	beq.n	8003722 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036f2:	23a0      	movs	r3, #160	; 0xa0
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4013      	ands	r3, r2
 80036fc:	d105      	bne.n	800370a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036fe:	239c      	movs	r3, #156	; 0x9c
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_UART_IRQHandler+0x2c0>)
 8003706:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2208      	movs	r2, #8
 8003710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2290      	movs	r2, #144	; 0x90
 8003716:	589b      	ldr	r3, [r3, r2]
 8003718:	2208      	movs	r2, #8
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2190      	movs	r1, #144	; 0x90
 8003720:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003722:	23a4      	movs	r3, #164	; 0xa4
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4013      	ands	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_UART_IRQHandler+0x1a4>
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	04db      	lsls	r3, r3, #19
 800373a:	4013      	ands	r3, r2
 800373c:	d00c      	beq.n	8003758 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2290      	movs	r2, #144	; 0x90
 800374c:	589b      	ldr	r3, [r3, r2]
 800374e:	2220      	movs	r2, #32
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2190      	movs	r1, #144	; 0x90
 8003756:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2290      	movs	r2, #144	; 0x90
 800375c:	589b      	ldr	r3, [r3, r2]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d100      	bne.n	8003764 <HAL_UART_IRQHandler+0x1b0>
 8003762:	e23d      	b.n	8003be0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003764:	23a4      	movs	r3, #164	; 0xa4
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2220      	movs	r2, #32
 800376c:	4013      	ands	r3, r2
 800376e:	d015      	beq.n	800379c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003770:	23a0      	movs	r3, #160	; 0xa0
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2220      	movs	r2, #32
 8003778:	4013      	ands	r3, r2
 800377a:	d106      	bne.n	800378a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800377c:	239c      	movs	r3, #156	; 0x9c
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	055b      	lsls	r3, r3, #21
 8003786:	4013      	ands	r3, r2
 8003788:	d008      	beq.n	800379c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	0010      	movs	r0, r2
 800379a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2290      	movs	r2, #144	; 0x90
 80037a0:	589b      	ldr	r3, [r3, r2]
 80037a2:	2194      	movs	r1, #148	; 0x94
 80037a4:	187a      	adds	r2, r7, r1
 80037a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d004      	beq.n	80037c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2228      	movs	r2, #40	; 0x28
 80037bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037be:	d04c      	beq.n	800385a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 fda6 	bl	8004314 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d13c      	bne.n	8003850 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d6:	f3ef 8310 	mrs	r3, PRIMASK
 80037da:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80037dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	2090      	movs	r0, #144	; 0x90
 80037e0:	183a      	adds	r2, r7, r0
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	2301      	movs	r3, #1
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	438a      	bics	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	183b      	adds	r3, r7, r0
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	589b      	ldr	r3, [r3, r2]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d016      	beq.n	8003846 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	589b      	ldr	r3, [r3, r2]
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_UART_IRQHandler+0x2c8>)
 8003820:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	589b      	ldr	r3, [r3, r2]
 8003828:	0018      	movs	r0, r3
 800382a:	f7fe fdab 	bl	8002384 <HAL_DMA_Abort_IT>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d01c      	beq.n	800386c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	589b      	ldr	r3, [r3, r2]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	5852      	ldr	r2, [r2, r1]
 8003840:	0010      	movs	r0, r2
 8003842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	e012      	b.n	800386c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f000 f9e1 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384e:	e00d      	b.n	800386c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f9dc 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e008      	b.n	800386c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 f9d7 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2290      	movs	r2, #144	; 0x90
 8003866:	2100      	movs	r1, #0
 8003868:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800386a:	e1b9      	b.n	8003be0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	46c0      	nop			; (mov r8, r8)
    return;
 800386e:	e1b7      	b.n	8003be0 <HAL_UART_IRQHandler+0x62c>
 8003870:	0000080f 	.word	0x0000080f
 8003874:	10000001 	.word	0x10000001
 8003878:	04000120 	.word	0x04000120
 800387c:	080043e1 	.word	0x080043e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d000      	beq.n	800388a <HAL_UART_IRQHandler+0x2d6>
 8003888:	e13e      	b.n	8003b08 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800388a:	23a4      	movs	r3, #164	; 0xa4
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	4013      	ands	r3, r2
 8003894:	d100      	bne.n	8003898 <HAL_UART_IRQHandler+0x2e4>
 8003896:	e137      	b.n	8003b08 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003898:	23a0      	movs	r3, #160	; 0xa0
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	4013      	ands	r3, r2
 80038a2:	d100      	bne.n	80038a6 <HAL_UART_IRQHandler+0x2f2>
 80038a4:	e130      	b.n	8003b08 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2210      	movs	r2, #16
 80038ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d000      	beq.n	80038be <HAL_UART_IRQHandler+0x30a>
 80038bc:	e0a4      	b.n	8003a08 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2280      	movs	r2, #128	; 0x80
 80038c2:	589b      	ldr	r3, [r3, r2]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	217e      	movs	r1, #126	; 0x7e
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d100      	bne.n	80038d8 <HAL_UART_IRQHandler+0x324>
 80038d6:	e185      	b.n	8003be4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	225c      	movs	r2, #92	; 0x5c
 80038dc:	5a9b      	ldrh	r3, [r3, r2]
 80038de:	187a      	adds	r2, r7, r1
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d300      	bcc.n	80038e8 <HAL_UART_IRQHandler+0x334>
 80038e6:	e17d      	b.n	8003be4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	187a      	adds	r2, r7, r1
 80038ec:	215e      	movs	r1, #94	; 0x5e
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	589b      	ldr	r3, [r3, r2]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2220      	movs	r2, #32
 80038fe:	4013      	ands	r3, r2
 8003900:	d170      	bne.n	80039e4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800390a:	67bb      	str	r3, [r7, #120]	; 0x78
 800390c:	2301      	movs	r3, #1
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	49b4      	ldr	r1, [pc, #720]	; (8003bf4 <HAL_UART_IRQHandler+0x640>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003934:	f3ef 8310 	mrs	r3, PRIMASK
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800393a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393c:	677b      	str	r3, [r7, #116]	; 0x74
 800393e:	2301      	movs	r3, #1
 8003940:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	438a      	bics	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	673b      	str	r3, [r7, #112]	; 0x70
 8003970:	2301      	movs	r3, #1
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2140      	movs	r1, #64	; 0x40
 8003988:	438a      	bics	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	228c      	movs	r2, #140	; 0x8c
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80039ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039b0:	2301      	movs	r3, #1
 80039b2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2110      	movs	r1, #16
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	589b      	ldr	r3, [r3, r2]
 80039de:	0018      	movs	r0, r3
 80039e0:	f7fe fc6e 	bl	80022c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	225c      	movs	r2, #92	; 0x5c
 80039ee:	5a9a      	ldrh	r2, [r3, r2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	215e      	movs	r1, #94	; 0x5e
 80039f4:	5a5b      	ldrh	r3, [r3, r1]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f90d 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a06:	e0ed      	b.n	8003be4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	225c      	movs	r2, #92	; 0x5c
 8003a0c:	5a99      	ldrh	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	225e      	movs	r2, #94	; 0x5e
 8003a12:	5a9b      	ldrh	r3, [r3, r2]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	208e      	movs	r0, #142	; 0x8e
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	1a8a      	subs	r2, r1, r2
 8003a1c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	225e      	movs	r2, #94	; 0x5e
 8003a22:	5a9b      	ldrh	r3, [r3, r2]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <HAL_UART_IRQHandler+0x478>
 8003a2a:	e0dd      	b.n	8003be8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003a2c:	183b      	adds	r3, r7, r0
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d100      	bne.n	8003a36 <HAL_UART_IRQHandler+0x482>
 8003a34:	e0d8      	b.n	8003be8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a36:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a3e:	2488      	movs	r4, #136	; 0x88
 8003a40:	193a      	adds	r2, r7, r4
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4967      	ldr	r1, [pc, #412]	; (8003bf8 <HAL_UART_IRQHandler+0x644>)
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	193b      	adds	r3, r7, r4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a74:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a76:	2484      	movs	r4, #132	; 0x84
 8003a78:	193a      	adds	r2, r7, r4
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	495a      	ldr	r1, [pc, #360]	; (8003bfc <HAL_UART_IRQHandler+0x648>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	228c      	movs	r2, #140	; 0x8c
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aba:	f3ef 8310 	mrs	r3, PRIMASK
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac2:	2480      	movs	r4, #128	; 0x80
 8003ac4:	193a      	adds	r2, r7, r4
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2110      	movs	r1, #16
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af8:	183b      	adds	r3, r7, r0
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0011      	movs	r1, r2
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 f88d 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b06:	e06f      	b.n	8003be8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b08:	23a4      	movs	r3, #164	; 0xa4
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	035b      	lsls	r3, r3, #13
 8003b12:	4013      	ands	r3, r2
 8003b14:	d010      	beq.n	8003b38 <HAL_UART_IRQHandler+0x584>
 8003b16:	239c      	movs	r3, #156	; 0x9c
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	03db      	lsls	r3, r3, #15
 8003b20:	4013      	ands	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	0352      	lsls	r2, r2, #13
 8003b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 fc98 	bl	8004466 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b36:	e05a      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b38:	23a4      	movs	r3, #164	; 0xa4
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	4013      	ands	r3, r2
 8003b42:	d016      	beq.n	8003b72 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b44:	23a0      	movs	r3, #160	; 0xa0
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d106      	bne.n	8003b5e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b50:	239c      	movs	r3, #156	; 0x9c
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d042      	beq.n	8003bec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	0010      	movs	r0, r2
 8003b6e:	4798      	blx	r3
    }
    return;
 8003b70:	e03c      	b.n	8003bec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b72:	23a4      	movs	r3, #164	; 0xa4
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00a      	beq.n	8003b94 <HAL_UART_IRQHandler+0x5e0>
 8003b7e:	23a0      	movs	r3, #160	; 0xa0
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2240      	movs	r2, #64	; 0x40
 8003b86:	4013      	ands	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 fc3e 	bl	800440e <UART_EndTransmit_IT>
    return;
 8003b92:	e02c      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b94:	23a4      	movs	r3, #164	; 0xa4
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0x606>
 8003ba2:	23a0      	movs	r3, #160	; 0xa0
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	05db      	lsls	r3, r3, #23
 8003bac:	4013      	ands	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 fc67 	bl	8004486 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bb8:	e019      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003bba:	23a4      	movs	r3, #164	; 0xa4
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	045b      	lsls	r3, r3, #17
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d012      	beq.n	8003bee <HAL_UART_IRQHandler+0x63a>
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da0d      	bge.n	8003bee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fc4e 	bl	8004476 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bda:	e008      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
      return;
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	e006      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
    return;
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	e004      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
      return;
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	e002      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
      return;
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	e000      	b.n	8003bee <HAL_UART_IRQHandler+0x63a>
    return;
 8003bec:	46c0      	nop			; (mov r8, r8)
  }
}
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b02a      	add	sp, #168	; 0xa8
 8003bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf4:	fffffeff 	.word	0xfffffeff
 8003bf8:	fffffedf 	.word	0xfffffedf
 8003bfc:	effffffe 	.word	0xeffffffe

08003c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	000a      	movs	r2, r1
 8003c2a:	1cbb      	adds	r3, r7, #2
 8003c2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b002      	add	sp, #8
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c40:	231a      	movs	r3, #26
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4abc      	ldr	r2, [pc, #752]	; (8003f58 <UART_SetConfig+0x320>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4ab7      	ldr	r2, [pc, #732]	; (8003f5c <UART_SetConfig+0x324>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4aae      	ldr	r2, [pc, #696]	; (8003f60 <UART_SetConfig+0x328>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	220f      	movs	r2, #15
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4aa4      	ldr	r2, [pc, #656]	; (8003f64 <UART_SetConfig+0x32c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d127      	bne.n	8003d26 <UART_SetConfig+0xee>
 8003cd6:	4ba4      	ldr	r3, [pc, #656]	; (8003f68 <UART_SetConfig+0x330>)
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d017      	beq.n	8003d12 <UART_SetConfig+0xda>
 8003ce2:	d81b      	bhi.n	8003d1c <UART_SetConfig+0xe4>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d00a      	beq.n	8003cfe <UART_SetConfig+0xc6>
 8003ce8:	d818      	bhi.n	8003d1c <UART_SetConfig+0xe4>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <UART_SetConfig+0xbc>
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d00a      	beq.n	8003d08 <UART_SetConfig+0xd0>
 8003cf2:	e013      	b.n	8003d1c <UART_SetConfig+0xe4>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e058      	b.n	8003db0 <UART_SetConfig+0x178>
 8003cfe:	231b      	movs	r3, #27
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2202      	movs	r2, #2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e053      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d08:	231b      	movs	r3, #27
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e04e      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d12:	231b      	movs	r3, #27
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2208      	movs	r2, #8
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e049      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d1c:	231b      	movs	r3, #27
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2210      	movs	r2, #16
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e044      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a90      	ldr	r2, [pc, #576]	; (8003f6c <UART_SetConfig+0x334>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d127      	bne.n	8003d80 <UART_SetConfig+0x148>
 8003d30:	4b8d      	ldr	r3, [pc, #564]	; (8003f68 <UART_SetConfig+0x330>)
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	220c      	movs	r2, #12
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d017      	beq.n	8003d6c <UART_SetConfig+0x134>
 8003d3c:	d81b      	bhi.n	8003d76 <UART_SetConfig+0x13e>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d00a      	beq.n	8003d58 <UART_SetConfig+0x120>
 8003d42:	d818      	bhi.n	8003d76 <UART_SetConfig+0x13e>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <UART_SetConfig+0x116>
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d00a      	beq.n	8003d62 <UART_SetConfig+0x12a>
 8003d4c:	e013      	b.n	8003d76 <UART_SetConfig+0x13e>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e02b      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d58:	231b      	movs	r3, #27
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e026      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d62:	231b      	movs	r3, #27
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2204      	movs	r2, #4
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e021      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d6c:	231b      	movs	r3, #27
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2208      	movs	r2, #8
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e01c      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d76:	231b      	movs	r3, #27
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e017      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7a      	ldr	r2, [pc, #488]	; (8003f70 <UART_SetConfig+0x338>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d104      	bne.n	8003d94 <UART_SetConfig+0x15c>
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e00d      	b.n	8003db0 <UART_SetConfig+0x178>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a76      	ldr	r2, [pc, #472]	; (8003f74 <UART_SetConfig+0x33c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d104      	bne.n	8003da8 <UART_SetConfig+0x170>
 8003d9e:	231b      	movs	r3, #27
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e003      	b.n	8003db0 <UART_SetConfig+0x178>
 8003da8:	231b      	movs	r3, #27
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2210      	movs	r2, #16
 8003dae:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d000      	beq.n	8003dbe <UART_SetConfig+0x186>
 8003dbc:	e065      	b.n	8003e8a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003dbe:	231b      	movs	r3, #27
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d015      	beq.n	8003df4 <UART_SetConfig+0x1bc>
 8003dc8:	dc18      	bgt.n	8003dfc <UART_SetConfig+0x1c4>
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d00d      	beq.n	8003dea <UART_SetConfig+0x1b2>
 8003dce:	dc15      	bgt.n	8003dfc <UART_SetConfig+0x1c4>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <UART_SetConfig+0x1a2>
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0x1ac>
 8003dd8:	e010      	b.n	8003dfc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7ff f9af 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003dde:	0003      	movs	r3, r0
 8003de0:	617b      	str	r3, [r7, #20]
        break;
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <UART_SetConfig+0x340>)
 8003de6:	617b      	str	r3, [r7, #20]
        break;
 8003de8:	e00f      	b.n	8003e0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7ff f91b 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003dee:	0003      	movs	r3, r0
 8003df0:	617b      	str	r3, [r7, #20]
        break;
 8003df2:	e00a      	b.n	8003e0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	617b      	str	r3, [r7, #20]
        break;
 8003dfa:	e006      	b.n	8003e0a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e00:	231a      	movs	r3, #26
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
        break;
 8003e08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d100      	bne.n	8003e12 <UART_SetConfig+0x1da>
 8003e10:	e08d      	b.n	8003f2e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e16:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <UART_SetConfig+0x344>)
 8003e18:	0052      	lsls	r2, r2, #1
 8003e1a:	5ad3      	ldrh	r3, [r2, r3]
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	6978      	ldr	r0, [r7, #20]
 8003e20:	f7fc f978 	bl	8000114 <__udivsi3>
 8003e24:	0003      	movs	r3, r0
 8003e26:	005a      	lsls	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	18d2      	adds	r2, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0019      	movs	r1, r3
 8003e36:	0010      	movs	r0, r2
 8003e38:	f7fc f96c 	bl	8000114 <__udivsi3>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d91c      	bls.n	8003e80 <UART_SetConfig+0x248>
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d217      	bcs.n	8003e80 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	200e      	movs	r0, #14
 8003e56:	183b      	adds	r3, r7, r0
 8003e58:	210f      	movs	r1, #15
 8003e5a:	438a      	bics	r2, r1
 8003e5c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2207      	movs	r2, #7
 8003e66:	4013      	ands	r3, r2
 8003e68:	b299      	uxth	r1, r3
 8003e6a:	183b      	adds	r3, r7, r0
 8003e6c:	183a      	adds	r2, r7, r0
 8003e6e:	8812      	ldrh	r2, [r2, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	183a      	adds	r2, r7, r0
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	e056      	b.n	8003f2e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e80:	231a      	movs	r3, #26
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	e051      	b.n	8003f2e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8a:	231b      	movs	r3, #27
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d015      	beq.n	8003ec0 <UART_SetConfig+0x288>
 8003e94:	dc18      	bgt.n	8003ec8 <UART_SetConfig+0x290>
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00d      	beq.n	8003eb6 <UART_SetConfig+0x27e>
 8003e9a:	dc15      	bgt.n	8003ec8 <UART_SetConfig+0x290>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <UART_SetConfig+0x26e>
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d005      	beq.n	8003eb0 <UART_SetConfig+0x278>
 8003ea4:	e010      	b.n	8003ec8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea6:	f7ff f949 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	617b      	str	r3, [r7, #20]
        break;
 8003eae:	e012      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <UART_SetConfig+0x340>)
 8003eb2:	617b      	str	r3, [r7, #20]
        break;
 8003eb4:	e00f      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb6:	f7ff f8b5 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	617b      	str	r3, [r7, #20]
        break;
 8003ebe:	e00a      	b.n	8003ed6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	617b      	str	r3, [r7, #20]
        break;
 8003ec6:	e006      	b.n	8003ed6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ecc:	231a      	movs	r3, #26
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
        break;
 8003ed4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee0:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <UART_SetConfig+0x344>)
 8003ee2:	0052      	lsls	r2, r2, #1
 8003ee4:	5ad3      	ldrh	r3, [r2, r3]
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	6978      	ldr	r0, [r7, #20]
 8003eea:	f7fc f913 	bl	8000114 <__udivsi3>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	001a      	movs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	18d2      	adds	r2, r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0019      	movs	r1, r3
 8003f00:	0010      	movs	r0, r2
 8003f02:	f7fc f907 	bl	8000114 <__udivsi3>
 8003f06:	0003      	movs	r3, r0
 8003f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d90a      	bls.n	8003f26 <UART_SetConfig+0x2ee>
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	025b      	lsls	r3, r3, #9
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d205      	bcs.n	8003f26 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e003      	b.n	8003f2e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	231a      	movs	r3, #26
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	226a      	movs	r2, #106	; 0x6a
 8003f32:	2101      	movs	r1, #1
 8003f34:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2268      	movs	r2, #104	; 0x68
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003f4a:	231a      	movs	r3, #26
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	781b      	ldrb	r3, [r3, #0]
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b008      	add	sp, #32
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	cfff69f3 	.word	0xcfff69f3
 8003f5c:	ffffcfff 	.word	0xffffcfff
 8003f60:	11fff4ff 	.word	0x11fff4ff
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40004400 	.word	0x40004400
 8003f70:	40004800 	.word	0x40004800
 8003f74:	40004c00 	.word	0x40004c00
 8003f78:	00f42400 	.word	0x00f42400
 8003f7c:	080050e0 	.word	0x080050e0

08003f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00b      	beq.n	8003faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <UART_AdvFeatureConfig+0x144>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a43      	ldr	r2, [pc, #268]	; (80040c8 <UART_AdvFeatureConfig+0x148>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a3b      	ldr	r2, [pc, #236]	; (80040cc <UART_AdvFeatureConfig+0x14c>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <UART_AdvFeatureConfig+0x150>)
 8004000:	4013      	ands	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2210      	movs	r2, #16
 8004016:	4013      	ands	r3, r2
 8004018:	d00b      	beq.n	8004032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <UART_AdvFeatureConfig+0x154>)
 8004022:	4013      	ands	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2220      	movs	r2, #32
 8004038:	4013      	ands	r3, r2
 800403a:	d00b      	beq.n	8004054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <UART_AdvFeatureConfig+0x158>)
 8004044:	4013      	ands	r3, r2
 8004046:	0019      	movs	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2240      	movs	r2, #64	; 0x40
 800405a:	4013      	ands	r3, r2
 800405c:	d01d      	beq.n	800409a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <UART_AdvFeatureConfig+0x15c>)
 8004066:	4013      	ands	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	035b      	lsls	r3, r3, #13
 800407e:	429a      	cmp	r2, r3
 8004080:	d10b      	bne.n	800409a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <UART_AdvFeatureConfig+0x160>)
 800408a:	4013      	ands	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00b      	beq.n	80040bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <UART_AdvFeatureConfig+0x164>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	fffdffff 	.word	0xfffdffff
 80040c8:	fffeffff 	.word	0xfffeffff
 80040cc:	fffbffff 	.word	0xfffbffff
 80040d0:	ffff7fff 	.word	0xffff7fff
 80040d4:	ffffefff 	.word	0xffffefff
 80040d8:	ffffdfff 	.word	0xffffdfff
 80040dc:	ffefffff 	.word	0xffefffff
 80040e0:	ff9fffff 	.word	0xff9fffff
 80040e4:	fff7ffff 	.word	0xfff7ffff

080040e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2290      	movs	r2, #144	; 0x90
 80040f4:	2100      	movs	r1, #0
 80040f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f8:	f7fc ffc8 	bl	800108c <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4013      	ands	r3, r2
 800410a:	2b08      	cmp	r3, #8
 800410c:	d10c      	bne.n	8004128 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	0391      	lsls	r1, r2, #14
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <UART_CheckIdleState+0x98>)
 8004118:	9200      	str	r2, [sp, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	f000 f832 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8004120:	1e03      	subs	r3, r0, #0
 8004122:	d001      	beq.n	8004128 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e026      	b.n	8004176 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2204      	movs	r2, #4
 8004130:	4013      	ands	r3, r2
 8004132:	2b04      	cmp	r3, #4
 8004134:	d10c      	bne.n	8004150 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2280      	movs	r2, #128	; 0x80
 800413a:	03d1      	lsls	r1, r2, #15
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <UART_CheckIdleState+0x98>)
 8004140:	9200      	str	r2, [sp, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	f000 f81e 	bl	8004184 <UART_WaitOnFlagUntilTimeout>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e012      	b.n	8004176 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2288      	movs	r2, #136	; 0x88
 8004154:	2120      	movs	r1, #32
 8004156:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	228c      	movs	r2, #140	; 0x8c
 800415c:	2120      	movs	r1, #32
 800415e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2284      	movs	r2, #132	; 0x84
 8004170:	2100      	movs	r1, #0
 8004172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	01ffffff 	.word	0x01ffffff

08004184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b094      	sub	sp, #80	; 0x50
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	1dfb      	adds	r3, r7, #7
 8004192:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	e0a7      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004198:	3301      	adds	r3, #1
 800419a:	d100      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x1a>
 800419c:	e0a3      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419e:	f7fc ff75 	bl	800108c <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13f      	bne.n	8004234 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	494e      	ldr	r1, [pc, #312]	; (8004310 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80041d6:	400a      	ands	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
 80041f0:	2301      	movs	r3, #1
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	438a      	bics	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	f383 8810 	msr	PRIMASK, r3
}
 8004216:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2288      	movs	r2, #136	; 0x88
 800421c:	2120      	movs	r1, #32
 800421e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	228c      	movs	r2, #140	; 0x8c
 8004224:	2120      	movs	r1, #32
 8004226:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2284      	movs	r2, #132	; 0x84
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e069      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2204      	movs	r2, #4
 800423c:	4013      	ands	r3, r2
 800423e:	d052      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	401a      	ands	r2, r3
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	429a      	cmp	r2, r3
 8004252:	d148      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	613b      	str	r3, [r7, #16]
  return(result);
 8004264:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	2301      	movs	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4924      	ldr	r1, [pc, #144]	; (8004310 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004280:	400a      	ands	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004286:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004290:	f3ef 8310 	mrs	r3, PRIMASK
 8004294:	61fb      	str	r3, [r7, #28]
  return(result);
 8004296:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	64bb      	str	r3, [r7, #72]	; 0x48
 800429a:	2301      	movs	r3, #1
 800429c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	438a      	bics	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2288      	movs	r2, #136	; 0x88
 80042c6:	2120      	movs	r1, #32
 80042c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	228c      	movs	r2, #140	; 0x8c
 80042ce:	2120      	movs	r1, #32
 80042d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2290      	movs	r2, #144	; 0x90
 80042d6:	2120      	movs	r1, #32
 80042d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2284      	movs	r2, #132	; 0x84
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e010      	b.n	8004308 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	425a      	negs	r2, r3
 80042f6:	4153      	adcs	r3, r2
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	001a      	movs	r2, r3
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d100      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0x182>
 8004304:	e747      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b014      	add	sp, #80	; 0x50
 800430e:	bd80      	pop	{r7, pc}
 8004310:	fffffe5f 	.word	0xfffffe5f

08004314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	; 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431c:	f3ef 8310 	mrs	r3, PRIMASK
 8004320:	617b      	str	r3, [r7, #20]
  return(result);
 8004322:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	2301      	movs	r3, #1
 8004328:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4926      	ldr	r1, [pc, #152]	; (80043d8 <UART_EndRxTransfer+0xc4>)
 800433e:	400a      	ands	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434e:	f3ef 8310 	mrs	r3, PRIMASK
 8004352:	623b      	str	r3, [r7, #32]
  return(result);
 8004354:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
 8004358:	2301      	movs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	491b      	ldr	r1, [pc, #108]	; (80043dc <UART_EndRxTransfer+0xc8>)
 8004370:	400a      	ands	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d118      	bne.n	80043ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	60bb      	str	r3, [r7, #8]
  return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004392:	2301      	movs	r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2110      	movs	r1, #16
 80043aa:	438a      	bics	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	228c      	movs	r2, #140	; 0x8c
 80043be:	2120      	movs	r1, #32
 80043c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b00e      	add	sp, #56	; 0x38
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	fffffedf 	.word	0xfffffedf
 80043dc:	effffffe 	.word	0xeffffffe

080043e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	225e      	movs	r2, #94	; 0x5e
 80043f2:	2100      	movs	r1, #0
 80043f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2256      	movs	r2, #86	; 0x56
 80043fa:	2100      	movs	r1, #0
 80043fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff fc05 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}

0800440e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004416:	f3ef 8310 	mrs	r3, PRIMASK
 800441a:	60bb      	str	r3, [r7, #8]
  return(result);
 800441c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2288      	movs	r2, #136	; 0x88
 800444c:	2120      	movs	r1, #32
 800444e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0018      	movs	r0, r3
 800445a:	f7ff fbd1 	bl	8003c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	46bd      	mov	sp, r7
 8004462:	b006      	add	sp, #24
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2284      	movs	r2, #132	; 0x84
 80044a4:	5c9b      	ldrb	r3, [r3, r2]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UARTEx_DisableFifoMode+0x16>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e027      	b.n	80044fe <HAL_UARTEx_DisableFifoMode+0x66>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2284      	movs	r2, #132	; 0x84
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2288      	movs	r2, #136	; 0x88
 80044ba:	2124      	movs	r1, #36	; 0x24
 80044bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	438a      	bics	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <HAL_UARTEx_DisableFifoMode+0x70>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2288      	movs	r2, #136	; 0x88
 80044f0:	2120      	movs	r1, #32
 80044f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2284      	movs	r2, #132	; 0x84
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	dfffffff 	.word	0xdfffffff

0800450c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2284      	movs	r2, #132	; 0x84
 800451a:	5c9b      	ldrb	r3, [r3, r2]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e02e      	b.n	8004582 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2284      	movs	r2, #132	; 0x84
 8004528:	2101      	movs	r1, #1
 800452a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2288      	movs	r2, #136	; 0x88
 8004530:	2124      	movs	r1, #36	; 0x24
 8004532:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2101      	movs	r1, #1
 8004548:	438a      	bics	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	08d9      	lsrs	r1, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	0018      	movs	r0, r3
 8004564:	f000 f854 	bl	8004610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2288      	movs	r2, #136	; 0x88
 8004574:	2120      	movs	r1, #32
 8004576:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2284      	movs	r2, #132	; 0x84
 800457c:	2100      	movs	r1, #0
 800457e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2284      	movs	r2, #132	; 0x84
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e02f      	b.n	8004604 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2284      	movs	r2, #132	; 0x84
 80045a8:	2101      	movs	r1, #1
 80045aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2288      	movs	r2, #136	; 0x88
 80045b0:	2124      	movs	r1, #36	; 0x24
 80045b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2101      	movs	r1, #1
 80045c8:	438a      	bics	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a0e      	ldr	r2, [pc, #56]	; (800460c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f000 f813 	bl	8004610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2288      	movs	r2, #136	; 0x88
 80045f6:	2120      	movs	r1, #32
 80045f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2284      	movs	r2, #132	; 0x84
 80045fe:	2100      	movs	r1, #0
 8004600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b004      	add	sp, #16
 800460a:	bd80      	pop	{r7, pc}
 800460c:	f1ffffff 	.word	0xf1ffffff

08004610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	226a      	movs	r2, #106	; 0x6a
 8004624:	2101      	movs	r1, #1
 8004626:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2268      	movs	r2, #104	; 0x68
 800462c:	2101      	movs	r1, #1
 800462e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004630:	e043      	b.n	80046ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004632:	260f      	movs	r6, #15
 8004634:	19bb      	adds	r3, r7, r6
 8004636:	2208      	movs	r2, #8
 8004638:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800463a:	200e      	movs	r0, #14
 800463c:	183b      	adds	r3, r7, r0
 800463e:	2208      	movs	r2, #8
 8004640:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	0e5b      	lsrs	r3, r3, #25
 800464a:	b2da      	uxtb	r2, r3
 800464c:	240d      	movs	r4, #13
 800464e:	193b      	adds	r3, r7, r4
 8004650:	2107      	movs	r1, #7
 8004652:	400a      	ands	r2, r1
 8004654:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	0f5b      	lsrs	r3, r3, #29
 800465e:	b2da      	uxtb	r2, r3
 8004660:	250c      	movs	r5, #12
 8004662:	197b      	adds	r3, r7, r5
 8004664:	2107      	movs	r1, #7
 8004666:	400a      	ands	r2, r1
 8004668:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800466a:	183b      	adds	r3, r7, r0
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	197a      	adds	r2, r7, r5
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	4914      	ldr	r1, [pc, #80]	; (80046c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004674:	5c8a      	ldrb	r2, [r1, r2]
 8004676:	435a      	muls	r2, r3
 8004678:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800467a:	197b      	adds	r3, r7, r5
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004680:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004682:	0019      	movs	r1, r3
 8004684:	f7fb fdd0 	bl	8000228 <__divsi3>
 8004688:	0003      	movs	r3, r0
 800468a:	b299      	uxth	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	226a      	movs	r2, #106	; 0x6a
 8004690:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004692:	19bb      	adds	r3, r7, r6
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	193a      	adds	r2, r7, r4
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800469c:	5c8a      	ldrb	r2, [r1, r2]
 800469e:	435a      	muls	r2, r3
 80046a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80046a2:	193b      	adds	r3, r7, r4
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80046a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046aa:	0019      	movs	r1, r3
 80046ac:	f7fb fdbc 	bl	8000228 <__divsi3>
 80046b0:	0003      	movs	r3, r0
 80046b2:	b299      	uxth	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2268      	movs	r2, #104	; 0x68
 80046b8:	5299      	strh	r1, [r3, r2]
}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b005      	add	sp, #20
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	080050f8 	.word	0x080050f8
 80046c8:	08005100 	.word	0x08005100

080046cc <siprintf>:
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	b500      	push	{lr}
 80046d0:	490b      	ldr	r1, [pc, #44]	; (8004700 <siprintf+0x34>)
 80046d2:	b09c      	sub	sp, #112	; 0x70
 80046d4:	ab1d      	add	r3, sp, #116	; 0x74
 80046d6:	9002      	str	r0, [sp, #8]
 80046d8:	9006      	str	r0, [sp, #24]
 80046da:	9107      	str	r1, [sp, #28]
 80046dc:	9104      	str	r1, [sp, #16]
 80046de:	4809      	ldr	r0, [pc, #36]	; (8004704 <siprintf+0x38>)
 80046e0:	4909      	ldr	r1, [pc, #36]	; (8004708 <siprintf+0x3c>)
 80046e2:	cb04      	ldmia	r3!, {r2}
 80046e4:	9105      	str	r1, [sp, #20]
 80046e6:	6800      	ldr	r0, [r0, #0]
 80046e8:	a902      	add	r1, sp, #8
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	f000 f9a2 	bl	8004a34 <_svfiprintf_r>
 80046f0:	2200      	movs	r2, #0
 80046f2:	9b02      	ldr	r3, [sp, #8]
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	b01c      	add	sp, #112	; 0x70
 80046f8:	bc08      	pop	{r3}
 80046fa:	b003      	add	sp, #12
 80046fc:	4718      	bx	r3
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	7fffffff 	.word	0x7fffffff
 8004704:	20000058 	.word	0x20000058
 8004708:	ffff0208 	.word	0xffff0208

0800470c <memset>:
 800470c:	0003      	movs	r3, r0
 800470e:	1882      	adds	r2, r0, r2
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	7019      	strb	r1, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <__errno>:
 800471c:	4b01      	ldr	r3, [pc, #4]	; (8004724 <__errno+0x8>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	4770      	bx	lr
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000058 	.word	0x20000058

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2600      	movs	r6, #0
 800472c:	4c0c      	ldr	r4, [pc, #48]	; (8004760 <__libc_init_array+0x38>)
 800472e:	4d0d      	ldr	r5, [pc, #52]	; (8004764 <__libc_init_array+0x3c>)
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	2600      	movs	r6, #0
 800473a:	f000 fc6d 	bl	8005018 <_init>
 800473e:	4c0a      	ldr	r4, [pc, #40]	; (8004768 <__libc_init_array+0x40>)
 8004740:	4d0a      	ldr	r5, [pc, #40]	; (800476c <__libc_init_array+0x44>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	00b3      	lsls	r3, r6, #2
 800474e:	58eb      	ldr	r3, [r5, r3]
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	00b3      	lsls	r3, r6, #2
 8004758:	58eb      	ldr	r3, [r5, r3]
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	0800513c 	.word	0x0800513c
 8004764:	0800513c 	.word	0x0800513c
 8004768:	08005140 	.word	0x08005140
 800476c:	0800513c 	.word	0x0800513c

08004770 <__retarget_lock_acquire_recursive>:
 8004770:	4770      	bx	lr

08004772 <__retarget_lock_release_recursive>:
 8004772:	4770      	bx	lr

08004774 <_free_r>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	0005      	movs	r5, r0
 8004778:	2900      	cmp	r1, #0
 800477a:	d010      	beq.n	800479e <_free_r+0x2a>
 800477c:	1f0c      	subs	r4, r1, #4
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da00      	bge.n	8004786 <_free_r+0x12>
 8004784:	18e4      	adds	r4, r4, r3
 8004786:	0028      	movs	r0, r5
 8004788:	f000 f8e2 	bl	8004950 <__malloc_lock>
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <_free_r+0x90>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <_free_r+0x2c>
 8004794:	6063      	str	r3, [r4, #4]
 8004796:	6014      	str	r4, [r2, #0]
 8004798:	0028      	movs	r0, r5
 800479a:	f000 f8e1 	bl	8004960 <__malloc_unlock>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d908      	bls.n	80047b6 <_free_r+0x42>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d1f3      	bne.n	8004794 <_free_r+0x20>
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	1809      	adds	r1, r1, r0
 80047b2:	6021      	str	r1, [r4, #0]
 80047b4:	e7ee      	b.n	8004794 <_free_r+0x20>
 80047b6:	001a      	movs	r2, r3
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <_free_r+0x4e>
 80047be:	42a3      	cmp	r3, r4
 80047c0:	d9f9      	bls.n	80047b6 <_free_r+0x42>
 80047c2:	6811      	ldr	r1, [r2, #0]
 80047c4:	1850      	adds	r0, r2, r1
 80047c6:	42a0      	cmp	r0, r4
 80047c8:	d10b      	bne.n	80047e2 <_free_r+0x6e>
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	1809      	adds	r1, r1, r0
 80047ce:	1850      	adds	r0, r2, r1
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	4283      	cmp	r3, r0
 80047d4:	d1e0      	bne.n	8004798 <_free_r+0x24>
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	1841      	adds	r1, r0, r1
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	6053      	str	r3, [r2, #4]
 80047e0:	e7da      	b.n	8004798 <_free_r+0x24>
 80047e2:	42a0      	cmp	r0, r4
 80047e4:	d902      	bls.n	80047ec <_free_r+0x78>
 80047e6:	230c      	movs	r3, #12
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	e7d5      	b.n	8004798 <_free_r+0x24>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428b      	cmp	r3, r1
 80047f2:	d103      	bne.n	80047fc <_free_r+0x88>
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	1809      	adds	r1, r1, r0
 80047fa:	6021      	str	r1, [r4, #0]
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6054      	str	r4, [r2, #4]
 8004800:	e7ca      	b.n	8004798 <_free_r+0x24>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20000490 	.word	0x20000490

08004808 <sbrk_aligned>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0f      	ldr	r6, [pc, #60]	; (8004848 <sbrk_aligned+0x40>)
 800480c:	000d      	movs	r5, r1
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	0004      	movs	r4, r0
 8004812:	2900      	cmp	r1, #0
 8004814:	d102      	bne.n	800481c <sbrk_aligned+0x14>
 8004816:	f000 fba1 	bl	8004f5c <_sbrk_r>
 800481a:	6030      	str	r0, [r6, #0]
 800481c:	0029      	movs	r1, r5
 800481e:	0020      	movs	r0, r4
 8004820:	f000 fb9c 	bl	8004f5c <_sbrk_r>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d00a      	beq.n	800483e <sbrk_aligned+0x36>
 8004828:	2303      	movs	r3, #3
 800482a:	1cc5      	adds	r5, r0, #3
 800482c:	439d      	bics	r5, r3
 800482e:	42a8      	cmp	r0, r5
 8004830:	d007      	beq.n	8004842 <sbrk_aligned+0x3a>
 8004832:	1a29      	subs	r1, r5, r0
 8004834:	0020      	movs	r0, r4
 8004836:	f000 fb91 	bl	8004f5c <_sbrk_r>
 800483a:	3001      	adds	r0, #1
 800483c:	d101      	bne.n	8004842 <sbrk_aligned+0x3a>
 800483e:	2501      	movs	r5, #1
 8004840:	426d      	negs	r5, r5
 8004842:	0028      	movs	r0, r5
 8004844:	bd70      	pop	{r4, r5, r6, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	20000494 	.word	0x20000494

0800484c <_malloc_r>:
 800484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484e:	2203      	movs	r2, #3
 8004850:	1ccb      	adds	r3, r1, #3
 8004852:	4393      	bics	r3, r2
 8004854:	3308      	adds	r3, #8
 8004856:	0006      	movs	r6, r0
 8004858:	001f      	movs	r7, r3
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d238      	bcs.n	80048d0 <_malloc_r+0x84>
 800485e:	270c      	movs	r7, #12
 8004860:	42b9      	cmp	r1, r7
 8004862:	d837      	bhi.n	80048d4 <_malloc_r+0x88>
 8004864:	0030      	movs	r0, r6
 8004866:	f000 f873 	bl	8004950 <__malloc_lock>
 800486a:	4b38      	ldr	r3, [pc, #224]	; (800494c <_malloc_r+0x100>)
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	001c      	movs	r4, r3
 8004872:	2c00      	cmp	r4, #0
 8004874:	d133      	bne.n	80048de <_malloc_r+0x92>
 8004876:	0039      	movs	r1, r7
 8004878:	0030      	movs	r0, r6
 800487a:	f7ff ffc5 	bl	8004808 <sbrk_aligned>
 800487e:	0004      	movs	r4, r0
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d15e      	bne.n	8004942 <_malloc_r+0xf6>
 8004884:	9b00      	ldr	r3, [sp, #0]
 8004886:	681c      	ldr	r4, [r3, #0]
 8004888:	0025      	movs	r5, r4
 800488a:	2d00      	cmp	r5, #0
 800488c:	d14e      	bne.n	800492c <_malloc_r+0xe0>
 800488e:	2c00      	cmp	r4, #0
 8004890:	d051      	beq.n	8004936 <_malloc_r+0xea>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	0029      	movs	r1, r5
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	0030      	movs	r0, r6
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	f000 fb5e 	bl	8004f5c <_sbrk_r>
 80048a0:	9b01      	ldr	r3, [sp, #4]
 80048a2:	4283      	cmp	r3, r0
 80048a4:	d147      	bne.n	8004936 <_malloc_r+0xea>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0030      	movs	r0, r6
 80048aa:	1aff      	subs	r7, r7, r3
 80048ac:	0039      	movs	r1, r7
 80048ae:	f7ff ffab 	bl	8004808 <sbrk_aligned>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d03f      	beq.n	8004936 <_malloc_r+0xea>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d040      	beq.n	8004946 <_malloc_r+0xfa>
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	42a2      	cmp	r2, r4
 80048c8:	d133      	bne.n	8004932 <_malloc_r+0xe6>
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e014      	b.n	80048fa <_malloc_r+0xae>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dac5      	bge.n	8004860 <_malloc_r+0x14>
 80048d4:	230c      	movs	r3, #12
 80048d6:	2500      	movs	r5, #0
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	0028      	movs	r0, r5
 80048dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	1bc9      	subs	r1, r1, r7
 80048e2:	d420      	bmi.n	8004926 <_malloc_r+0xda>
 80048e4:	290b      	cmp	r1, #11
 80048e6:	d918      	bls.n	800491a <_malloc_r+0xce>
 80048e8:	19e2      	adds	r2, r4, r7
 80048ea:	6027      	str	r7, [r4, #0]
 80048ec:	42a3      	cmp	r3, r4
 80048ee:	d112      	bne.n	8004916 <_malloc_r+0xca>
 80048f0:	9b00      	ldr	r3, [sp, #0]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	6011      	str	r1, [r2, #0]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	0030      	movs	r0, r6
 80048fc:	0025      	movs	r5, r4
 80048fe:	f000 f82f 	bl	8004960 <__malloc_unlock>
 8004902:	2207      	movs	r2, #7
 8004904:	350b      	adds	r5, #11
 8004906:	1d23      	adds	r3, r4, #4
 8004908:	4395      	bics	r5, r2
 800490a:	1aea      	subs	r2, r5, r3
 800490c:	429d      	cmp	r5, r3
 800490e:	d0e4      	beq.n	80048da <_malloc_r+0x8e>
 8004910:	1b5b      	subs	r3, r3, r5
 8004912:	50a3      	str	r3, [r4, r2]
 8004914:	e7e1      	b.n	80048da <_malloc_r+0x8e>
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	e7ec      	b.n	80048f4 <_malloc_r+0xa8>
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	42a3      	cmp	r3, r4
 800491e:	d1d5      	bne.n	80048cc <_malloc_r+0x80>
 8004920:	9b00      	ldr	r3, [sp, #0]
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e7e9      	b.n	80048fa <_malloc_r+0xae>
 8004926:	0023      	movs	r3, r4
 8004928:	6864      	ldr	r4, [r4, #4]
 800492a:	e7a2      	b.n	8004872 <_malloc_r+0x26>
 800492c:	002c      	movs	r4, r5
 800492e:	686d      	ldr	r5, [r5, #4]
 8004930:	e7ab      	b.n	800488a <_malloc_r+0x3e>
 8004932:	0013      	movs	r3, r2
 8004934:	e7c4      	b.n	80048c0 <_malloc_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	0030      	movs	r0, r6
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	f000 f810 	bl	8004960 <__malloc_unlock>
 8004940:	e7cb      	b.n	80048da <_malloc_r+0x8e>
 8004942:	6027      	str	r7, [r4, #0]
 8004944:	e7d9      	b.n	80048fa <_malloc_r+0xae>
 8004946:	605b      	str	r3, [r3, #4]
 8004948:	deff      	udf	#255	; 0xff
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	20000490 	.word	0x20000490

08004950 <__malloc_lock>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4802      	ldr	r0, [pc, #8]	; (800495c <__malloc_lock+0xc>)
 8004954:	f7ff ff0c 	bl	8004770 <__retarget_lock_acquire_recursive>
 8004958:	bd10      	pop	{r4, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	2000048c 	.word	0x2000048c

08004960 <__malloc_unlock>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4802      	ldr	r0, [pc, #8]	; (800496c <__malloc_unlock+0xc>)
 8004964:	f7ff ff05 	bl	8004772 <__retarget_lock_release_recursive>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	2000048c 	.word	0x2000048c

08004970 <__ssputs_r>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b085      	sub	sp, #20
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	9203      	str	r2, [sp, #12]
 8004978:	688e      	ldr	r6, [r1, #8]
 800497a:	9a01      	ldr	r2, [sp, #4]
 800497c:	0007      	movs	r7, r0
 800497e:	000c      	movs	r4, r1
 8004980:	680b      	ldr	r3, [r1, #0]
 8004982:	4296      	cmp	r6, r2
 8004984:	d831      	bhi.n	80049ea <__ssputs_r+0x7a>
 8004986:	898a      	ldrh	r2, [r1, #12]
 8004988:	2190      	movs	r1, #144	; 0x90
 800498a:	00c9      	lsls	r1, r1, #3
 800498c:	420a      	tst	r2, r1
 800498e:	d029      	beq.n	80049e4 <__ssputs_r+0x74>
 8004990:	2003      	movs	r0, #3
 8004992:	6921      	ldr	r1, [r4, #16]
 8004994:	1a5b      	subs	r3, r3, r1
 8004996:	9302      	str	r3, [sp, #8]
 8004998:	6963      	ldr	r3, [r4, #20]
 800499a:	4343      	muls	r3, r0
 800499c:	0fdd      	lsrs	r5, r3, #31
 800499e:	18ed      	adds	r5, r5, r3
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	9802      	ldr	r0, [sp, #8]
 80049a4:	3301      	adds	r3, #1
 80049a6:	181b      	adds	r3, r3, r0
 80049a8:	106d      	asrs	r5, r5, #1
 80049aa:	42ab      	cmp	r3, r5
 80049ac:	d900      	bls.n	80049b0 <__ssputs_r+0x40>
 80049ae:	001d      	movs	r5, r3
 80049b0:	0552      	lsls	r2, r2, #21
 80049b2:	d529      	bpl.n	8004a08 <__ssputs_r+0x98>
 80049b4:	0029      	movs	r1, r5
 80049b6:	0038      	movs	r0, r7
 80049b8:	f7ff ff48 	bl	800484c <_malloc_r>
 80049bc:	1e06      	subs	r6, r0, #0
 80049be:	d02d      	beq.n	8004a1c <__ssputs_r+0xac>
 80049c0:	9a02      	ldr	r2, [sp, #8]
 80049c2:	6921      	ldr	r1, [r4, #16]
 80049c4:	f000 fae7 	bl	8004f96 <memcpy>
 80049c8:	89a2      	ldrh	r2, [r4, #12]
 80049ca:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <__ssputs_r+0xc0>)
 80049cc:	401a      	ands	r2, r3
 80049ce:	2380      	movs	r3, #128	; 0x80
 80049d0:	4313      	orrs	r3, r2
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	6126      	str	r6, [r4, #16]
 80049d8:	18f6      	adds	r6, r6, r3
 80049da:	6026      	str	r6, [r4, #0]
 80049dc:	6165      	str	r5, [r4, #20]
 80049de:	9e01      	ldr	r6, [sp, #4]
 80049e0:	1aed      	subs	r5, r5, r3
 80049e2:	60a5      	str	r5, [r4, #8]
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	429e      	cmp	r6, r3
 80049e8:	d900      	bls.n	80049ec <__ssputs_r+0x7c>
 80049ea:	9e01      	ldr	r6, [sp, #4]
 80049ec:	0032      	movs	r2, r6
 80049ee:	9903      	ldr	r1, [sp, #12]
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	f000 fa9f 	bl	8004f34 <memmove>
 80049f6:	2000      	movs	r0, #0
 80049f8:	68a3      	ldr	r3, [r4, #8]
 80049fa:	1b9b      	subs	r3, r3, r6
 80049fc:	60a3      	str	r3, [r4, #8]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	199b      	adds	r3, r3, r6
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	b005      	add	sp, #20
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a08:	002a      	movs	r2, r5
 8004a0a:	0038      	movs	r0, r7
 8004a0c:	f000 facc 	bl	8004fa8 <_realloc_r>
 8004a10:	1e06      	subs	r6, r0, #0
 8004a12:	d1df      	bne.n	80049d4 <__ssputs_r+0x64>
 8004a14:	0038      	movs	r0, r7
 8004a16:	6921      	ldr	r1, [r4, #16]
 8004a18:	f7ff feac 	bl	8004774 <_free_r>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	2001      	movs	r0, #1
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	89a2      	ldrh	r2, [r4, #12]
 8004a24:	3334      	adds	r3, #52	; 0x34
 8004a26:	4313      	orrs	r3, r2
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	4240      	negs	r0, r0
 8004a2c:	e7ea      	b.n	8004a04 <__ssputs_r+0x94>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	fffffb7f 	.word	0xfffffb7f

08004a34 <_svfiprintf_r>:
 8004a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a36:	b0a1      	sub	sp, #132	; 0x84
 8004a38:	9003      	str	r0, [sp, #12]
 8004a3a:	001d      	movs	r5, r3
 8004a3c:	898b      	ldrh	r3, [r1, #12]
 8004a3e:	000f      	movs	r7, r1
 8004a40:	0016      	movs	r6, r2
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	d511      	bpl.n	8004a6a <_svfiprintf_r+0x36>
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10e      	bne.n	8004a6a <_svfiprintf_r+0x36>
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	f7ff fefd 	bl	800484c <_malloc_r>
 8004a52:	6038      	str	r0, [r7, #0]
 8004a54:	6138      	str	r0, [r7, #16]
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d105      	bne.n	8004a66 <_svfiprintf_r+0x32>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	9a03      	ldr	r2, [sp, #12]
 8004a5e:	3801      	subs	r0, #1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	b021      	add	sp, #132	; 0x84
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	ac08      	add	r4, sp, #32
 8004a6e:	6163      	str	r3, [r4, #20]
 8004a70:	3320      	adds	r3, #32
 8004a72:	7663      	strb	r3, [r4, #25]
 8004a74:	3310      	adds	r3, #16
 8004a76:	76a3      	strb	r3, [r4, #26]
 8004a78:	9507      	str	r5, [sp, #28]
 8004a7a:	0035      	movs	r5, r6
 8004a7c:	782b      	ldrb	r3, [r5, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <_svfiprintf_r+0x52>
 8004a82:	2b25      	cmp	r3, #37	; 0x25
 8004a84:	d148      	bne.n	8004b18 <_svfiprintf_r+0xe4>
 8004a86:	1bab      	subs	r3, r5, r6
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	42b5      	cmp	r5, r6
 8004a8c:	d00b      	beq.n	8004aa6 <_svfiprintf_r+0x72>
 8004a8e:	0032      	movs	r2, r6
 8004a90:	0039      	movs	r1, r7
 8004a92:	9803      	ldr	r0, [sp, #12]
 8004a94:	f7ff ff6c 	bl	8004970 <__ssputs_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d100      	bne.n	8004a9e <_svfiprintf_r+0x6a>
 8004a9c:	e0af      	b.n	8004bfe <_svfiprintf_r+0x1ca>
 8004a9e:	6963      	ldr	r3, [r4, #20]
 8004aa0:	9a05      	ldr	r2, [sp, #20]
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	6163      	str	r3, [r4, #20]
 8004aa6:	782b      	ldrb	r3, [r5, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d100      	bne.n	8004aae <_svfiprintf_r+0x7a>
 8004aac:	e0a7      	b.n	8004bfe <_svfiprintf_r+0x1ca>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4252      	negs	r2, r2
 8004ab4:	6062      	str	r2, [r4, #4]
 8004ab6:	a904      	add	r1, sp, #16
 8004ab8:	3254      	adds	r2, #84	; 0x54
 8004aba:	1852      	adds	r2, r2, r1
 8004abc:	1c6e      	adds	r6, r5, #1
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	60e3      	str	r3, [r4, #12]
 8004ac2:	60a3      	str	r3, [r4, #8]
 8004ac4:	7013      	strb	r3, [r2, #0]
 8004ac6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ac8:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <_svfiprintf_r+0x1ec>)
 8004aca:	2205      	movs	r2, #5
 8004acc:	0018      	movs	r0, r3
 8004ace:	7831      	ldrb	r1, [r6, #0]
 8004ad0:	9305      	str	r3, [sp, #20]
 8004ad2:	f000 fa55 	bl	8004f80 <memchr>
 8004ad6:	1c75      	adds	r5, r6, #1
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d11f      	bne.n	8004b1c <_svfiprintf_r+0xe8>
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	06d3      	lsls	r3, r2, #27
 8004ae0:	d504      	bpl.n	8004aec <_svfiprintf_r+0xb8>
 8004ae2:	2353      	movs	r3, #83	; 0x53
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	185b      	adds	r3, r3, r1
 8004ae8:	2120      	movs	r1, #32
 8004aea:	7019      	strb	r1, [r3, #0]
 8004aec:	0713      	lsls	r3, r2, #28
 8004aee:	d504      	bpl.n	8004afa <_svfiprintf_r+0xc6>
 8004af0:	2353      	movs	r3, #83	; 0x53
 8004af2:	a904      	add	r1, sp, #16
 8004af4:	185b      	adds	r3, r3, r1
 8004af6:	212b      	movs	r1, #43	; 0x2b
 8004af8:	7019      	strb	r1, [r3, #0]
 8004afa:	7833      	ldrb	r3, [r6, #0]
 8004afc:	2b2a      	cmp	r3, #42	; 0x2a
 8004afe:	d016      	beq.n	8004b2e <_svfiprintf_r+0xfa>
 8004b00:	0035      	movs	r5, r6
 8004b02:	2100      	movs	r1, #0
 8004b04:	200a      	movs	r0, #10
 8004b06:	68e3      	ldr	r3, [r4, #12]
 8004b08:	782a      	ldrb	r2, [r5, #0]
 8004b0a:	1c6e      	adds	r6, r5, #1
 8004b0c:	3a30      	subs	r2, #48	; 0x30
 8004b0e:	2a09      	cmp	r2, #9
 8004b10:	d94e      	bls.n	8004bb0 <_svfiprintf_r+0x17c>
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d111      	bne.n	8004b3a <_svfiprintf_r+0x106>
 8004b16:	e017      	b.n	8004b48 <_svfiprintf_r+0x114>
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7af      	b.n	8004a7c <_svfiprintf_r+0x48>
 8004b1c:	9b05      	ldr	r3, [sp, #20]
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	1ac0      	subs	r0, r0, r3
 8004b22:	2301      	movs	r3, #1
 8004b24:	4083      	lsls	r3, r0
 8004b26:	4313      	orrs	r3, r2
 8004b28:	002e      	movs	r6, r5
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	e7cc      	b.n	8004ac8 <_svfiprintf_r+0x94>
 8004b2e:	9b07      	ldr	r3, [sp, #28]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9107      	str	r1, [sp, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	db01      	blt.n	8004b3e <_svfiprintf_r+0x10a>
 8004b3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b3c:	e004      	b.n	8004b48 <_svfiprintf_r+0x114>
 8004b3e:	425b      	negs	r3, r3
 8004b40:	60e3      	str	r3, [r4, #12]
 8004b42:	2302      	movs	r3, #2
 8004b44:	4313      	orrs	r3, r2
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	782b      	ldrb	r3, [r5, #0]
 8004b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4c:	d10a      	bne.n	8004b64 <_svfiprintf_r+0x130>
 8004b4e:	786b      	ldrb	r3, [r5, #1]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d135      	bne.n	8004bc0 <_svfiprintf_r+0x18c>
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	3502      	adds	r5, #2
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	9207      	str	r2, [sp, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db2b      	blt.n	8004bba <_svfiprintf_r+0x186>
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	4e2f      	ldr	r6, [pc, #188]	; (8004c24 <_svfiprintf_r+0x1f0>)
 8004b66:	2203      	movs	r2, #3
 8004b68:	0030      	movs	r0, r6
 8004b6a:	7829      	ldrb	r1, [r5, #0]
 8004b6c:	f000 fa08 	bl	8004f80 <memchr>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d006      	beq.n	8004b82 <_svfiprintf_r+0x14e>
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	4083      	lsls	r3, r0
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	3501      	adds	r5, #1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	7829      	ldrb	r1, [r5, #0]
 8004b84:	2206      	movs	r2, #6
 8004b86:	4828      	ldr	r0, [pc, #160]	; (8004c28 <_svfiprintf_r+0x1f4>)
 8004b88:	1c6e      	adds	r6, r5, #1
 8004b8a:	7621      	strb	r1, [r4, #24]
 8004b8c:	f000 f9f8 	bl	8004f80 <memchr>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d03c      	beq.n	8004c0e <_svfiprintf_r+0x1da>
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <_svfiprintf_r+0x1f8>)
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d125      	bne.n	8004be6 <_svfiprintf_r+0x1b2>
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	9307      	str	r3, [sp, #28]
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	9a04      	ldr	r2, [sp, #16]
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	6163      	str	r3, [r4, #20]
 8004bae:	e764      	b.n	8004a7a <_svfiprintf_r+0x46>
 8004bb0:	4343      	muls	r3, r0
 8004bb2:	0035      	movs	r5, r6
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	e7a6      	b.n	8004b08 <_svfiprintf_r+0xd4>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	425b      	negs	r3, r3
 8004bbe:	e7d0      	b.n	8004b62 <_svfiprintf_r+0x12e>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	3501      	adds	r5, #1
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	7829      	ldrb	r1, [r5, #0]
 8004bcc:	1c6e      	adds	r6, r5, #1
 8004bce:	3930      	subs	r1, #48	; 0x30
 8004bd0:	2909      	cmp	r1, #9
 8004bd2:	d903      	bls.n	8004bdc <_svfiprintf_r+0x1a8>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0c5      	beq.n	8004b64 <_svfiprintf_r+0x130>
 8004bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8004bda:	e7c3      	b.n	8004b64 <_svfiprintf_r+0x130>
 8004bdc:	4342      	muls	r2, r0
 8004bde:	0035      	movs	r5, r6
 8004be0:	2301      	movs	r3, #1
 8004be2:	1852      	adds	r2, r2, r1
 8004be4:	e7f1      	b.n	8004bca <_svfiprintf_r+0x196>
 8004be6:	aa07      	add	r2, sp, #28
 8004be8:	9200      	str	r2, [sp, #0]
 8004bea:	0021      	movs	r1, r4
 8004bec:	003a      	movs	r2, r7
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <_svfiprintf_r+0x1fc>)
 8004bf0:	9803      	ldr	r0, [sp, #12]
 8004bf2:	e000      	b.n	8004bf6 <_svfiprintf_r+0x1c2>
 8004bf4:	bf00      	nop
 8004bf6:	9004      	str	r0, [sp, #16]
 8004bf8:	9b04      	ldr	r3, [sp, #16]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	d1d3      	bne.n	8004ba6 <_svfiprintf_r+0x172>
 8004bfe:	89bb      	ldrh	r3, [r7, #12]
 8004c00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	d400      	bmi.n	8004c08 <_svfiprintf_r+0x1d4>
 8004c06:	e72c      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c08:	2001      	movs	r0, #1
 8004c0a:	4240      	negs	r0, r0
 8004c0c:	e729      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c0e:	aa07      	add	r2, sp, #28
 8004c10:	9200      	str	r2, [sp, #0]
 8004c12:	0021      	movs	r1, r4
 8004c14:	003a      	movs	r2, r7
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <_svfiprintf_r+0x1fc>)
 8004c18:	9803      	ldr	r0, [sp, #12]
 8004c1a:	f000 f87b 	bl	8004d14 <_printf_i>
 8004c1e:	e7ea      	b.n	8004bf6 <_svfiprintf_r+0x1c2>
 8004c20:	08005108 	.word	0x08005108
 8004c24:	0800510e 	.word	0x0800510e
 8004c28:	08005112 	.word	0x08005112
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	08004971 	.word	0x08004971

08004c34 <_printf_common>:
 8004c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c36:	0016      	movs	r6, r2
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	688a      	ldr	r2, [r1, #8]
 8004c3c:	690b      	ldr	r3, [r1, #16]
 8004c3e:	000c      	movs	r4, r1
 8004c40:	9000      	str	r0, [sp, #0]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	da00      	bge.n	8004c48 <_printf_common+0x14>
 8004c46:	0013      	movs	r3, r2
 8004c48:	0022      	movs	r2, r4
 8004c4a:	6033      	str	r3, [r6, #0]
 8004c4c:	3243      	adds	r2, #67	; 0x43
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d001      	beq.n	8004c58 <_printf_common+0x24>
 8004c54:	3301      	adds	r3, #1
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	d502      	bpl.n	8004c64 <_printf_common+0x30>
 8004c5e:	6833      	ldr	r3, [r6, #0]
 8004c60:	3302      	adds	r3, #2
 8004c62:	6033      	str	r3, [r6, #0]
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	2306      	movs	r3, #6
 8004c68:	0015      	movs	r5, r2
 8004c6a:	401d      	ands	r5, r3
 8004c6c:	421a      	tst	r2, r3
 8004c6e:	d027      	beq.n	8004cc0 <_printf_common+0x8c>
 8004c70:	0023      	movs	r3, r4
 8004c72:	3343      	adds	r3, #67	; 0x43
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	4193      	sbcs	r3, r2
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	0692      	lsls	r2, r2, #26
 8004c7e:	d430      	bmi.n	8004ce2 <_printf_common+0xae>
 8004c80:	0022      	movs	r2, r4
 8004c82:	9901      	ldr	r1, [sp, #4]
 8004c84:	9800      	ldr	r0, [sp, #0]
 8004c86:	9d08      	ldr	r5, [sp, #32]
 8004c88:	3243      	adds	r2, #67	; 0x43
 8004c8a:	47a8      	blx	r5
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d025      	beq.n	8004cdc <_printf_common+0xa8>
 8004c90:	2206      	movs	r2, #6
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	2500      	movs	r5, #0
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d105      	bne.n	8004ca8 <_printf_common+0x74>
 8004c9c:	6833      	ldr	r3, [r6, #0]
 8004c9e:	68e5      	ldr	r5, [r4, #12]
 8004ca0:	1aed      	subs	r5, r5, r3
 8004ca2:	43eb      	mvns	r3, r5
 8004ca4:	17db      	asrs	r3, r3, #31
 8004ca6:	401d      	ands	r5, r3
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	6922      	ldr	r2, [r4, #16]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	dd01      	ble.n	8004cb4 <_printf_common+0x80>
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	18ed      	adds	r5, r5, r3
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	42b5      	cmp	r5, r6
 8004cb8:	d120      	bne.n	8004cfc <_printf_common+0xc8>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e010      	b.n	8004ce0 <_printf_common+0xac>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	6832      	ldr	r2, [r6, #0]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	ddd2      	ble.n	8004c70 <_printf_common+0x3c>
 8004cca:	0022      	movs	r2, r4
 8004ccc:	2301      	movs	r3, #1
 8004cce:	9901      	ldr	r1, [sp, #4]
 8004cd0:	9800      	ldr	r0, [sp, #0]
 8004cd2:	9f08      	ldr	r7, [sp, #32]
 8004cd4:	3219      	adds	r2, #25
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d1f0      	bne.n	8004cbe <_printf_common+0x8a>
 8004cdc:	2001      	movs	r0, #1
 8004cde:	4240      	negs	r0, r0
 8004ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ce2:	2030      	movs	r0, #48	; 0x30
 8004ce4:	18e1      	adds	r1, r4, r3
 8004ce6:	3143      	adds	r1, #67	; 0x43
 8004ce8:	7008      	strb	r0, [r1, #0]
 8004cea:	0021      	movs	r1, r4
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	3145      	adds	r1, #69	; 0x45
 8004cf0:	7809      	ldrb	r1, [r1, #0]
 8004cf2:	18a2      	adds	r2, r4, r2
 8004cf4:	3243      	adds	r2, #67	; 0x43
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	7011      	strb	r1, [r2, #0]
 8004cfa:	e7c1      	b.n	8004c80 <_printf_common+0x4c>
 8004cfc:	0022      	movs	r2, r4
 8004cfe:	2301      	movs	r3, #1
 8004d00:	9901      	ldr	r1, [sp, #4]
 8004d02:	9800      	ldr	r0, [sp, #0]
 8004d04:	9f08      	ldr	r7, [sp, #32]
 8004d06:	321a      	adds	r2, #26
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0e6      	beq.n	8004cdc <_printf_common+0xa8>
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7d1      	b.n	8004cb6 <_printf_common+0x82>
	...

08004d14 <_printf_i>:
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b08b      	sub	sp, #44	; 0x2c
 8004d18:	9206      	str	r2, [sp, #24]
 8004d1a:	000a      	movs	r2, r1
 8004d1c:	3243      	adds	r2, #67	; 0x43
 8004d1e:	9307      	str	r3, [sp, #28]
 8004d20:	9005      	str	r0, [sp, #20]
 8004d22:	9204      	str	r2, [sp, #16]
 8004d24:	7e0a      	ldrb	r2, [r1, #24]
 8004d26:	000c      	movs	r4, r1
 8004d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d2a:	2a78      	cmp	r2, #120	; 0x78
 8004d2c:	d809      	bhi.n	8004d42 <_printf_i+0x2e>
 8004d2e:	2a62      	cmp	r2, #98	; 0x62
 8004d30:	d80b      	bhi.n	8004d4a <_printf_i+0x36>
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d100      	bne.n	8004d38 <_printf_i+0x24>
 8004d36:	e0be      	b.n	8004eb6 <_printf_i+0x1a2>
 8004d38:	497c      	ldr	r1, [pc, #496]	; (8004f2c <_printf_i+0x218>)
 8004d3a:	9103      	str	r1, [sp, #12]
 8004d3c:	2a58      	cmp	r2, #88	; 0x58
 8004d3e:	d100      	bne.n	8004d42 <_printf_i+0x2e>
 8004d40:	e093      	b.n	8004e6a <_printf_i+0x156>
 8004d42:	0026      	movs	r6, r4
 8004d44:	3642      	adds	r6, #66	; 0x42
 8004d46:	7032      	strb	r2, [r6, #0]
 8004d48:	e022      	b.n	8004d90 <_printf_i+0x7c>
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	3863      	subs	r0, #99	; 0x63
 8004d4e:	2815      	cmp	r0, #21
 8004d50:	d8f7      	bhi.n	8004d42 <_printf_i+0x2e>
 8004d52:	f7fb f9d5 	bl	8000100 <__gnu_thumb1_case_shi>
 8004d56:	0016      	.short	0x0016
 8004d58:	fff6001f 	.word	0xfff6001f
 8004d5c:	fff6fff6 	.word	0xfff6fff6
 8004d60:	001ffff6 	.word	0x001ffff6
 8004d64:	fff6fff6 	.word	0xfff6fff6
 8004d68:	fff6fff6 	.word	0xfff6fff6
 8004d6c:	003600a3 	.word	0x003600a3
 8004d70:	fff60083 	.word	0xfff60083
 8004d74:	00b4fff6 	.word	0x00b4fff6
 8004d78:	0036fff6 	.word	0x0036fff6
 8004d7c:	fff6fff6 	.word	0xfff6fff6
 8004d80:	0087      	.short	0x0087
 8004d82:	0026      	movs	r6, r4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	3642      	adds	r6, #66	; 0x42
 8004d88:	1d11      	adds	r1, r2, #4
 8004d8a:	6019      	str	r1, [r3, #0]
 8004d8c:	6813      	ldr	r3, [r2, #0]
 8004d8e:	7033      	strb	r3, [r6, #0]
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0a2      	b.n	8004eda <_printf_i+0x1c6>
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	1d02      	adds	r2, r0, #4
 8004d9a:	060d      	lsls	r5, r1, #24
 8004d9c:	d50b      	bpl.n	8004db6 <_printf_i+0xa2>
 8004d9e:	6805      	ldr	r5, [r0, #0]
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	da03      	bge.n	8004dae <_printf_i+0x9a>
 8004da6:	232d      	movs	r3, #45	; 0x2d
 8004da8:	9a04      	ldr	r2, [sp, #16]
 8004daa:	426d      	negs	r5, r5
 8004dac:	7013      	strb	r3, [r2, #0]
 8004dae:	4b5f      	ldr	r3, [pc, #380]	; (8004f2c <_printf_i+0x218>)
 8004db0:	270a      	movs	r7, #10
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	e01b      	b.n	8004dee <_printf_i+0xda>
 8004db6:	6805      	ldr	r5, [r0, #0]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	0649      	lsls	r1, r1, #25
 8004dbc:	d5f1      	bpl.n	8004da2 <_printf_i+0x8e>
 8004dbe:	b22d      	sxth	r5, r5
 8004dc0:	e7ef      	b.n	8004da2 <_printf_i+0x8e>
 8004dc2:	680d      	ldr	r5, [r1, #0]
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	1d08      	adds	r0, r1, #4
 8004dc8:	6018      	str	r0, [r3, #0]
 8004dca:	062e      	lsls	r6, r5, #24
 8004dcc:	d501      	bpl.n	8004dd2 <_printf_i+0xbe>
 8004dce:	680d      	ldr	r5, [r1, #0]
 8004dd0:	e003      	b.n	8004dda <_printf_i+0xc6>
 8004dd2:	066d      	lsls	r5, r5, #25
 8004dd4:	d5fb      	bpl.n	8004dce <_printf_i+0xba>
 8004dd6:	680d      	ldr	r5, [r1, #0]
 8004dd8:	b2ad      	uxth	r5, r5
 8004dda:	4b54      	ldr	r3, [pc, #336]	; (8004f2c <_printf_i+0x218>)
 8004ddc:	2708      	movs	r7, #8
 8004dde:	9303      	str	r3, [sp, #12]
 8004de0:	2a6f      	cmp	r2, #111	; 0x6f
 8004de2:	d000      	beq.n	8004de6 <_printf_i+0xd2>
 8004de4:	3702      	adds	r7, #2
 8004de6:	0023      	movs	r3, r4
 8004de8:	2200      	movs	r2, #0
 8004dea:	3343      	adds	r3, #67	; 0x43
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	60a3      	str	r3, [r4, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db03      	blt.n	8004dfe <_printf_i+0xea>
 8004df6:	2104      	movs	r1, #4
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	6022      	str	r2, [r4, #0]
 8004dfe:	2d00      	cmp	r5, #0
 8004e00:	d102      	bne.n	8004e08 <_printf_i+0xf4>
 8004e02:	9e04      	ldr	r6, [sp, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <_printf_i+0x10e>
 8004e08:	9e04      	ldr	r6, [sp, #16]
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	0039      	movs	r1, r7
 8004e0e:	f7fb fa07 	bl	8000220 <__aeabi_uidivmod>
 8004e12:	9b03      	ldr	r3, [sp, #12]
 8004e14:	3e01      	subs	r6, #1
 8004e16:	5c5b      	ldrb	r3, [r3, r1]
 8004e18:	7033      	strb	r3, [r6, #0]
 8004e1a:	002b      	movs	r3, r5
 8004e1c:	0005      	movs	r5, r0
 8004e1e:	429f      	cmp	r7, r3
 8004e20:	d9f3      	bls.n	8004e0a <_printf_i+0xf6>
 8004e22:	2f08      	cmp	r7, #8
 8004e24:	d109      	bne.n	8004e3a <_printf_i+0x126>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	07db      	lsls	r3, r3, #31
 8004e2a:	d506      	bpl.n	8004e3a <_printf_i+0x126>
 8004e2c:	6862      	ldr	r2, [r4, #4]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	dc02      	bgt.n	8004e3a <_printf_i+0x126>
 8004e34:	2330      	movs	r3, #48	; 0x30
 8004e36:	3e01      	subs	r6, #1
 8004e38:	7033      	strb	r3, [r6, #0]
 8004e3a:	9b04      	ldr	r3, [sp, #16]
 8004e3c:	1b9b      	subs	r3, r3, r6
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	9b07      	ldr	r3, [sp, #28]
 8004e42:	0021      	movs	r1, r4
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	9805      	ldr	r0, [sp, #20]
 8004e48:	9b06      	ldr	r3, [sp, #24]
 8004e4a:	aa09      	add	r2, sp, #36	; 0x24
 8004e4c:	f7ff fef2 	bl	8004c34 <_printf_common>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d147      	bne.n	8004ee4 <_printf_i+0x1d0>
 8004e54:	2001      	movs	r0, #1
 8004e56:	4240      	negs	r0, r0
 8004e58:	b00b      	add	sp, #44	; 0x2c
 8004e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	6809      	ldr	r1, [r1, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	6022      	str	r2, [r4, #0]
 8004e64:	2278      	movs	r2, #120	; 0x78
 8004e66:	4932      	ldr	r1, [pc, #200]	; (8004f30 <_printf_i+0x21c>)
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	0021      	movs	r1, r4
 8004e6c:	3145      	adds	r1, #69	; 0x45
 8004e6e:	700a      	strb	r2, [r1, #0]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	c920      	ldmia	r1!, {r5}
 8004e76:	0610      	lsls	r0, r2, #24
 8004e78:	d402      	bmi.n	8004e80 <_printf_i+0x16c>
 8004e7a:	0650      	lsls	r0, r2, #25
 8004e7c:	d500      	bpl.n	8004e80 <_printf_i+0x16c>
 8004e7e:	b2ad      	uxth	r5, r5
 8004e80:	6019      	str	r1, [r3, #0]
 8004e82:	07d3      	lsls	r3, r2, #31
 8004e84:	d502      	bpl.n	8004e8c <_printf_i+0x178>
 8004e86:	2320      	movs	r3, #32
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	2710      	movs	r7, #16
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	d1a9      	bne.n	8004de6 <_printf_i+0xd2>
 8004e92:	2220      	movs	r2, #32
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	4393      	bics	r3, r2
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	e7a4      	b.n	8004de6 <_printf_i+0xd2>
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	680d      	ldr	r5, [r1, #0]
 8004ea0:	1d10      	adds	r0, r2, #4
 8004ea2:	6949      	ldr	r1, [r1, #20]
 8004ea4:	6018      	str	r0, [r3, #0]
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	062e      	lsls	r6, r5, #24
 8004eaa:	d501      	bpl.n	8004eb0 <_printf_i+0x19c>
 8004eac:	6019      	str	r1, [r3, #0]
 8004eae:	e002      	b.n	8004eb6 <_printf_i+0x1a2>
 8004eb0:	066d      	lsls	r5, r5, #25
 8004eb2:	d5fb      	bpl.n	8004eac <_printf_i+0x198>
 8004eb4:	8019      	strh	r1, [r3, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9e04      	ldr	r6, [sp, #16]
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	e7c0      	b.n	8004e40 <_printf_i+0x12c>
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	1d11      	adds	r1, r2, #4
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	6816      	ldr	r6, [r2, #0]
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	0030      	movs	r0, r6
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	f000 f858 	bl	8004f80 <memchr>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d001      	beq.n	8004ed8 <_printf_i+0x1c4>
 8004ed4:	1b80      	subs	r0, r0, r6
 8004ed6:	6060      	str	r0, [r4, #4]
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9a04      	ldr	r2, [sp, #16]
 8004ee0:	7013      	strb	r3, [r2, #0]
 8004ee2:	e7ad      	b.n	8004e40 <_printf_i+0x12c>
 8004ee4:	0032      	movs	r2, r6
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	9906      	ldr	r1, [sp, #24]
 8004eea:	9805      	ldr	r0, [sp, #20]
 8004eec:	9d07      	ldr	r5, [sp, #28]
 8004eee:	47a8      	blx	r5
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d0af      	beq.n	8004e54 <_printf_i+0x140>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	079b      	lsls	r3, r3, #30
 8004ef8:	d415      	bmi.n	8004f26 <_printf_i+0x212>
 8004efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efc:	68e0      	ldr	r0, [r4, #12]
 8004efe:	4298      	cmp	r0, r3
 8004f00:	daaa      	bge.n	8004e58 <_printf_i+0x144>
 8004f02:	0018      	movs	r0, r3
 8004f04:	e7a8      	b.n	8004e58 <_printf_i+0x144>
 8004f06:	0022      	movs	r2, r4
 8004f08:	2301      	movs	r3, #1
 8004f0a:	9906      	ldr	r1, [sp, #24]
 8004f0c:	9805      	ldr	r0, [sp, #20]
 8004f0e:	9e07      	ldr	r6, [sp, #28]
 8004f10:	3219      	adds	r2, #25
 8004f12:	47b0      	blx	r6
 8004f14:	3001      	adds	r0, #1
 8004f16:	d09d      	beq.n	8004e54 <_printf_i+0x140>
 8004f18:	3501      	adds	r5, #1
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dcf0      	bgt.n	8004f06 <_printf_i+0x1f2>
 8004f24:	e7e9      	b.n	8004efa <_printf_i+0x1e6>
 8004f26:	2500      	movs	r5, #0
 8004f28:	e7f7      	b.n	8004f1a <_printf_i+0x206>
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	08005119 	.word	0x08005119
 8004f30:	0800512a 	.word	0x0800512a

08004f34 <memmove>:
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4288      	cmp	r0, r1
 8004f38:	d902      	bls.n	8004f40 <memmove+0xc>
 8004f3a:	188b      	adds	r3, r1, r2
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	d303      	bcc.n	8004f48 <memmove+0x14>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e007      	b.n	8004f54 <memmove+0x20>
 8004f44:	5c8b      	ldrb	r3, [r1, r2]
 8004f46:	5483      	strb	r3, [r0, r2]
 8004f48:	3a01      	subs	r2, #1
 8004f4a:	d2fb      	bcs.n	8004f44 <memmove+0x10>
 8004f4c:	bd10      	pop	{r4, pc}
 8004f4e:	5ccc      	ldrb	r4, [r1, r3]
 8004f50:	54c4      	strb	r4, [r0, r3]
 8004f52:	3301      	adds	r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1fa      	bne.n	8004f4e <memmove+0x1a>
 8004f58:	e7f8      	b.n	8004f4c <memmove+0x18>
	...

08004f5c <_sbrk_r>:
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	b570      	push	{r4, r5, r6, lr}
 8004f60:	4d06      	ldr	r5, [pc, #24]	; (8004f7c <_sbrk_r+0x20>)
 8004f62:	0004      	movs	r4, r0
 8004f64:	0008      	movs	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f7fb ffae 	bl	8000ec8 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d103      	bne.n	8004f78 <_sbrk_r+0x1c>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d000      	beq.n	8004f78 <_sbrk_r+0x1c>
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	20000488 	.word	0x20000488

08004f80 <memchr>:
 8004f80:	b2c9      	uxtb	r1, r1
 8004f82:	1882      	adds	r2, r0, r2
 8004f84:	4290      	cmp	r0, r2
 8004f86:	d101      	bne.n	8004f8c <memchr+0xc>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	4770      	bx	lr
 8004f8c:	7803      	ldrb	r3, [r0, #0]
 8004f8e:	428b      	cmp	r3, r1
 8004f90:	d0fb      	beq.n	8004f8a <memchr+0xa>
 8004f92:	3001      	adds	r0, #1
 8004f94:	e7f6      	b.n	8004f84 <memchr+0x4>

08004f96 <memcpy>:
 8004f96:	2300      	movs	r3, #0
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d100      	bne.n	8004fa0 <memcpy+0xa>
 8004f9e:	bd10      	pop	{r4, pc}
 8004fa0:	5ccc      	ldrb	r4, [r1, r3]
 8004fa2:	54c4      	strb	r4, [r0, r3]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	e7f8      	b.n	8004f9a <memcpy+0x4>

08004fa8 <_realloc_r>:
 8004fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004faa:	0007      	movs	r7, r0
 8004fac:	000e      	movs	r6, r1
 8004fae:	0014      	movs	r4, r2
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d105      	bne.n	8004fc0 <_realloc_r+0x18>
 8004fb4:	0011      	movs	r1, r2
 8004fb6:	f7ff fc49 	bl	800484c <_malloc_r>
 8004fba:	0005      	movs	r5, r0
 8004fbc:	0028      	movs	r0, r5
 8004fbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d103      	bne.n	8004fcc <_realloc_r+0x24>
 8004fc4:	f7ff fbd6 	bl	8004774 <_free_r>
 8004fc8:	0025      	movs	r5, r4
 8004fca:	e7f7      	b.n	8004fbc <_realloc_r+0x14>
 8004fcc:	f000 f81b 	bl	8005006 <_malloc_usable_size_r>
 8004fd0:	9001      	str	r0, [sp, #4]
 8004fd2:	4284      	cmp	r4, r0
 8004fd4:	d803      	bhi.n	8004fde <_realloc_r+0x36>
 8004fd6:	0035      	movs	r5, r6
 8004fd8:	0843      	lsrs	r3, r0, #1
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	d3ee      	bcc.n	8004fbc <_realloc_r+0x14>
 8004fde:	0021      	movs	r1, r4
 8004fe0:	0038      	movs	r0, r7
 8004fe2:	f7ff fc33 	bl	800484c <_malloc_r>
 8004fe6:	1e05      	subs	r5, r0, #0
 8004fe8:	d0e8      	beq.n	8004fbc <_realloc_r+0x14>
 8004fea:	9b01      	ldr	r3, [sp, #4]
 8004fec:	0022      	movs	r2, r4
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d900      	bls.n	8004ff4 <_realloc_r+0x4c>
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	0031      	movs	r1, r6
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f7ff ffcd 	bl	8004f96 <memcpy>
 8004ffc:	0031      	movs	r1, r6
 8004ffe:	0038      	movs	r0, r7
 8005000:	f7ff fbb8 	bl	8004774 <_free_r>
 8005004:	e7da      	b.n	8004fbc <_realloc_r+0x14>

08005006 <_malloc_usable_size_r>:
 8005006:	1f0b      	subs	r3, r1, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1f18      	subs	r0, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	da01      	bge.n	8005014 <_malloc_usable_size_r+0xe>
 8005010:	580b      	ldr	r3, [r1, r0]
 8005012:	18c0      	adds	r0, r0, r3
 8005014:	4770      	bx	lr
	...

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
