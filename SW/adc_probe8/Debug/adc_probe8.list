
adc_probe8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007224  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007418  08007418  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007418  08007418  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007420  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000074  08007494  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08007494  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e10a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000245a  00000000  00000000  0002e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b4  00000000  00000000  00031198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f1b  00000000  00000000  00031a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e772  00000000  00000000  00048967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f582  00000000  00000000  000570d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ef4  00000000  00000000  000e665c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e9550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080072c4 	.word	0x080072c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080072c4 	.word	0x080072c4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 ff47 	bl	80012a4 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fe97 	bl	8001154 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff39 	bl	80012a4 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff2f 	bl	80012a4 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 febf 	bl	80011d8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 feb5 	bl	80011d8 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_d2uiz>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	2200      	movs	r2, #0
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <__aeabi_d2uiz+0x38>)
 8000482:	0004      	movs	r4, r0
 8000484:	000d      	movs	r5, r1
 8000486:	f7ff ffef 	bl	8000468 <__aeabi_dcmpge>
 800048a:	2800      	cmp	r0, #0
 800048c:	d104      	bne.n	8000498 <__aeabi_d2uiz+0x1c>
 800048e:	0020      	movs	r0, r4
 8000490:	0029      	movs	r1, r5
 8000492:	f001 fdcd 	bl	8002030 <__aeabi_d2iz>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <__aeabi_d2uiz+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	0020      	movs	r0, r4
 800049e:	0029      	movs	r1, r5
 80004a0:	f001 fa26 	bl	80018f0 <__aeabi_dsub>
 80004a4:	f001 fdc4 	bl	8002030 <__aeabi_d2iz>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	061b      	lsls	r3, r3, #24
 80004ac:	469c      	mov	ip, r3
 80004ae:	4460      	add	r0, ip
 80004b0:	e7f1      	b.n	8000496 <__aeabi_d2uiz+0x1a>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	41e00000 	.word	0x41e00000

080004b8 <__aeabi_dadd>:
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	464f      	mov	r7, r9
 80004bc:	4646      	mov	r6, r8
 80004be:	46d6      	mov	lr, sl
 80004c0:	0004      	movs	r4, r0
 80004c2:	b5c0      	push	{r6, r7, lr}
 80004c4:	001f      	movs	r7, r3
 80004c6:	030b      	lsls	r3, r1, #12
 80004c8:	0010      	movs	r0, r2
 80004ca:	004e      	lsls	r6, r1, #1
 80004cc:	0a5b      	lsrs	r3, r3, #9
 80004ce:	0fcd      	lsrs	r5, r1, #31
 80004d0:	0f61      	lsrs	r1, r4, #29
 80004d2:	007a      	lsls	r2, r7, #1
 80004d4:	4319      	orrs	r1, r3
 80004d6:	00e3      	lsls	r3, r4, #3
 80004d8:	033c      	lsls	r4, r7, #12
 80004da:	0fff      	lsrs	r7, r7, #31
 80004dc:	46bc      	mov	ip, r7
 80004de:	0a64      	lsrs	r4, r4, #9
 80004e0:	0f47      	lsrs	r7, r0, #29
 80004e2:	4327      	orrs	r7, r4
 80004e4:	0d76      	lsrs	r6, r6, #21
 80004e6:	0d52      	lsrs	r2, r2, #21
 80004e8:	00c0      	lsls	r0, r0, #3
 80004ea:	46b9      	mov	r9, r7
 80004ec:	4680      	mov	r8, r0
 80004ee:	1ab7      	subs	r7, r6, r2
 80004f0:	4565      	cmp	r5, ip
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x3e>
 80004f4:	e09b      	b.n	800062e <__aeabi_dadd+0x176>
 80004f6:	2f00      	cmp	r7, #0
 80004f8:	dc00      	bgt.n	80004fc <__aeabi_dadd+0x44>
 80004fa:	e084      	b.n	8000606 <__aeabi_dadd+0x14e>
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x4a>
 8000500:	e0be      	b.n	8000680 <__aeabi_dadd+0x1c8>
 8000502:	4ac8      	ldr	r2, [pc, #800]	; (8000824 <__aeabi_dadd+0x36c>)
 8000504:	4296      	cmp	r6, r2
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x52>
 8000508:	e124      	b.n	8000754 <__aeabi_dadd+0x29c>
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	464c      	mov	r4, r9
 800050e:	0412      	lsls	r2, r2, #16
 8000510:	4314      	orrs	r4, r2
 8000512:	46a1      	mov	r9, r4
 8000514:	2f38      	cmp	r7, #56	; 0x38
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x62>
 8000518:	e167      	b.n	80007ea <__aeabi_dadd+0x332>
 800051a:	2f1f      	cmp	r7, #31
 800051c:	dd00      	ble.n	8000520 <__aeabi_dadd+0x68>
 800051e:	e1d6      	b.n	80008ce <__aeabi_dadd+0x416>
 8000520:	2220      	movs	r2, #32
 8000522:	464c      	mov	r4, r9
 8000524:	1bd2      	subs	r2, r2, r7
 8000526:	4094      	lsls	r4, r2
 8000528:	46a2      	mov	sl, r4
 800052a:	4644      	mov	r4, r8
 800052c:	40fc      	lsrs	r4, r7
 800052e:	0020      	movs	r0, r4
 8000530:	4654      	mov	r4, sl
 8000532:	4304      	orrs	r4, r0
 8000534:	4640      	mov	r0, r8
 8000536:	4090      	lsls	r0, r2
 8000538:	1e42      	subs	r2, r0, #1
 800053a:	4190      	sbcs	r0, r2
 800053c:	464a      	mov	r2, r9
 800053e:	40fa      	lsrs	r2, r7
 8000540:	4304      	orrs	r4, r0
 8000542:	1a89      	subs	r1, r1, r2
 8000544:	1b1c      	subs	r4, r3, r4
 8000546:	42a3      	cmp	r3, r4
 8000548:	4192      	sbcs	r2, r2
 800054a:	4252      	negs	r2, r2
 800054c:	1a8b      	subs	r3, r1, r2
 800054e:	469a      	mov	sl, r3
 8000550:	4653      	mov	r3, sl
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	d400      	bmi.n	8000558 <__aeabi_dadd+0xa0>
 8000556:	e0d4      	b.n	8000702 <__aeabi_dadd+0x24a>
 8000558:	4653      	mov	r3, sl
 800055a:	025a      	lsls	r2, r3, #9
 800055c:	0a53      	lsrs	r3, r2, #9
 800055e:	469a      	mov	sl, r3
 8000560:	4653      	mov	r3, sl
 8000562:	2b00      	cmp	r3, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_dadd+0xb0>
 8000566:	e104      	b.n	8000772 <__aeabi_dadd+0x2ba>
 8000568:	4650      	mov	r0, sl
 800056a:	f001 fdc7 	bl	80020fc <__clzsi2>
 800056e:	0003      	movs	r3, r0
 8000570:	3b08      	subs	r3, #8
 8000572:	2220      	movs	r2, #32
 8000574:	0020      	movs	r0, r4
 8000576:	1ad2      	subs	r2, r2, r3
 8000578:	4651      	mov	r1, sl
 800057a:	40d0      	lsrs	r0, r2
 800057c:	4099      	lsls	r1, r3
 800057e:	0002      	movs	r2, r0
 8000580:	409c      	lsls	r4, r3
 8000582:	430a      	orrs	r2, r1
 8000584:	42b3      	cmp	r3, r6
 8000586:	da00      	bge.n	800058a <__aeabi_dadd+0xd2>
 8000588:	e102      	b.n	8000790 <__aeabi_dadd+0x2d8>
 800058a:	1b9b      	subs	r3, r3, r6
 800058c:	1c59      	adds	r1, r3, #1
 800058e:	291f      	cmp	r1, #31
 8000590:	dd00      	ble.n	8000594 <__aeabi_dadd+0xdc>
 8000592:	e0a7      	b.n	80006e4 <__aeabi_dadd+0x22c>
 8000594:	2320      	movs	r3, #32
 8000596:	0010      	movs	r0, r2
 8000598:	0026      	movs	r6, r4
 800059a:	1a5b      	subs	r3, r3, r1
 800059c:	409c      	lsls	r4, r3
 800059e:	4098      	lsls	r0, r3
 80005a0:	40ce      	lsrs	r6, r1
 80005a2:	40ca      	lsrs	r2, r1
 80005a4:	1e63      	subs	r3, r4, #1
 80005a6:	419c      	sbcs	r4, r3
 80005a8:	4330      	orrs	r0, r6
 80005aa:	4692      	mov	sl, r2
 80005ac:	2600      	movs	r6, #0
 80005ae:	4304      	orrs	r4, r0
 80005b0:	0763      	lsls	r3, r4, #29
 80005b2:	d009      	beq.n	80005c8 <__aeabi_dadd+0x110>
 80005b4:	230f      	movs	r3, #15
 80005b6:	4023      	ands	r3, r4
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d005      	beq.n	80005c8 <__aeabi_dadd+0x110>
 80005bc:	1d23      	adds	r3, r4, #4
 80005be:	42a3      	cmp	r3, r4
 80005c0:	41a4      	sbcs	r4, r4
 80005c2:	4264      	negs	r4, r4
 80005c4:	44a2      	add	sl, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	4653      	mov	r3, sl
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	d400      	bmi.n	80005d0 <__aeabi_dadd+0x118>
 80005ce:	e09b      	b.n	8000708 <__aeabi_dadd+0x250>
 80005d0:	4b94      	ldr	r3, [pc, #592]	; (8000824 <__aeabi_dadd+0x36c>)
 80005d2:	3601      	adds	r6, #1
 80005d4:	429e      	cmp	r6, r3
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x122>
 80005d8:	e0b8      	b.n	800074c <__aeabi_dadd+0x294>
 80005da:	4653      	mov	r3, sl
 80005dc:	4992      	ldr	r1, [pc, #584]	; (8000828 <__aeabi_dadd+0x370>)
 80005de:	08e4      	lsrs	r4, r4, #3
 80005e0:	400b      	ands	r3, r1
 80005e2:	0019      	movs	r1, r3
 80005e4:	075b      	lsls	r3, r3, #29
 80005e6:	4323      	orrs	r3, r4
 80005e8:	0572      	lsls	r2, r6, #21
 80005ea:	024c      	lsls	r4, r1, #9
 80005ec:	0b24      	lsrs	r4, r4, #12
 80005ee:	0d52      	lsrs	r2, r2, #21
 80005f0:	0512      	lsls	r2, r2, #20
 80005f2:	07ed      	lsls	r5, r5, #31
 80005f4:	4322      	orrs	r2, r4
 80005f6:	432a      	orrs	r2, r5
 80005f8:	0018      	movs	r0, r3
 80005fa:	0011      	movs	r1, r2
 80005fc:	bce0      	pop	{r5, r6, r7}
 80005fe:	46ba      	mov	sl, r7
 8000600:	46b1      	mov	r9, r6
 8000602:	46a8      	mov	r8, r5
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	2f00      	cmp	r7, #0
 8000608:	d048      	beq.n	800069c <__aeabi_dadd+0x1e4>
 800060a:	1b97      	subs	r7, r2, r6
 800060c:	2e00      	cmp	r6, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_dadd+0x15a>
 8000610:	e10e      	b.n	8000830 <__aeabi_dadd+0x378>
 8000612:	000c      	movs	r4, r1
 8000614:	431c      	orrs	r4, r3
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x162>
 8000618:	e1b7      	b.n	800098a <__aeabi_dadd+0x4d2>
 800061a:	1e7c      	subs	r4, r7, #1
 800061c:	2f01      	cmp	r7, #1
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x16a>
 8000620:	e226      	b.n	8000a70 <__aeabi_dadd+0x5b8>
 8000622:	4d80      	ldr	r5, [pc, #512]	; (8000824 <__aeabi_dadd+0x36c>)
 8000624:	42af      	cmp	r7, r5
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x172>
 8000628:	e1d5      	b.n	80009d6 <__aeabi_dadd+0x51e>
 800062a:	0027      	movs	r7, r4
 800062c:	e107      	b.n	800083e <__aeabi_dadd+0x386>
 800062e:	2f00      	cmp	r7, #0
 8000630:	dc00      	bgt.n	8000634 <__aeabi_dadd+0x17c>
 8000632:	e0b2      	b.n	800079a <__aeabi_dadd+0x2e2>
 8000634:	2a00      	cmp	r2, #0
 8000636:	d047      	beq.n	80006c8 <__aeabi_dadd+0x210>
 8000638:	4a7a      	ldr	r2, [pc, #488]	; (8000824 <__aeabi_dadd+0x36c>)
 800063a:	4296      	cmp	r6, r2
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x188>
 800063e:	e089      	b.n	8000754 <__aeabi_dadd+0x29c>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	464c      	mov	r4, r9
 8000644:	0412      	lsls	r2, r2, #16
 8000646:	4314      	orrs	r4, r2
 8000648:	46a1      	mov	r9, r4
 800064a:	2f38      	cmp	r7, #56	; 0x38
 800064c:	dc6b      	bgt.n	8000726 <__aeabi_dadd+0x26e>
 800064e:	2f1f      	cmp	r7, #31
 8000650:	dc00      	bgt.n	8000654 <__aeabi_dadd+0x19c>
 8000652:	e16e      	b.n	8000932 <__aeabi_dadd+0x47a>
 8000654:	003a      	movs	r2, r7
 8000656:	4648      	mov	r0, r9
 8000658:	3a20      	subs	r2, #32
 800065a:	40d0      	lsrs	r0, r2
 800065c:	4684      	mov	ip, r0
 800065e:	2f20      	cmp	r7, #32
 8000660:	d007      	beq.n	8000672 <__aeabi_dadd+0x1ba>
 8000662:	2240      	movs	r2, #64	; 0x40
 8000664:	4648      	mov	r0, r9
 8000666:	1bd2      	subs	r2, r2, r7
 8000668:	4090      	lsls	r0, r2
 800066a:	0002      	movs	r2, r0
 800066c:	4640      	mov	r0, r8
 800066e:	4310      	orrs	r0, r2
 8000670:	4680      	mov	r8, r0
 8000672:	4640      	mov	r0, r8
 8000674:	1e42      	subs	r2, r0, #1
 8000676:	4190      	sbcs	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	0004      	movs	r4, r0
 800067c:	4314      	orrs	r4, r2
 800067e:	e057      	b.n	8000730 <__aeabi_dadd+0x278>
 8000680:	464a      	mov	r2, r9
 8000682:	4302      	orrs	r2, r0
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1d0>
 8000686:	e103      	b.n	8000890 <__aeabi_dadd+0x3d8>
 8000688:	1e7a      	subs	r2, r7, #1
 800068a:	2f01      	cmp	r7, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x1d8>
 800068e:	e193      	b.n	80009b8 <__aeabi_dadd+0x500>
 8000690:	4c64      	ldr	r4, [pc, #400]	; (8000824 <__aeabi_dadd+0x36c>)
 8000692:	42a7      	cmp	r7, r4
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x1e0>
 8000696:	e18a      	b.n	80009ae <__aeabi_dadd+0x4f6>
 8000698:	0017      	movs	r7, r2
 800069a:	e73b      	b.n	8000514 <__aeabi_dadd+0x5c>
 800069c:	4c63      	ldr	r4, [pc, #396]	; (800082c <__aeabi_dadd+0x374>)
 800069e:	1c72      	adds	r2, r6, #1
 80006a0:	4222      	tst	r2, r4
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x1ee>
 80006a4:	e0e0      	b.n	8000868 <__aeabi_dadd+0x3b0>
 80006a6:	000a      	movs	r2, r1
 80006a8:	431a      	orrs	r2, r3
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d000      	beq.n	80006b0 <__aeabi_dadd+0x1f8>
 80006ae:	e174      	b.n	800099a <__aeabi_dadd+0x4e2>
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x1fe>
 80006b4:	e1d0      	b.n	8000a58 <__aeabi_dadd+0x5a0>
 80006b6:	464a      	mov	r2, r9
 80006b8:	4302      	orrs	r2, r0
 80006ba:	d000      	beq.n	80006be <__aeabi_dadd+0x206>
 80006bc:	e1e3      	b.n	8000a86 <__aeabi_dadd+0x5ce>
 80006be:	074a      	lsls	r2, r1, #29
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	08c9      	lsrs	r1, r1, #3
 80006c6:	e029      	b.n	800071c <__aeabi_dadd+0x264>
 80006c8:	464a      	mov	r2, r9
 80006ca:	4302      	orrs	r2, r0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x218>
 80006ce:	e17d      	b.n	80009cc <__aeabi_dadd+0x514>
 80006d0:	1e7a      	subs	r2, r7, #1
 80006d2:	2f01      	cmp	r7, #1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x220>
 80006d6:	e0e0      	b.n	800089a <__aeabi_dadd+0x3e2>
 80006d8:	4c52      	ldr	r4, [pc, #328]	; (8000824 <__aeabi_dadd+0x36c>)
 80006da:	42a7      	cmp	r7, r4
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x228>
 80006de:	e166      	b.n	80009ae <__aeabi_dadd+0x4f6>
 80006e0:	0017      	movs	r7, r2
 80006e2:	e7b2      	b.n	800064a <__aeabi_dadd+0x192>
 80006e4:	0010      	movs	r0, r2
 80006e6:	3b1f      	subs	r3, #31
 80006e8:	40d8      	lsrs	r0, r3
 80006ea:	2920      	cmp	r1, #32
 80006ec:	d003      	beq.n	80006f6 <__aeabi_dadd+0x23e>
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	1a5b      	subs	r3, r3, r1
 80006f2:	409a      	lsls	r2, r3
 80006f4:	4314      	orrs	r4, r2
 80006f6:	1e63      	subs	r3, r4, #1
 80006f8:	419c      	sbcs	r4, r3
 80006fa:	2300      	movs	r3, #0
 80006fc:	2600      	movs	r6, #0
 80006fe:	469a      	mov	sl, r3
 8000700:	4304      	orrs	r4, r0
 8000702:	0763      	lsls	r3, r4, #29
 8000704:	d000      	beq.n	8000708 <__aeabi_dadd+0x250>
 8000706:	e755      	b.n	80005b4 <__aeabi_dadd+0xfc>
 8000708:	4652      	mov	r2, sl
 800070a:	08e3      	lsrs	r3, r4, #3
 800070c:	0752      	lsls	r2, r2, #29
 800070e:	4313      	orrs	r3, r2
 8000710:	4652      	mov	r2, sl
 8000712:	0037      	movs	r7, r6
 8000714:	08d1      	lsrs	r1, r2, #3
 8000716:	4a43      	ldr	r2, [pc, #268]	; (8000824 <__aeabi_dadd+0x36c>)
 8000718:	4297      	cmp	r7, r2
 800071a:	d01f      	beq.n	800075c <__aeabi_dadd+0x2a4>
 800071c:	0309      	lsls	r1, r1, #12
 800071e:	057a      	lsls	r2, r7, #21
 8000720:	0b0c      	lsrs	r4, r1, #12
 8000722:	0d52      	lsrs	r2, r2, #21
 8000724:	e764      	b.n	80005f0 <__aeabi_dadd+0x138>
 8000726:	4642      	mov	r2, r8
 8000728:	464c      	mov	r4, r9
 800072a:	4314      	orrs	r4, r2
 800072c:	1e62      	subs	r2, r4, #1
 800072e:	4194      	sbcs	r4, r2
 8000730:	18e4      	adds	r4, r4, r3
 8000732:	429c      	cmp	r4, r3
 8000734:	4192      	sbcs	r2, r2
 8000736:	4252      	negs	r2, r2
 8000738:	4692      	mov	sl, r2
 800073a:	448a      	add	sl, r1
 800073c:	4653      	mov	r3, sl
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	d5df      	bpl.n	8000702 <__aeabi_dadd+0x24a>
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <__aeabi_dadd+0x36c>)
 8000744:	3601      	adds	r6, #1
 8000746:	429e      	cmp	r6, r3
 8000748:	d000      	beq.n	800074c <__aeabi_dadd+0x294>
 800074a:	e0b3      	b.n	80008b4 <__aeabi_dadd+0x3fc>
 800074c:	0032      	movs	r2, r6
 800074e:	2400      	movs	r4, #0
 8000750:	2300      	movs	r3, #0
 8000752:	e74d      	b.n	80005f0 <__aeabi_dadd+0x138>
 8000754:	074a      	lsls	r2, r1, #29
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	4313      	orrs	r3, r2
 800075a:	08c9      	lsrs	r1, r1, #3
 800075c:	001a      	movs	r2, r3
 800075e:	430a      	orrs	r2, r1
 8000760:	d100      	bne.n	8000764 <__aeabi_dadd+0x2ac>
 8000762:	e200      	b.n	8000b66 <__aeabi_dadd+0x6ae>
 8000764:	2480      	movs	r4, #128	; 0x80
 8000766:	0324      	lsls	r4, r4, #12
 8000768:	430c      	orrs	r4, r1
 800076a:	0324      	lsls	r4, r4, #12
 800076c:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <__aeabi_dadd+0x36c>)
 800076e:	0b24      	lsrs	r4, r4, #12
 8000770:	e73e      	b.n	80005f0 <__aeabi_dadd+0x138>
 8000772:	0020      	movs	r0, r4
 8000774:	f001 fcc2 	bl	80020fc <__clzsi2>
 8000778:	0003      	movs	r3, r0
 800077a:	3318      	adds	r3, #24
 800077c:	2b1f      	cmp	r3, #31
 800077e:	dc00      	bgt.n	8000782 <__aeabi_dadd+0x2ca>
 8000780:	e6f7      	b.n	8000572 <__aeabi_dadd+0xba>
 8000782:	0022      	movs	r2, r4
 8000784:	3808      	subs	r0, #8
 8000786:	4082      	lsls	r2, r0
 8000788:	2400      	movs	r4, #0
 800078a:	42b3      	cmp	r3, r6
 800078c:	db00      	blt.n	8000790 <__aeabi_dadd+0x2d8>
 800078e:	e6fc      	b.n	800058a <__aeabi_dadd+0xd2>
 8000790:	1af6      	subs	r6, r6, r3
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <__aeabi_dadd+0x370>)
 8000794:	401a      	ands	r2, r3
 8000796:	4692      	mov	sl, r2
 8000798:	e70a      	b.n	80005b0 <__aeabi_dadd+0xf8>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d02b      	beq.n	80007f6 <__aeabi_dadd+0x33e>
 800079e:	1b97      	subs	r7, r2, r6
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x2ee>
 80007a4:	e0b8      	b.n	8000918 <__aeabi_dadd+0x460>
 80007a6:	4c1f      	ldr	r4, [pc, #124]	; (8000824 <__aeabi_dadd+0x36c>)
 80007a8:	42a2      	cmp	r2, r4
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x2f6>
 80007ac:	e11c      	b.n	80009e8 <__aeabi_dadd+0x530>
 80007ae:	2480      	movs	r4, #128	; 0x80
 80007b0:	0424      	lsls	r4, r4, #16
 80007b2:	4321      	orrs	r1, r4
 80007b4:	2f38      	cmp	r7, #56	; 0x38
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x302>
 80007b8:	e11e      	b.n	80009f8 <__aeabi_dadd+0x540>
 80007ba:	2f1f      	cmp	r7, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0x308>
 80007be:	e19e      	b.n	8000afe <__aeabi_dadd+0x646>
 80007c0:	2620      	movs	r6, #32
 80007c2:	000c      	movs	r4, r1
 80007c4:	1bf6      	subs	r6, r6, r7
 80007c6:	0018      	movs	r0, r3
 80007c8:	40b3      	lsls	r3, r6
 80007ca:	40b4      	lsls	r4, r6
 80007cc:	40f8      	lsrs	r0, r7
 80007ce:	1e5e      	subs	r6, r3, #1
 80007d0:	41b3      	sbcs	r3, r6
 80007d2:	40f9      	lsrs	r1, r7
 80007d4:	4304      	orrs	r4, r0
 80007d6:	431c      	orrs	r4, r3
 80007d8:	4489      	add	r9, r1
 80007da:	4444      	add	r4, r8
 80007dc:	4544      	cmp	r4, r8
 80007de:	419b      	sbcs	r3, r3
 80007e0:	425b      	negs	r3, r3
 80007e2:	444b      	add	r3, r9
 80007e4:	469a      	mov	sl, r3
 80007e6:	0016      	movs	r6, r2
 80007e8:	e7a8      	b.n	800073c <__aeabi_dadd+0x284>
 80007ea:	4642      	mov	r2, r8
 80007ec:	464c      	mov	r4, r9
 80007ee:	4314      	orrs	r4, r2
 80007f0:	1e62      	subs	r2, r4, #1
 80007f2:	4194      	sbcs	r4, r2
 80007f4:	e6a6      	b.n	8000544 <__aeabi_dadd+0x8c>
 80007f6:	4c0d      	ldr	r4, [pc, #52]	; (800082c <__aeabi_dadd+0x374>)
 80007f8:	1c72      	adds	r2, r6, #1
 80007fa:	4222      	tst	r2, r4
 80007fc:	d000      	beq.n	8000800 <__aeabi_dadd+0x348>
 80007fe:	e0a8      	b.n	8000952 <__aeabi_dadd+0x49a>
 8000800:	000a      	movs	r2, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	2e00      	cmp	r6, #0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x352>
 8000808:	e10a      	b.n	8000a20 <__aeabi_dadd+0x568>
 800080a:	2a00      	cmp	r2, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x358>
 800080e:	e15e      	b.n	8000ace <__aeabi_dadd+0x616>
 8000810:	464a      	mov	r2, r9
 8000812:	4302      	orrs	r2, r0
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x360>
 8000816:	e161      	b.n	8000adc <__aeabi_dadd+0x624>
 8000818:	074a      	lsls	r2, r1, #29
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	4313      	orrs	r3, r2
 800081e:	08c9      	lsrs	r1, r1, #3
 8000820:	e77c      	b.n	800071c <__aeabi_dadd+0x264>
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	000007ff 	.word	0x000007ff
 8000828:	ff7fffff 	.word	0xff7fffff
 800082c:	000007fe 	.word	0x000007fe
 8000830:	4ccf      	ldr	r4, [pc, #828]	; (8000b70 <__aeabi_dadd+0x6b8>)
 8000832:	42a2      	cmp	r2, r4
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x380>
 8000836:	e0ce      	b.n	80009d6 <__aeabi_dadd+0x51e>
 8000838:	2480      	movs	r4, #128	; 0x80
 800083a:	0424      	lsls	r4, r4, #16
 800083c:	4321      	orrs	r1, r4
 800083e:	2f38      	cmp	r7, #56	; 0x38
 8000840:	dc5b      	bgt.n	80008fa <__aeabi_dadd+0x442>
 8000842:	2f1f      	cmp	r7, #31
 8000844:	dd00      	ble.n	8000848 <__aeabi_dadd+0x390>
 8000846:	e0dc      	b.n	8000a02 <__aeabi_dadd+0x54a>
 8000848:	2520      	movs	r5, #32
 800084a:	000c      	movs	r4, r1
 800084c:	1bed      	subs	r5, r5, r7
 800084e:	001e      	movs	r6, r3
 8000850:	40ab      	lsls	r3, r5
 8000852:	40ac      	lsls	r4, r5
 8000854:	40fe      	lsrs	r6, r7
 8000856:	1e5d      	subs	r5, r3, #1
 8000858:	41ab      	sbcs	r3, r5
 800085a:	4334      	orrs	r4, r6
 800085c:	40f9      	lsrs	r1, r7
 800085e:	431c      	orrs	r4, r3
 8000860:	464b      	mov	r3, r9
 8000862:	1a5b      	subs	r3, r3, r1
 8000864:	4699      	mov	r9, r3
 8000866:	e04c      	b.n	8000902 <__aeabi_dadd+0x44a>
 8000868:	464a      	mov	r2, r9
 800086a:	1a1c      	subs	r4, r3, r0
 800086c:	1a88      	subs	r0, r1, r2
 800086e:	42a3      	cmp	r3, r4
 8000870:	4192      	sbcs	r2, r2
 8000872:	4252      	negs	r2, r2
 8000874:	4692      	mov	sl, r2
 8000876:	0002      	movs	r2, r0
 8000878:	4650      	mov	r0, sl
 800087a:	1a12      	subs	r2, r2, r0
 800087c:	4692      	mov	sl, r2
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	d478      	bmi.n	8000974 <__aeabi_dadd+0x4bc>
 8000882:	4653      	mov	r3, sl
 8000884:	4323      	orrs	r3, r4
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x3d2>
 8000888:	e66a      	b.n	8000560 <__aeabi_dadd+0xa8>
 800088a:	2100      	movs	r1, #0
 800088c:	2500      	movs	r5, #0
 800088e:	e745      	b.n	800071c <__aeabi_dadd+0x264>
 8000890:	074a      	lsls	r2, r1, #29
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	4313      	orrs	r3, r2
 8000896:	08c9      	lsrs	r1, r1, #3
 8000898:	e73d      	b.n	8000716 <__aeabi_dadd+0x25e>
 800089a:	181c      	adds	r4, r3, r0
 800089c:	429c      	cmp	r4, r3
 800089e:	419b      	sbcs	r3, r3
 80008a0:	4449      	add	r1, r9
 80008a2:	468a      	mov	sl, r1
 80008a4:	425b      	negs	r3, r3
 80008a6:	449a      	add	sl, r3
 80008a8:	4653      	mov	r3, sl
 80008aa:	2601      	movs	r6, #1
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_dadd+0x3fa>
 80008b0:	e727      	b.n	8000702 <__aeabi_dadd+0x24a>
 80008b2:	2602      	movs	r6, #2
 80008b4:	4652      	mov	r2, sl
 80008b6:	4baf      	ldr	r3, [pc, #700]	; (8000b74 <__aeabi_dadd+0x6bc>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	401a      	ands	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	4021      	ands	r1, r4
 80008c0:	0862      	lsrs	r2, r4, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	07dc      	lsls	r4, r3, #31
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	469a      	mov	sl, r3
 80008ca:	4314      	orrs	r4, r2
 80008cc:	e670      	b.n	80005b0 <__aeabi_dadd+0xf8>
 80008ce:	003a      	movs	r2, r7
 80008d0:	464c      	mov	r4, r9
 80008d2:	3a20      	subs	r2, #32
 80008d4:	40d4      	lsrs	r4, r2
 80008d6:	46a4      	mov	ip, r4
 80008d8:	2f20      	cmp	r7, #32
 80008da:	d007      	beq.n	80008ec <__aeabi_dadd+0x434>
 80008dc:	2240      	movs	r2, #64	; 0x40
 80008de:	4648      	mov	r0, r9
 80008e0:	1bd2      	subs	r2, r2, r7
 80008e2:	4090      	lsls	r0, r2
 80008e4:	0002      	movs	r2, r0
 80008e6:	4640      	mov	r0, r8
 80008e8:	4310      	orrs	r0, r2
 80008ea:	4680      	mov	r8, r0
 80008ec:	4640      	mov	r0, r8
 80008ee:	1e42      	subs	r2, r0, #1
 80008f0:	4190      	sbcs	r0, r2
 80008f2:	4662      	mov	r2, ip
 80008f4:	0004      	movs	r4, r0
 80008f6:	4314      	orrs	r4, r2
 80008f8:	e624      	b.n	8000544 <__aeabi_dadd+0x8c>
 80008fa:	4319      	orrs	r1, r3
 80008fc:	000c      	movs	r4, r1
 80008fe:	1e63      	subs	r3, r4, #1
 8000900:	419c      	sbcs	r4, r3
 8000902:	4643      	mov	r3, r8
 8000904:	1b1c      	subs	r4, r3, r4
 8000906:	45a0      	cmp	r8, r4
 8000908:	419b      	sbcs	r3, r3
 800090a:	4649      	mov	r1, r9
 800090c:	425b      	negs	r3, r3
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	469a      	mov	sl, r3
 8000912:	4665      	mov	r5, ip
 8000914:	0016      	movs	r6, r2
 8000916:	e61b      	b.n	8000550 <__aeabi_dadd+0x98>
 8000918:	000c      	movs	r4, r1
 800091a:	431c      	orrs	r4, r3
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x468>
 800091e:	e0c7      	b.n	8000ab0 <__aeabi_dadd+0x5f8>
 8000920:	1e7c      	subs	r4, r7, #1
 8000922:	2f01      	cmp	r7, #1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x470>
 8000926:	e0f9      	b.n	8000b1c <__aeabi_dadd+0x664>
 8000928:	4e91      	ldr	r6, [pc, #580]	; (8000b70 <__aeabi_dadd+0x6b8>)
 800092a:	42b7      	cmp	r7, r6
 800092c:	d05c      	beq.n	80009e8 <__aeabi_dadd+0x530>
 800092e:	0027      	movs	r7, r4
 8000930:	e740      	b.n	80007b4 <__aeabi_dadd+0x2fc>
 8000932:	2220      	movs	r2, #32
 8000934:	464c      	mov	r4, r9
 8000936:	4640      	mov	r0, r8
 8000938:	1bd2      	subs	r2, r2, r7
 800093a:	4094      	lsls	r4, r2
 800093c:	40f8      	lsrs	r0, r7
 800093e:	4304      	orrs	r4, r0
 8000940:	4640      	mov	r0, r8
 8000942:	4090      	lsls	r0, r2
 8000944:	1e42      	subs	r2, r0, #1
 8000946:	4190      	sbcs	r0, r2
 8000948:	464a      	mov	r2, r9
 800094a:	40fa      	lsrs	r2, r7
 800094c:	4304      	orrs	r4, r0
 800094e:	1889      	adds	r1, r1, r2
 8000950:	e6ee      	b.n	8000730 <__aeabi_dadd+0x278>
 8000952:	4c87      	ldr	r4, [pc, #540]	; (8000b70 <__aeabi_dadd+0x6b8>)
 8000954:	42a2      	cmp	r2, r4
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x4a2>
 8000958:	e6f9      	b.n	800074e <__aeabi_dadd+0x296>
 800095a:	1818      	adds	r0, r3, r0
 800095c:	4298      	cmp	r0, r3
 800095e:	419b      	sbcs	r3, r3
 8000960:	4449      	add	r1, r9
 8000962:	425b      	negs	r3, r3
 8000964:	18cb      	adds	r3, r1, r3
 8000966:	07dc      	lsls	r4, r3, #31
 8000968:	0840      	lsrs	r0, r0, #1
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	469a      	mov	sl, r3
 800096e:	0016      	movs	r6, r2
 8000970:	4304      	orrs	r4, r0
 8000972:	e6c6      	b.n	8000702 <__aeabi_dadd+0x24a>
 8000974:	4642      	mov	r2, r8
 8000976:	1ad4      	subs	r4, r2, r3
 8000978:	45a0      	cmp	r8, r4
 800097a:	4180      	sbcs	r0, r0
 800097c:	464b      	mov	r3, r9
 800097e:	4240      	negs	r0, r0
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	1a0b      	subs	r3, r1, r0
 8000984:	469a      	mov	sl, r3
 8000986:	4665      	mov	r5, ip
 8000988:	e5ea      	b.n	8000560 <__aeabi_dadd+0xa8>
 800098a:	464b      	mov	r3, r9
 800098c:	464a      	mov	r2, r9
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	075b      	lsls	r3, r3, #29
 8000992:	4665      	mov	r5, ip
 8000994:	4303      	orrs	r3, r0
 8000996:	08d1      	lsrs	r1, r2, #3
 8000998:	e6bd      	b.n	8000716 <__aeabi_dadd+0x25e>
 800099a:	2a00      	cmp	r2, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x4e8>
 800099e:	e08e      	b.n	8000abe <__aeabi_dadd+0x606>
 80009a0:	464b      	mov	r3, r9
 80009a2:	4303      	orrs	r3, r0
 80009a4:	d117      	bne.n	80009d6 <__aeabi_dadd+0x51e>
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	2500      	movs	r5, #0
 80009aa:	0309      	lsls	r1, r1, #12
 80009ac:	e6da      	b.n	8000764 <__aeabi_dadd+0x2ac>
 80009ae:	074a      	lsls	r2, r1, #29
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	08c9      	lsrs	r1, r1, #3
 80009b6:	e6d1      	b.n	800075c <__aeabi_dadd+0x2a4>
 80009b8:	1a1c      	subs	r4, r3, r0
 80009ba:	464a      	mov	r2, r9
 80009bc:	42a3      	cmp	r3, r4
 80009be:	419b      	sbcs	r3, r3
 80009c0:	1a89      	subs	r1, r1, r2
 80009c2:	425b      	negs	r3, r3
 80009c4:	1acb      	subs	r3, r1, r3
 80009c6:	469a      	mov	sl, r3
 80009c8:	2601      	movs	r6, #1
 80009ca:	e5c1      	b.n	8000550 <__aeabi_dadd+0x98>
 80009cc:	074a      	lsls	r2, r1, #29
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	08c9      	lsrs	r1, r1, #3
 80009d4:	e69f      	b.n	8000716 <__aeabi_dadd+0x25e>
 80009d6:	4643      	mov	r3, r8
 80009d8:	08d8      	lsrs	r0, r3, #3
 80009da:	464b      	mov	r3, r9
 80009dc:	464a      	mov	r2, r9
 80009de:	075b      	lsls	r3, r3, #29
 80009e0:	4665      	mov	r5, ip
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e6b9      	b.n	800075c <__aeabi_dadd+0x2a4>
 80009e8:	4643      	mov	r3, r8
 80009ea:	08d8      	lsrs	r0, r3, #3
 80009ec:	464b      	mov	r3, r9
 80009ee:	464a      	mov	r2, r9
 80009f0:	075b      	lsls	r3, r3, #29
 80009f2:	4303      	orrs	r3, r0
 80009f4:	08d1      	lsrs	r1, r2, #3
 80009f6:	e6b1      	b.n	800075c <__aeabi_dadd+0x2a4>
 80009f8:	4319      	orrs	r1, r3
 80009fa:	000c      	movs	r4, r1
 80009fc:	1e63      	subs	r3, r4, #1
 80009fe:	419c      	sbcs	r4, r3
 8000a00:	e6eb      	b.n	80007da <__aeabi_dadd+0x322>
 8000a02:	003c      	movs	r4, r7
 8000a04:	000d      	movs	r5, r1
 8000a06:	3c20      	subs	r4, #32
 8000a08:	40e5      	lsrs	r5, r4
 8000a0a:	2f20      	cmp	r7, #32
 8000a0c:	d003      	beq.n	8000a16 <__aeabi_dadd+0x55e>
 8000a0e:	2440      	movs	r4, #64	; 0x40
 8000a10:	1be4      	subs	r4, r4, r7
 8000a12:	40a1      	lsls	r1, r4
 8000a14:	430b      	orrs	r3, r1
 8000a16:	001c      	movs	r4, r3
 8000a18:	1e63      	subs	r3, r4, #1
 8000a1a:	419c      	sbcs	r4, r3
 8000a1c:	432c      	orrs	r4, r5
 8000a1e:	e770      	b.n	8000902 <__aeabi_dadd+0x44a>
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d0e1      	beq.n	80009e8 <__aeabi_dadd+0x530>
 8000a24:	464a      	mov	r2, r9
 8000a26:	4302      	orrs	r2, r0
 8000a28:	d0c1      	beq.n	80009ae <__aeabi_dadd+0x4f6>
 8000a2a:	074a      	lsls	r2, r1, #29
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	0312      	lsls	r2, r2, #12
 8000a36:	4211      	tst	r1, r2
 8000a38:	d008      	beq.n	8000a4c <__aeabi_dadd+0x594>
 8000a3a:	4648      	mov	r0, r9
 8000a3c:	08c4      	lsrs	r4, r0, #3
 8000a3e:	4214      	tst	r4, r2
 8000a40:	d104      	bne.n	8000a4c <__aeabi_dadd+0x594>
 8000a42:	4643      	mov	r3, r8
 8000a44:	0021      	movs	r1, r4
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	0742      	lsls	r2, r0, #29
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	0f5a      	lsrs	r2, r3, #29
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	0752      	lsls	r2, r2, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	e681      	b.n	800075c <__aeabi_dadd+0x2a4>
 8000a58:	464b      	mov	r3, r9
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x5a8>
 8000a5e:	e714      	b.n	800088a <__aeabi_dadd+0x3d2>
 8000a60:	464b      	mov	r3, r9
 8000a62:	464a      	mov	r2, r9
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	075b      	lsls	r3, r3, #29
 8000a68:	4665      	mov	r5, ip
 8000a6a:	4303      	orrs	r3, r0
 8000a6c:	08d1      	lsrs	r1, r2, #3
 8000a6e:	e655      	b.n	800071c <__aeabi_dadd+0x264>
 8000a70:	1ac4      	subs	r4, r0, r3
 8000a72:	45a0      	cmp	r8, r4
 8000a74:	4180      	sbcs	r0, r0
 8000a76:	464b      	mov	r3, r9
 8000a78:	4240      	negs	r0, r0
 8000a7a:	1a59      	subs	r1, r3, r1
 8000a7c:	1a0b      	subs	r3, r1, r0
 8000a7e:	469a      	mov	sl, r3
 8000a80:	4665      	mov	r5, ip
 8000a82:	2601      	movs	r6, #1
 8000a84:	e564      	b.n	8000550 <__aeabi_dadd+0x98>
 8000a86:	1a1c      	subs	r4, r3, r0
 8000a88:	464a      	mov	r2, r9
 8000a8a:	42a3      	cmp	r3, r4
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	1a8a      	subs	r2, r1, r2
 8000a90:	4240      	negs	r0, r0
 8000a92:	1a12      	subs	r2, r2, r0
 8000a94:	4692      	mov	sl, r2
 8000a96:	0212      	lsls	r2, r2, #8
 8000a98:	d549      	bpl.n	8000b2e <__aeabi_dadd+0x676>
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	1ad4      	subs	r4, r2, r3
 8000a9e:	45a0      	cmp	r8, r4
 8000aa0:	4180      	sbcs	r0, r0
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4240      	negs	r0, r0
 8000aa6:	1a59      	subs	r1, r3, r1
 8000aa8:	1a0b      	subs	r3, r1, r0
 8000aaa:	469a      	mov	sl, r3
 8000aac:	4665      	mov	r5, ip
 8000aae:	e57f      	b.n	80005b0 <__aeabi_dadd+0xf8>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	464a      	mov	r2, r9
 8000ab4:	08c0      	lsrs	r0, r0, #3
 8000ab6:	075b      	lsls	r3, r3, #29
 8000ab8:	4303      	orrs	r3, r0
 8000aba:	08d1      	lsrs	r1, r2, #3
 8000abc:	e62b      	b.n	8000716 <__aeabi_dadd+0x25e>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	08db      	lsrs	r3, r3, #3
 8000ac2:	4302      	orrs	r2, r0
 8000ac4:	d138      	bne.n	8000b38 <__aeabi_dadd+0x680>
 8000ac6:	074a      	lsls	r2, r1, #29
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	08c9      	lsrs	r1, r1, #3
 8000acc:	e646      	b.n	800075c <__aeabi_dadd+0x2a4>
 8000ace:	464b      	mov	r3, r9
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	08c0      	lsrs	r0, r0, #3
 8000ad4:	075b      	lsls	r3, r3, #29
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	08d1      	lsrs	r1, r2, #3
 8000ada:	e61f      	b.n	800071c <__aeabi_dadd+0x264>
 8000adc:	181c      	adds	r4, r3, r0
 8000ade:	429c      	cmp	r4, r3
 8000ae0:	419b      	sbcs	r3, r3
 8000ae2:	4449      	add	r1, r9
 8000ae4:	468a      	mov	sl, r1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	449a      	add	sl, r3
 8000aea:	4653      	mov	r3, sl
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	d400      	bmi.n	8000af2 <__aeabi_dadd+0x63a>
 8000af0:	e607      	b.n	8000702 <__aeabi_dadd+0x24a>
 8000af2:	4652      	mov	r2, sl
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <__aeabi_dadd+0x6bc>)
 8000af6:	2601      	movs	r6, #1
 8000af8:	401a      	ands	r2, r3
 8000afa:	4692      	mov	sl, r2
 8000afc:	e601      	b.n	8000702 <__aeabi_dadd+0x24a>
 8000afe:	003c      	movs	r4, r7
 8000b00:	000e      	movs	r6, r1
 8000b02:	3c20      	subs	r4, #32
 8000b04:	40e6      	lsrs	r6, r4
 8000b06:	2f20      	cmp	r7, #32
 8000b08:	d003      	beq.n	8000b12 <__aeabi_dadd+0x65a>
 8000b0a:	2440      	movs	r4, #64	; 0x40
 8000b0c:	1be4      	subs	r4, r4, r7
 8000b0e:	40a1      	lsls	r1, r4
 8000b10:	430b      	orrs	r3, r1
 8000b12:	001c      	movs	r4, r3
 8000b14:	1e63      	subs	r3, r4, #1
 8000b16:	419c      	sbcs	r4, r3
 8000b18:	4334      	orrs	r4, r6
 8000b1a:	e65e      	b.n	80007da <__aeabi_dadd+0x322>
 8000b1c:	4443      	add	r3, r8
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	4180      	sbcs	r0, r0
 8000b22:	4449      	add	r1, r9
 8000b24:	468a      	mov	sl, r1
 8000b26:	4240      	negs	r0, r0
 8000b28:	001c      	movs	r4, r3
 8000b2a:	4482      	add	sl, r0
 8000b2c:	e6bc      	b.n	80008a8 <__aeabi_dadd+0x3f0>
 8000b2e:	4653      	mov	r3, sl
 8000b30:	4323      	orrs	r3, r4
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x67e>
 8000b34:	e6a9      	b.n	800088a <__aeabi_dadd+0x3d2>
 8000b36:	e5e4      	b.n	8000702 <__aeabi_dadd+0x24a>
 8000b38:	074a      	lsls	r2, r1, #29
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	08c9      	lsrs	r1, r1, #3
 8000b40:	0312      	lsls	r2, r2, #12
 8000b42:	4211      	tst	r1, r2
 8000b44:	d009      	beq.n	8000b5a <__aeabi_dadd+0x6a2>
 8000b46:	4648      	mov	r0, r9
 8000b48:	08c4      	lsrs	r4, r0, #3
 8000b4a:	4214      	tst	r4, r2
 8000b4c:	d105      	bne.n	8000b5a <__aeabi_dadd+0x6a2>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	4665      	mov	r5, ip
 8000b52:	0021      	movs	r1, r4
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	0742      	lsls	r2, r0, #29
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	0f5a      	lsrs	r2, r3, #29
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	0752      	lsls	r2, r2, #29
 8000b62:	4313      	orrs	r3, r2
 8000b64:	e5fa      	b.n	800075c <__aeabi_dadd+0x2a4>
 8000b66:	2300      	movs	r3, #0
 8000b68:	4a01      	ldr	r2, [pc, #4]	; (8000b70 <__aeabi_dadd+0x6b8>)
 8000b6a:	001c      	movs	r4, r3
 8000b6c:	e540      	b.n	80005f0 <__aeabi_dadd+0x138>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	ff7fffff 	.word	0xff7fffff

08000b78 <__aeabi_ddiv>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	4657      	mov	r7, sl
 8000b7c:	464e      	mov	r6, r9
 8000b7e:	4645      	mov	r5, r8
 8000b80:	46de      	mov	lr, fp
 8000b82:	b5e0      	push	{r5, r6, r7, lr}
 8000b84:	030c      	lsls	r4, r1, #12
 8000b86:	001f      	movs	r7, r3
 8000b88:	004b      	lsls	r3, r1, #1
 8000b8a:	4681      	mov	r9, r0
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	0005      	movs	r5, r0
 8000b90:	b085      	sub	sp, #20
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	0fce      	lsrs	r6, r1, #31
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0x26>
 8000b9c:	e152      	b.n	8000e44 <__aeabi_ddiv+0x2cc>
 8000b9e:	4ad2      	ldr	r2, [pc, #840]	; (8000ee8 <__aeabi_ddiv+0x370>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_ddiv+0x2e>
 8000ba4:	e16e      	b.n	8000e84 <__aeabi_ddiv+0x30c>
 8000ba6:	0f42      	lsrs	r2, r0, #29
 8000ba8:	00e4      	lsls	r4, r4, #3
 8000baa:	4314      	orrs	r4, r2
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	0412      	lsls	r2, r2, #16
 8000bb0:	4322      	orrs	r2, r4
 8000bb2:	4690      	mov	r8, r2
 8000bb4:	4acd      	ldr	r2, [pc, #820]	; (8000eec <__aeabi_ddiv+0x374>)
 8000bb6:	00c5      	lsls	r5, r0, #3
 8000bb8:	4693      	mov	fp, r2
 8000bba:	449b      	add	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	033c      	lsls	r4, r7, #12
 8000bc4:	007b      	lsls	r3, r7, #1
 8000bc6:	4650      	mov	r0, sl
 8000bc8:	0b24      	lsrs	r4, r4, #12
 8000bca:	0d5b      	lsrs	r3, r3, #21
 8000bcc:	0fff      	lsrs	r7, r7, #31
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0x5c>
 8000bd2:	e11a      	b.n	8000e0a <__aeabi_ddiv+0x292>
 8000bd4:	4ac4      	ldr	r2, [pc, #784]	; (8000ee8 <__aeabi_ddiv+0x370>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_ddiv+0x64>
 8000bda:	e15e      	b.n	8000e9a <__aeabi_ddiv+0x322>
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	00e4      	lsls	r4, r4, #3
 8000be0:	4322      	orrs	r2, r4
 8000be2:	2480      	movs	r4, #128	; 0x80
 8000be4:	0424      	lsls	r4, r4, #16
 8000be6:	4314      	orrs	r4, r2
 8000be8:	4ac0      	ldr	r2, [pc, #768]	; (8000eec <__aeabi_ddiv+0x374>)
 8000bea:	00c1      	lsls	r1, r0, #3
 8000bec:	4694      	mov	ip, r2
 8000bee:	465a      	mov	r2, fp
 8000bf0:	4463      	add	r3, ip
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	469b      	mov	fp, r3
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	0033      	movs	r3, r6
 8000bfa:	407b      	eors	r3, r7
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	464b      	mov	r3, r9
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d827      	bhi.n	8000c54 <__aeabi_ddiv+0xdc>
 8000c04:	4aba      	ldr	r2, [pc, #744]	; (8000ef0 <__aeabi_ddiv+0x378>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58d3      	ldr	r3, [r2, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	46b2      	mov	sl, r6
 8000c0e:	9b00      	ldr	r3, [sp, #0]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d016      	beq.n	8000c42 <__aeabi_ddiv+0xca>
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0xa2>
 8000c18:	e287      	b.n	800112a <__aeabi_ddiv+0x5b2>
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_ddiv+0xa8>
 8000c1e:	e0d5      	b.n	8000dcc <__aeabi_ddiv+0x254>
 8000c20:	2300      	movs	r3, #0
 8000c22:	2200      	movs	r2, #0
 8000c24:	2500      	movs	r5, #0
 8000c26:	051b      	lsls	r3, r3, #20
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4652      	mov	r2, sl
 8000c2c:	07d2      	lsls	r2, r2, #31
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	0028      	movs	r0, r5
 8000c32:	0019      	movs	r1, r3
 8000c34:	b005      	add	sp, #20
 8000c36:	bcf0      	pop	{r4, r5, r6, r7}
 8000c38:	46bb      	mov	fp, r7
 8000c3a:	46b2      	mov	sl, r6
 8000c3c:	46a9      	mov	r9, r5
 8000c3e:	46a0      	mov	r8, r4
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	2200      	movs	r2, #0
 8000c44:	2500      	movs	r5, #0
 8000c46:	4ba8      	ldr	r3, [pc, #672]	; (8000ee8 <__aeabi_ddiv+0x370>)
 8000c48:	e7ed      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000c4a:	46ba      	mov	sl, r7
 8000c4c:	46a0      	mov	r8, r4
 8000c4e:	000d      	movs	r5, r1
 8000c50:	9000      	str	r0, [sp, #0]
 8000c52:	e7dc      	b.n	8000c0e <__aeabi_ddiv+0x96>
 8000c54:	4544      	cmp	r4, r8
 8000c56:	d200      	bcs.n	8000c5a <__aeabi_ddiv+0xe2>
 8000c58:	e1c4      	b.n	8000fe4 <__aeabi_ddiv+0x46c>
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe6>
 8000c5c:	e1bf      	b.n	8000fde <__aeabi_ddiv+0x466>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	425b      	negs	r3, r3
 8000c62:	469c      	mov	ip, r3
 8000c64:	002e      	movs	r6, r5
 8000c66:	4640      	mov	r0, r8
 8000c68:	2500      	movs	r5, #0
 8000c6a:	44e3      	add	fp, ip
 8000c6c:	0223      	lsls	r3, r4, #8
 8000c6e:	0e0c      	lsrs	r4, r1, #24
 8000c70:	431c      	orrs	r4, r3
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	4699      	mov	r9, r3
 8000c76:	0423      	lsls	r3, r4, #16
 8000c78:	020a      	lsls	r2, r1, #8
 8000c7a:	0c1f      	lsrs	r7, r3, #16
 8000c7c:	4649      	mov	r1, r9
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	9701      	str	r7, [sp, #4]
 8000c82:	f7ff facd 	bl	8000220 <__aeabi_uidivmod>
 8000c86:	0002      	movs	r2, r0
 8000c88:	437a      	muls	r2, r7
 8000c8a:	040b      	lsls	r3, r1, #16
 8000c8c:	0c31      	lsrs	r1, r6, #16
 8000c8e:	4680      	mov	r8, r0
 8000c90:	4319      	orrs	r1, r3
 8000c92:	428a      	cmp	r2, r1
 8000c94:	d907      	bls.n	8000ca6 <__aeabi_ddiv+0x12e>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	1909      	adds	r1, r1, r4
 8000c9e:	44e0      	add	r8, ip
 8000ca0:	428c      	cmp	r4, r1
 8000ca2:	d800      	bhi.n	8000ca6 <__aeabi_ddiv+0x12e>
 8000ca4:	e201      	b.n	80010aa <__aeabi_ddiv+0x532>
 8000ca6:	1a88      	subs	r0, r1, r2
 8000ca8:	4649      	mov	r1, r9
 8000caa:	f7ff fab9 	bl	8000220 <__aeabi_uidivmod>
 8000cae:	9a01      	ldr	r2, [sp, #4]
 8000cb0:	0436      	lsls	r6, r6, #16
 8000cb2:	4342      	muls	r2, r0
 8000cb4:	0409      	lsls	r1, r1, #16
 8000cb6:	0c36      	lsrs	r6, r6, #16
 8000cb8:	0003      	movs	r3, r0
 8000cba:	430e      	orrs	r6, r1
 8000cbc:	42b2      	cmp	r2, r6
 8000cbe:	d904      	bls.n	8000cca <__aeabi_ddiv+0x152>
 8000cc0:	1936      	adds	r6, r6, r4
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	42b4      	cmp	r4, r6
 8000cc6:	d800      	bhi.n	8000cca <__aeabi_ddiv+0x152>
 8000cc8:	e1e9      	b.n	800109e <__aeabi_ddiv+0x526>
 8000cca:	1ab0      	subs	r0, r6, r2
 8000ccc:	4642      	mov	r2, r8
 8000cce:	9e00      	ldr	r6, [sp, #0]
 8000cd0:	0412      	lsls	r2, r2, #16
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	0c33      	lsrs	r3, r6, #16
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	4690      	mov	r8, r2
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	0413      	lsls	r3, r2, #16
 8000ce0:	0432      	lsls	r2, r6, #16
 8000ce2:	0c16      	lsrs	r6, r2, #16
 8000ce4:	0032      	movs	r2, r6
 8000ce6:	0c1b      	lsrs	r3, r3, #16
 8000ce8:	435a      	muls	r2, r3
 8000cea:	9603      	str	r6, [sp, #12]
 8000cec:	437b      	muls	r3, r7
 8000cee:	434e      	muls	r6, r1
 8000cf0:	4379      	muls	r1, r7
 8000cf2:	0c17      	lsrs	r7, r2, #16
 8000cf4:	46bc      	mov	ip, r7
 8000cf6:	199b      	adds	r3, r3, r6
 8000cf8:	4463      	add	r3, ip
 8000cfa:	429e      	cmp	r6, r3
 8000cfc:	d903      	bls.n	8000d06 <__aeabi_ddiv+0x18e>
 8000cfe:	2680      	movs	r6, #128	; 0x80
 8000d00:	0276      	lsls	r6, r6, #9
 8000d02:	46b4      	mov	ip, r6
 8000d04:	4461      	add	r1, ip
 8000d06:	0c1e      	lsrs	r6, r3, #16
 8000d08:	1871      	adds	r1, r6, r1
 8000d0a:	0416      	lsls	r6, r2, #16
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	0c36      	lsrs	r6, r6, #16
 8000d10:	199e      	adds	r6, r3, r6
 8000d12:	4288      	cmp	r0, r1
 8000d14:	d302      	bcc.n	8000d1c <__aeabi_ddiv+0x1a4>
 8000d16:	d112      	bne.n	8000d3e <__aeabi_ddiv+0x1c6>
 8000d18:	42b5      	cmp	r5, r6
 8000d1a:	d210      	bcs.n	8000d3e <__aeabi_ddiv+0x1c6>
 8000d1c:	4643      	mov	r3, r8
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	9b00      	ldr	r3, [sp, #0]
 8000d22:	469c      	mov	ip, r3
 8000d24:	4465      	add	r5, ip
 8000d26:	001f      	movs	r7, r3
 8000d28:	429d      	cmp	r5, r3
 8000d2a:	419b      	sbcs	r3, r3
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	191b      	adds	r3, r3, r4
 8000d30:	18c0      	adds	r0, r0, r3
 8000d32:	4284      	cmp	r4, r0
 8000d34:	d200      	bcs.n	8000d38 <__aeabi_ddiv+0x1c0>
 8000d36:	e19e      	b.n	8001076 <__aeabi_ddiv+0x4fe>
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x1c4>
 8000d3a:	e199      	b.n	8001070 <__aeabi_ddiv+0x4f8>
 8000d3c:	4690      	mov	r8, r2
 8000d3e:	1bae      	subs	r6, r5, r6
 8000d40:	42b5      	cmp	r5, r6
 8000d42:	41ad      	sbcs	r5, r5
 8000d44:	1a40      	subs	r0, r0, r1
 8000d46:	426d      	negs	r5, r5
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	4284      	cmp	r4, r0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x1d8>
 8000d4e:	e1d2      	b.n	80010f6 <__aeabi_ddiv+0x57e>
 8000d50:	4649      	mov	r1, r9
 8000d52:	f7ff fa65 	bl	8000220 <__aeabi_uidivmod>
 8000d56:	9a01      	ldr	r2, [sp, #4]
 8000d58:	040b      	lsls	r3, r1, #16
 8000d5a:	4342      	muls	r2, r0
 8000d5c:	0c31      	lsrs	r1, r6, #16
 8000d5e:	0005      	movs	r5, r0
 8000d60:	4319      	orrs	r1, r3
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d900      	bls.n	8000d68 <__aeabi_ddiv+0x1f0>
 8000d66:	e16c      	b.n	8001042 <__aeabi_ddiv+0x4ca>
 8000d68:	1a88      	subs	r0, r1, r2
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	f7ff fa58 	bl	8000220 <__aeabi_uidivmod>
 8000d70:	9a01      	ldr	r2, [sp, #4]
 8000d72:	0436      	lsls	r6, r6, #16
 8000d74:	4342      	muls	r2, r0
 8000d76:	0409      	lsls	r1, r1, #16
 8000d78:	0c36      	lsrs	r6, r6, #16
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	430e      	orrs	r6, r1
 8000d7e:	42b2      	cmp	r2, r6
 8000d80:	d900      	bls.n	8000d84 <__aeabi_ddiv+0x20c>
 8000d82:	e153      	b.n	800102c <__aeabi_ddiv+0x4b4>
 8000d84:	9803      	ldr	r0, [sp, #12]
 8000d86:	1ab6      	subs	r6, r6, r2
 8000d88:	0002      	movs	r2, r0
 8000d8a:	042d      	lsls	r5, r5, #16
 8000d8c:	431d      	orrs	r5, r3
 8000d8e:	9f02      	ldr	r7, [sp, #8]
 8000d90:	042b      	lsls	r3, r5, #16
 8000d92:	0c1b      	lsrs	r3, r3, #16
 8000d94:	435a      	muls	r2, r3
 8000d96:	437b      	muls	r3, r7
 8000d98:	469c      	mov	ip, r3
 8000d9a:	0c29      	lsrs	r1, r5, #16
 8000d9c:	4348      	muls	r0, r1
 8000d9e:	0c13      	lsrs	r3, r2, #16
 8000da0:	4484      	add	ip, r0
 8000da2:	4463      	add	r3, ip
 8000da4:	4379      	muls	r1, r7
 8000da6:	4298      	cmp	r0, r3
 8000da8:	d903      	bls.n	8000db2 <__aeabi_ddiv+0x23a>
 8000daa:	2080      	movs	r0, #128	; 0x80
 8000dac:	0240      	lsls	r0, r0, #9
 8000dae:	4684      	mov	ip, r0
 8000db0:	4461      	add	r1, ip
 8000db2:	0c18      	lsrs	r0, r3, #16
 8000db4:	0412      	lsls	r2, r2, #16
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	0c12      	lsrs	r2, r2, #16
 8000dba:	1840      	adds	r0, r0, r1
 8000dbc:	189b      	adds	r3, r3, r2
 8000dbe:	4286      	cmp	r6, r0
 8000dc0:	d200      	bcs.n	8000dc4 <__aeabi_ddiv+0x24c>
 8000dc2:	e100      	b.n	8000fc6 <__aeabi_ddiv+0x44e>
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x250>
 8000dc6:	e0fb      	b.n	8000fc0 <__aeabi_ddiv+0x448>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	431d      	orrs	r5, r3
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <__aeabi_ddiv+0x37c>)
 8000dce:	445b      	add	r3, fp
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc00      	bgt.n	8000dd6 <__aeabi_ddiv+0x25e>
 8000dd4:	e0aa      	b.n	8000f2c <__aeabi_ddiv+0x3b4>
 8000dd6:	076a      	lsls	r2, r5, #29
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_ddiv+0x264>
 8000dda:	e13d      	b.n	8001058 <__aeabi_ddiv+0x4e0>
 8000ddc:	08e9      	lsrs	r1, r5, #3
 8000dde:	4642      	mov	r2, r8
 8000de0:	01d2      	lsls	r2, r2, #7
 8000de2:	d506      	bpl.n	8000df2 <__aeabi_ddiv+0x27a>
 8000de4:	4642      	mov	r2, r8
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <__aeabi_ddiv+0x380>)
 8000de8:	401a      	ands	r2, r3
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	4690      	mov	r8, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	445b      	add	r3, fp
 8000df2:	4a42      	ldr	r2, [pc, #264]	; (8000efc <__aeabi_ddiv+0x384>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	dd00      	ble.n	8000dfa <__aeabi_ddiv+0x282>
 8000df8:	e723      	b.n	8000c42 <__aeabi_ddiv+0xca>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	055b      	lsls	r3, r3, #21
 8000dfe:	0755      	lsls	r5, r2, #29
 8000e00:	0252      	lsls	r2, r2, #9
 8000e02:	430d      	orrs	r5, r1
 8000e04:	0b12      	lsrs	r2, r2, #12
 8000e06:	0d5b      	lsrs	r3, r3, #21
 8000e08:	e70d      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000e0a:	4651      	mov	r1, sl
 8000e0c:	4321      	orrs	r1, r4
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_ddiv+0x29a>
 8000e10:	e07c      	b.n	8000f0c <__aeabi_ddiv+0x394>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_ddiv+0x2a0>
 8000e16:	e0fb      	b.n	8001010 <__aeabi_ddiv+0x498>
 8000e18:	0020      	movs	r0, r4
 8000e1a:	f001 f96f 	bl	80020fc <__clzsi2>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	3a0b      	subs	r2, #11
 8000e22:	231d      	movs	r3, #29
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	4652      	mov	r2, sl
 8000e28:	0001      	movs	r1, r0
 8000e2a:	40da      	lsrs	r2, r3
 8000e2c:	4653      	mov	r3, sl
 8000e2e:	3908      	subs	r1, #8
 8000e30:	408b      	lsls	r3, r1
 8000e32:	408c      	lsls	r4, r1
 8000e34:	0019      	movs	r1, r3
 8000e36:	4314      	orrs	r4, r2
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <__aeabi_ddiv+0x388>)
 8000e3a:	4458      	add	r0, fp
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	4483      	add	fp, r0
 8000e40:	2000      	movs	r0, #0
 8000e42:	e6d9      	b.n	8000bf8 <__aeabi_ddiv+0x80>
 8000e44:	0003      	movs	r3, r0
 8000e46:	4323      	orrs	r3, r4
 8000e48:	4698      	mov	r8, r3
 8000e4a:	d044      	beq.n	8000ed6 <__aeabi_ddiv+0x35e>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0x2da>
 8000e50:	e0cf      	b.n	8000ff2 <__aeabi_ddiv+0x47a>
 8000e52:	0020      	movs	r0, r4
 8000e54:	f001 f952 	bl	80020fc <__clzsi2>
 8000e58:	0001      	movs	r1, r0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	390b      	subs	r1, #11
 8000e5e:	231d      	movs	r3, #29
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	4649      	mov	r1, r9
 8000e64:	0010      	movs	r0, r2
 8000e66:	40d9      	lsrs	r1, r3
 8000e68:	3808      	subs	r0, #8
 8000e6a:	4084      	lsls	r4, r0
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	464d      	mov	r5, r9
 8000e70:	4323      	orrs	r3, r4
 8000e72:	4698      	mov	r8, r3
 8000e74:	4085      	lsls	r5, r0
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <__aeabi_ddiv+0x38c>)
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4699      	mov	r9, r3
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	e69e      	b.n	8000bc2 <__aeabi_ddiv+0x4a>
 8000e84:	0002      	movs	r2, r0
 8000e86:	4322      	orrs	r2, r4
 8000e88:	4690      	mov	r8, r2
 8000e8a:	d11d      	bne.n	8000ec8 <__aeabi_ddiv+0x350>
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	469b      	mov	fp, r3
 8000e90:	2302      	movs	r3, #2
 8000e92:	2500      	movs	r5, #0
 8000e94:	4691      	mov	r9, r2
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	e693      	b.n	8000bc2 <__aeabi_ddiv+0x4a>
 8000e9a:	4651      	mov	r1, sl
 8000e9c:	4321      	orrs	r1, r4
 8000e9e:	d109      	bne.n	8000eb4 <__aeabi_ddiv+0x33c>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	464a      	mov	r2, r9
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <__aeabi_ddiv+0x390>)
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	469c      	mov	ip, r3
 8000eac:	2400      	movs	r4, #0
 8000eae:	2002      	movs	r0, #2
 8000eb0:	44e3      	add	fp, ip
 8000eb2:	e6a1      	b.n	8000bf8 <__aeabi_ddiv+0x80>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <__aeabi_ddiv+0x390>)
 8000ebc:	4691      	mov	r9, r2
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	4651      	mov	r1, sl
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	44e3      	add	fp, ip
 8000ec6:	e697      	b.n	8000bf8 <__aeabi_ddiv+0x80>
 8000ec8:	220c      	movs	r2, #12
 8000eca:	469b      	mov	fp, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	46a0      	mov	r8, r4
 8000ed0:	4691      	mov	r9, r2
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e675      	b.n	8000bc2 <__aeabi_ddiv+0x4a>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	4699      	mov	r9, r3
 8000eda:	2300      	movs	r3, #0
 8000edc:	469b      	mov	fp, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	e66d      	b.n	8000bc2 <__aeabi_ddiv+0x4a>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	fffffc01 	.word	0xfffffc01
 8000ef0:	080072fc 	.word	0x080072fc
 8000ef4:	000003ff 	.word	0x000003ff
 8000ef8:	feffffff 	.word	0xfeffffff
 8000efc:	000007fe 	.word	0x000007fe
 8000f00:	000003f3 	.word	0x000003f3
 8000f04:	fffffc0d 	.word	0xfffffc0d
 8000f08:	fffff801 	.word	0xfffff801
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	2301      	movs	r3, #1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	4691      	mov	r9, r2
 8000f14:	2400      	movs	r4, #0
 8000f16:	2001      	movs	r0, #1
 8000f18:	e66e      	b.n	8000bf8 <__aeabi_ddiv+0x80>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	469a      	mov	sl, r3
 8000f20:	2500      	movs	r5, #0
 8000f22:	4b88      	ldr	r3, [pc, #544]	; (8001144 <__aeabi_ddiv+0x5cc>)
 8000f24:	0312      	lsls	r2, r2, #12
 8000f26:	e67e      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000f28:	2501      	movs	r5, #1
 8000f2a:	426d      	negs	r5, r5
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	1ad2      	subs	r2, r2, r3
 8000f30:	2a38      	cmp	r2, #56	; 0x38
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_ddiv+0x3be>
 8000f34:	e674      	b.n	8000c20 <__aeabi_ddiv+0xa8>
 8000f36:	2a1f      	cmp	r2, #31
 8000f38:	dc00      	bgt.n	8000f3c <__aeabi_ddiv+0x3c4>
 8000f3a:	e0bd      	b.n	80010b8 <__aeabi_ddiv+0x540>
 8000f3c:	211f      	movs	r1, #31
 8000f3e:	4249      	negs	r1, r1
 8000f40:	1acb      	subs	r3, r1, r3
 8000f42:	4641      	mov	r1, r8
 8000f44:	40d9      	lsrs	r1, r3
 8000f46:	000b      	movs	r3, r1
 8000f48:	2a20      	cmp	r2, #32
 8000f4a:	d004      	beq.n	8000f56 <__aeabi_ddiv+0x3de>
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	4a7e      	ldr	r2, [pc, #504]	; (8001148 <__aeabi_ddiv+0x5d0>)
 8000f50:	445a      	add	r2, fp
 8000f52:	4091      	lsls	r1, r2
 8000f54:	430d      	orrs	r5, r1
 8000f56:	0029      	movs	r1, r5
 8000f58:	1e4a      	subs	r2, r1, #1
 8000f5a:	4191      	sbcs	r1, r2
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	2307      	movs	r3, #7
 8000f60:	001d      	movs	r5, r3
 8000f62:	2200      	movs	r2, #0
 8000f64:	400d      	ands	r5, r1
 8000f66:	420b      	tst	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x3f4>
 8000f6a:	e0d0      	b.n	800110e <__aeabi_ddiv+0x596>
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	2300      	movs	r3, #0
 8000f70:	400a      	ands	r2, r1
 8000f72:	2a04      	cmp	r2, #4
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x400>
 8000f76:	e0c7      	b.n	8001108 <__aeabi_ddiv+0x590>
 8000f78:	1d0a      	adds	r2, r1, #4
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	4189      	sbcs	r1, r1
 8000f7e:	4249      	negs	r1, r1
 8000f80:	185b      	adds	r3, r3, r1
 8000f82:	0011      	movs	r1, r2
 8000f84:	021a      	lsls	r2, r3, #8
 8000f86:	d400      	bmi.n	8000f8a <__aeabi_ddiv+0x412>
 8000f88:	e0be      	b.n	8001108 <__aeabi_ddiv+0x590>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2500      	movs	r5, #0
 8000f90:	e649      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	4643      	mov	r3, r8
 8000f96:	0312      	lsls	r2, r2, #12
 8000f98:	4213      	tst	r3, r2
 8000f9a:	d008      	beq.n	8000fae <__aeabi_ddiv+0x436>
 8000f9c:	4214      	tst	r4, r2
 8000f9e:	d106      	bne.n	8000fae <__aeabi_ddiv+0x436>
 8000fa0:	4322      	orrs	r2, r4
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	46ba      	mov	sl, r7
 8000fa6:	000d      	movs	r5, r1
 8000fa8:	4b66      	ldr	r3, [pc, #408]	; (8001144 <__aeabi_ddiv+0x5cc>)
 8000faa:	0b12      	lsrs	r2, r2, #12
 8000fac:	e63b      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	0312      	lsls	r2, r2, #12
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	46b2      	mov	sl, r6
 8000fba:	4b62      	ldr	r3, [pc, #392]	; (8001144 <__aeabi_ddiv+0x5cc>)
 8000fbc:	0b12      	lsrs	r2, r2, #12
 8000fbe:	e632      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x44e>
 8000fc4:	e702      	b.n	8000dcc <__aeabi_ddiv+0x254>
 8000fc6:	19a6      	adds	r6, r4, r6
 8000fc8:	1e6a      	subs	r2, r5, #1
 8000fca:	42a6      	cmp	r6, r4
 8000fcc:	d200      	bcs.n	8000fd0 <__aeabi_ddiv+0x458>
 8000fce:	e089      	b.n	80010e4 <__aeabi_ddiv+0x56c>
 8000fd0:	4286      	cmp	r6, r0
 8000fd2:	d200      	bcs.n	8000fd6 <__aeabi_ddiv+0x45e>
 8000fd4:	e09f      	b.n	8001116 <__aeabi_ddiv+0x59e>
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x462>
 8000fd8:	e0af      	b.n	800113a <__aeabi_ddiv+0x5c2>
 8000fda:	0015      	movs	r5, r2
 8000fdc:	e6f4      	b.n	8000dc8 <__aeabi_ddiv+0x250>
 8000fde:	42a9      	cmp	r1, r5
 8000fe0:	d900      	bls.n	8000fe4 <__aeabi_ddiv+0x46c>
 8000fe2:	e63c      	b.n	8000c5e <__aeabi_ddiv+0xe6>
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	07de      	lsls	r6, r3, #31
 8000fe8:	0858      	lsrs	r0, r3, #1
 8000fea:	086b      	lsrs	r3, r5, #1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	07ed      	lsls	r5, r5, #31
 8000ff0:	e63c      	b.n	8000c6c <__aeabi_ddiv+0xf4>
 8000ff2:	f001 f883 	bl	80020fc <__clzsi2>
 8000ff6:	0001      	movs	r1, r0
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	3115      	adds	r1, #21
 8000ffc:	3220      	adds	r2, #32
 8000ffe:	291c      	cmp	r1, #28
 8001000:	dc00      	bgt.n	8001004 <__aeabi_ddiv+0x48c>
 8001002:	e72c      	b.n	8000e5e <__aeabi_ddiv+0x2e6>
 8001004:	464b      	mov	r3, r9
 8001006:	3808      	subs	r0, #8
 8001008:	4083      	lsls	r3, r0
 800100a:	2500      	movs	r5, #0
 800100c:	4698      	mov	r8, r3
 800100e:	e732      	b.n	8000e76 <__aeabi_ddiv+0x2fe>
 8001010:	f001 f874 	bl	80020fc <__clzsi2>
 8001014:	0003      	movs	r3, r0
 8001016:	001a      	movs	r2, r3
 8001018:	3215      	adds	r2, #21
 800101a:	3020      	adds	r0, #32
 800101c:	2a1c      	cmp	r2, #28
 800101e:	dc00      	bgt.n	8001022 <__aeabi_ddiv+0x4aa>
 8001020:	e6ff      	b.n	8000e22 <__aeabi_ddiv+0x2aa>
 8001022:	4654      	mov	r4, sl
 8001024:	3b08      	subs	r3, #8
 8001026:	2100      	movs	r1, #0
 8001028:	409c      	lsls	r4, r3
 800102a:	e705      	b.n	8000e38 <__aeabi_ddiv+0x2c0>
 800102c:	1936      	adds	r6, r6, r4
 800102e:	3b01      	subs	r3, #1
 8001030:	42b4      	cmp	r4, r6
 8001032:	d900      	bls.n	8001036 <__aeabi_ddiv+0x4be>
 8001034:	e6a6      	b.n	8000d84 <__aeabi_ddiv+0x20c>
 8001036:	42b2      	cmp	r2, r6
 8001038:	d800      	bhi.n	800103c <__aeabi_ddiv+0x4c4>
 800103a:	e6a3      	b.n	8000d84 <__aeabi_ddiv+0x20c>
 800103c:	1e83      	subs	r3, r0, #2
 800103e:	1936      	adds	r6, r6, r4
 8001040:	e6a0      	b.n	8000d84 <__aeabi_ddiv+0x20c>
 8001042:	1909      	adds	r1, r1, r4
 8001044:	3d01      	subs	r5, #1
 8001046:	428c      	cmp	r4, r1
 8001048:	d900      	bls.n	800104c <__aeabi_ddiv+0x4d4>
 800104a:	e68d      	b.n	8000d68 <__aeabi_ddiv+0x1f0>
 800104c:	428a      	cmp	r2, r1
 800104e:	d800      	bhi.n	8001052 <__aeabi_ddiv+0x4da>
 8001050:	e68a      	b.n	8000d68 <__aeabi_ddiv+0x1f0>
 8001052:	1e85      	subs	r5, r0, #2
 8001054:	1909      	adds	r1, r1, r4
 8001056:	e687      	b.n	8000d68 <__aeabi_ddiv+0x1f0>
 8001058:	220f      	movs	r2, #15
 800105a:	402a      	ands	r2, r5
 800105c:	2a04      	cmp	r2, #4
 800105e:	d100      	bne.n	8001062 <__aeabi_ddiv+0x4ea>
 8001060:	e6bc      	b.n	8000ddc <__aeabi_ddiv+0x264>
 8001062:	1d29      	adds	r1, r5, #4
 8001064:	42a9      	cmp	r1, r5
 8001066:	41ad      	sbcs	r5, r5
 8001068:	426d      	negs	r5, r5
 800106a:	08c9      	lsrs	r1, r1, #3
 800106c:	44a8      	add	r8, r5
 800106e:	e6b6      	b.n	8000dde <__aeabi_ddiv+0x266>
 8001070:	42af      	cmp	r7, r5
 8001072:	d900      	bls.n	8001076 <__aeabi_ddiv+0x4fe>
 8001074:	e662      	b.n	8000d3c <__aeabi_ddiv+0x1c4>
 8001076:	4281      	cmp	r1, r0
 8001078:	d804      	bhi.n	8001084 <__aeabi_ddiv+0x50c>
 800107a:	d000      	beq.n	800107e <__aeabi_ddiv+0x506>
 800107c:	e65e      	b.n	8000d3c <__aeabi_ddiv+0x1c4>
 800107e:	42ae      	cmp	r6, r5
 8001080:	d800      	bhi.n	8001084 <__aeabi_ddiv+0x50c>
 8001082:	e65b      	b.n	8000d3c <__aeabi_ddiv+0x1c4>
 8001084:	2302      	movs	r3, #2
 8001086:	425b      	negs	r3, r3
 8001088:	469c      	mov	ip, r3
 800108a:	9b00      	ldr	r3, [sp, #0]
 800108c:	44e0      	add	r8, ip
 800108e:	469c      	mov	ip, r3
 8001090:	4465      	add	r5, ip
 8001092:	429d      	cmp	r5, r3
 8001094:	419b      	sbcs	r3, r3
 8001096:	425b      	negs	r3, r3
 8001098:	191b      	adds	r3, r3, r4
 800109a:	18c0      	adds	r0, r0, r3
 800109c:	e64f      	b.n	8000d3e <__aeabi_ddiv+0x1c6>
 800109e:	42b2      	cmp	r2, r6
 80010a0:	d800      	bhi.n	80010a4 <__aeabi_ddiv+0x52c>
 80010a2:	e612      	b.n	8000cca <__aeabi_ddiv+0x152>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	1936      	adds	r6, r6, r4
 80010a8:	e60f      	b.n	8000cca <__aeabi_ddiv+0x152>
 80010aa:	428a      	cmp	r2, r1
 80010ac:	d800      	bhi.n	80010b0 <__aeabi_ddiv+0x538>
 80010ae:	e5fa      	b.n	8000ca6 <__aeabi_ddiv+0x12e>
 80010b0:	1e83      	subs	r3, r0, #2
 80010b2:	4698      	mov	r8, r3
 80010b4:	1909      	adds	r1, r1, r4
 80010b6:	e5f6      	b.n	8000ca6 <__aeabi_ddiv+0x12e>
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <__aeabi_ddiv+0x5d4>)
 80010ba:	0028      	movs	r0, r5
 80010bc:	445b      	add	r3, fp
 80010be:	4641      	mov	r1, r8
 80010c0:	409d      	lsls	r5, r3
 80010c2:	4099      	lsls	r1, r3
 80010c4:	40d0      	lsrs	r0, r2
 80010c6:	1e6b      	subs	r3, r5, #1
 80010c8:	419d      	sbcs	r5, r3
 80010ca:	4643      	mov	r3, r8
 80010cc:	4301      	orrs	r1, r0
 80010ce:	4329      	orrs	r1, r5
 80010d0:	40d3      	lsrs	r3, r2
 80010d2:	074a      	lsls	r2, r1, #29
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x560>
 80010d6:	e755      	b.n	8000f84 <__aeabi_ddiv+0x40c>
 80010d8:	220f      	movs	r2, #15
 80010da:	400a      	ands	r2, r1
 80010dc:	2a04      	cmp	r2, #4
 80010de:	d000      	beq.n	80010e2 <__aeabi_ddiv+0x56a>
 80010e0:	e74a      	b.n	8000f78 <__aeabi_ddiv+0x400>
 80010e2:	e74f      	b.n	8000f84 <__aeabi_ddiv+0x40c>
 80010e4:	0015      	movs	r5, r2
 80010e6:	4286      	cmp	r6, r0
 80010e8:	d000      	beq.n	80010ec <__aeabi_ddiv+0x574>
 80010ea:	e66d      	b.n	8000dc8 <__aeabi_ddiv+0x250>
 80010ec:	9a00      	ldr	r2, [sp, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d000      	beq.n	80010f4 <__aeabi_ddiv+0x57c>
 80010f2:	e669      	b.n	8000dc8 <__aeabi_ddiv+0x250>
 80010f4:	e66a      	b.n	8000dcc <__aeabi_ddiv+0x254>
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <__aeabi_ddiv+0x5d8>)
 80010f8:	445b      	add	r3, fp
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x588>
 80010fe:	e713      	b.n	8000f28 <__aeabi_ddiv+0x3b0>
 8001100:	2501      	movs	r5, #1
 8001102:	2100      	movs	r1, #0
 8001104:	44a8      	add	r8, r5
 8001106:	e66a      	b.n	8000dde <__aeabi_ddiv+0x266>
 8001108:	075d      	lsls	r5, r3, #29
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	0b1a      	lsrs	r2, r3, #12
 800110e:	08c9      	lsrs	r1, r1, #3
 8001110:	2300      	movs	r3, #0
 8001112:	430d      	orrs	r5, r1
 8001114:	e587      	b.n	8000c26 <__aeabi_ddiv+0xae>
 8001116:	9900      	ldr	r1, [sp, #0]
 8001118:	3d02      	subs	r5, #2
 800111a:	004a      	lsls	r2, r1, #1
 800111c:	428a      	cmp	r2, r1
 800111e:	41bf      	sbcs	r7, r7
 8001120:	427f      	negs	r7, r7
 8001122:	193f      	adds	r7, r7, r4
 8001124:	19f6      	adds	r6, r6, r7
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	e7dd      	b.n	80010e6 <__aeabi_ddiv+0x56e>
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	4643      	mov	r3, r8
 800112e:	0312      	lsls	r2, r2, #12
 8001130:	431a      	orrs	r2, r3
 8001132:	0312      	lsls	r2, r2, #12
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <__aeabi_ddiv+0x5cc>)
 8001136:	0b12      	lsrs	r2, r2, #12
 8001138:	e575      	b.n	8000c26 <__aeabi_ddiv+0xae>
 800113a:	9900      	ldr	r1, [sp, #0]
 800113c:	4299      	cmp	r1, r3
 800113e:	d3ea      	bcc.n	8001116 <__aeabi_ddiv+0x59e>
 8001140:	0015      	movs	r5, r2
 8001142:	e7d3      	b.n	80010ec <__aeabi_ddiv+0x574>
 8001144:	000007ff 	.word	0x000007ff
 8001148:	0000043e 	.word	0x0000043e
 800114c:	0000041e 	.word	0x0000041e
 8001150:	000003ff 	.word	0x000003ff

08001154 <__eqdf2>:
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	464e      	mov	r6, r9
 8001158:	4645      	mov	r5, r8
 800115a:	46de      	mov	lr, fp
 800115c:	4657      	mov	r7, sl
 800115e:	4690      	mov	r8, r2
 8001160:	b5e0      	push	{r5, r6, r7, lr}
 8001162:	0017      	movs	r7, r2
 8001164:	031a      	lsls	r2, r3, #12
 8001166:	0b12      	lsrs	r2, r2, #12
 8001168:	0005      	movs	r5, r0
 800116a:	4684      	mov	ip, r0
 800116c:	4819      	ldr	r0, [pc, #100]	; (80011d4 <__eqdf2+0x80>)
 800116e:	030e      	lsls	r6, r1, #12
 8001170:	004c      	lsls	r4, r1, #1
 8001172:	4691      	mov	r9, r2
 8001174:	005a      	lsls	r2, r3, #1
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	469b      	mov	fp, r3
 800117a:	0b36      	lsrs	r6, r6, #12
 800117c:	0d64      	lsrs	r4, r4, #21
 800117e:	0fc9      	lsrs	r1, r1, #31
 8001180:	0d52      	lsrs	r2, r2, #21
 8001182:	4284      	cmp	r4, r0
 8001184:	d019      	beq.n	80011ba <__eqdf2+0x66>
 8001186:	4282      	cmp	r2, r0
 8001188:	d010      	beq.n	80011ac <__eqdf2+0x58>
 800118a:	2001      	movs	r0, #1
 800118c:	4294      	cmp	r4, r2
 800118e:	d10e      	bne.n	80011ae <__eqdf2+0x5a>
 8001190:	454e      	cmp	r6, r9
 8001192:	d10c      	bne.n	80011ae <__eqdf2+0x5a>
 8001194:	2001      	movs	r0, #1
 8001196:	45c4      	cmp	ip, r8
 8001198:	d109      	bne.n	80011ae <__eqdf2+0x5a>
 800119a:	4559      	cmp	r1, fp
 800119c:	d017      	beq.n	80011ce <__eqdf2+0x7a>
 800119e:	2c00      	cmp	r4, #0
 80011a0:	d105      	bne.n	80011ae <__eqdf2+0x5a>
 80011a2:	0030      	movs	r0, r6
 80011a4:	4328      	orrs	r0, r5
 80011a6:	1e43      	subs	r3, r0, #1
 80011a8:	4198      	sbcs	r0, r3
 80011aa:	e000      	b.n	80011ae <__eqdf2+0x5a>
 80011ac:	2001      	movs	r0, #1
 80011ae:	bcf0      	pop	{r4, r5, r6, r7}
 80011b0:	46bb      	mov	fp, r7
 80011b2:	46b2      	mov	sl, r6
 80011b4:	46a9      	mov	r9, r5
 80011b6:	46a0      	mov	r8, r4
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	0033      	movs	r3, r6
 80011bc:	2001      	movs	r0, #1
 80011be:	432b      	orrs	r3, r5
 80011c0:	d1f5      	bne.n	80011ae <__eqdf2+0x5a>
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	d1f3      	bne.n	80011ae <__eqdf2+0x5a>
 80011c6:	464b      	mov	r3, r9
 80011c8:	433b      	orrs	r3, r7
 80011ca:	d1f0      	bne.n	80011ae <__eqdf2+0x5a>
 80011cc:	e7e2      	b.n	8001194 <__eqdf2+0x40>
 80011ce:	2000      	movs	r0, #0
 80011d0:	e7ed      	b.n	80011ae <__eqdf2+0x5a>
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	000007ff 	.word	0x000007ff

080011d8 <__gedf2>:
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	4647      	mov	r7, r8
 80011dc:	46ce      	mov	lr, r9
 80011de:	0004      	movs	r4, r0
 80011e0:	0018      	movs	r0, r3
 80011e2:	0016      	movs	r6, r2
 80011e4:	031b      	lsls	r3, r3, #12
 80011e6:	0b1b      	lsrs	r3, r3, #12
 80011e8:	4d2d      	ldr	r5, [pc, #180]	; (80012a0 <__gedf2+0xc8>)
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	4699      	mov	r9, r3
 80011ee:	b580      	push	{r7, lr}
 80011f0:	0043      	lsls	r3, r0, #1
 80011f2:	030f      	lsls	r7, r1, #12
 80011f4:	46a4      	mov	ip, r4
 80011f6:	46b0      	mov	r8, r6
 80011f8:	0b3f      	lsrs	r7, r7, #12
 80011fa:	0d52      	lsrs	r2, r2, #21
 80011fc:	0fc9      	lsrs	r1, r1, #31
 80011fe:	0d5b      	lsrs	r3, r3, #21
 8001200:	0fc0      	lsrs	r0, r0, #31
 8001202:	42aa      	cmp	r2, r5
 8001204:	d021      	beq.n	800124a <__gedf2+0x72>
 8001206:	42ab      	cmp	r3, r5
 8001208:	d013      	beq.n	8001232 <__gedf2+0x5a>
 800120a:	2a00      	cmp	r2, #0
 800120c:	d122      	bne.n	8001254 <__gedf2+0x7c>
 800120e:	433c      	orrs	r4, r7
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <__gedf2+0x42>
 8001214:	464d      	mov	r5, r9
 8001216:	432e      	orrs	r6, r5
 8001218:	d022      	beq.n	8001260 <__gedf2+0x88>
 800121a:	2c00      	cmp	r4, #0
 800121c:	d010      	beq.n	8001240 <__gedf2+0x68>
 800121e:	4281      	cmp	r1, r0
 8001220:	d022      	beq.n	8001268 <__gedf2+0x90>
 8001222:	2002      	movs	r0, #2
 8001224:	3901      	subs	r1, #1
 8001226:	4008      	ands	r0, r1
 8001228:	3801      	subs	r0, #1
 800122a:	bcc0      	pop	{r6, r7}
 800122c:	46b9      	mov	r9, r7
 800122e:	46b0      	mov	r8, r6
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001232:	464d      	mov	r5, r9
 8001234:	432e      	orrs	r6, r5
 8001236:	d129      	bne.n	800128c <__gedf2+0xb4>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d1f0      	bne.n	800121e <__gedf2+0x46>
 800123c:	433c      	orrs	r4, r7
 800123e:	d1ee      	bne.n	800121e <__gedf2+0x46>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1f2      	bne.n	800122a <__gedf2+0x52>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ef      	b.n	800122a <__gedf2+0x52>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d11d      	bne.n	800128c <__gedf2+0xb4>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0ee      	beq.n	8001232 <__gedf2+0x5a>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e2      	bne.n	800121e <__gedf2+0x46>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1df      	bne.n	800121e <__gedf2+0x46>
 800125e:	e7e0      	b.n	8001222 <__gedf2+0x4a>
 8001260:	2000      	movs	r0, #0
 8001262:	2c00      	cmp	r4, #0
 8001264:	d0e1      	beq.n	800122a <__gedf2+0x52>
 8001266:	e7dc      	b.n	8001222 <__gedf2+0x4a>
 8001268:	429a      	cmp	r2, r3
 800126a:	dc0a      	bgt.n	8001282 <__gedf2+0xaa>
 800126c:	dbe8      	blt.n	8001240 <__gedf2+0x68>
 800126e:	454f      	cmp	r7, r9
 8001270:	d8d7      	bhi.n	8001222 <__gedf2+0x4a>
 8001272:	d00e      	beq.n	8001292 <__gedf2+0xba>
 8001274:	2000      	movs	r0, #0
 8001276:	454f      	cmp	r7, r9
 8001278:	d2d7      	bcs.n	800122a <__gedf2+0x52>
 800127a:	2900      	cmp	r1, #0
 800127c:	d0e2      	beq.n	8001244 <__gedf2+0x6c>
 800127e:	0008      	movs	r0, r1
 8001280:	e7d3      	b.n	800122a <__gedf2+0x52>
 8001282:	4243      	negs	r3, r0
 8001284:	4158      	adcs	r0, r3
 8001286:	0040      	lsls	r0, r0, #1
 8001288:	3801      	subs	r0, #1
 800128a:	e7ce      	b.n	800122a <__gedf2+0x52>
 800128c:	2002      	movs	r0, #2
 800128e:	4240      	negs	r0, r0
 8001290:	e7cb      	b.n	800122a <__gedf2+0x52>
 8001292:	45c4      	cmp	ip, r8
 8001294:	d8c5      	bhi.n	8001222 <__gedf2+0x4a>
 8001296:	2000      	movs	r0, #0
 8001298:	45c4      	cmp	ip, r8
 800129a:	d2c6      	bcs.n	800122a <__gedf2+0x52>
 800129c:	e7ed      	b.n	800127a <__gedf2+0xa2>
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__ledf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	4647      	mov	r7, r8
 80012a8:	46ce      	mov	lr, r9
 80012aa:	0004      	movs	r4, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	0016      	movs	r6, r2
 80012b0:	031b      	lsls	r3, r3, #12
 80012b2:	0b1b      	lsrs	r3, r3, #12
 80012b4:	4d2c      	ldr	r5, [pc, #176]	; (8001368 <__ledf2+0xc4>)
 80012b6:	004a      	lsls	r2, r1, #1
 80012b8:	4699      	mov	r9, r3
 80012ba:	b580      	push	{r7, lr}
 80012bc:	0043      	lsls	r3, r0, #1
 80012be:	030f      	lsls	r7, r1, #12
 80012c0:	46a4      	mov	ip, r4
 80012c2:	46b0      	mov	r8, r6
 80012c4:	0b3f      	lsrs	r7, r7, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	0fc9      	lsrs	r1, r1, #31
 80012ca:	0d5b      	lsrs	r3, r3, #21
 80012cc:	0fc0      	lsrs	r0, r0, #31
 80012ce:	42aa      	cmp	r2, r5
 80012d0:	d00d      	beq.n	80012ee <__ledf2+0x4a>
 80012d2:	42ab      	cmp	r3, r5
 80012d4:	d010      	beq.n	80012f8 <__ledf2+0x54>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d127      	bne.n	800132a <__ledf2+0x86>
 80012da:	433c      	orrs	r4, r7
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d111      	bne.n	8001304 <__ledf2+0x60>
 80012e0:	464d      	mov	r5, r9
 80012e2:	432e      	orrs	r6, r5
 80012e4:	d10e      	bne.n	8001304 <__ledf2+0x60>
 80012e6:	2000      	movs	r0, #0
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d015      	beq.n	8001318 <__ledf2+0x74>
 80012ec:	e00e      	b.n	800130c <__ledf2+0x68>
 80012ee:	003d      	movs	r5, r7
 80012f0:	4325      	orrs	r5, r4
 80012f2:	d110      	bne.n	8001316 <__ledf2+0x72>
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d118      	bne.n	800132a <__ledf2+0x86>
 80012f8:	464d      	mov	r5, r9
 80012fa:	432e      	orrs	r6, r5
 80012fc:	d10b      	bne.n	8001316 <__ledf2+0x72>
 80012fe:	2a00      	cmp	r2, #0
 8001300:	d102      	bne.n	8001308 <__ledf2+0x64>
 8001302:	433c      	orrs	r4, r7
 8001304:	2c00      	cmp	r4, #0
 8001306:	d00b      	beq.n	8001320 <__ledf2+0x7c>
 8001308:	4281      	cmp	r1, r0
 800130a:	d014      	beq.n	8001336 <__ledf2+0x92>
 800130c:	2002      	movs	r0, #2
 800130e:	3901      	subs	r1, #1
 8001310:	4008      	ands	r0, r1
 8001312:	3801      	subs	r0, #1
 8001314:	e000      	b.n	8001318 <__ledf2+0x74>
 8001316:	2002      	movs	r0, #2
 8001318:	bcc0      	pop	{r6, r7}
 800131a:	46b9      	mov	r9, r7
 800131c:	46b0      	mov	r8, r6
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	2800      	cmp	r0, #0
 8001322:	d1f9      	bne.n	8001318 <__ledf2+0x74>
 8001324:	2001      	movs	r0, #1
 8001326:	4240      	negs	r0, r0
 8001328:	e7f6      	b.n	8001318 <__ledf2+0x74>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ec      	bne.n	8001308 <__ledf2+0x64>
 800132e:	464c      	mov	r4, r9
 8001330:	4326      	orrs	r6, r4
 8001332:	d1e9      	bne.n	8001308 <__ledf2+0x64>
 8001334:	e7ea      	b.n	800130c <__ledf2+0x68>
 8001336:	429a      	cmp	r2, r3
 8001338:	dd04      	ble.n	8001344 <__ledf2+0xa0>
 800133a:	4243      	negs	r3, r0
 800133c:	4158      	adcs	r0, r3
 800133e:	0040      	lsls	r0, r0, #1
 8001340:	3801      	subs	r0, #1
 8001342:	e7e9      	b.n	8001318 <__ledf2+0x74>
 8001344:	429a      	cmp	r2, r3
 8001346:	dbeb      	blt.n	8001320 <__ledf2+0x7c>
 8001348:	454f      	cmp	r7, r9
 800134a:	d8df      	bhi.n	800130c <__ledf2+0x68>
 800134c:	d006      	beq.n	800135c <__ledf2+0xb8>
 800134e:	2000      	movs	r0, #0
 8001350:	454f      	cmp	r7, r9
 8001352:	d2e1      	bcs.n	8001318 <__ledf2+0x74>
 8001354:	2900      	cmp	r1, #0
 8001356:	d0e5      	beq.n	8001324 <__ledf2+0x80>
 8001358:	0008      	movs	r0, r1
 800135a:	e7dd      	b.n	8001318 <__ledf2+0x74>
 800135c:	45c4      	cmp	ip, r8
 800135e:	d8d5      	bhi.n	800130c <__ledf2+0x68>
 8001360:	2000      	movs	r0, #0
 8001362:	45c4      	cmp	ip, r8
 8001364:	d2d8      	bcs.n	8001318 <__ledf2+0x74>
 8001366:	e7f5      	b.n	8001354 <__ledf2+0xb0>
 8001368:	000007ff 	.word	0x000007ff

0800136c <__aeabi_dmul>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4645      	mov	r5, r8
 8001370:	46de      	mov	lr, fp
 8001372:	4657      	mov	r7, sl
 8001374:	464e      	mov	r6, r9
 8001376:	b5e0      	push	{r5, r6, r7, lr}
 8001378:	001f      	movs	r7, r3
 800137a:	030b      	lsls	r3, r1, #12
 800137c:	0b1b      	lsrs	r3, r3, #12
 800137e:	469b      	mov	fp, r3
 8001380:	004d      	lsls	r5, r1, #1
 8001382:	0fcb      	lsrs	r3, r1, #31
 8001384:	0004      	movs	r4, r0
 8001386:	4691      	mov	r9, r2
 8001388:	4698      	mov	r8, r3
 800138a:	b087      	sub	sp, #28
 800138c:	0d6d      	lsrs	r5, r5, #21
 800138e:	d100      	bne.n	8001392 <__aeabi_dmul+0x26>
 8001390:	e1cd      	b.n	800172e <__aeabi_dmul+0x3c2>
 8001392:	4bce      	ldr	r3, [pc, #824]	; (80016cc <__aeabi_dmul+0x360>)
 8001394:	429d      	cmp	r5, r3
 8001396:	d100      	bne.n	800139a <__aeabi_dmul+0x2e>
 8001398:	e1e9      	b.n	800176e <__aeabi_dmul+0x402>
 800139a:	465a      	mov	r2, fp
 800139c:	0f43      	lsrs	r3, r0, #29
 800139e:	00d2      	lsls	r2, r2, #3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	0412      	lsls	r2, r2, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	00c3      	lsls	r3, r0, #3
 80013aa:	469a      	mov	sl, r3
 80013ac:	4bc8      	ldr	r3, [pc, #800]	; (80016d0 <__aeabi_dmul+0x364>)
 80013ae:	4693      	mov	fp, r2
 80013b0:	469c      	mov	ip, r3
 80013b2:	2300      	movs	r3, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	4465      	add	r5, ip
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	033c      	lsls	r4, r7, #12
 80013bc:	007b      	lsls	r3, r7, #1
 80013be:	4648      	mov	r0, r9
 80013c0:	0b24      	lsrs	r4, r4, #12
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fff      	lsrs	r7, r7, #31
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <__aeabi_dmul+0x60>
 80013ca:	e189      	b.n	80016e0 <__aeabi_dmul+0x374>
 80013cc:	4abf      	ldr	r2, [pc, #764]	; (80016cc <__aeabi_dmul+0x360>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <__aeabi_dmul+0x9a>
 80013d2:	0f42      	lsrs	r2, r0, #29
 80013d4:	00e4      	lsls	r4, r4, #3
 80013d6:	4322      	orrs	r2, r4
 80013d8:	2480      	movs	r4, #128	; 0x80
 80013da:	0424      	lsls	r4, r4, #16
 80013dc:	4314      	orrs	r4, r2
 80013de:	4abc      	ldr	r2, [pc, #752]	; (80016d0 <__aeabi_dmul+0x364>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4694      	mov	ip, r2
 80013e4:	4642      	mov	r2, r8
 80013e6:	4463      	add	r3, ip
 80013e8:	195b      	adds	r3, r3, r5
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	9b01      	ldr	r3, [sp, #4]
 80013ee:	407a      	eors	r2, r7
 80013f0:	3301      	adds	r3, #1
 80013f2:	00c0      	lsls	r0, r0, #3
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2e0a      	cmp	r6, #10
 80013fa:	dd1c      	ble.n	8001436 <__aeabi_dmul+0xca>
 80013fc:	003a      	movs	r2, r7
 80013fe:	2e0b      	cmp	r6, #11
 8001400:	d05e      	beq.n	80014c0 <__aeabi_dmul+0x154>
 8001402:	4647      	mov	r7, r8
 8001404:	e056      	b.n	80014b4 <__aeabi_dmul+0x148>
 8001406:	4649      	mov	r1, r9
 8001408:	4bb0      	ldr	r3, [pc, #704]	; (80016cc <__aeabi_dmul+0x360>)
 800140a:	4321      	orrs	r1, r4
 800140c:	18eb      	adds	r3, r5, r3
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	2900      	cmp	r1, #0
 8001412:	d12a      	bne.n	800146a <__aeabi_dmul+0xfe>
 8001414:	2080      	movs	r0, #128	; 0x80
 8001416:	2202      	movs	r2, #2
 8001418:	0100      	lsls	r0, r0, #4
 800141a:	002b      	movs	r3, r5
 800141c:	4684      	mov	ip, r0
 800141e:	4316      	orrs	r6, r2
 8001420:	4642      	mov	r2, r8
 8001422:	4463      	add	r3, ip
 8001424:	407a      	eors	r2, r7
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2e0a      	cmp	r6, #10
 800142c:	dd00      	ble.n	8001430 <__aeabi_dmul+0xc4>
 800142e:	e231      	b.n	8001894 <__aeabi_dmul+0x528>
 8001430:	2000      	movs	r0, #0
 8001432:	2400      	movs	r4, #0
 8001434:	2102      	movs	r1, #2
 8001436:	2e02      	cmp	r6, #2
 8001438:	dc26      	bgt.n	8001488 <__aeabi_dmul+0x11c>
 800143a:	3e01      	subs	r6, #1
 800143c:	2e01      	cmp	r6, #1
 800143e:	d852      	bhi.n	80014e6 <__aeabi_dmul+0x17a>
 8001440:	2902      	cmp	r1, #2
 8001442:	d04c      	beq.n	80014de <__aeabi_dmul+0x172>
 8001444:	2901      	cmp	r1, #1
 8001446:	d000      	beq.n	800144a <__aeabi_dmul+0xde>
 8001448:	e118      	b.n	800167c <__aeabi_dmul+0x310>
 800144a:	2300      	movs	r3, #0
 800144c:	2400      	movs	r4, #0
 800144e:	2500      	movs	r5, #0
 8001450:	051b      	lsls	r3, r3, #20
 8001452:	4323      	orrs	r3, r4
 8001454:	07d2      	lsls	r2, r2, #31
 8001456:	4313      	orrs	r3, r2
 8001458:	0028      	movs	r0, r5
 800145a:	0019      	movs	r1, r3
 800145c:	b007      	add	sp, #28
 800145e:	bcf0      	pop	{r4, r5, r6, r7}
 8001460:	46bb      	mov	fp, r7
 8001462:	46b2      	mov	sl, r6
 8001464:	46a9      	mov	r9, r5
 8001466:	46a0      	mov	r8, r4
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	2203      	movs	r2, #3
 800146e:	0109      	lsls	r1, r1, #4
 8001470:	002b      	movs	r3, r5
 8001472:	468c      	mov	ip, r1
 8001474:	4316      	orrs	r6, r2
 8001476:	4642      	mov	r2, r8
 8001478:	4463      	add	r3, ip
 800147a:	407a      	eors	r2, r7
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2e0a      	cmp	r6, #10
 8001482:	dd00      	ble.n	8001486 <__aeabi_dmul+0x11a>
 8001484:	e228      	b.n	80018d8 <__aeabi_dmul+0x56c>
 8001486:	2103      	movs	r1, #3
 8001488:	2501      	movs	r5, #1
 800148a:	40b5      	lsls	r5, r6
 800148c:	46ac      	mov	ip, r5
 800148e:	26a6      	movs	r6, #166	; 0xa6
 8001490:	4663      	mov	r3, ip
 8001492:	00f6      	lsls	r6, r6, #3
 8001494:	4035      	ands	r5, r6
 8001496:	4233      	tst	r3, r6
 8001498:	d10b      	bne.n	80014b2 <__aeabi_dmul+0x146>
 800149a:	2690      	movs	r6, #144	; 0x90
 800149c:	00b6      	lsls	r6, r6, #2
 800149e:	4233      	tst	r3, r6
 80014a0:	d118      	bne.n	80014d4 <__aeabi_dmul+0x168>
 80014a2:	3eb9      	subs	r6, #185	; 0xb9
 80014a4:	3eff      	subs	r6, #255	; 0xff
 80014a6:	421e      	tst	r6, r3
 80014a8:	d01d      	beq.n	80014e6 <__aeabi_dmul+0x17a>
 80014aa:	46a3      	mov	fp, r4
 80014ac:	4682      	mov	sl, r0
 80014ae:	9100      	str	r1, [sp, #0]
 80014b0:	e000      	b.n	80014b4 <__aeabi_dmul+0x148>
 80014b2:	0017      	movs	r7, r2
 80014b4:	9900      	ldr	r1, [sp, #0]
 80014b6:	003a      	movs	r2, r7
 80014b8:	2902      	cmp	r1, #2
 80014ba:	d010      	beq.n	80014de <__aeabi_dmul+0x172>
 80014bc:	465c      	mov	r4, fp
 80014be:	4650      	mov	r0, sl
 80014c0:	2903      	cmp	r1, #3
 80014c2:	d1bf      	bne.n	8001444 <__aeabi_dmul+0xd8>
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	031b      	lsls	r3, r3, #12
 80014c8:	431c      	orrs	r4, r3
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	0005      	movs	r5, r0
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <__aeabi_dmul+0x360>)
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	e7bd      	b.n	8001450 <__aeabi_dmul+0xe4>
 80014d4:	2480      	movs	r4, #128	; 0x80
 80014d6:	2200      	movs	r2, #0
 80014d8:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <__aeabi_dmul+0x360>)
 80014da:	0324      	lsls	r4, r4, #12
 80014dc:	e7b8      	b.n	8001450 <__aeabi_dmul+0xe4>
 80014de:	2400      	movs	r4, #0
 80014e0:	2500      	movs	r5, #0
 80014e2:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <__aeabi_dmul+0x360>)
 80014e4:	e7b4      	b.n	8001450 <__aeabi_dmul+0xe4>
 80014e6:	4653      	mov	r3, sl
 80014e8:	041e      	lsls	r6, r3, #16
 80014ea:	0c36      	lsrs	r6, r6, #16
 80014ec:	0c1f      	lsrs	r7, r3, #16
 80014ee:	0033      	movs	r3, r6
 80014f0:	0c01      	lsrs	r1, r0, #16
 80014f2:	0400      	lsls	r0, r0, #16
 80014f4:	0c00      	lsrs	r0, r0, #16
 80014f6:	4343      	muls	r3, r0
 80014f8:	4698      	mov	r8, r3
 80014fa:	0003      	movs	r3, r0
 80014fc:	437b      	muls	r3, r7
 80014fe:	4699      	mov	r9, r3
 8001500:	0033      	movs	r3, r6
 8001502:	434b      	muls	r3, r1
 8001504:	469c      	mov	ip, r3
 8001506:	4643      	mov	r3, r8
 8001508:	000d      	movs	r5, r1
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	469a      	mov	sl, r3
 800150e:	437d      	muls	r5, r7
 8001510:	44cc      	add	ip, r9
 8001512:	44d4      	add	ip, sl
 8001514:	9500      	str	r5, [sp, #0]
 8001516:	45e1      	cmp	r9, ip
 8001518:	d904      	bls.n	8001524 <__aeabi_dmul+0x1b8>
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	4699      	mov	r9, r3
 8001520:	444d      	add	r5, r9
 8001522:	9500      	str	r5, [sp, #0]
 8001524:	4663      	mov	r3, ip
 8001526:	0c1b      	lsrs	r3, r3, #16
 8001528:	001d      	movs	r5, r3
 800152a:	4663      	mov	r3, ip
 800152c:	041b      	lsls	r3, r3, #16
 800152e:	469c      	mov	ip, r3
 8001530:	4643      	mov	r3, r8
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	4698      	mov	r8, r3
 8001538:	4663      	mov	r3, ip
 800153a:	4443      	add	r3, r8
 800153c:	9303      	str	r3, [sp, #12]
 800153e:	0c23      	lsrs	r3, r4, #16
 8001540:	4698      	mov	r8, r3
 8001542:	0033      	movs	r3, r6
 8001544:	0424      	lsls	r4, r4, #16
 8001546:	0c24      	lsrs	r4, r4, #16
 8001548:	4363      	muls	r3, r4
 800154a:	469c      	mov	ip, r3
 800154c:	0023      	movs	r3, r4
 800154e:	437b      	muls	r3, r7
 8001550:	4699      	mov	r9, r3
 8001552:	4643      	mov	r3, r8
 8001554:	435e      	muls	r6, r3
 8001556:	435f      	muls	r7, r3
 8001558:	444e      	add	r6, r9
 800155a:	4663      	mov	r3, ip
 800155c:	46b2      	mov	sl, r6
 800155e:	0c1e      	lsrs	r6, r3, #16
 8001560:	4456      	add	r6, sl
 8001562:	45b1      	cmp	r9, r6
 8001564:	d903      	bls.n	800156e <__aeabi_dmul+0x202>
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	4699      	mov	r9, r3
 800156c:	444f      	add	r7, r9
 800156e:	0c33      	lsrs	r3, r6, #16
 8001570:	4699      	mov	r9, r3
 8001572:	003b      	movs	r3, r7
 8001574:	444b      	add	r3, r9
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	4663      	mov	r3, ip
 800157a:	46ac      	mov	ip, r5
 800157c:	041f      	lsls	r7, r3, #16
 800157e:	0c3f      	lsrs	r7, r7, #16
 8001580:	0436      	lsls	r6, r6, #16
 8001582:	19f6      	adds	r6, r6, r7
 8001584:	44b4      	add	ip, r6
 8001586:	4663      	mov	r3, ip
 8001588:	9304      	str	r3, [sp, #16]
 800158a:	465b      	mov	r3, fp
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	469c      	mov	ip, r3
 8001590:	465b      	mov	r3, fp
 8001592:	041f      	lsls	r7, r3, #16
 8001594:	0c3f      	lsrs	r7, r7, #16
 8001596:	003b      	movs	r3, r7
 8001598:	4343      	muls	r3, r0
 800159a:	4699      	mov	r9, r3
 800159c:	4663      	mov	r3, ip
 800159e:	4343      	muls	r3, r0
 80015a0:	469a      	mov	sl, r3
 80015a2:	464b      	mov	r3, r9
 80015a4:	4660      	mov	r0, ip
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	469b      	mov	fp, r3
 80015aa:	4348      	muls	r0, r1
 80015ac:	4379      	muls	r1, r7
 80015ae:	4451      	add	r1, sl
 80015b0:	4459      	add	r1, fp
 80015b2:	458a      	cmp	sl, r1
 80015b4:	d903      	bls.n	80015be <__aeabi_dmul+0x252>
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	469a      	mov	sl, r3
 80015bc:	4450      	add	r0, sl
 80015be:	0c0b      	lsrs	r3, r1, #16
 80015c0:	469a      	mov	sl, r3
 80015c2:	464b      	mov	r3, r9
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	4699      	mov	r9, r3
 80015ca:	003b      	movs	r3, r7
 80015cc:	4363      	muls	r3, r4
 80015ce:	0409      	lsls	r1, r1, #16
 80015d0:	4645      	mov	r5, r8
 80015d2:	4449      	add	r1, r9
 80015d4:	4699      	mov	r9, r3
 80015d6:	4663      	mov	r3, ip
 80015d8:	435c      	muls	r4, r3
 80015da:	436b      	muls	r3, r5
 80015dc:	469c      	mov	ip, r3
 80015de:	464b      	mov	r3, r9
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	4698      	mov	r8, r3
 80015e4:	436f      	muls	r7, r5
 80015e6:	193f      	adds	r7, r7, r4
 80015e8:	4447      	add	r7, r8
 80015ea:	4450      	add	r0, sl
 80015ec:	42bc      	cmp	r4, r7
 80015ee:	d903      	bls.n	80015f8 <__aeabi_dmul+0x28c>
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4698      	mov	r8, r3
 80015f6:	44c4      	add	ip, r8
 80015f8:	9b04      	ldr	r3, [sp, #16]
 80015fa:	9d00      	ldr	r5, [sp, #0]
 80015fc:	4698      	mov	r8, r3
 80015fe:	4445      	add	r5, r8
 8001600:	42b5      	cmp	r5, r6
 8001602:	41b6      	sbcs	r6, r6
 8001604:	4273      	negs	r3, r6
 8001606:	4698      	mov	r8, r3
 8001608:	464b      	mov	r3, r9
 800160a:	041e      	lsls	r6, r3, #16
 800160c:	9b05      	ldr	r3, [sp, #20]
 800160e:	043c      	lsls	r4, r7, #16
 8001610:	4699      	mov	r9, r3
 8001612:	0c36      	lsrs	r6, r6, #16
 8001614:	19a4      	adds	r4, r4, r6
 8001616:	444c      	add	r4, r9
 8001618:	46a1      	mov	r9, r4
 800161a:	4683      	mov	fp, r0
 800161c:	186e      	adds	r6, r5, r1
 800161e:	44c1      	add	r9, r8
 8001620:	428e      	cmp	r6, r1
 8001622:	4189      	sbcs	r1, r1
 8001624:	44cb      	add	fp, r9
 8001626:	465d      	mov	r5, fp
 8001628:	4249      	negs	r1, r1
 800162a:	186d      	adds	r5, r5, r1
 800162c:	429c      	cmp	r4, r3
 800162e:	41a4      	sbcs	r4, r4
 8001630:	45c1      	cmp	r9, r8
 8001632:	419b      	sbcs	r3, r3
 8001634:	4583      	cmp	fp, r0
 8001636:	4180      	sbcs	r0, r0
 8001638:	428d      	cmp	r5, r1
 800163a:	4189      	sbcs	r1, r1
 800163c:	425b      	negs	r3, r3
 800163e:	4264      	negs	r4, r4
 8001640:	431c      	orrs	r4, r3
 8001642:	4240      	negs	r0, r0
 8001644:	9b03      	ldr	r3, [sp, #12]
 8001646:	4249      	negs	r1, r1
 8001648:	4301      	orrs	r1, r0
 800164a:	0270      	lsls	r0, r6, #9
 800164c:	0c3f      	lsrs	r7, r7, #16
 800164e:	4318      	orrs	r0, r3
 8001650:	19e4      	adds	r4, r4, r7
 8001652:	1e47      	subs	r7, r0, #1
 8001654:	41b8      	sbcs	r0, r7
 8001656:	1864      	adds	r4, r4, r1
 8001658:	4464      	add	r4, ip
 800165a:	0df6      	lsrs	r6, r6, #23
 800165c:	0261      	lsls	r1, r4, #9
 800165e:	4330      	orrs	r0, r6
 8001660:	0dec      	lsrs	r4, r5, #23
 8001662:	026e      	lsls	r6, r5, #9
 8001664:	430c      	orrs	r4, r1
 8001666:	4330      	orrs	r0, r6
 8001668:	01c9      	lsls	r1, r1, #7
 800166a:	d400      	bmi.n	800166e <__aeabi_dmul+0x302>
 800166c:	e0f1      	b.n	8001852 <__aeabi_dmul+0x4e6>
 800166e:	2101      	movs	r1, #1
 8001670:	0843      	lsrs	r3, r0, #1
 8001672:	4001      	ands	r1, r0
 8001674:	430b      	orrs	r3, r1
 8001676:	07e0      	lsls	r0, r4, #31
 8001678:	4318      	orrs	r0, r3
 800167a:	0864      	lsrs	r4, r4, #1
 800167c:	4915      	ldr	r1, [pc, #84]	; (80016d4 <__aeabi_dmul+0x368>)
 800167e:	9b02      	ldr	r3, [sp, #8]
 8001680:	468c      	mov	ip, r1
 8001682:	4463      	add	r3, ip
 8001684:	2b00      	cmp	r3, #0
 8001686:	dc00      	bgt.n	800168a <__aeabi_dmul+0x31e>
 8001688:	e097      	b.n	80017ba <__aeabi_dmul+0x44e>
 800168a:	0741      	lsls	r1, r0, #29
 800168c:	d009      	beq.n	80016a2 <__aeabi_dmul+0x336>
 800168e:	210f      	movs	r1, #15
 8001690:	4001      	ands	r1, r0
 8001692:	2904      	cmp	r1, #4
 8001694:	d005      	beq.n	80016a2 <__aeabi_dmul+0x336>
 8001696:	1d01      	adds	r1, r0, #4
 8001698:	4281      	cmp	r1, r0
 800169a:	4180      	sbcs	r0, r0
 800169c:	4240      	negs	r0, r0
 800169e:	1824      	adds	r4, r4, r0
 80016a0:	0008      	movs	r0, r1
 80016a2:	01e1      	lsls	r1, r4, #7
 80016a4:	d506      	bpl.n	80016b4 <__aeabi_dmul+0x348>
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	00c9      	lsls	r1, r1, #3
 80016aa:	468c      	mov	ip, r1
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <__aeabi_dmul+0x36c>)
 80016ae:	401c      	ands	r4, r3
 80016b0:	9b02      	ldr	r3, [sp, #8]
 80016b2:	4463      	add	r3, ip
 80016b4:	4909      	ldr	r1, [pc, #36]	; (80016dc <__aeabi_dmul+0x370>)
 80016b6:	428b      	cmp	r3, r1
 80016b8:	dd00      	ble.n	80016bc <__aeabi_dmul+0x350>
 80016ba:	e710      	b.n	80014de <__aeabi_dmul+0x172>
 80016bc:	0761      	lsls	r1, r4, #29
 80016be:	08c5      	lsrs	r5, r0, #3
 80016c0:	0264      	lsls	r4, r4, #9
 80016c2:	055b      	lsls	r3, r3, #21
 80016c4:	430d      	orrs	r5, r1
 80016c6:	0b24      	lsrs	r4, r4, #12
 80016c8:	0d5b      	lsrs	r3, r3, #21
 80016ca:	e6c1      	b.n	8001450 <__aeabi_dmul+0xe4>
 80016cc:	000007ff 	.word	0x000007ff
 80016d0:	fffffc01 	.word	0xfffffc01
 80016d4:	000003ff 	.word	0x000003ff
 80016d8:	feffffff 	.word	0xfeffffff
 80016dc:	000007fe 	.word	0x000007fe
 80016e0:	464b      	mov	r3, r9
 80016e2:	4323      	orrs	r3, r4
 80016e4:	d059      	beq.n	800179a <__aeabi_dmul+0x42e>
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d100      	bne.n	80016ec <__aeabi_dmul+0x380>
 80016ea:	e0a3      	b.n	8001834 <__aeabi_dmul+0x4c8>
 80016ec:	0020      	movs	r0, r4
 80016ee:	f000 fd05 	bl	80020fc <__clzsi2>
 80016f2:	0001      	movs	r1, r0
 80016f4:	0003      	movs	r3, r0
 80016f6:	390b      	subs	r1, #11
 80016f8:	221d      	movs	r2, #29
 80016fa:	1a52      	subs	r2, r2, r1
 80016fc:	4649      	mov	r1, r9
 80016fe:	0018      	movs	r0, r3
 8001700:	40d1      	lsrs	r1, r2
 8001702:	464a      	mov	r2, r9
 8001704:	3808      	subs	r0, #8
 8001706:	4082      	lsls	r2, r0
 8001708:	4084      	lsls	r4, r0
 800170a:	0010      	movs	r0, r2
 800170c:	430c      	orrs	r4, r1
 800170e:	4a74      	ldr	r2, [pc, #464]	; (80018e0 <__aeabi_dmul+0x574>)
 8001710:	1aeb      	subs	r3, r5, r3
 8001712:	4694      	mov	ip, r2
 8001714:	4642      	mov	r2, r8
 8001716:	4463      	add	r3, ip
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	9b01      	ldr	r3, [sp, #4]
 800171c:	407a      	eors	r2, r7
 800171e:	3301      	adds	r3, #1
 8001720:	2100      	movs	r1, #0
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2e0a      	cmp	r6, #10
 8001728:	dd00      	ble.n	800172c <__aeabi_dmul+0x3c0>
 800172a:	e667      	b.n	80013fc <__aeabi_dmul+0x90>
 800172c:	e683      	b.n	8001436 <__aeabi_dmul+0xca>
 800172e:	465b      	mov	r3, fp
 8001730:	4303      	orrs	r3, r0
 8001732:	469a      	mov	sl, r3
 8001734:	d02a      	beq.n	800178c <__aeabi_dmul+0x420>
 8001736:	465b      	mov	r3, fp
 8001738:	2b00      	cmp	r3, #0
 800173a:	d06d      	beq.n	8001818 <__aeabi_dmul+0x4ac>
 800173c:	4658      	mov	r0, fp
 800173e:	f000 fcdd 	bl	80020fc <__clzsi2>
 8001742:	0001      	movs	r1, r0
 8001744:	0003      	movs	r3, r0
 8001746:	390b      	subs	r1, #11
 8001748:	221d      	movs	r2, #29
 800174a:	1a52      	subs	r2, r2, r1
 800174c:	0021      	movs	r1, r4
 800174e:	0018      	movs	r0, r3
 8001750:	465d      	mov	r5, fp
 8001752:	40d1      	lsrs	r1, r2
 8001754:	3808      	subs	r0, #8
 8001756:	4085      	lsls	r5, r0
 8001758:	000a      	movs	r2, r1
 800175a:	4084      	lsls	r4, r0
 800175c:	432a      	orrs	r2, r5
 800175e:	4693      	mov	fp, r2
 8001760:	46a2      	mov	sl, r4
 8001762:	4d5f      	ldr	r5, [pc, #380]	; (80018e0 <__aeabi_dmul+0x574>)
 8001764:	2600      	movs	r6, #0
 8001766:	1aed      	subs	r5, r5, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	e625      	b.n	80013ba <__aeabi_dmul+0x4e>
 800176e:	465b      	mov	r3, fp
 8001770:	4303      	orrs	r3, r0
 8001772:	469a      	mov	sl, r3
 8001774:	d105      	bne.n	8001782 <__aeabi_dmul+0x416>
 8001776:	2300      	movs	r3, #0
 8001778:	469b      	mov	fp, r3
 800177a:	3302      	adds	r3, #2
 800177c:	2608      	movs	r6, #8
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	e61b      	b.n	80013ba <__aeabi_dmul+0x4e>
 8001782:	2303      	movs	r3, #3
 8001784:	4682      	mov	sl, r0
 8001786:	260c      	movs	r6, #12
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	e616      	b.n	80013ba <__aeabi_dmul+0x4e>
 800178c:	2300      	movs	r3, #0
 800178e:	469b      	mov	fp, r3
 8001790:	3301      	adds	r3, #1
 8001792:	2604      	movs	r6, #4
 8001794:	2500      	movs	r5, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	e60f      	b.n	80013ba <__aeabi_dmul+0x4e>
 800179a:	4642      	mov	r2, r8
 800179c:	3301      	adds	r3, #1
 800179e:	9501      	str	r5, [sp, #4]
 80017a0:	431e      	orrs	r6, r3
 80017a2:	9b01      	ldr	r3, [sp, #4]
 80017a4:	407a      	eors	r2, r7
 80017a6:	3301      	adds	r3, #1
 80017a8:	2400      	movs	r4, #0
 80017aa:	2000      	movs	r0, #0
 80017ac:	2101      	movs	r1, #1
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	2e0a      	cmp	r6, #10
 80017b4:	dd00      	ble.n	80017b8 <__aeabi_dmul+0x44c>
 80017b6:	e621      	b.n	80013fc <__aeabi_dmul+0x90>
 80017b8:	e63d      	b.n	8001436 <__aeabi_dmul+0xca>
 80017ba:	2101      	movs	r1, #1
 80017bc:	1ac9      	subs	r1, r1, r3
 80017be:	2938      	cmp	r1, #56	; 0x38
 80017c0:	dd00      	ble.n	80017c4 <__aeabi_dmul+0x458>
 80017c2:	e642      	b.n	800144a <__aeabi_dmul+0xde>
 80017c4:	291f      	cmp	r1, #31
 80017c6:	dd47      	ble.n	8001858 <__aeabi_dmul+0x4ec>
 80017c8:	261f      	movs	r6, #31
 80017ca:	0025      	movs	r5, r4
 80017cc:	4276      	negs	r6, r6
 80017ce:	1af3      	subs	r3, r6, r3
 80017d0:	40dd      	lsrs	r5, r3
 80017d2:	002b      	movs	r3, r5
 80017d4:	2920      	cmp	r1, #32
 80017d6:	d005      	beq.n	80017e4 <__aeabi_dmul+0x478>
 80017d8:	4942      	ldr	r1, [pc, #264]	; (80018e4 <__aeabi_dmul+0x578>)
 80017da:	9d02      	ldr	r5, [sp, #8]
 80017dc:	468c      	mov	ip, r1
 80017de:	4465      	add	r5, ip
 80017e0:	40ac      	lsls	r4, r5
 80017e2:	4320      	orrs	r0, r4
 80017e4:	1e41      	subs	r1, r0, #1
 80017e6:	4188      	sbcs	r0, r1
 80017e8:	4318      	orrs	r0, r3
 80017ea:	2307      	movs	r3, #7
 80017ec:	001d      	movs	r5, r3
 80017ee:	2400      	movs	r4, #0
 80017f0:	4005      	ands	r5, r0
 80017f2:	4203      	tst	r3, r0
 80017f4:	d04a      	beq.n	800188c <__aeabi_dmul+0x520>
 80017f6:	230f      	movs	r3, #15
 80017f8:	2400      	movs	r4, #0
 80017fa:	4003      	ands	r3, r0
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d042      	beq.n	8001886 <__aeabi_dmul+0x51a>
 8001800:	1d03      	adds	r3, r0, #4
 8001802:	4283      	cmp	r3, r0
 8001804:	4180      	sbcs	r0, r0
 8001806:	4240      	negs	r0, r0
 8001808:	1824      	adds	r4, r4, r0
 800180a:	0018      	movs	r0, r3
 800180c:	0223      	lsls	r3, r4, #8
 800180e:	d53a      	bpl.n	8001886 <__aeabi_dmul+0x51a>
 8001810:	2301      	movs	r3, #1
 8001812:	2400      	movs	r4, #0
 8001814:	2500      	movs	r5, #0
 8001816:	e61b      	b.n	8001450 <__aeabi_dmul+0xe4>
 8001818:	f000 fc70 	bl	80020fc <__clzsi2>
 800181c:	0001      	movs	r1, r0
 800181e:	0003      	movs	r3, r0
 8001820:	3115      	adds	r1, #21
 8001822:	3320      	adds	r3, #32
 8001824:	291c      	cmp	r1, #28
 8001826:	dd8f      	ble.n	8001748 <__aeabi_dmul+0x3dc>
 8001828:	3808      	subs	r0, #8
 800182a:	2200      	movs	r2, #0
 800182c:	4084      	lsls	r4, r0
 800182e:	4692      	mov	sl, r2
 8001830:	46a3      	mov	fp, r4
 8001832:	e796      	b.n	8001762 <__aeabi_dmul+0x3f6>
 8001834:	f000 fc62 	bl	80020fc <__clzsi2>
 8001838:	0001      	movs	r1, r0
 800183a:	0003      	movs	r3, r0
 800183c:	3115      	adds	r1, #21
 800183e:	3320      	adds	r3, #32
 8001840:	291c      	cmp	r1, #28
 8001842:	dc00      	bgt.n	8001846 <__aeabi_dmul+0x4da>
 8001844:	e758      	b.n	80016f8 <__aeabi_dmul+0x38c>
 8001846:	0002      	movs	r2, r0
 8001848:	464c      	mov	r4, r9
 800184a:	3a08      	subs	r2, #8
 800184c:	2000      	movs	r0, #0
 800184e:	4094      	lsls	r4, r2
 8001850:	e75d      	b.n	800170e <__aeabi_dmul+0x3a2>
 8001852:	9b01      	ldr	r3, [sp, #4]
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	e711      	b.n	800167c <__aeabi_dmul+0x310>
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <__aeabi_dmul+0x57c>)
 800185a:	0026      	movs	r6, r4
 800185c:	469c      	mov	ip, r3
 800185e:	0003      	movs	r3, r0
 8001860:	9d02      	ldr	r5, [sp, #8]
 8001862:	40cb      	lsrs	r3, r1
 8001864:	4465      	add	r5, ip
 8001866:	40ae      	lsls	r6, r5
 8001868:	431e      	orrs	r6, r3
 800186a:	0003      	movs	r3, r0
 800186c:	40ab      	lsls	r3, r5
 800186e:	1e58      	subs	r0, r3, #1
 8001870:	4183      	sbcs	r3, r0
 8001872:	0030      	movs	r0, r6
 8001874:	4318      	orrs	r0, r3
 8001876:	40cc      	lsrs	r4, r1
 8001878:	0743      	lsls	r3, r0, #29
 800187a:	d0c7      	beq.n	800180c <__aeabi_dmul+0x4a0>
 800187c:	230f      	movs	r3, #15
 800187e:	4003      	ands	r3, r0
 8001880:	2b04      	cmp	r3, #4
 8001882:	d1bd      	bne.n	8001800 <__aeabi_dmul+0x494>
 8001884:	e7c2      	b.n	800180c <__aeabi_dmul+0x4a0>
 8001886:	0765      	lsls	r5, r4, #29
 8001888:	0264      	lsls	r4, r4, #9
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	08c0      	lsrs	r0, r0, #3
 800188e:	2300      	movs	r3, #0
 8001890:	4305      	orrs	r5, r0
 8001892:	e5dd      	b.n	8001450 <__aeabi_dmul+0xe4>
 8001894:	2500      	movs	r5, #0
 8001896:	2302      	movs	r3, #2
 8001898:	2e0f      	cmp	r6, #15
 800189a:	d10c      	bne.n	80018b6 <__aeabi_dmul+0x54a>
 800189c:	2480      	movs	r4, #128	; 0x80
 800189e:	465b      	mov	r3, fp
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	4223      	tst	r3, r4
 80018a4:	d00e      	beq.n	80018c4 <__aeabi_dmul+0x558>
 80018a6:	4221      	tst	r1, r4
 80018a8:	d10c      	bne.n	80018c4 <__aeabi_dmul+0x558>
 80018aa:	430c      	orrs	r4, r1
 80018ac:	0324      	lsls	r4, r4, #12
 80018ae:	003a      	movs	r2, r7
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <__aeabi_dmul+0x580>)
 80018b2:	0b24      	lsrs	r4, r4, #12
 80018b4:	e5cc      	b.n	8001450 <__aeabi_dmul+0xe4>
 80018b6:	2e0b      	cmp	r6, #11
 80018b8:	d000      	beq.n	80018bc <__aeabi_dmul+0x550>
 80018ba:	e5a2      	b.n	8001402 <__aeabi_dmul+0x96>
 80018bc:	468b      	mov	fp, r1
 80018be:	46aa      	mov	sl, r5
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	e5f7      	b.n	80014b4 <__aeabi_dmul+0x148>
 80018c4:	2480      	movs	r4, #128	; 0x80
 80018c6:	465b      	mov	r3, fp
 80018c8:	0324      	lsls	r4, r4, #12
 80018ca:	431c      	orrs	r4, r3
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	4642      	mov	r2, r8
 80018d0:	4655      	mov	r5, sl
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <__aeabi_dmul+0x580>)
 80018d4:	0b24      	lsrs	r4, r4, #12
 80018d6:	e5bb      	b.n	8001450 <__aeabi_dmul+0xe4>
 80018d8:	464d      	mov	r5, r9
 80018da:	0021      	movs	r1, r4
 80018dc:	2303      	movs	r3, #3
 80018de:	e7db      	b.n	8001898 <__aeabi_dmul+0x52c>
 80018e0:	fffffc0d 	.word	0xfffffc0d
 80018e4:	0000043e 	.word	0x0000043e
 80018e8:	0000041e 	.word	0x0000041e
 80018ec:	000007ff 	.word	0x000007ff

080018f0 <__aeabi_dsub>:
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	4657      	mov	r7, sl
 80018f4:	464e      	mov	r6, r9
 80018f6:	4645      	mov	r5, r8
 80018f8:	46de      	mov	lr, fp
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	000d      	movs	r5, r1
 80018fe:	0004      	movs	r4, r0
 8001900:	0019      	movs	r1, r3
 8001902:	0010      	movs	r0, r2
 8001904:	032b      	lsls	r3, r5, #12
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	0f62      	lsrs	r2, r4, #29
 800190a:	431a      	orrs	r2, r3
 800190c:	00e3      	lsls	r3, r4, #3
 800190e:	030c      	lsls	r4, r1, #12
 8001910:	0a64      	lsrs	r4, r4, #9
 8001912:	0f47      	lsrs	r7, r0, #29
 8001914:	4327      	orrs	r7, r4
 8001916:	4cd0      	ldr	r4, [pc, #832]	; (8001c58 <__aeabi_dsub+0x368>)
 8001918:	006e      	lsls	r6, r5, #1
 800191a:	4691      	mov	r9, r2
 800191c:	b083      	sub	sp, #12
 800191e:	004a      	lsls	r2, r1, #1
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	4698      	mov	r8, r3
 8001924:	46a2      	mov	sl, r4
 8001926:	0d76      	lsrs	r6, r6, #21
 8001928:	0fed      	lsrs	r5, r5, #31
 800192a:	0d52      	lsrs	r2, r2, #21
 800192c:	0fc9      	lsrs	r1, r1, #31
 800192e:	9001      	str	r0, [sp, #4]
 8001930:	42a2      	cmp	r2, r4
 8001932:	d100      	bne.n	8001936 <__aeabi_dsub+0x46>
 8001934:	e0b9      	b.n	8001aaa <__aeabi_dsub+0x1ba>
 8001936:	2401      	movs	r4, #1
 8001938:	4061      	eors	r1, r4
 800193a:	468b      	mov	fp, r1
 800193c:	428d      	cmp	r5, r1
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x52>
 8001940:	e08d      	b.n	8001a5e <__aeabi_dsub+0x16e>
 8001942:	1ab4      	subs	r4, r6, r2
 8001944:	46a4      	mov	ip, r4
 8001946:	2c00      	cmp	r4, #0
 8001948:	dc00      	bgt.n	800194c <__aeabi_dsub+0x5c>
 800194a:	e0b7      	b.n	8001abc <__aeabi_dsub+0x1cc>
 800194c:	2a00      	cmp	r2, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x62>
 8001950:	e0cb      	b.n	8001aea <__aeabi_dsub+0x1fa>
 8001952:	4ac1      	ldr	r2, [pc, #772]	; (8001c58 <__aeabi_dsub+0x368>)
 8001954:	4296      	cmp	r6, r2
 8001956:	d100      	bne.n	800195a <__aeabi_dsub+0x6a>
 8001958:	e186      	b.n	8001c68 <__aeabi_dsub+0x378>
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	0412      	lsls	r2, r2, #16
 800195e:	4317      	orrs	r7, r2
 8001960:	4662      	mov	r2, ip
 8001962:	2a38      	cmp	r2, #56	; 0x38
 8001964:	dd00      	ble.n	8001968 <__aeabi_dsub+0x78>
 8001966:	e1a4      	b.n	8001cb2 <__aeabi_dsub+0x3c2>
 8001968:	2a1f      	cmp	r2, #31
 800196a:	dd00      	ble.n	800196e <__aeabi_dsub+0x7e>
 800196c:	e21d      	b.n	8001daa <__aeabi_dsub+0x4ba>
 800196e:	4661      	mov	r1, ip
 8001970:	2220      	movs	r2, #32
 8001972:	003c      	movs	r4, r7
 8001974:	1a52      	subs	r2, r2, r1
 8001976:	0001      	movs	r1, r0
 8001978:	4090      	lsls	r0, r2
 800197a:	4094      	lsls	r4, r2
 800197c:	1e42      	subs	r2, r0, #1
 800197e:	4190      	sbcs	r0, r2
 8001980:	4662      	mov	r2, ip
 8001982:	46a0      	mov	r8, r4
 8001984:	4664      	mov	r4, ip
 8001986:	40d7      	lsrs	r7, r2
 8001988:	464a      	mov	r2, r9
 800198a:	40e1      	lsrs	r1, r4
 800198c:	4644      	mov	r4, r8
 800198e:	1bd2      	subs	r2, r2, r7
 8001990:	4691      	mov	r9, r2
 8001992:	430c      	orrs	r4, r1
 8001994:	4304      	orrs	r4, r0
 8001996:	1b1c      	subs	r4, r3, r4
 8001998:	42a3      	cmp	r3, r4
 800199a:	4192      	sbcs	r2, r2
 800199c:	464b      	mov	r3, r9
 800199e:	4252      	negs	r2, r2
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	469a      	mov	sl, r3
 80019a4:	4653      	mov	r3, sl
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	d400      	bmi.n	80019ac <__aeabi_dsub+0xbc>
 80019aa:	e12b      	b.n	8001c04 <__aeabi_dsub+0x314>
 80019ac:	4653      	mov	r3, sl
 80019ae:	025a      	lsls	r2, r3, #9
 80019b0:	0a53      	lsrs	r3, r2, #9
 80019b2:	469a      	mov	sl, r3
 80019b4:	4653      	mov	r3, sl
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0xcc>
 80019ba:	e166      	b.n	8001c8a <__aeabi_dsub+0x39a>
 80019bc:	4650      	mov	r0, sl
 80019be:	f000 fb9d 	bl	80020fc <__clzsi2>
 80019c2:	0003      	movs	r3, r0
 80019c4:	3b08      	subs	r3, #8
 80019c6:	2220      	movs	r2, #32
 80019c8:	0020      	movs	r0, r4
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	4651      	mov	r1, sl
 80019ce:	40d0      	lsrs	r0, r2
 80019d0:	4099      	lsls	r1, r3
 80019d2:	0002      	movs	r2, r0
 80019d4:	409c      	lsls	r4, r3
 80019d6:	430a      	orrs	r2, r1
 80019d8:	429e      	cmp	r6, r3
 80019da:	dd00      	ble.n	80019de <__aeabi_dsub+0xee>
 80019dc:	e164      	b.n	8001ca8 <__aeabi_dsub+0x3b8>
 80019de:	1b9b      	subs	r3, r3, r6
 80019e0:	1c59      	adds	r1, r3, #1
 80019e2:	291f      	cmp	r1, #31
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dsub+0xf8>
 80019e6:	e0fe      	b.n	8001be6 <__aeabi_dsub+0x2f6>
 80019e8:	2320      	movs	r3, #32
 80019ea:	0010      	movs	r0, r2
 80019ec:	0026      	movs	r6, r4
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	409c      	lsls	r4, r3
 80019f2:	4098      	lsls	r0, r3
 80019f4:	40ce      	lsrs	r6, r1
 80019f6:	40ca      	lsrs	r2, r1
 80019f8:	1e63      	subs	r3, r4, #1
 80019fa:	419c      	sbcs	r4, r3
 80019fc:	4330      	orrs	r0, r6
 80019fe:	4692      	mov	sl, r2
 8001a00:	2600      	movs	r6, #0
 8001a02:	4304      	orrs	r4, r0
 8001a04:	0763      	lsls	r3, r4, #29
 8001a06:	d009      	beq.n	8001a1c <__aeabi_dsub+0x12c>
 8001a08:	230f      	movs	r3, #15
 8001a0a:	4023      	ands	r3, r4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d005      	beq.n	8001a1c <__aeabi_dsub+0x12c>
 8001a10:	1d23      	adds	r3, r4, #4
 8001a12:	42a3      	cmp	r3, r4
 8001a14:	41a4      	sbcs	r4, r4
 8001a16:	4264      	negs	r4, r4
 8001a18:	44a2      	add	sl, r4
 8001a1a:	001c      	movs	r4, r3
 8001a1c:	4653      	mov	r3, sl
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	d400      	bmi.n	8001a24 <__aeabi_dsub+0x134>
 8001a22:	e0f2      	b.n	8001c0a <__aeabi_dsub+0x31a>
 8001a24:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <__aeabi_dsub+0x368>)
 8001a26:	3601      	adds	r6, #1
 8001a28:	429e      	cmp	r6, r3
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dsub+0x13e>
 8001a2c:	e10f      	b.n	8001c4e <__aeabi_dsub+0x35e>
 8001a2e:	4653      	mov	r3, sl
 8001a30:	498a      	ldr	r1, [pc, #552]	; (8001c5c <__aeabi_dsub+0x36c>)
 8001a32:	08e4      	lsrs	r4, r4, #3
 8001a34:	400b      	ands	r3, r1
 8001a36:	0019      	movs	r1, r3
 8001a38:	075b      	lsls	r3, r3, #29
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	0572      	lsls	r2, r6, #21
 8001a3e:	024c      	lsls	r4, r1, #9
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	0d52      	lsrs	r2, r2, #21
 8001a44:	0512      	lsls	r2, r2, #20
 8001a46:	4322      	orrs	r2, r4
 8001a48:	07ed      	lsls	r5, r5, #31
 8001a4a:	432a      	orrs	r2, r5
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	0011      	movs	r1, r2
 8001a50:	b003      	add	sp, #12
 8001a52:	bcf0      	pop	{r4, r5, r6, r7}
 8001a54:	46bb      	mov	fp, r7
 8001a56:	46b2      	mov	sl, r6
 8001a58:	46a9      	mov	r9, r5
 8001a5a:	46a0      	mov	r8, r4
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	1ab4      	subs	r4, r6, r2
 8001a60:	46a4      	mov	ip, r4
 8001a62:	2c00      	cmp	r4, #0
 8001a64:	dd59      	ble.n	8001b1a <__aeabi_dsub+0x22a>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x17c>
 8001a6a:	e0b0      	b.n	8001bce <__aeabi_dsub+0x2de>
 8001a6c:	4556      	cmp	r6, sl
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x182>
 8001a70:	e0fa      	b.n	8001c68 <__aeabi_dsub+0x378>
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	0412      	lsls	r2, r2, #16
 8001a76:	4317      	orrs	r7, r2
 8001a78:	4662      	mov	r2, ip
 8001a7a:	2a38      	cmp	r2, #56	; 0x38
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x190>
 8001a7e:	e0d4      	b.n	8001c2a <__aeabi_dsub+0x33a>
 8001a80:	2a1f      	cmp	r2, #31
 8001a82:	dc00      	bgt.n	8001a86 <__aeabi_dsub+0x196>
 8001a84:	e1c0      	b.n	8001e08 <__aeabi_dsub+0x518>
 8001a86:	0039      	movs	r1, r7
 8001a88:	3a20      	subs	r2, #32
 8001a8a:	40d1      	lsrs	r1, r2
 8001a8c:	4662      	mov	r2, ip
 8001a8e:	2a20      	cmp	r2, #32
 8001a90:	d006      	beq.n	8001aa0 <__aeabi_dsub+0x1b0>
 8001a92:	4664      	mov	r4, ip
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	1b12      	subs	r2, r2, r4
 8001a98:	003c      	movs	r4, r7
 8001a9a:	4094      	lsls	r4, r2
 8001a9c:	4304      	orrs	r4, r0
 8001a9e:	9401      	str	r4, [sp, #4]
 8001aa0:	9c01      	ldr	r4, [sp, #4]
 8001aa2:	1e62      	subs	r2, r4, #1
 8001aa4:	4194      	sbcs	r4, r2
 8001aa6:	430c      	orrs	r4, r1
 8001aa8:	e0c3      	b.n	8001c32 <__aeabi_dsub+0x342>
 8001aaa:	003c      	movs	r4, r7
 8001aac:	4304      	orrs	r4, r0
 8001aae:	d02b      	beq.n	8001b08 <__aeabi_dsub+0x218>
 8001ab0:	468b      	mov	fp, r1
 8001ab2:	428d      	cmp	r5, r1
 8001ab4:	d02e      	beq.n	8001b14 <__aeabi_dsub+0x224>
 8001ab6:	4c6a      	ldr	r4, [pc, #424]	; (8001c60 <__aeabi_dsub+0x370>)
 8001ab8:	46a4      	mov	ip, r4
 8001aba:	44b4      	add	ip, r6
 8001abc:	4664      	mov	r4, ip
 8001abe:	2c00      	cmp	r4, #0
 8001ac0:	d05f      	beq.n	8001b82 <__aeabi_dsub+0x292>
 8001ac2:	1b94      	subs	r4, r2, r6
 8001ac4:	46a4      	mov	ip, r4
 8001ac6:	2e00      	cmp	r6, #0
 8001ac8:	d000      	beq.n	8001acc <__aeabi_dsub+0x1dc>
 8001aca:	e120      	b.n	8001d0e <__aeabi_dsub+0x41e>
 8001acc:	464c      	mov	r4, r9
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x1e4>
 8001ad2:	e1c7      	b.n	8001e64 <__aeabi_dsub+0x574>
 8001ad4:	4661      	mov	r1, ip
 8001ad6:	1e4c      	subs	r4, r1, #1
 8001ad8:	2901      	cmp	r1, #1
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x1ee>
 8001adc:	e223      	b.n	8001f26 <__aeabi_dsub+0x636>
 8001ade:	4d5e      	ldr	r5, [pc, #376]	; (8001c58 <__aeabi_dsub+0x368>)
 8001ae0:	45ac      	cmp	ip, r5
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x1f6>
 8001ae4:	e1d8      	b.n	8001e98 <__aeabi_dsub+0x5a8>
 8001ae6:	46a4      	mov	ip, r4
 8001ae8:	e11a      	b.n	8001d20 <__aeabi_dsub+0x430>
 8001aea:	003a      	movs	r2, r7
 8001aec:	4302      	orrs	r2, r0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dsub+0x202>
 8001af0:	e0e4      	b.n	8001cbc <__aeabi_dsub+0x3cc>
 8001af2:	0022      	movs	r2, r4
 8001af4:	3a01      	subs	r2, #1
 8001af6:	2c01      	cmp	r4, #1
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x20c>
 8001afa:	e1c3      	b.n	8001e84 <__aeabi_dsub+0x594>
 8001afc:	4956      	ldr	r1, [pc, #344]	; (8001c58 <__aeabi_dsub+0x368>)
 8001afe:	428c      	cmp	r4, r1
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x214>
 8001b02:	e0b1      	b.n	8001c68 <__aeabi_dsub+0x378>
 8001b04:	4694      	mov	ip, r2
 8001b06:	e72b      	b.n	8001960 <__aeabi_dsub+0x70>
 8001b08:	2401      	movs	r4, #1
 8001b0a:	4061      	eors	r1, r4
 8001b0c:	468b      	mov	fp, r1
 8001b0e:	428d      	cmp	r5, r1
 8001b10:	d000      	beq.n	8001b14 <__aeabi_dsub+0x224>
 8001b12:	e716      	b.n	8001942 <__aeabi_dsub+0x52>
 8001b14:	4952      	ldr	r1, [pc, #328]	; (8001c60 <__aeabi_dsub+0x370>)
 8001b16:	468c      	mov	ip, r1
 8001b18:	44b4      	add	ip, r6
 8001b1a:	4664      	mov	r4, ip
 8001b1c:	2c00      	cmp	r4, #0
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x232>
 8001b20:	e0d3      	b.n	8001cca <__aeabi_dsub+0x3da>
 8001b22:	1b91      	subs	r1, r2, r6
 8001b24:	468c      	mov	ip, r1
 8001b26:	2e00      	cmp	r6, #0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x23c>
 8001b2a:	e15e      	b.n	8001dea <__aeabi_dsub+0x4fa>
 8001b2c:	494a      	ldr	r1, [pc, #296]	; (8001c58 <__aeabi_dsub+0x368>)
 8001b2e:	428a      	cmp	r2, r1
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dsub+0x244>
 8001b32:	e1be      	b.n	8001eb2 <__aeabi_dsub+0x5c2>
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	464c      	mov	r4, r9
 8001b38:	0409      	lsls	r1, r1, #16
 8001b3a:	430c      	orrs	r4, r1
 8001b3c:	46a1      	mov	r9, r4
 8001b3e:	4661      	mov	r1, ip
 8001b40:	2938      	cmp	r1, #56	; 0x38
 8001b42:	dd00      	ble.n	8001b46 <__aeabi_dsub+0x256>
 8001b44:	e1ba      	b.n	8001ebc <__aeabi_dsub+0x5cc>
 8001b46:	291f      	cmp	r1, #31
 8001b48:	dd00      	ble.n	8001b4c <__aeabi_dsub+0x25c>
 8001b4a:	e227      	b.n	8001f9c <__aeabi_dsub+0x6ac>
 8001b4c:	2420      	movs	r4, #32
 8001b4e:	1a64      	subs	r4, r4, r1
 8001b50:	4649      	mov	r1, r9
 8001b52:	40a1      	lsls	r1, r4
 8001b54:	001e      	movs	r6, r3
 8001b56:	4688      	mov	r8, r1
 8001b58:	4661      	mov	r1, ip
 8001b5a:	40a3      	lsls	r3, r4
 8001b5c:	40ce      	lsrs	r6, r1
 8001b5e:	4641      	mov	r1, r8
 8001b60:	1e5c      	subs	r4, r3, #1
 8001b62:	41a3      	sbcs	r3, r4
 8001b64:	4331      	orrs	r1, r6
 8001b66:	4319      	orrs	r1, r3
 8001b68:	000c      	movs	r4, r1
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	40d9      	lsrs	r1, r3
 8001b70:	187f      	adds	r7, r7, r1
 8001b72:	1824      	adds	r4, r4, r0
 8001b74:	4284      	cmp	r4, r0
 8001b76:	419b      	sbcs	r3, r3
 8001b78:	425b      	negs	r3, r3
 8001b7a:	469a      	mov	sl, r3
 8001b7c:	0016      	movs	r6, r2
 8001b7e:	44ba      	add	sl, r7
 8001b80:	e05d      	b.n	8001c3e <__aeabi_dsub+0x34e>
 8001b82:	4c38      	ldr	r4, [pc, #224]	; (8001c64 <__aeabi_dsub+0x374>)
 8001b84:	1c72      	adds	r2, r6, #1
 8001b86:	4222      	tst	r2, r4
 8001b88:	d000      	beq.n	8001b8c <__aeabi_dsub+0x29c>
 8001b8a:	e0df      	b.n	8001d4c <__aeabi_dsub+0x45c>
 8001b8c:	464a      	mov	r2, r9
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x2a6>
 8001b94:	e15c      	b.n	8001e50 <__aeabi_dsub+0x560>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x2ac>
 8001b9a:	e1cf      	b.n	8001f3c <__aeabi_dsub+0x64c>
 8001b9c:	003a      	movs	r2, r7
 8001b9e:	4302      	orrs	r2, r0
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x2b4>
 8001ba2:	e17f      	b.n	8001ea4 <__aeabi_dsub+0x5b4>
 8001ba4:	1a1c      	subs	r4, r3, r0
 8001ba6:	464a      	mov	r2, r9
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	4189      	sbcs	r1, r1
 8001bac:	1bd2      	subs	r2, r2, r7
 8001bae:	4249      	negs	r1, r1
 8001bb0:	1a52      	subs	r2, r2, r1
 8001bb2:	4692      	mov	sl, r2
 8001bb4:	0212      	lsls	r2, r2, #8
 8001bb6:	d400      	bmi.n	8001bba <__aeabi_dsub+0x2ca>
 8001bb8:	e20a      	b.n	8001fd0 <__aeabi_dsub+0x6e0>
 8001bba:	1ac4      	subs	r4, r0, r3
 8001bbc:	42a0      	cmp	r0, r4
 8001bbe:	4180      	sbcs	r0, r0
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	1aff      	subs	r7, r7, r3
 8001bc6:	1a3b      	subs	r3, r7, r0
 8001bc8:	469a      	mov	sl, r3
 8001bca:	465d      	mov	r5, fp
 8001bcc:	e71a      	b.n	8001a04 <__aeabi_dsub+0x114>
 8001bce:	003a      	movs	r2, r7
 8001bd0:	4302      	orrs	r2, r0
 8001bd2:	d073      	beq.n	8001cbc <__aeabi_dsub+0x3cc>
 8001bd4:	0022      	movs	r2, r4
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	2c01      	cmp	r4, #1
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x2ee>
 8001bdc:	e0cb      	b.n	8001d76 <__aeabi_dsub+0x486>
 8001bde:	4554      	cmp	r4, sl
 8001be0:	d042      	beq.n	8001c68 <__aeabi_dsub+0x378>
 8001be2:	4694      	mov	ip, r2
 8001be4:	e748      	b.n	8001a78 <__aeabi_dsub+0x188>
 8001be6:	0010      	movs	r0, r2
 8001be8:	3b1f      	subs	r3, #31
 8001bea:	40d8      	lsrs	r0, r3
 8001bec:	2920      	cmp	r1, #32
 8001bee:	d003      	beq.n	8001bf8 <__aeabi_dsub+0x308>
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	1a5b      	subs	r3, r3, r1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	4314      	orrs	r4, r2
 8001bf8:	1e63      	subs	r3, r4, #1
 8001bfa:	419c      	sbcs	r4, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2600      	movs	r6, #0
 8001c00:	469a      	mov	sl, r3
 8001c02:	4304      	orrs	r4, r0
 8001c04:	0763      	lsls	r3, r4, #29
 8001c06:	d000      	beq.n	8001c0a <__aeabi_dsub+0x31a>
 8001c08:	e6fe      	b.n	8001a08 <__aeabi_dsub+0x118>
 8001c0a:	4652      	mov	r2, sl
 8001c0c:	08e3      	lsrs	r3, r4, #3
 8001c0e:	0752      	lsls	r2, r2, #29
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4652      	mov	r2, sl
 8001c14:	46b4      	mov	ip, r6
 8001c16:	08d2      	lsrs	r2, r2, #3
 8001c18:	490f      	ldr	r1, [pc, #60]	; (8001c58 <__aeabi_dsub+0x368>)
 8001c1a:	458c      	cmp	ip, r1
 8001c1c:	d02a      	beq.n	8001c74 <__aeabi_dsub+0x384>
 8001c1e:	0312      	lsls	r2, r2, #12
 8001c20:	0b14      	lsrs	r4, r2, #12
 8001c22:	4662      	mov	r2, ip
 8001c24:	0552      	lsls	r2, r2, #21
 8001c26:	0d52      	lsrs	r2, r2, #21
 8001c28:	e70c      	b.n	8001a44 <__aeabi_dsub+0x154>
 8001c2a:	003c      	movs	r4, r7
 8001c2c:	4304      	orrs	r4, r0
 8001c2e:	1e62      	subs	r2, r4, #1
 8001c30:	4194      	sbcs	r4, r2
 8001c32:	18e4      	adds	r4, r4, r3
 8001c34:	429c      	cmp	r4, r3
 8001c36:	4192      	sbcs	r2, r2
 8001c38:	4252      	negs	r2, r2
 8001c3a:	444a      	add	r2, r9
 8001c3c:	4692      	mov	sl, r2
 8001c3e:	4653      	mov	r3, sl
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	d5df      	bpl.n	8001c04 <__aeabi_dsub+0x314>
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__aeabi_dsub+0x368>)
 8001c46:	3601      	adds	r6, #1
 8001c48:	429e      	cmp	r6, r3
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x35e>
 8001c4c:	e0a0      	b.n	8001d90 <__aeabi_dsub+0x4a0>
 8001c4e:	0032      	movs	r2, r6
 8001c50:	2400      	movs	r4, #0
 8001c52:	2300      	movs	r3, #0
 8001c54:	e6f6      	b.n	8001a44 <__aeabi_dsub+0x154>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	fffff801 	.word	0xfffff801
 8001c64:	000007fe 	.word	0x000007fe
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	0752      	lsls	r2, r2, #29
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	464a      	mov	r2, r9
 8001c72:	08d2      	lsrs	r2, r2, #3
 8001c74:	0019      	movs	r1, r3
 8001c76:	4311      	orrs	r1, r2
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x38c>
 8001c7a:	e1b5      	b.n	8001fe8 <__aeabi_dsub+0x6f8>
 8001c7c:	2480      	movs	r4, #128	; 0x80
 8001c7e:	0324      	lsls	r4, r4, #12
 8001c80:	4314      	orrs	r4, r2
 8001c82:	0324      	lsls	r4, r4, #12
 8001c84:	4ad5      	ldr	r2, [pc, #852]	; (8001fdc <__aeabi_dsub+0x6ec>)
 8001c86:	0b24      	lsrs	r4, r4, #12
 8001c88:	e6dc      	b.n	8001a44 <__aeabi_dsub+0x154>
 8001c8a:	0020      	movs	r0, r4
 8001c8c:	f000 fa36 	bl	80020fc <__clzsi2>
 8001c90:	0003      	movs	r3, r0
 8001c92:	3318      	adds	r3, #24
 8001c94:	2b1f      	cmp	r3, #31
 8001c96:	dc00      	bgt.n	8001c9a <__aeabi_dsub+0x3aa>
 8001c98:	e695      	b.n	80019c6 <__aeabi_dsub+0xd6>
 8001c9a:	0022      	movs	r2, r4
 8001c9c:	3808      	subs	r0, #8
 8001c9e:	4082      	lsls	r2, r0
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	429e      	cmp	r6, r3
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dsub+0x3b8>
 8001ca6:	e69a      	b.n	80019de <__aeabi_dsub+0xee>
 8001ca8:	1af6      	subs	r6, r6, r3
 8001caa:	4bcd      	ldr	r3, [pc, #820]	; (8001fe0 <__aeabi_dsub+0x6f0>)
 8001cac:	401a      	ands	r2, r3
 8001cae:	4692      	mov	sl, r2
 8001cb0:	e6a8      	b.n	8001a04 <__aeabi_dsub+0x114>
 8001cb2:	003c      	movs	r4, r7
 8001cb4:	4304      	orrs	r4, r0
 8001cb6:	1e62      	subs	r2, r4, #1
 8001cb8:	4194      	sbcs	r4, r2
 8001cba:	e66c      	b.n	8001996 <__aeabi_dsub+0xa6>
 8001cbc:	464a      	mov	r2, r9
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	0752      	lsls	r2, r2, #29
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	08d2      	lsrs	r2, r2, #3
 8001cc8:	e7a6      	b.n	8001c18 <__aeabi_dsub+0x328>
 8001cca:	4cc6      	ldr	r4, [pc, #792]	; (8001fe4 <__aeabi_dsub+0x6f4>)
 8001ccc:	1c72      	adds	r2, r6, #1
 8001cce:	4222      	tst	r2, r4
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x3e4>
 8001cd2:	e0ac      	b.n	8001e2e <__aeabi_dsub+0x53e>
 8001cd4:	464a      	mov	r2, r9
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	2e00      	cmp	r6, #0
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x3ee>
 8001cdc:	e105      	b.n	8001eea <__aeabi_dsub+0x5fa>
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x3f4>
 8001ce2:	e156      	b.n	8001f92 <__aeabi_dsub+0x6a2>
 8001ce4:	003a      	movs	r2, r7
 8001ce6:	4302      	orrs	r2, r0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x3fc>
 8001cea:	e0db      	b.n	8001ea4 <__aeabi_dsub+0x5b4>
 8001cec:	181c      	adds	r4, r3, r0
 8001cee:	429c      	cmp	r4, r3
 8001cf0:	419b      	sbcs	r3, r3
 8001cf2:	444f      	add	r7, r9
 8001cf4:	46ba      	mov	sl, r7
 8001cf6:	425b      	negs	r3, r3
 8001cf8:	449a      	add	sl, r3
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	d400      	bmi.n	8001d02 <__aeabi_dsub+0x412>
 8001d00:	e780      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001d02:	4652      	mov	r2, sl
 8001d04:	4bb6      	ldr	r3, [pc, #728]	; (8001fe0 <__aeabi_dsub+0x6f0>)
 8001d06:	2601      	movs	r6, #1
 8001d08:	401a      	ands	r2, r3
 8001d0a:	4692      	mov	sl, r2
 8001d0c:	e77a      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001d0e:	4cb3      	ldr	r4, [pc, #716]	; (8001fdc <__aeabi_dsub+0x6ec>)
 8001d10:	42a2      	cmp	r2, r4
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x426>
 8001d14:	e0c0      	b.n	8001e98 <__aeabi_dsub+0x5a8>
 8001d16:	2480      	movs	r4, #128	; 0x80
 8001d18:	464d      	mov	r5, r9
 8001d1a:	0424      	lsls	r4, r4, #16
 8001d1c:	4325      	orrs	r5, r4
 8001d1e:	46a9      	mov	r9, r5
 8001d20:	4664      	mov	r4, ip
 8001d22:	2c38      	cmp	r4, #56	; 0x38
 8001d24:	dc53      	bgt.n	8001dce <__aeabi_dsub+0x4de>
 8001d26:	4661      	mov	r1, ip
 8001d28:	2c1f      	cmp	r4, #31
 8001d2a:	dd00      	ble.n	8001d2e <__aeabi_dsub+0x43e>
 8001d2c:	e0cd      	b.n	8001eca <__aeabi_dsub+0x5da>
 8001d2e:	2520      	movs	r5, #32
 8001d30:	001e      	movs	r6, r3
 8001d32:	1b2d      	subs	r5, r5, r4
 8001d34:	464c      	mov	r4, r9
 8001d36:	40ab      	lsls	r3, r5
 8001d38:	40ac      	lsls	r4, r5
 8001d3a:	40ce      	lsrs	r6, r1
 8001d3c:	1e5d      	subs	r5, r3, #1
 8001d3e:	41ab      	sbcs	r3, r5
 8001d40:	4334      	orrs	r4, r6
 8001d42:	4323      	orrs	r3, r4
 8001d44:	464c      	mov	r4, r9
 8001d46:	40cc      	lsrs	r4, r1
 8001d48:	1b3f      	subs	r7, r7, r4
 8001d4a:	e045      	b.n	8001dd8 <__aeabi_dsub+0x4e8>
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	1a1c      	subs	r4, r3, r0
 8001d50:	1bd1      	subs	r1, r2, r7
 8001d52:	42a3      	cmp	r3, r4
 8001d54:	4192      	sbcs	r2, r2
 8001d56:	4252      	negs	r2, r2
 8001d58:	4692      	mov	sl, r2
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	1a52      	subs	r2, r2, r1
 8001d60:	4692      	mov	sl, r2
 8001d62:	0212      	lsls	r2, r2, #8
 8001d64:	d500      	bpl.n	8001d68 <__aeabi_dsub+0x478>
 8001d66:	e083      	b.n	8001e70 <__aeabi_dsub+0x580>
 8001d68:	4653      	mov	r3, sl
 8001d6a:	4323      	orrs	r3, r4
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x480>
 8001d6e:	e621      	b.n	80019b4 <__aeabi_dsub+0xc4>
 8001d70:	2200      	movs	r2, #0
 8001d72:	2500      	movs	r5, #0
 8001d74:	e753      	b.n	8001c1e <__aeabi_dsub+0x32e>
 8001d76:	181c      	adds	r4, r3, r0
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	419b      	sbcs	r3, r3
 8001d7c:	444f      	add	r7, r9
 8001d7e:	46ba      	mov	sl, r7
 8001d80:	425b      	negs	r3, r3
 8001d82:	449a      	add	sl, r3
 8001d84:	4653      	mov	r3, sl
 8001d86:	2601      	movs	r6, #1
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	d400      	bmi.n	8001d8e <__aeabi_dsub+0x49e>
 8001d8c:	e73a      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001d8e:	2602      	movs	r6, #2
 8001d90:	4652      	mov	r2, sl
 8001d92:	4b93      	ldr	r3, [pc, #588]	; (8001fe0 <__aeabi_dsub+0x6f0>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	401a      	ands	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	4021      	ands	r1, r4
 8001d9c:	0862      	lsrs	r2, r4, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	07dc      	lsls	r4, r3, #31
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	469a      	mov	sl, r3
 8001da6:	4314      	orrs	r4, r2
 8001da8:	e62c      	b.n	8001a04 <__aeabi_dsub+0x114>
 8001daa:	0039      	movs	r1, r7
 8001dac:	3a20      	subs	r2, #32
 8001dae:	40d1      	lsrs	r1, r2
 8001db0:	4662      	mov	r2, ip
 8001db2:	2a20      	cmp	r2, #32
 8001db4:	d006      	beq.n	8001dc4 <__aeabi_dsub+0x4d4>
 8001db6:	4664      	mov	r4, ip
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	1b12      	subs	r2, r2, r4
 8001dbc:	003c      	movs	r4, r7
 8001dbe:	4094      	lsls	r4, r2
 8001dc0:	4304      	orrs	r4, r0
 8001dc2:	9401      	str	r4, [sp, #4]
 8001dc4:	9c01      	ldr	r4, [sp, #4]
 8001dc6:	1e62      	subs	r2, r4, #1
 8001dc8:	4194      	sbcs	r4, r2
 8001dca:	430c      	orrs	r4, r1
 8001dcc:	e5e3      	b.n	8001996 <__aeabi_dsub+0xa6>
 8001dce:	4649      	mov	r1, r9
 8001dd0:	4319      	orrs	r1, r3
 8001dd2:	000b      	movs	r3, r1
 8001dd4:	1e5c      	subs	r4, r3, #1
 8001dd6:	41a3      	sbcs	r3, r4
 8001dd8:	1ac4      	subs	r4, r0, r3
 8001dda:	42a0      	cmp	r0, r4
 8001ddc:	419b      	sbcs	r3, r3
 8001dde:	425b      	negs	r3, r3
 8001de0:	1afb      	subs	r3, r7, r3
 8001de2:	469a      	mov	sl, r3
 8001de4:	465d      	mov	r5, fp
 8001de6:	0016      	movs	r6, r2
 8001de8:	e5dc      	b.n	80019a4 <__aeabi_dsub+0xb4>
 8001dea:	4649      	mov	r1, r9
 8001dec:	4319      	orrs	r1, r3
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x502>
 8001df0:	e0ae      	b.n	8001f50 <__aeabi_dsub+0x660>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4664      	mov	r4, ip
 8001df6:	3901      	subs	r1, #1
 8001df8:	2c01      	cmp	r4, #1
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x50e>
 8001dfc:	e0e0      	b.n	8001fc0 <__aeabi_dsub+0x6d0>
 8001dfe:	4c77      	ldr	r4, [pc, #476]	; (8001fdc <__aeabi_dsub+0x6ec>)
 8001e00:	45a4      	cmp	ip, r4
 8001e02:	d056      	beq.n	8001eb2 <__aeabi_dsub+0x5c2>
 8001e04:	468c      	mov	ip, r1
 8001e06:	e69a      	b.n	8001b3e <__aeabi_dsub+0x24e>
 8001e08:	4661      	mov	r1, ip
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	003c      	movs	r4, r7
 8001e0e:	1a52      	subs	r2, r2, r1
 8001e10:	4094      	lsls	r4, r2
 8001e12:	0001      	movs	r1, r0
 8001e14:	4090      	lsls	r0, r2
 8001e16:	46a0      	mov	r8, r4
 8001e18:	4664      	mov	r4, ip
 8001e1a:	1e42      	subs	r2, r0, #1
 8001e1c:	4190      	sbcs	r0, r2
 8001e1e:	4662      	mov	r2, ip
 8001e20:	40e1      	lsrs	r1, r4
 8001e22:	4644      	mov	r4, r8
 8001e24:	40d7      	lsrs	r7, r2
 8001e26:	430c      	orrs	r4, r1
 8001e28:	4304      	orrs	r4, r0
 8001e2a:	44b9      	add	r9, r7
 8001e2c:	e701      	b.n	8001c32 <__aeabi_dsub+0x342>
 8001e2e:	496b      	ldr	r1, [pc, #428]	; (8001fdc <__aeabi_dsub+0x6ec>)
 8001e30:	428a      	cmp	r2, r1
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x546>
 8001e34:	e70c      	b.n	8001c50 <__aeabi_dsub+0x360>
 8001e36:	1818      	adds	r0, r3, r0
 8001e38:	4298      	cmp	r0, r3
 8001e3a:	419b      	sbcs	r3, r3
 8001e3c:	444f      	add	r7, r9
 8001e3e:	425b      	negs	r3, r3
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	07dc      	lsls	r4, r3, #31
 8001e44:	0840      	lsrs	r0, r0, #1
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	469a      	mov	sl, r3
 8001e4a:	0016      	movs	r6, r2
 8001e4c:	4304      	orrs	r4, r0
 8001e4e:	e6d9      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dsub+0x566>
 8001e54:	e081      	b.n	8001f5a <__aeabi_dsub+0x66a>
 8001e56:	003b      	movs	r3, r7
 8001e58:	4303      	orrs	r3, r0
 8001e5a:	d11d      	bne.n	8001e98 <__aeabi_dsub+0x5a8>
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	2500      	movs	r5, #0
 8001e60:	0312      	lsls	r2, r2, #12
 8001e62:	e70b      	b.n	8001c7c <__aeabi_dsub+0x38c>
 8001e64:	08c0      	lsrs	r0, r0, #3
 8001e66:	077b      	lsls	r3, r7, #29
 8001e68:	465d      	mov	r5, fp
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	08fa      	lsrs	r2, r7, #3
 8001e6e:	e6d3      	b.n	8001c18 <__aeabi_dsub+0x328>
 8001e70:	1ac4      	subs	r4, r0, r3
 8001e72:	42a0      	cmp	r0, r4
 8001e74:	4180      	sbcs	r0, r0
 8001e76:	464b      	mov	r3, r9
 8001e78:	4240      	negs	r0, r0
 8001e7a:	1aff      	subs	r7, r7, r3
 8001e7c:	1a3b      	subs	r3, r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	465d      	mov	r5, fp
 8001e82:	e597      	b.n	80019b4 <__aeabi_dsub+0xc4>
 8001e84:	1a1c      	subs	r4, r3, r0
 8001e86:	464a      	mov	r2, r9
 8001e88:	42a3      	cmp	r3, r4
 8001e8a:	419b      	sbcs	r3, r3
 8001e8c:	1bd7      	subs	r7, r2, r7
 8001e8e:	425b      	negs	r3, r3
 8001e90:	1afb      	subs	r3, r7, r3
 8001e92:	469a      	mov	sl, r3
 8001e94:	2601      	movs	r6, #1
 8001e96:	e585      	b.n	80019a4 <__aeabi_dsub+0xb4>
 8001e98:	08c0      	lsrs	r0, r0, #3
 8001e9a:	077b      	lsls	r3, r7, #29
 8001e9c:	465d      	mov	r5, fp
 8001e9e:	4303      	orrs	r3, r0
 8001ea0:	08fa      	lsrs	r2, r7, #3
 8001ea2:	e6e7      	b.n	8001c74 <__aeabi_dsub+0x384>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	0752      	lsls	r2, r2, #29
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	464a      	mov	r2, r9
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	e6b5      	b.n	8001c1e <__aeabi_dsub+0x32e>
 8001eb2:	08c0      	lsrs	r0, r0, #3
 8001eb4:	077b      	lsls	r3, r7, #29
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	08fa      	lsrs	r2, r7, #3
 8001eba:	e6db      	b.n	8001c74 <__aeabi_dsub+0x384>
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	4319      	orrs	r1, r3
 8001ec0:	000b      	movs	r3, r1
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	418b      	sbcs	r3, r1
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	e653      	b.n	8001b72 <__aeabi_dsub+0x282>
 8001eca:	464d      	mov	r5, r9
 8001ecc:	3c20      	subs	r4, #32
 8001ece:	40e5      	lsrs	r5, r4
 8001ed0:	2920      	cmp	r1, #32
 8001ed2:	d005      	beq.n	8001ee0 <__aeabi_dsub+0x5f0>
 8001ed4:	2440      	movs	r4, #64	; 0x40
 8001ed6:	1a64      	subs	r4, r4, r1
 8001ed8:	4649      	mov	r1, r9
 8001eda:	40a1      	lsls	r1, r4
 8001edc:	430b      	orrs	r3, r1
 8001ede:	4698      	mov	r8, r3
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	1e5c      	subs	r4, r3, #1
 8001ee4:	41a3      	sbcs	r3, r4
 8001ee6:	432b      	orrs	r3, r5
 8001ee8:	e776      	b.n	8001dd8 <__aeabi_dsub+0x4e8>
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d0e1      	beq.n	8001eb2 <__aeabi_dsub+0x5c2>
 8001eee:	003a      	movs	r2, r7
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	4302      	orrs	r2, r0
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x608>
 8001ef6:	e6b8      	b.n	8001c6a <__aeabi_dsub+0x37a>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	0752      	lsls	r2, r2, #29
 8001efc:	2480      	movs	r4, #128	; 0x80
 8001efe:	4313      	orrs	r3, r2
 8001f00:	464a      	mov	r2, r9
 8001f02:	0324      	lsls	r4, r4, #12
 8001f04:	08d2      	lsrs	r2, r2, #3
 8001f06:	4222      	tst	r2, r4
 8001f08:	d007      	beq.n	8001f1a <__aeabi_dsub+0x62a>
 8001f0a:	08fe      	lsrs	r6, r7, #3
 8001f0c:	4226      	tst	r6, r4
 8001f0e:	d104      	bne.n	8001f1a <__aeabi_dsub+0x62a>
 8001f10:	465d      	mov	r5, fp
 8001f12:	0032      	movs	r2, r6
 8001f14:	08c3      	lsrs	r3, r0, #3
 8001f16:	077f      	lsls	r7, r7, #29
 8001f18:	433b      	orrs	r3, r7
 8001f1a:	0f59      	lsrs	r1, r3, #29
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	0749      	lsls	r1, r1, #29
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	430b      	orrs	r3, r1
 8001f24:	e6a6      	b.n	8001c74 <__aeabi_dsub+0x384>
 8001f26:	1ac4      	subs	r4, r0, r3
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	4180      	sbcs	r0, r0
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	4240      	negs	r0, r0
 8001f30:	1aff      	subs	r7, r7, r3
 8001f32:	1a3b      	subs	r3, r7, r0
 8001f34:	469a      	mov	sl, r3
 8001f36:	465d      	mov	r5, fp
 8001f38:	2601      	movs	r6, #1
 8001f3a:	e533      	b.n	80019a4 <__aeabi_dsub+0xb4>
 8001f3c:	003b      	movs	r3, r7
 8001f3e:	4303      	orrs	r3, r0
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x654>
 8001f42:	e715      	b.n	8001d70 <__aeabi_dsub+0x480>
 8001f44:	08c0      	lsrs	r0, r0, #3
 8001f46:	077b      	lsls	r3, r7, #29
 8001f48:	465d      	mov	r5, fp
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	08fa      	lsrs	r2, r7, #3
 8001f4e:	e666      	b.n	8001c1e <__aeabi_dsub+0x32e>
 8001f50:	08c0      	lsrs	r0, r0, #3
 8001f52:	077b      	lsls	r3, r7, #29
 8001f54:	4303      	orrs	r3, r0
 8001f56:	08fa      	lsrs	r2, r7, #3
 8001f58:	e65e      	b.n	8001c18 <__aeabi_dsub+0x328>
 8001f5a:	003a      	movs	r2, r7
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x674>
 8001f62:	e682      	b.n	8001c6a <__aeabi_dsub+0x37a>
 8001f64:	464a      	mov	r2, r9
 8001f66:	0752      	lsls	r2, r2, #29
 8001f68:	2480      	movs	r4, #128	; 0x80
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	0324      	lsls	r4, r4, #12
 8001f70:	08d2      	lsrs	r2, r2, #3
 8001f72:	4222      	tst	r2, r4
 8001f74:	d007      	beq.n	8001f86 <__aeabi_dsub+0x696>
 8001f76:	08fe      	lsrs	r6, r7, #3
 8001f78:	4226      	tst	r6, r4
 8001f7a:	d104      	bne.n	8001f86 <__aeabi_dsub+0x696>
 8001f7c:	465d      	mov	r5, fp
 8001f7e:	0032      	movs	r2, r6
 8001f80:	08c3      	lsrs	r3, r0, #3
 8001f82:	077f      	lsls	r7, r7, #29
 8001f84:	433b      	orrs	r3, r7
 8001f86:	0f59      	lsrs	r1, r3, #29
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	0749      	lsls	r1, r1, #29
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	e670      	b.n	8001c74 <__aeabi_dsub+0x384>
 8001f92:	08c0      	lsrs	r0, r0, #3
 8001f94:	077b      	lsls	r3, r7, #29
 8001f96:	4303      	orrs	r3, r0
 8001f98:	08fa      	lsrs	r2, r7, #3
 8001f9a:	e640      	b.n	8001c1e <__aeabi_dsub+0x32e>
 8001f9c:	464c      	mov	r4, r9
 8001f9e:	3920      	subs	r1, #32
 8001fa0:	40cc      	lsrs	r4, r1
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	2920      	cmp	r1, #32
 8001fa6:	d006      	beq.n	8001fb6 <__aeabi_dsub+0x6c6>
 8001fa8:	4666      	mov	r6, ip
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	1b89      	subs	r1, r1, r6
 8001fae:	464e      	mov	r6, r9
 8001fb0:	408e      	lsls	r6, r1
 8001fb2:	4333      	orrs	r3, r6
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	4643      	mov	r3, r8
 8001fb8:	1e59      	subs	r1, r3, #1
 8001fba:	418b      	sbcs	r3, r1
 8001fbc:	431c      	orrs	r4, r3
 8001fbe:	e5d8      	b.n	8001b72 <__aeabi_dsub+0x282>
 8001fc0:	181c      	adds	r4, r3, r0
 8001fc2:	4284      	cmp	r4, r0
 8001fc4:	4180      	sbcs	r0, r0
 8001fc6:	444f      	add	r7, r9
 8001fc8:	46ba      	mov	sl, r7
 8001fca:	4240      	negs	r0, r0
 8001fcc:	4482      	add	sl, r0
 8001fce:	e6d9      	b.n	8001d84 <__aeabi_dsub+0x494>
 8001fd0:	4653      	mov	r3, sl
 8001fd2:	4323      	orrs	r3, r4
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x6e8>
 8001fd6:	e6cb      	b.n	8001d70 <__aeabi_dsub+0x480>
 8001fd8:	e614      	b.n	8001c04 <__aeabi_dsub+0x314>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff
 8001fe0:	ff7fffff 	.word	0xff7fffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4a01      	ldr	r2, [pc, #4]	; (8001ff0 <__aeabi_dsub+0x700>)
 8001fec:	001c      	movs	r4, r3
 8001fee:	e529      	b.n	8001a44 <__aeabi_dsub+0x154>
 8001ff0:	000007ff 	.word	0x000007ff

08001ff4 <__aeabi_dcmpun>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	0005      	movs	r5, r0
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <__aeabi_dcmpun+0x38>)
 8001ffa:	031c      	lsls	r4, r3, #12
 8001ffc:	0016      	movs	r6, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	030a      	lsls	r2, r1, #12
 8002002:	0049      	lsls	r1, r1, #1
 8002004:	0b12      	lsrs	r2, r2, #12
 8002006:	0d49      	lsrs	r1, r1, #21
 8002008:	0b24      	lsrs	r4, r4, #12
 800200a:	0d5b      	lsrs	r3, r3, #21
 800200c:	4281      	cmp	r1, r0
 800200e:	d008      	beq.n	8002022 <__aeabi_dcmpun+0x2e>
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <__aeabi_dcmpun+0x38>)
 8002012:	2000      	movs	r0, #0
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <__aeabi_dcmpun+0x2c>
 8002018:	0020      	movs	r0, r4
 800201a:	4330      	orrs	r0, r6
 800201c:	1e43      	subs	r3, r0, #1
 800201e:	4198      	sbcs	r0, r3
 8002020:	bd70      	pop	{r4, r5, r6, pc}
 8002022:	2001      	movs	r0, #1
 8002024:	432a      	orrs	r2, r5
 8002026:	d1fb      	bne.n	8002020 <__aeabi_dcmpun+0x2c>
 8002028:	e7f2      	b.n	8002010 <__aeabi_dcmpun+0x1c>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff

08002030 <__aeabi_d2iz>:
 8002030:	000a      	movs	r2, r1
 8002032:	b530      	push	{r4, r5, lr}
 8002034:	4c13      	ldr	r4, [pc, #76]	; (8002084 <__aeabi_d2iz+0x54>)
 8002036:	0053      	lsls	r3, r2, #1
 8002038:	0309      	lsls	r1, r1, #12
 800203a:	0005      	movs	r5, r0
 800203c:	0b09      	lsrs	r1, r1, #12
 800203e:	2000      	movs	r0, #0
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	0fd2      	lsrs	r2, r2, #31
 8002044:	42a3      	cmp	r3, r4
 8002046:	dd04      	ble.n	8002052 <__aeabi_d2iz+0x22>
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <__aeabi_d2iz+0x58>)
 800204a:	4283      	cmp	r3, r0
 800204c:	dd02      	ble.n	8002054 <__aeabi_d2iz+0x24>
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <__aeabi_d2iz+0x5c>)
 8002050:	18d0      	adds	r0, r2, r3
 8002052:	bd30      	pop	{r4, r5, pc}
 8002054:	2080      	movs	r0, #128	; 0x80
 8002056:	0340      	lsls	r0, r0, #13
 8002058:	4301      	orrs	r1, r0
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <__aeabi_d2iz+0x60>)
 800205c:	1ac0      	subs	r0, r0, r3
 800205e:	281f      	cmp	r0, #31
 8002060:	dd08      	ble.n	8002074 <__aeabi_d2iz+0x44>
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <__aeabi_d2iz+0x64>)
 8002064:	1ac3      	subs	r3, r0, r3
 8002066:	40d9      	lsrs	r1, r3
 8002068:	000b      	movs	r3, r1
 800206a:	4258      	negs	r0, r3
 800206c:	2a00      	cmp	r2, #0
 800206e:	d1f0      	bne.n	8002052 <__aeabi_d2iz+0x22>
 8002070:	0018      	movs	r0, r3
 8002072:	e7ee      	b.n	8002052 <__aeabi_d2iz+0x22>
 8002074:	4c08      	ldr	r4, [pc, #32]	; (8002098 <__aeabi_d2iz+0x68>)
 8002076:	40c5      	lsrs	r5, r0
 8002078:	46a4      	mov	ip, r4
 800207a:	4463      	add	r3, ip
 800207c:	4099      	lsls	r1, r3
 800207e:	000b      	movs	r3, r1
 8002080:	432b      	orrs	r3, r5
 8002082:	e7f2      	b.n	800206a <__aeabi_d2iz+0x3a>
 8002084:	000003fe 	.word	0x000003fe
 8002088:	0000041d 	.word	0x0000041d
 800208c:	7fffffff 	.word	0x7fffffff
 8002090:	00000433 	.word	0x00000433
 8002094:	00000413 	.word	0x00000413
 8002098:	fffffbed 	.word	0xfffffbed

0800209c <__aeabi_i2d>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2800      	cmp	r0, #0
 80020a0:	d016      	beq.n	80020d0 <__aeabi_i2d+0x34>
 80020a2:	17c3      	asrs	r3, r0, #31
 80020a4:	18c5      	adds	r5, r0, r3
 80020a6:	405d      	eors	r5, r3
 80020a8:	0fc4      	lsrs	r4, r0, #31
 80020aa:	0028      	movs	r0, r5
 80020ac:	f000 f826 	bl	80020fc <__clzsi2>
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <__aeabi_i2d+0x5c>)
 80020b2:	1a1b      	subs	r3, r3, r0
 80020b4:	280a      	cmp	r0, #10
 80020b6:	dc16      	bgt.n	80020e6 <__aeabi_i2d+0x4a>
 80020b8:	0002      	movs	r2, r0
 80020ba:	002e      	movs	r6, r5
 80020bc:	3215      	adds	r2, #21
 80020be:	4096      	lsls	r6, r2
 80020c0:	220b      	movs	r2, #11
 80020c2:	1a12      	subs	r2, r2, r0
 80020c4:	40d5      	lsrs	r5, r2
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	032d      	lsls	r5, r5, #12
 80020ca:	0b2d      	lsrs	r5, r5, #12
 80020cc:	0d5b      	lsrs	r3, r3, #21
 80020ce:	e003      	b.n	80020d8 <__aeabi_i2d+0x3c>
 80020d0:	2400      	movs	r4, #0
 80020d2:	2300      	movs	r3, #0
 80020d4:	2500      	movs	r5, #0
 80020d6:	2600      	movs	r6, #0
 80020d8:	051b      	lsls	r3, r3, #20
 80020da:	432b      	orrs	r3, r5
 80020dc:	07e4      	lsls	r4, r4, #31
 80020de:	4323      	orrs	r3, r4
 80020e0:	0030      	movs	r0, r6
 80020e2:	0019      	movs	r1, r3
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
 80020e6:	380b      	subs	r0, #11
 80020e8:	4085      	lsls	r5, r0
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	032d      	lsls	r5, r5, #12
 80020ee:	2600      	movs	r6, #0
 80020f0:	0b2d      	lsrs	r5, r5, #12
 80020f2:	0d5b      	lsrs	r3, r3, #21
 80020f4:	e7f0      	b.n	80020d8 <__aeabi_i2d+0x3c>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	0000041e 	.word	0x0000041e

080020fc <__clzsi2>:
 80020fc:	211c      	movs	r1, #28
 80020fe:	2301      	movs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	4298      	cmp	r0, r3
 8002104:	d301      	bcc.n	800210a <__clzsi2+0xe>
 8002106:	0c00      	lsrs	r0, r0, #16
 8002108:	3910      	subs	r1, #16
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	4298      	cmp	r0, r3
 800210e:	d301      	bcc.n	8002114 <__clzsi2+0x18>
 8002110:	0a00      	lsrs	r0, r0, #8
 8002112:	3908      	subs	r1, #8
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	4298      	cmp	r0, r3
 8002118:	d301      	bcc.n	800211e <__clzsi2+0x22>
 800211a:	0900      	lsrs	r0, r0, #4
 800211c:	3904      	subs	r1, #4
 800211e:	a202      	add	r2, pc, #8	; (adr r2, 8002128 <__clzsi2+0x2c>)
 8002120:	5c10      	ldrb	r0, [r2, r0]
 8002122:	1840      	adds	r0, r0, r1
 8002124:	4770      	bx	lr
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	02020304 	.word	0x02020304
 800212c:	01010101 	.word	0x01010101
	...

08002138 <test_leds>:
#define TOGGLE(PIN) HAL_GPIO_TogglePin(PIN ## _GPIO_Port, PIN ## _Pin)
#define SHORT_TIMEOUT 10

void test_leds(void);

void test_leds(){
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	ON(RED);
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <test_leds+0xc0>)
 800213e:	2201      	movs	r2, #1
 8002140:	2108      	movs	r1, #8
 8002142:	0018      	movs	r0, r3
 8002144:	f002 fa56 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002148:	200a      	movs	r0, #10
 800214a:	f000 ff13 	bl	8002f74 <HAL_Delay>
	ON(GREEN);
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <test_leds+0xc0>)
 8002150:	2201      	movs	r2, #1
 8002152:	2110      	movs	r1, #16
 8002154:	0018      	movs	r0, r3
 8002156:	f002 fa4d 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800215a:	200a      	movs	r0, #10
 800215c:	f000 ff0a 	bl	8002f74 <HAL_Delay>
	ON(BLUE1);
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <test_leds+0xc0>)
 8002162:	2201      	movs	r2, #1
 8002164:	2120      	movs	r1, #32
 8002166:	0018      	movs	r0, r3
 8002168:	f002 fa44 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800216c:	200a      	movs	r0, #10
 800216e:	f000 ff01 	bl	8002f74 <HAL_Delay>
	ON(BLUE2);
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <test_leds+0xc0>)
 8002174:	2201      	movs	r2, #1
 8002176:	2140      	movs	r1, #64	; 0x40
 8002178:	0018      	movs	r0, r3
 800217a:	f002 fa3b 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800217e:	200a      	movs	r0, #10
 8002180:	f000 fef8 	bl	8002f74 <HAL_Delay>
	ON(BLUE3);
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <test_leds+0xc0>)
 8002186:	2201      	movs	r2, #1
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0018      	movs	r0, r3
 800218c:	f002 fa32 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f000 feef 	bl	8002f74 <HAL_Delay>
	OFF(RED);
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <test_leds+0xc0>)
 8002198:	2200      	movs	r2, #0
 800219a:	2108      	movs	r1, #8
 800219c:	0018      	movs	r0, r3
 800219e:	f002 fa29 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021a2:	200a      	movs	r0, #10
 80021a4:	f000 fee6 	bl	8002f74 <HAL_Delay>
	OFF(GREEN);
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <test_leds+0xc0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	2110      	movs	r1, #16
 80021ae:	0018      	movs	r0, r3
 80021b0:	f002 fa20 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fedd 	bl	8002f74 <HAL_Delay>
	OFF(BLUE1);
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <test_leds+0xc0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	0018      	movs	r0, r3
 80021c2:	f002 fa17 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021c6:	200a      	movs	r0, #10
 80021c8:	f000 fed4 	bl	8002f74 <HAL_Delay>
	OFF(BLUE2);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <test_leds+0xc0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	0018      	movs	r0, r3
 80021d4:	f002 fa0e 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f000 fecb 	bl	8002f74 <HAL_Delay>
	OFF(BLUE3);
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <test_leds+0xc0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0018      	movs	r0, r3
 80021e6:	f002 fa05 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021ea:	200a      	movs	r0, #10
 80021ec:	f000 fec2 	bl	8002f74 <HAL_Delay>

}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	50000400 	.word	0x50000400

080021fc <calctemp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calctemp() {
 80021fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fe:	b08b      	sub	sp, #44	; 0x2c
 8002200:	af00      	add	r7, sp, #0
	// gets °C data from raw adc data
	for (int i = 0; i < NUMSENSORS; i++) {
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e098      	b.n	800233a <calctemp+0x13e>
		uint16_t value = adc_values[i] - AD_CORRECTION;
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <calctemp+0x150>)
 800220a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	58d2      	ldr	r2, [r2, r3]
 8002210:	2616      	movs	r6, #22
 8002212:	19bb      	adds	r3, r7, r6
 8002214:	801a      	strh	r2, [r3, #0]
		double voltage = VREF / (double) 4096 * value;
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <calctemp+0x154>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <calctemp+0x158>)
 8002220:	f7fe fcaa 	bl	8000b78 <__aeabi_ddiv>
 8002224:	0002      	movs	r2, r0
 8002226:	000b      	movs	r3, r1
 8002228:	0014      	movs	r4, r2
 800222a:	001d      	movs	r5, r3
 800222c:	19bb      	adds	r3, r7, r6
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ff33 	bl	800209c <__aeabi_i2d>
 8002236:	0002      	movs	r2, r0
 8002238:	000b      	movs	r3, r1
 800223a:	0020      	movs	r0, r4
 800223c:	0029      	movs	r1, r5
 800223e:	f7ff f895 	bl	800136c <__aeabi_dmul>
 8002242:	0002      	movs	r2, r0
 8002244:	000b      	movs	r3, r1
 8002246:	60ba      	str	r2, [r7, #8]
 8002248:	60fb      	str	r3, [r7, #12]
		double ntc_resistance = voltage / (VREF - voltage) * DIVIDER_RESISTANCE;
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <calctemp+0x154>)
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f7ff fb4c 	bl	80018f0 <__aeabi_dsub>
 8002258:	0002      	movs	r2, r0
 800225a:	000b      	movs	r3, r1
 800225c:	68b8      	ldr	r0, [r7, #8]
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	f7fe fc8a 	bl	8000b78 <__aeabi_ddiv>
 8002264:	0002      	movs	r2, r0
 8002266:	000b      	movs	r3, r1
 8002268:	0010      	movs	r0, r2
 800226a:	0019      	movs	r1, r3
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <calctemp+0x15c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f7ff f87b 	bl	800136c <__aeabi_dmul>
 8002276:	0002      	movs	r2, r0
 8002278:	000b      	movs	r3, r1
 800227a:	603a      	str	r2, [r7, #0]
 800227c:	607b      	str	r3, [r7, #4]
		double temperature = (double) ntc_resistance
				/ (double) NOMINAL_RESISTANCE;
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <calctemp+0x160>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
		double temperature = (double) ntc_resistance
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f7fe fc76 	bl	8000b78 <__aeabi_ddiv>
 800228c:	0002      	movs	r2, r0
 800228e:	000b      	movs	r3, r1
 8002290:	61ba      	str	r2, [r7, #24]
 8002292:	61fb      	str	r3, [r7, #28]
		temperature = log(temperature);
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0010      	movs	r0, r2
 800229a:	0019      	movs	r1, r3
 800229c:	f004 fe26 	bl	8006eec <log>
 80022a0:	0002      	movs	r2, r0
 80022a2:	000b      	movs	r3, r1
 80022a4:	61ba      	str	r2, [r7, #24]
 80022a6:	61fb      	str	r3, [r7, #28]
		temperature /= BETA;
 80022a8:	2200      	movs	r2, #0
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <calctemp+0x164>)
 80022ac:	69b8      	ldr	r0, [r7, #24]
 80022ae:	69f9      	ldr	r1, [r7, #28]
 80022b0:	f7fe fc62 	bl	8000b78 <__aeabi_ddiv>
 80022b4:	0002      	movs	r2, r0
 80022b6:	000b      	movs	r3, r1
 80022b8:	61ba      	str	r2, [r7, #24]
 80022ba:	61fb      	str	r3, [r7, #28]
		temperature += 1.0 / NOMINAL_TEMPERATURE;
 80022bc:	4a29      	ldr	r2, [pc, #164]	; (8002364 <calctemp+0x168>)
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <calctemp+0x16c>)
 80022c0:	69b8      	ldr	r0, [r7, #24]
 80022c2:	69f9      	ldr	r1, [r7, #28]
 80022c4:	f7fe f8f8 	bl	80004b8 <__aeabi_dadd>
 80022c8:	0002      	movs	r2, r0
 80022ca:	000b      	movs	r3, r1
 80022cc:	61ba      	str	r2, [r7, #24]
 80022ce:	61fb      	str	r3, [r7, #28]
		temperature = 1.0 / temperature;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2000      	movs	r0, #0
 80022d6:	4925      	ldr	r1, [pc, #148]	; (800236c <calctemp+0x170>)
 80022d8:	f7fe fc4e 	bl	8000b78 <__aeabi_ddiv>
 80022dc:	0002      	movs	r2, r0
 80022de:	000b      	movs	r3, r1
 80022e0:	61ba      	str	r2, [r7, #24]
 80022e2:	61fb      	str	r3, [r7, #28]
		temperature -= 273.15;
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <calctemp+0x174>)
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <calctemp+0x178>)
 80022e8:	69b8      	ldr	r0, [r7, #24]
 80022ea:	69f9      	ldr	r1, [r7, #28]
 80022ec:	f7ff fb00 	bl	80018f0 <__aeabi_dsub>
 80022f0:	0002      	movs	r2, r0
 80022f2:	000b      	movs	r3, r1
 80022f4:	61ba      	str	r2, [r7, #24]
 80022f6:	61fb      	str	r3, [r7, #28]

		if (temperature < RANGE_L || temperature > RANGE_H) {
 80022f8:	2200      	movs	r2, #0
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <calctemp+0x17c>)
 80022fc:	69b8      	ldr	r0, [r7, #24]
 80022fe:	69f9      	ldr	r1, [r7, #28]
 8002300:	f7fe f894 	bl	800042c <__aeabi_dcmplt>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d107      	bne.n	8002318 <calctemp+0x11c>
 8002308:	2200      	movs	r2, #0
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <calctemp+0x180>)
 800230c:	69b8      	ldr	r0, [r7, #24]
 800230e:	69f9      	ldr	r1, [r7, #28]
 8002310:	f7fe f8a0 	bl	8000454 <__aeabi_dcmpgt>
 8002314:	1e03      	subs	r3, r0, #0
 8002316:	d003      	beq.n	8002320 <calctemp+0x124>
			temperature = INVALID_VAL;
 8002318:	2200      	movs	r2, #0
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <calctemp+0x184>)
 800231c:	61ba      	str	r2, [r7, #24]
 800231e:	61fb      	str	r3, [r7, #28]
		}

		temperatures_data[i] = temperature;
 8002320:	69b8      	ldr	r0, [r7, #24]
 8002322:	69f9      	ldr	r1, [r7, #28]
 8002324:	f7fe f8aa 	bl	800047c <__aeabi_d2uiz>
 8002328:	0003      	movs	r3, r0
 800232a:	b299      	uxth	r1, r3
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <calctemp+0x188>)
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < NUMSENSORS; i++) {
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3301      	adds	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	2b07      	cmp	r3, #7
 800233e:	dc00      	bgt.n	8002342 <calctemp+0x146>
 8002340:	e762      	b.n	8002208 <calctemp+0xc>
	}
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b00b      	add	sp, #44	; 0x2c
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	20000240 	.word	0x20000240
 8002350:	20000010 	.word	0x20000010
 8002354:	40b00000 	.word	0x40b00000
 8002358:	20000008 	.word	0x20000008
 800235c:	20000000 	.word	0x20000000
 8002360:	40aad600 	.word	0x40aad600
 8002364:	dcb5db83 	.word	0xdcb5db83
 8002368:	3f6b79e1 	.word	0x3f6b79e1
 800236c:	3ff00000 	.word	0x3ff00000
 8002370:	66666666 	.word	0x66666666
 8002374:	40711266 	.word	0x40711266
 8002378:	c0440000 	.word	0xc0440000
 800237c:	40690000 	.word	0x40690000
 8002380:	406fe000 	.word	0x406fe000
 8002384:	20000260 	.word	0x20000260

08002388 <select_adc_channel>:
		}
	}
	return counter;
}
//-------------------------------------------------------
void select_adc_channel(int channel) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002390:	230c      	movs	r3, #12
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	0018      	movs	r0, r3
 8002396:	230c      	movs	r3, #12
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f004 f920 	bl	80065e0 <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
	switch (channel) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d82d      	bhi.n	8002402 <select_adc_channel+0x7a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	009a      	lsls	r2, r3, #2
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <select_adc_channel+0xac>)
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	469f      	mov	pc, r3
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 80023b2:	230c      	movs	r3, #12
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
		break;
 80023ba:	e026      	b.n	800240a <select_adc_channel+0x82>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 80023bc:	230c      	movs	r3, #12
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <select_adc_channel+0xb0>)
 80023c2:	601a      	str	r2, [r3, #0]
		break;
 80023c4:	e021      	b.n	800240a <select_adc_channel+0x82>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 80023c6:	230c      	movs	r3, #12
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <select_adc_channel+0xb4>)
 80023cc:	601a      	str	r2, [r3, #0]
		break;
 80023ce:	e01c      	b.n	800240a <select_adc_channel+0x82>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 80023d0:	230c      	movs	r3, #12
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <select_adc_channel+0xb8>)
 80023d6:	601a      	str	r2, [r3, #0]
		break;
 80023d8:	e017      	b.n	800240a <select_adc_channel+0x82>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 80023da:	230c      	movs	r3, #12
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	4a19      	ldr	r2, [pc, #100]	; (8002444 <select_adc_channel+0xbc>)
 80023e0:	601a      	str	r2, [r3, #0]
		break;
 80023e2:	e012      	b.n	800240a <select_adc_channel+0x82>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 80023e4:	230c      	movs	r3, #12
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	4a17      	ldr	r2, [pc, #92]	; (8002448 <select_adc_channel+0xc0>)
 80023ea:	601a      	str	r2, [r3, #0]
		break;
 80023ec:	e00d      	b.n	800240a <select_adc_channel+0x82>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 80023ee:	230c      	movs	r3, #12
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <select_adc_channel+0xc4>)
 80023f4:	601a      	str	r2, [r3, #0]
		break;
 80023f6:	e008      	b.n	800240a <select_adc_channel+0x82>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 80023f8:	230c      	movs	r3, #12
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <select_adc_channel+0xc8>)
 80023fe:	601a      	str	r2, [r3, #0]
		break;
 8002400:	e003      	b.n	800240a <select_adc_channel+0x82>
	default:
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002402:	230c      	movs	r3, #12
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <select_adc_channel+0xcc>)
 8002408:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800240a:	210c      	movs	r1, #12
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002418:	187a      	adds	r2, r7, r1
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <select_adc_channel+0xd0>)
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f001 fa08 	bl	8003834 <HAL_ADC_ConfigChannel>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d001      	beq.n	800242c <select_adc_channel+0xa4>
		Error_Handler();
 8002428:	f000 fb1a 	bl	8002a60 <Error_Handler>
	}
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b006      	add	sp, #24
 8002432:	bd80      	pop	{r7, pc}
 8002434:	0800733c 	.word	0x0800733c
 8002438:	04000002 	.word	0x04000002
 800243c:	08000004 	.word	0x08000004
 8002440:	0c000008 	.word	0x0c000008
 8002444:	10000010 	.word	0x10000010
 8002448:	14000020 	.word	0x14000020
 800244c:	18000040 	.word	0x18000040
 8002450:	1c000080 	.word	0x1c000080
 8002454:	b0001000 	.word	0xb0001000
 8002458:	20000090 	.word	0x20000090

0800245c <convert>:
//----------------------------------------------

void convert() {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	int p;

	for (p = 0; p < NUMSENSORS; p++) {
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	e027      	b.n	80024b8 <convert+0x5c>
		select_adc_channel(p);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff ff8c 	bl	8002388 <select_adc_channel>
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <convert+0x6c>)
 8002472:	0018      	movs	r0, r3
 8002474:	f001 f8b4 	bl	80035e0 <HAL_ADC_Start>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <convert+0x24>
			Error_Handler();
 800247c:	f000 faf0 	bl	8002a60 <Error_Handler>
		}
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8002480:	2301      	movs	r3, #1
 8002482:	425a      	negs	r2, r3
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <convert+0x6c>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f001 f933 	bl	80036f4 <HAL_ADC_PollForConversion>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d001      	beq.n	8002496 <convert+0x3a>
			Error_Handler();
 8002492:	f000 fae5 	bl	8002a60 <Error_Handler>
		}
		adc_values[p] = HAL_ADC_GetValue(&hadc1);
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <convert+0x6c>)
 8002498:	0018      	movs	r0, r3
 800249a:	f001 f9bf 	bl	800381c <HAL_ADC_GetValue>
 800249e:	0003      	movs	r3, r0
 80024a0:	0019      	movs	r1, r3
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <convert+0x70>)
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(&hadc1);
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <convert+0x6c>)
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 f8e5 	bl	800367c <HAL_ADC_Stop>
	for (p = 0; p < NUMSENSORS; p++) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3301      	adds	r3, #1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	ddd4      	ble.n	8002468 <convert+0xc>

	}
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000090 	.word	0x20000090
 80024cc:	20000240 	.word	0x20000240

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int length=0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024da:	f000 fcc5 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024de:	f000 f855 	bl	800258c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e2:	f000 fa3d 	bl	8002960 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024e6:	f000 f8ab 	bl	8002640 <MX_ADC1_Init>
  MX_CRC_Init();
 80024ea:	f000 f993 	bl	8002814 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80024ee:	f000 f9b5 	bl	800285c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80024f2:	f000 fa01 	bl	80028f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	test_leds();
 80024f6:	f7ff fe1f 	bl	8002138 <test_leds>
	ON(ENSPWR);
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	0059      	lsls	r1, r3, #1
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	2201      	movs	r2, #1
 8002504:	0018      	movs	r0, r3
 8002506:	f002 f875 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800250a:	2064      	movs	r0, #100	; 0x64
 800250c:	f000 fd32 	bl	8002f74 <HAL_Delay>
	convert();
 8002510:	f7ff ffa4 	bl	800245c <convert>
	calctemp();
 8002514:	f7ff fe72 	bl	80021fc <calctemp>
	convert();
 8002518:	f7ff ffa0 	bl	800245c <convert>
	calctemp();
 800251c:	f7ff fe6e 	bl	80021fc <calctemp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		convert();
 8002520:	f7ff ff9c 	bl	800245c <convert>
//	  msglength=sprintf(tx_buffer,"ADC %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
		calctemp();
 8002524:	f7ff fe6a 	bl	80021fc <calctemp>
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
//------------------------------------------------------------------------
		// wait for rising edge
		//while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin))
			;
		ON(GREEN);
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <main+0xa8>)
 800252a:	2201      	movs	r2, #1
 800252c:	2110      	movs	r1, #16
 800252e:	0018      	movs	r0, r3
 8002530:	f002 f860 	bl	80045f4 <HAL_GPIO_WritePin>

		 // send
		 //sendData();
		 */
		//sendDataCal();
		length=sprintf(tx_buffer,"Motto1: %03d Motto2: %03d \r\n", temperatures_data[6], temperatures_data[7]);
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <main+0xac>)
 8002536:	899b      	ldrh	r3, [r3, #12]
 8002538:	001a      	movs	r2, r3
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <main+0xac>)
 800253c:	89db      	ldrh	r3, [r3, #14]
 800253e:	4910      	ldr	r1, [pc, #64]	; (8002580 <main+0xb0>)
 8002540:	4810      	ldr	r0, [pc, #64]	; (8002584 <main+0xb4>)
 8002542:	f004 f82d 	bl	80065a0 <siprintf>
 8002546:	0003      	movs	r3, r0
 8002548:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, length, 20);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	b29a      	uxth	r2, r3
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <main+0xb4>)
 8002550:	480d      	ldr	r0, [pc, #52]	; (8002588 <main+0xb8>)
 8002552:	2314      	movs	r3, #20
 8002554:	f002 fefc 	bl	8005350 <HAL_UART_Transmit>
		OFF(GREEN);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <main+0xa8>)
 800255a:	2200      	movs	r2, #0
 800255c:	2110      	movs	r1, #16
 800255e:	0018      	movs	r0, r3
 8002560:	f002 f848 	bl	80045f4 <HAL_GPIO_WritePin>
		// wait for falling edge
		//while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
		HAL_Delay(1000);
 8002564:	23fa      	movs	r3, #250	; 0xfa
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	0018      	movs	r0, r3
 800256a:	f000 fd03 	bl	8002f74 <HAL_Delay>


//------------------------------------------------------------------------
		HAL_Delay(100);
 800256e:	2064      	movs	r0, #100	; 0x64
 8002570:	f000 fd00 	bl	8002f74 <HAL_Delay>
		convert();
 8002574:	e7d4      	b.n	8002520 <main+0x50>
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	50000400 	.word	0x50000400
 800257c:	20000260 	.word	0x20000260
 8002580:	080072dc 	.word	0x080072dc
 8002584:	20000270 	.word	0x20000270
 8002588:	200001ac 	.word	0x200001ac

0800258c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b093      	sub	sp, #76	; 0x4c
 8002590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002592:	2414      	movs	r4, #20
 8002594:	193b      	adds	r3, r7, r4
 8002596:	0018      	movs	r0, r3
 8002598:	2334      	movs	r3, #52	; 0x34
 800259a:	001a      	movs	r2, r3
 800259c:	2100      	movs	r1, #0
 800259e:	f004 f81f 	bl	80065e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	0018      	movs	r0, r3
 80025a6:	2310      	movs	r3, #16
 80025a8:	001a      	movs	r2, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	f004 f818 	bl	80065e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	0018      	movs	r0, r3
 80025b6:	f002 f83b 	bl	8004630 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0052      	lsls	r2, r2, #1
 80025c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025c8:	0021      	movs	r1, r4
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	2202      	movs	r2, #2
 80025da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2202      	movs	r2, #2
 80025e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2208      	movs	r2, #8
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0292      	lsls	r2, r2, #10
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0592      	lsls	r2, r2, #22
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	0018      	movs	r0, r3
 8002602:	f002 f861 	bl	80046c8 <HAL_RCC_OscConfig>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800260a:	f000 fa29 	bl	8002a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2202      	movs	r2, #2
 8002618:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2102      	movs	r1, #2
 800262a:	0018      	movs	r0, r3
 800262c:	f002 fb5c 	bl	8004ce8 <HAL_RCC_ClockConfig>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002634:	f000 fa14 	bl	8002a60 <Error_Handler>
  }
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b013      	add	sp, #76	; 0x4c
 800263e:	bd90      	pop	{r4, r7, pc}

08002640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	0018      	movs	r0, r3
 800264a:	230c      	movs	r3, #12
 800264c:	001a      	movs	r2, r3
 800264e:	2100      	movs	r1, #0
 8002650:	f003 ffc6 	bl	80065e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002654:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <MX_ADC1_Init+0x1b4>)
 8002658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800265a:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	0312      	lsls	r2, r2, #12
 8002660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800266e:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	0392      	lsls	r2, r2, #14
 8002674:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002676:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002678:	2208      	movs	r2, #8
 800267a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800267c:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 800267e:	2200      	movs	r2, #0
 8002680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002682:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002684:	2200      	movs	r2, #0
 8002686:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 800268a:	2200      	movs	r2, #0
 800268c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 800268e:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002690:	2208      	movs	r2, #8
 8002692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002694:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002696:	2220      	movs	r2, #32
 8002698:	2100      	movs	r1, #0
 800269a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800269c:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026a2:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026a8:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026aa:	222c      	movs	r2, #44	; 0x2c
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80026b6:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80026c2:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026c4:	223c      	movs	r2, #60	; 0x3c
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fddc 	bl	8003290 <HAL_ADC_Init>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d001      	beq.n	80026e0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80026dc:	f000 f9c0 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f001 f89b 	bl	8003834 <HAL_ADC_ConfigChannel>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002702:	f000 f9ad 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <MX_ADC1_Init+0x1b8>)
 800270a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2204      	movs	r2, #4
 8002710:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f001 f88b 	bl	8003834 <HAL_ADC_ConfigChannel>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002722:	f000 f99d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4a34      	ldr	r2, [pc, #208]	; (80027fc <MX_ADC1_Init+0x1bc>)
 800272a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2208      	movs	r2, #8
 8002730:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002732:	1d3a      	adds	r2, r7, #4
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f001 f87b 	bl	8003834 <HAL_ADC_ConfigChannel>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002742:	f000 f98d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <MX_ADC1_Init+0x1c0>)
 800274a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	220c      	movs	r2, #12
 8002750:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002752:	1d3a      	adds	r2, r7, #4
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f001 f86b 	bl	8003834 <HAL_ADC_ConfigChannel>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d001      	beq.n	8002766 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8002762:	f000 f97d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <MX_ADC1_Init+0x1c4>)
 800276a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2210      	movs	r2, #16
 8002770:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002772:	1d3a      	adds	r2, r7, #4
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002776:	0011      	movs	r1, r2
 8002778:	0018      	movs	r0, r3
 800277a:	f001 f85b 	bl	8003834 <HAL_ADC_ConfigChannel>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d001      	beq.n	8002786 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8002782:	f000 f96d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <MX_ADC1_Init+0x1c8>)
 800278a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2214      	movs	r2, #20
 8002790:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002792:	1d3a      	adds	r2, r7, #4
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f001 f84b 	bl	8003834 <HAL_ADC_ConfigChannel>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80027a2:	f000 f95d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <MX_ADC1_Init+0x1cc>)
 80027aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2218      	movs	r2, #24
 80027b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b2:	1d3a      	adds	r2, r7, #4
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f001 f83b 	bl	8003834 <HAL_ADC_ConfigChannel>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80027c2:	f000 f94d 	bl	8002a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <MX_ADC1_Init+0x1d0>)
 80027ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	221c      	movs	r2, #28
 80027d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d2:	1d3a      	adds	r2, r7, #4
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_ADC1_Init+0x1b0>)
 80027d6:	0011      	movs	r1, r2
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 f82b 	bl	8003834 <HAL_ADC_ConfigChannel>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 80027e2:	f000 f93d 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	20000090 	.word	0x20000090
 80027f4:	40012400 	.word	0x40012400
 80027f8:	04000002 	.word	0x04000002
 80027fc:	08000004 	.word	0x08000004
 8002800:	0c000008 	.word	0x0c000008
 8002804:	10000010 	.word	0x10000010
 8002808:	14000020 	.word	0x14000020
 800280c:	18000040 	.word	0x18000040
 8002810:	1c000080 	.word	0x1c000080

08002814 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_CRC_Init+0x40>)
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <MX_CRC_Init+0x44>)
 800281c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <MX_CRC_Init+0x40>)
 8002820:	2200      	movs	r2, #0
 8002822:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_CRC_Init+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_CRC_Init+0x40>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_CRC_Init+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_CRC_Init+0x40>)
 8002838:	2201      	movs	r2, #1
 800283a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <MX_CRC_Init+0x40>)
 800283e:	0018      	movs	r0, r3
 8002840:	f001 fbd4 	bl	8003fec <HAL_CRC_Init>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002848:	f000 f90a 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200000f4 	.word	0x200000f4
 8002858:	40023000 	.word	0x40023000

0800285c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <MX_USART1_UART_Init+0x98>)
 8002864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002868:	22e1      	movs	r2, #225	; 0xe1
 800286a:	0252      	lsls	r2, r2, #9
 800286c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002882:	220c      	movs	r2, #12
 8002884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 80028a6:	0018      	movs	r0, r3
 80028a8:	f002 fcfc 	bl	80052a4 <HAL_UART_Init>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d001      	beq.n	80028b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028b0:	f000 f8d6 	bl	8002a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 80028b6:	2100      	movs	r1, #0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f003 fd91 	bl	80063e0 <HAL_UARTEx_SetTxFifoThreshold>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028c2:	f000 f8cd 	bl	8002a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 80028c8:	2100      	movs	r1, #0
 80028ca:	0018      	movs	r0, r3
 80028cc:	f003 fdc8 	bl	8006460 <HAL_UARTEx_SetRxFifoThreshold>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028d4:	f000 f8c4 	bl	8002a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <MX_USART1_UART_Init+0x94>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f003 fd46 	bl	800636c <HAL_UARTEx_DisableFifoMode>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028e4:	f000 f8bc 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	20000118 	.word	0x20000118
 80028f4:	40013800 	.word	0x40013800

080028f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_USART3_UART_Init+0x60>)
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <MX_USART3_UART_Init+0x64>)
 8002900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002904:	2296      	movs	r2, #150	; 0x96
 8002906:	01d2      	lsls	r2, r2, #7
 8002908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <MX_USART3_UART_Init+0x60>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_USART3_UART_Init+0x60>)
 800291e:	220c      	movs	r2, #12
 8002920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_USART3_UART_Init+0x60>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <MX_USART3_UART_Init+0x60>)
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <MX_USART3_UART_Init+0x60>)
 8002942:	0018      	movs	r0, r3
 8002944:	f002 fcae 	bl	80052a4 <HAL_UART_Init>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d001      	beq.n	8002950 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800294c:	f000 f888 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	200001ac 	.word	0x200001ac
 800295c:	40004800 	.word	0x40004800

08002960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	240c      	movs	r4, #12
 8002968:	193b      	adds	r3, r7, r4
 800296a:	0018      	movs	r0, r3
 800296c:	2314      	movs	r3, #20
 800296e:	001a      	movs	r2, r3
 8002970:	2100      	movs	r1, #0
 8002972:	f003 fe35 	bl	80065e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <MX_GPIO_Init+0xf4>)
 800297c:	2104      	movs	r1, #4
 800297e:	430a      	orrs	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <MX_GPIO_Init+0xf4>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <MX_GPIO_Init+0xf4>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029aa:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029ac:	2102      	movs	r1, #2
 80029ae:	430a      	orrs	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MX_GPIO_Init+0xf4>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENSPWR_GPIO_Port, ENSPWR_Pin, GPIO_PIN_RESET);
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	0059      	lsls	r1, r3, #1
 80029c2:	23a0      	movs	r3, #160	; 0xa0
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	2200      	movs	r2, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f001 fe13 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <MX_GPIO_Init+0xf8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	21f8      	movs	r1, #248	; 0xf8
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 fe0d 	bl	80045f4 <HAL_GPIO_WritePin>
                          |BLUE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	0192      	lsls	r2, r2, #6
 80029e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <MX_GPIO_Init+0xfc>)
 80029f2:	0019      	movs	r1, r3
 80029f4:	0010      	movs	r0, r2
 80029f6:	f001 fc99 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENSPWR_Pin */
  GPIO_InitStruct.Pin = ENSPWR_Pin;
 80029fa:	0021      	movs	r1, r4
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0052      	lsls	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	000c      	movs	r4, r1
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2201      	movs	r2, #1
 8002a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENSPWR_GPIO_Port, &GPIO_InitStruct);
 8002a18:	193a      	adds	r2, r7, r4
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f001 fc83 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE1_Pin BLUE2_Pin
                           BLUE3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002a26:	0021      	movs	r1, r4
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	22f8      	movs	r2, #248	; 0xf8
 8002a2c:	601a      	str	r2, [r3, #0]
                          |BLUE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2201      	movs	r2, #1
 8002a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <MX_GPIO_Init+0xf8>)
 8002a44:	0019      	movs	r1, r3
 8002a46:	0010      	movs	r0, r2
 8002a48:	f001 fc70 	bl	800432c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b009      	add	sp, #36	; 0x24
 8002a52:	bd90      	pop	{r4, r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	50000400 	.word	0x50000400
 8002a5c:	50000800 	.word	0x50000800

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a68:	e7fe      	b.n	8002a68 <Error_Handler+0x8>
	...

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	0549      	lsls	r1, r1, #21
 8002a94:	430a      	orrs	r2, r1
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_MspInit+0x44>)
 8002a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b093      	sub	sp, #76	; 0x4c
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	2334      	movs	r3, #52	; 0x34
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	2314      	movs	r3, #20
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f003 fd8a 	bl	80065e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	2418      	movs	r4, #24
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	231c      	movs	r3, #28
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f003 fd82 	bl	80065e0 <memset>
  if(hadc->Instance==ADC1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <HAL_ADC_MspInit+0xe4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d154      	bne.n	8002b90 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	01d2      	lsls	r2, r2, #7
 8002aec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	0018      	movs	r0, r3
 8002af8:	f002 faa0 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b00:	f7ff ffae 	bl	8002a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0349      	lsls	r1, r1, #13
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	035b      	lsls	r3, r3, #13
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b3e:	2102      	movs	r1, #2
 8002b40:	430a      	orrs	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8002b50:	2434      	movs	r4, #52	; 0x34
 8002b52:	193b      	adds	r3, r7, r4
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	601a      	str	r2, [r3, #0]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	193a      	adds	r2, r7, r4
 8002b66:	23a0      	movs	r3, #160	; 0xa0
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f001 fbdd 	bl	800432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AREFIN_Pin;
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b78:	193b      	adds	r3, r7, r4
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AREFIN_GPIO_Port, &GPIO_InitStruct);
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <HAL_ADC_MspInit+0xec>)
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f001 fbce 	bl	800432c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b013      	add	sp, #76	; 0x4c
 8002b96:	bd90      	pop	{r4, r7, pc}
 8002b98:	40012400 	.word	0x40012400
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	50000400 	.word	0x50000400

08002ba4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_CRC_MspInit+0x38>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_CRC_MspInit+0x3c>)
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_CRC_MspInit+0x3c>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0149      	lsls	r1, r1, #5
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_CRC_MspInit+0x3c>)
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	40023000 	.word	0x40023000
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b093      	sub	sp, #76	; 0x4c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	2334      	movs	r3, #52	; 0x34
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	2314      	movs	r3, #20
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f003 fcf2 	bl	80065e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bfc:	2418      	movs	r4, #24
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	0018      	movs	r0, r3
 8002c02:	231c      	movs	r3, #28
 8002c04:	001a      	movs	r2, r3
 8002c06:	2100      	movs	r1, #0
 8002c08:	f003 fcea 	bl	80065e0 <memset>
  if(huart->Instance==USART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a46      	ldr	r2, [pc, #280]	; (8002d2c <HAL_UART_MspInit+0x148>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d148      	bne.n	8002ca8 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	0018      	movs	r0, r3
 8002c26:	f002 fa09 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c2e:	f7ff ff17 	bl	8002a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	01c9      	lsls	r1, r1, #7
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	01db      	lsls	r3, r3, #7
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_Pin|U1RX_Pin;
 8002c66:	2134      	movs	r1, #52	; 0x34
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	22c0      	movs	r2, #192	; 0xc0
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2202      	movs	r2, #2
 8002c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2201      	movs	r2, #1
 8002c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	187a      	adds	r2, r7, r1
 8002c8a:	23a0      	movs	r3, #160	; 0xa0
 8002c8c:	05db      	lsls	r3, r3, #23
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f001 fb4b 	bl	800432c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	201b      	movs	r0, #27
 8002c9c:	f001 f974 	bl	8003f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ca0:	201b      	movs	r0, #27
 8002ca2:	f001 f986 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ca6:	e03d      	b.n	8002d24 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_UART_MspInit+0x150>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d138      	bne.n	8002d24 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	02c9      	lsls	r1, r1, #11
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	02db      	lsls	r3, r3, #11
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_UART_MspInit+0x14c>)
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U3TX_Pin|U3RX_Pin;
 8002ce6:	2134      	movs	r1, #52	; 0x34
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	22c0      	movs	r2, #192	; 0xc0
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2204      	movs	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_UART_MspInit+0x154>)
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	0010      	movs	r0, r2
 8002d10:	f001 fb0c 	bl	800432c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	201d      	movs	r0, #29
 8002d1a:	f001 f935 	bl	8003f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002d1e:	201d      	movs	r0, #29
 8002d20:	f001 f947 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b013      	add	sp, #76	; 0x4c
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40004800 	.word	0x40004800
 8002d38:	50000400 	.word	0x50000400

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d60:	f000 f8ec 	bl	8002f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <USART1_IRQHandler+0x14>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f002 fb88 	bl	8005488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000118 	.word	0x20000118

08002d84 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <USART3_4_IRQHandler+0x14>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f002 fb7c 	bl	8005488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	200001ac 	.word	0x200001ac

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	18d3      	adds	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dcc:	f003 fc10 	bl	80065f0 <__errno>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	425b      	negs	r3, r3
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	18d2      	adds	r2, r2, r3
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <_sbrk+0x64>)
 8002dec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b006      	add	sp, #24
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20009000 	.word	0x20009000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	20000370 	.word	0x20000370
 8002e04:	200004c0 	.word	0x200004c0

08002e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e18:	f7ff fff6 	bl	8002e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e1e:	490d      	ldr	r1, [pc, #52]	; (8002e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <LoopForever+0xe>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e34:	4c0a      	ldr	r4, [pc, #40]	; (8002e60 <LoopForever+0x16>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e42:	f003 fbdb 	bl	80065fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e46:	f7ff fb43 	bl	80024d0 <main>

08002e4a <LoopForever>:

LoopForever:
  b LoopForever
 8002e4a:	e7fe      	b.n	8002e4a <LoopForever>
  ldr   r0, =_estack
 8002e4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002e58:	08007420 	.word	0x08007420
  ldr r2, =_sbss
 8002e5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002e60:	200004c0 	.word	0x200004c0

08002e64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <ADC1_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_Init+0x3c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_Init+0x3c>)
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	0049      	lsls	r1, r1, #1
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e82:	2003      	movs	r0, #3
 8002e84:	f000 f810 	bl	8002ea8 <HAL_InitTick>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e001      	b.n	8002e98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff fdea 	bl	8002a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	781b      	ldrb	r3, [r3, #0]
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_InitTick+0x88>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02b      	beq.n	8002f18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_InitTick+0x8c>)
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_InitTick+0x88>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	23fa      	movs	r3, #250	; 0xfa
 8002ecc:	0098      	lsls	r0, r3, #2
 8002ece:	f7fd f921 	bl	8000114 <__udivsi3>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7fd f91c 	bl	8000114 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 f877 	bl	8003fd2 <HAL_SYSTICK_Config>
 8002ee4:	1e03      	subs	r3, r0, #0
 8002ee6:	d112      	bne.n	8002f0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d80a      	bhi.n	8002f04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 f846 	bl	8003f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_InitTick+0x90>)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00d      	b.n	8002f20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e008      	b.n	8002f20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e003      	b.n	8002f20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b005      	add	sp, #20
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	20000020 	.word	0x20000020
 8002f34:	20000018 	.word	0x20000018
 8002f38:	2000001c 	.word	0x2000001c

08002f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_IncTick+0x1c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	001a      	movs	r2, r3
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x20>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	18d2      	adds	r2, r2, r3
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_IncTick+0x20>)
 8002f4e:	601a      	str	r2, [r3, #0]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000020 	.word	0x20000020
 8002f5c:	20000374 	.word	0x20000374

08002f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  return uwTick;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_GetTick+0x10>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000374 	.word	0x20000374

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff fff0 	bl	8002f60 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_Delay+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	001a      	movs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	f7ff ffe0 	bl	8002f60 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	20000020 	.word	0x20000020

08002fbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002fcc:	401a      	ands	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	fe3fffff 	.word	0xfe3fffff

08002fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	23e0      	movs	r3, #224	; 0xe0
 8002ff2:	045b      	lsls	r3, r3, #17
 8002ff4:	4013      	ands	r3, r2
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	2104      	movs	r1, #4
 8003012:	400a      	ands	r2, r1
 8003014:	2107      	movs	r1, #7
 8003016:	4091      	lsls	r1, r2
 8003018:	000a      	movs	r2, r1
 800301a:	43d2      	mvns	r2, r2
 800301c:	401a      	ands	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2104      	movs	r1, #4
 8003022:	400b      	ands	r3, r1
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4099      	lsls	r1, r3
 8003028:	000b      	movs	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}

08003038 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	2104      	movs	r1, #4
 800304a:	400a      	ands	r2, r1
 800304c:	2107      	movs	r1, #7
 800304e:	4091      	lsls	r1, r2
 8003050:	000a      	movs	r2, r1
 8003052:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2104      	movs	r1, #4
 8003058:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800305a:	40da      	lsrs	r2, r3
 800305c:	0013      	movs	r3, r2
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}

08003066 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	23c0      	movs	r3, #192	; 0xc0
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d101      	bne.n	800307e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	211f      	movs	r1, #31
 800309c:	400a      	ands	r2, r1
 800309e:	210f      	movs	r1, #15
 80030a0:	4091      	lsls	r1, r2
 80030a2:	000a      	movs	r2, r1
 80030a4:	43d2      	mvns	r2, r2
 80030a6:	401a      	ands	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	210f      	movs	r1, #15
 80030ae:	4019      	ands	r1, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	201f      	movs	r0, #31
 80030b4:	4003      	ands	r3, r0
 80030b6:	4099      	lsls	r1, r3
 80030b8:	000b      	movs	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	035b      	lsls	r3, r3, #13
 80030da:	0b5b      	lsrs	r3, r3, #13
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b002      	add	sp, #8
 80030e8:	bd80      	pop	{r7, pc}

080030ea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	0352      	lsls	r2, r2, #13
 80030fc:	0b52      	lsrs	r2, r2, #13
 80030fe:	43d2      	mvns	r2, r2
 8003100:	401a      	ands	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b002      	add	sp, #8
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	0212      	lsls	r2, r2, #8
 8003124:	43d2      	mvns	r2, r2
 8003126:	401a      	ands	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	400b      	ands	r3, r1
 8003130:	4904      	ldr	r1, [pc, #16]	; (8003144 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003132:	400b      	ands	r3, r1
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b004      	add	sp, #16
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	07ffff00 	.word	0x07ffff00

08003148 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <LL_ADC_EnableInternalRegulator+0x24>)
 8003156:	4013      	ands	r3, r2
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	0552      	lsls	r2, r2, #21
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	6fffffe8 	.word	0x6fffffe8

08003170 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	055b      	lsls	r3, r3, #21
 8003180:	401a      	ands	r2, r3
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	055b      	lsls	r3, r3, #21
 8003186:	429a      	cmp	r2, r3
 8003188:	d101      	bne.n	800318e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800318e:	2300      	movs	r3, #0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <LL_ADC_Enable+0x20>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	2201      	movs	r2, #1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	7fffffe8 	.word	0x7fffffe8

080031bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <LL_ADC_Disable+0x20>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	2202      	movs	r2, #2
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	7fffffe8 	.word	0x7fffffe8

080031e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_IsEnabled+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_IsEnabled+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bd80      	pop	{r7, pc}

08003202 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2202      	movs	r2, #2
 8003210:	4013      	ands	r3, r2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d101      	bne.n	800321a <LL_ADC_IsDisableOngoing+0x18>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <LL_ADC_IsDisableOngoing+0x1a>
 800321a:	2300      	movs	r3, #0
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <LL_ADC_REG_StartConversion+0x20>)
 8003232:	4013      	ands	r3, r2
 8003234:	2204      	movs	r2, #4
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	7fffffe8 	.word	0x7fffffe8

08003248 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <LL_ADC_REG_StopConversion+0x20>)
 8003256:	4013      	ands	r3, r2
 8003258:	2210      	movs	r2, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}
 8003268:	7fffffe8 	.word	0x7fffffe8

0800326c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2204      	movs	r2, #4
 800327a:	4013      	ands	r3, r2
 800327c:	2b04      	cmp	r3, #4
 800327e:	d101      	bne.n	8003284 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b002      	add	sp, #8
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e17f      	b.n	80035b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fbf7 	bl	8002ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2254      	movs	r2, #84	; 0x54
 80032d0:	2100      	movs	r1, #0
 80032d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ff49 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d115      	bne.n	800330e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff ff2e 	bl	8003148 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ec:	4bb4      	ldr	r3, [pc, #720]	; (80035c0 <HAL_ADC_Init+0x330>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	49b4      	ldr	r1, [pc, #720]	; (80035c4 <HAL_ADC_Init+0x334>)
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fc ff0e 	bl	8000114 <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003300:	e002      	b.n	8003308 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b01      	subs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ff2c 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d10f      	bne.n	800333c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	2210      	movs	r2, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	2201      	movs	r2, #1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003334:	231f      	movs	r3, #31
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ff93 	bl	800326c <LL_ADC_REG_IsConversionOngoing>
 8003346:	0003      	movs	r3, r0
 8003348:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	2210      	movs	r2, #16
 8003350:	4013      	ands	r3, r2
 8003352:	d000      	beq.n	8003356 <HAL_ADC_Init+0xc6>
 8003354:	e122      	b.n	800359c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d000      	beq.n	800335e <HAL_ADC_Init+0xce>
 800335c:	e11e      	b.n	800359c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	4a99      	ldr	r2, [pc, #612]	; (80035c8 <HAL_ADC_Init+0x338>)
 8003364:	4013      	ands	r3, r2
 8003366:	2202      	movs	r2, #2
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff ff34 	bl	80031e0 <LL_ADC_IsEnabled>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d000      	beq.n	800337e <HAL_ADC_Init+0xee>
 800337c:	e0ad      	b.n	80034da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7e1b      	ldrb	r3, [r3, #24]
 8003386:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003388:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e5b      	ldrb	r3, [r3, #25]
 800338e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003390:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7e9b      	ldrb	r3, [r3, #26]
 8003396:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003398:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_ADC_Init+0x118>
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	e000      	b.n	80033aa <HAL_ADC_Init+0x11a>
 80033a8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033aa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033b0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da04      	bge.n	80033c4 <HAL_ADC_Init+0x134>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	e001      	b.n	80033c8 <HAL_ADC_Init+0x138>
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80033c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	5c5b      	ldrb	r3, [r3, r1]
 80033d0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033d2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d115      	bne.n	8003410 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7e9b      	ldrb	r3, [r3, #26]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	0252      	lsls	r2, r2, #9
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e00b      	b.n	8003410 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	2220      	movs	r2, #32
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2201      	movs	r2, #1
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341c:	23e0      	movs	r3, #224	; 0xe0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003426:	4313      	orrs	r3, r2
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_ADC_Init+0x33c>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0f9b      	lsrs	r3, r3, #30
 800344a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003450:	4313      	orrs	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	223c      	movs	r2, #60	; 0x3c
 800345c:	5c9b      	ldrb	r3, [r3, r2]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d111      	bne.n	8003486 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0f9b      	lsrs	r3, r3, #30
 8003468:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800346e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003474:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800347a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	2201      	movs	r2, #1
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	4a50      	ldr	r2, [pc, #320]	; (80035d0 <HAL_ADC_Init+0x340>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	430a      	orrs	r2, r1
 800349a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	23c0      	movs	r3, #192	; 0xc0
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d018      	beq.n	80034da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	05db      	lsls	r3, r3, #23
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d012      	beq.n	80034da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	429a      	cmp	r2, r3
 80034be:	d00c      	beq.n	80034da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80034c0:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_ADC_Init+0x344>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a44      	ldr	r2, [pc, #272]	; (80035d8 <HAL_ADC_Init+0x348>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	23f0      	movs	r3, #240	; 0xf0
 80034d0:	039b      	lsls	r3, r3, #14
 80034d2:	401a      	ands	r2, r3
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_ADC_Init+0x344>)
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	001a      	movs	r2, r3
 80034e4:	2100      	movs	r1, #0
 80034e6:	f7ff fd8a 	bl	8002ffe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	493a      	ldr	r1, [pc, #232]	; (80035dc <HAL_ADC_Init+0x34c>)
 80034f4:	001a      	movs	r2, r3
 80034f6:	f7ff fd82 	bl	8002ffe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2110      	movs	r1, #16
 800350e:	4249      	negs	r1, r1
 8003510:	430a      	orrs	r2, r1
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
 8003514:	e018      	b.n	8003548 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	039b      	lsls	r3, r3, #14
 800351e:	429a      	cmp	r2, r3
 8003520:	d112      	bne.n	8003548 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	3b01      	subs	r3, #1
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	221c      	movs	r2, #28
 8003532:	4013      	ands	r3, r2
 8003534:	2210      	movs	r2, #16
 8003536:	4252      	negs	r2, r2
 8003538:	409a      	lsls	r2, r3
 800353a:	0011      	movs	r1, r2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2100      	movs	r1, #0
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff fd72 	bl	8003038 <LL_ADC_GetSamplingTimeCommonChannels>
 8003554:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800355a:	429a      	cmp	r2, r3
 800355c:	d10b      	bne.n	8003576 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	2203      	movs	r2, #3
 800356a:	4393      	bics	r3, r2
 800356c:	2201      	movs	r2, #1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003574:	e01c      	b.n	80035b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357a:	2212      	movs	r2, #18
 800357c:	4393      	bics	r3, r2
 800357e:	2210      	movs	r2, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	2201      	movs	r2, #1
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003592:	231f      	movs	r3, #31
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800359a:	e009      	b.n	80035b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	2210      	movs	r2, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80035b0:	231f      	movs	r3, #31
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	781b      	ldrb	r3, [r3, #0]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b008      	add	sp, #32
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000018 	.word	0x20000018
 80035c4:	00030d40 	.word	0x00030d40
 80035c8:	fffffefd 	.word	0xfffffefd
 80035cc:	fffe0201 	.word	0xfffe0201
 80035d0:	1ffffc02 	.word	0x1ffffc02
 80035d4:	40012708 	.word	0x40012708
 80035d8:	ffc3ffff 	.word	0xffc3ffff
 80035dc:	07ffff04 	.word	0x07ffff04

080035e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff fe3d 	bl	800326c <LL_ADC_REG_IsConversionOngoing>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d135      	bne.n	8003662 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2254      	movs	r2, #84	; 0x54
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_Start+0x24>
 8003600:	2302      	movs	r3, #2
 8003602:	e035      	b.n	8003670 <HAL_ADC_Start+0x90>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2254      	movs	r2, #84	; 0x54
 8003608:	2101      	movs	r1, #1
 800360a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800360c:	250f      	movs	r5, #15
 800360e:	197c      	adds	r4, r7, r5
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fb28 	bl	8003c68 <ADC_Enable>
 8003618:	0003      	movs	r3, r0
 800361a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800361c:	197b      	adds	r3, r7, r5
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d119      	bne.n	8003658 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <HAL_ADC_Start+0x98>)
 800362a:	4013      	ands	r3, r2
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	221c      	movs	r2, #28
 8003642:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2254      	movs	r2, #84	; 0x54
 8003648:	2100      	movs	r1, #0
 800364a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0018      	movs	r0, r3
 8003652:	f7ff fde7 	bl	8003224 <LL_ADC_REG_StartConversion>
 8003656:	e008      	b.n	800366a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2254      	movs	r2, #84	; 0x54
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]
 8003660:	e003      	b.n	800366a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003662:	230f      	movs	r3, #15
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800366a:	230f      	movs	r3, #15
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	781b      	ldrb	r3, [r3, #0]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b004      	add	sp, #16
 8003676:	bdb0      	pop	{r4, r5, r7, pc}
 8003678:	fffff0fe 	.word	0xfffff0fe

0800367c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2254      	movs	r2, #84	; 0x54
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADC_Stop+0x16>
 800368e:	2302      	movs	r3, #2
 8003690:	e029      	b.n	80036e6 <HAL_ADC_Stop+0x6a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2254      	movs	r2, #84	; 0x54
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800369a:	250f      	movs	r5, #15
 800369c:	197c      	adds	r4, r7, r5
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 fa9f 	bl	8003be4 <ADC_ConversionStop>
 80036a6:	0003      	movs	r3, r0
 80036a8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036aa:	197b      	adds	r3, r7, r5
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d112      	bne.n	80036d8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036b2:	197c      	adds	r4, r7, r5
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fb5c 	bl	8003d74 <ADC_Disable>
 80036bc:	0003      	movs	r3, r0
 80036be:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036c0:	197b      	adds	r3, r7, r5
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <HAL_ADC_Stop+0x74>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	2201      	movs	r2, #1
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2254      	movs	r2, #84	; 0x54
 80036dc:	2100      	movs	r1, #0
 80036de:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	fffffefe 	.word	0xfffffefe

080036f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d102      	bne.n	800370c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003706:	2308      	movs	r3, #8
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e00f      	b.n	800372c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	2220      	movs	r2, #32
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e072      	b.n	800380e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003728:	2304      	movs	r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800372c:	f7ff fc18 	bl	8002f60 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003734:	e01f      	b.n	8003776 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	d01c      	beq.n	8003776 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800373c:	f7ff fc10 	bl	8002f60 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <HAL_ADC_PollForConversion+0x5e>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d111      	bne.n	8003776 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	d10b      	bne.n	8003776 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	2204      	movs	r2, #4
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2254      	movs	r2, #84	; 0x54
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e04b      	b.n	800380e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	d0d9      	beq.n	8003736 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0018      	movs	r0, r3
 8003796:	f7ff fc66 	bl	8003066 <LL_ADC_REG_IsTriggerSourceSWStart>
 800379a:	1e03      	subs	r3, r0, #0
 800379c:	d02e      	beq.n	80037fc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7e9b      	ldrb	r3, [r3, #26]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12a      	bne.n	80037fc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d123      	bne.n	80037fc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fd57 	bl	800326c <LL_ADC_REG_IsConversionOngoing>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d110      	bne.n	80037e4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	210c      	movs	r1, #12
 80037ce:	438a      	bics	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_ADC_PollForConversion+0x124>)
 80037d8:	4013      	ands	r3, r2
 80037da:	2201      	movs	r2, #1
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
 80037e2:	e00b      	b.n	80037fc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	2220      	movs	r2, #32
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	2201      	movs	r2, #1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7e1b      	ldrb	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	220c      	movs	r2, #12
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	fffffefe 	.word	0xfffffefe

0800381c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383e:	2317      	movs	r3, #23
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2254      	movs	r2, #84	; 0x54
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x24>
 8003854:	2302      	movs	r3, #2
 8003856:	e1c0      	b.n	8003bda <HAL_ADC_ConfigChannel+0x3a6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2254      	movs	r2, #84	; 0x54
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fd01 	bl	800326c <LL_ADC_REG_IsConversionOngoing>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d000      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x3c>
 800386e:	e1a3      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d100      	bne.n	800387a <HAL_ADC_ConfigChannel+0x46>
 8003878:	e143      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	429a      	cmp	r2, r3
 8003884:	d004      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800388a:	4ac1      	ldr	r2, [pc, #772]	; (8003b90 <HAL_ADC_ConfigChannel+0x35c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0019      	movs	r1, r3
 800389a:	0010      	movs	r0, r2
 800389c:	f7ff fc14 	bl	80030c8 <LL_ADC_REG_SetSequencerChAdd>
 80038a0:	e0c9      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	211f      	movs	r1, #31
 80038ac:	400b      	ands	r3, r1
 80038ae:	210f      	movs	r1, #15
 80038b0:	4099      	lsls	r1, r3
 80038b2:	000b      	movs	r3, r1
 80038b4:	43db      	mvns	r3, r3
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	035b      	lsls	r3, r3, #13
 80038c0:	0b5b      	lsrs	r3, r3, #13
 80038c2:	d105      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x9c>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	221f      	movs	r2, #31
 80038cc:	4013      	ands	r3, r2
 80038ce:	e098      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d000      	beq.n	80038dc <HAL_ADC_ConfigChannel+0xa8>
 80038da:	e091      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x1cc>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d000      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0xb4>
 80038e6:	e089      	b.n	80039fc <HAL_ADC_ConfigChannel+0x1c8>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d000      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0xc0>
 80038f2:	e081      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x1c4>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2208      	movs	r2, #8
 80038fa:	4013      	ands	r3, r2
 80038fc:	d000      	beq.n	8003900 <HAL_ADC_ConfigChannel+0xcc>
 80038fe:	e079      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x1c0>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2210      	movs	r2, #16
 8003906:	4013      	ands	r3, r2
 8003908:	d000      	beq.n	800390c <HAL_ADC_ConfigChannel+0xd8>
 800390a:	e071      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x1bc>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2220      	movs	r2, #32
 8003912:	4013      	ands	r3, r2
 8003914:	d000      	beq.n	8003918 <HAL_ADC_ConfigChannel+0xe4>
 8003916:	e069      	b.n	80039ec <HAL_ADC_ConfigChannel+0x1b8>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	4013      	ands	r3, r2
 8003920:	d000      	beq.n	8003924 <HAL_ADC_ConfigChannel+0xf0>
 8003922:	e061      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x1b4>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	4013      	ands	r3, r2
 800392c:	d000      	beq.n	8003930 <HAL_ADC_ConfigChannel+0xfc>
 800392e:	e059      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x1b0>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4013      	ands	r3, r2
 800393a:	d151      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x1ac>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4013      	ands	r3, r2
 8003946:	d149      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x1a8>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4013      	ands	r3, r2
 8003952:	d141      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x1a4>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d139      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x1a0>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	4013      	ands	r3, r2
 800396a:	d131      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x19c>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	4013      	ands	r3, r2
 8003976:	d129      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x198>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	01db      	lsls	r3, r3, #7
 8003980:	4013      	ands	r3, r2
 8003982:	d121      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x194>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	4013      	ands	r3, r2
 800398e:	d119      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x190>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	4013      	ands	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x18c>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	4013      	ands	r3, r2
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x188>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	02db      	lsls	r3, r3, #11
 80039b0:	4013      	ands	r3, r2
 80039b2:	d001      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x184>
 80039b4:	2312      	movs	r3, #18
 80039b6:	e024      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039b8:	2300      	movs	r3, #0
 80039ba:	e022      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039bc:	2311      	movs	r3, #17
 80039be:	e020      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039c0:	2310      	movs	r3, #16
 80039c2:	e01e      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039c4:	230f      	movs	r3, #15
 80039c6:	e01c      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039c8:	230e      	movs	r3, #14
 80039ca:	e01a      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039cc:	230d      	movs	r3, #13
 80039ce:	e018      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039d0:	230c      	movs	r3, #12
 80039d2:	e016      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039d4:	230b      	movs	r3, #11
 80039d6:	e014      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039d8:	230a      	movs	r3, #10
 80039da:	e012      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039dc:	2309      	movs	r3, #9
 80039de:	e010      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039e0:	2308      	movs	r3, #8
 80039e2:	e00e      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039e4:	2307      	movs	r3, #7
 80039e6:	e00c      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039e8:	2306      	movs	r3, #6
 80039ea:	e00a      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039ec:	2305      	movs	r3, #5
 80039ee:	e008      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e006      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039f4:	2303      	movs	r3, #3
 80039f6:	e004      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e002      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1ce>
 8003a00:	2300      	movs	r3, #0
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	6852      	ldr	r2, [r2, #4]
 8003a06:	201f      	movs	r0, #31
 8003a08:	4002      	ands	r2, r0
 8003a0a:	4093      	lsls	r3, r2
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d808      	bhi.n	8003a36 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	001a      	movs	r2, r3
 8003a32:	f7ff fb29 	bl	8003088 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	001a      	movs	r2, r3
 8003a44:	f7ff fb64 	bl	8003110 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db00      	blt.n	8003a52 <HAL_ADC_ConfigChannel+0x21e>
 8003a50:	e0bc      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a52:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff fac5 	bl	8002fe4 <LL_ADC_GetCommonPathInternalCh>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4d      	ldr	r2, [pc, #308]	; (8003b98 <HAL_ADC_ConfigChannel+0x364>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d122      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a70:	d11d      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	0412      	lsls	r2, r2, #16
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	4a46      	ldr	r2, [pc, #280]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	0010      	movs	r0, r2
 8003a80:	f7ff fa9c 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a84:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <HAL_ADC_ConfigChannel+0x368>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4945      	ldr	r1, [pc, #276]	; (8003ba0 <HAL_ADC_ConfigChannel+0x36c>)
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7fc fb42 	bl	8000114 <__udivsi3>
 8003a90:	0003      	movs	r3, r0
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	0013      	movs	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a9e:	e002      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f9      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003aac:	e08e      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <HAL_ADC_ConfigChannel+0x370>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	045b      	lsls	r3, r3, #17
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d109      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0452      	lsls	r2, r2, #17
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	4a32      	ldr	r2, [pc, #200]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003acc:	0019      	movs	r1, r3
 8003ace:	0010      	movs	r0, r2
 8003ad0:	f7ff fa74 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
 8003ad4:	e07a      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a33      	ldr	r2, [pc, #204]	; (8003ba8 <HAL_ADC_ConfigChannel+0x374>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d000      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x2ae>
 8003ae0:	e074      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	03db      	lsls	r3, r3, #15
 8003ae8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003aea:	d000      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x2ba>
 8003aec:	e06e      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	03d2      	lsls	r2, r2, #15
 8003af4:	4313      	orrs	r3, r2
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003af8:	0019      	movs	r1, r3
 8003afa:	0010      	movs	r0, r2
 8003afc:	f7ff fa5e 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
 8003b00:	e064      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_ADC_ConfigChannel+0x35c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d107      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0019      	movs	r1, r3
 8003b22:	0010      	movs	r0, r2
 8003b24:	f7ff fae1 	bl	80030ea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da4d      	bge.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff fa56 	bl	8002fe4 <LL_ADC_GetCommonPathInternalCh>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <HAL_ADC_ConfigChannel+0x364>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_ADC_ConfigChannel+0x378>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003b4e:	0019      	movs	r1, r3
 8003b50:	0010      	movs	r0, r2
 8003b52:	f7ff fa33 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
 8003b56:	e039      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <HAL_ADC_ConfigChannel+0x370>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d108      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_ADC_ConfigChannel+0x37c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	0010      	movs	r0, r2
 8003b6e:	f7ff fa25 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
 8003b72:	e02b      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <HAL_ADC_ConfigChannel+0x374>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d126      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <HAL_ADC_ConfigChannel+0x380>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	4a03      	ldr	r2, [pc, #12]	; (8003b94 <HAL_ADC_ConfigChannel+0x360>)
 8003b86:	0019      	movs	r1, r3
 8003b88:	0010      	movs	r0, r2
 8003b8a:	f7ff fa17 	bl	8002fbc <LL_ADC_SetCommonPathInternalCh>
 8003b8e:	e01d      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x398>
 8003b90:	80000004 	.word	0x80000004
 8003b94:	40012708 	.word	0x40012708
 8003b98:	b0001000 	.word	0xb0001000
 8003b9c:	20000018 	.word	0x20000018
 8003ba0:	00030d40 	.word	0x00030d40
 8003ba4:	b8004000 	.word	0xb8004000
 8003ba8:	b4002000 	.word	0xb4002000
 8003bac:	ff7fffff 	.word	0xff7fffff
 8003bb0:	feffffff 	.word	0xfeffffff
 8003bb4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2254      	movs	r2, #84	; 0x54
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003bd4:	2317      	movs	r3, #23
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b006      	add	sp, #24
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)

08003be4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff fb3b 	bl	800326c <LL_ADC_REG_IsConversionOngoing>
 8003bf6:	1e03      	subs	r3, r0, #0
 8003bf8:	d031      	beq.n	8003c5e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff faff 	bl	8003202 <LL_ADC_IsDisableOngoing>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d104      	bne.n	8003c12 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7ff fb1b 	bl	8003248 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c12:	f7ff f9a5 	bl	8002f60 <HAL_GetTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c1a:	e01a      	b.n	8003c52 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c1c:	f7ff f9a0 	bl	8002f60 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d913      	bls.n	8003c52 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2204      	movs	r2, #4
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	2201      	movs	r2, #1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e006      	b.n	8003c60 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d1de      	bne.n	8003c1c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b004      	add	sp, #16
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff fab1 	bl	80031e0 <LL_ADC_IsEnabled>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d000      	beq.n	8003c84 <ADC_Enable+0x1c>
 8003c82:	e069      	b.n	8003d58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a36      	ldr	r2, [pc, #216]	; (8003d64 <ADC_Enable+0xfc>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d00d      	beq.n	8003cac <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	2210      	movs	r2, #16
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e056      	b.n	8003d5a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff fa71 	bl	8003198 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <ADC_Enable+0x100>)
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7ff f993 	bl	8002fe4 <LL_ADC_GetCommonPathInternalCh>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d00f      	beq.n	8003ce8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <ADC_Enable+0x104>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4928      	ldr	r1, [pc, #160]	; (8003d70 <ADC_Enable+0x108>)
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fc fa20 	bl	8000114 <__udivsi3>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003cd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cda:	e002      	b.n	8003ce2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f9      	bne.n	8003cdc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7e5b      	ldrb	r3, [r3, #25]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d033      	beq.n	8003d58 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cf0:	f7ff f936 	bl	8002f60 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cf8:	e027      	b.n	8003d4a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff fa6e 	bl	80031e0 <LL_ADC_IsEnabled>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d104      	bne.n	8003d12 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7ff fa43 	bl	8003198 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d12:	f7ff f925 	bl	8002f60 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d914      	bls.n	8003d4a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2201      	movs	r2, #1
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00d      	beq.n	8003d4a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	2210      	movs	r2, #16
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	2201      	movs	r2, #1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e007      	b.n	8003d5a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2201      	movs	r2, #1
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d1d0      	bne.n	8003cfa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	80000017 	.word	0x80000017
 8003d68:	40012708 	.word	0x40012708
 8003d6c:	20000018 	.word	0x20000018
 8003d70:	00030d40 	.word	0x00030d40

08003d74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fa3e 	bl	8003202 <LL_ADC_IsDisableOngoing>
 8003d86:	0003      	movs	r3, r0
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff fa26 	bl	80031e0 <LL_ADC_IsEnabled>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d046      	beq.n	8003e26 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d143      	bne.n	8003e26 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2205      	movs	r2, #5
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d10d      	bne.n	8003dc8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff fa03 	bl	80031bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dbe:	f7ff f8cf 	bl	8002f60 <HAL_GetTick>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dc6:	e028      	b.n	8003e1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	2210      	movs	r2, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e021      	b.n	8003e28 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003de4:	f7ff f8bc 	bl	8002f60 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d913      	bls.n	8003e1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d00d      	beq.n	8003e1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	2210      	movs	r2, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	2201      	movs	r2, #1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e006      	b.n	8003e28 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1de      	bne.n	8003de4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	0002      	movs	r2, r0
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b7f      	cmp	r3, #127	; 0x7f
 8003e42:	d809      	bhi.n	8003e58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	001a      	movs	r2, r3
 8003e4a:	231f      	movs	r3, #31
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <__NVIC_EnableIRQ+0x30>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	4091      	lsls	r1, r2
 8003e54:	000a      	movs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	e000e100 	.word	0xe000e100

08003e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b7f      	cmp	r3, #127	; 0x7f
 8003e78:	d828      	bhi.n	8003ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e7a:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <__NVIC_SetPriority+0xd4>)
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	33c0      	adds	r3, #192	; 0xc0
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	589b      	ldr	r3, [r3, r2]
 8003e8a:	1dfa      	adds	r2, r7, #7
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	0011      	movs	r1, r2
 8003e90:	2203      	movs	r2, #3
 8003e92:	400a      	ands	r2, r1
 8003e94:	00d2      	lsls	r2, r2, #3
 8003e96:	21ff      	movs	r1, #255	; 0xff
 8003e98:	4091      	lsls	r1, r2
 8003e9a:	000a      	movs	r2, r1
 8003e9c:	43d2      	mvns	r2, r2
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	1dfb      	adds	r3, r7, #7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	4003      	ands	r3, r0
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eb8:	481f      	ldr	r0, [pc, #124]	; (8003f38 <__NVIC_SetPriority+0xd4>)
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	33c0      	adds	r3, #192	; 0xc0
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003eca:	e031      	b.n	8003f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <__NVIC_SetPriority+0xd8>)
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	230f      	movs	r3, #15
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	3b08      	subs	r3, #8
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	3306      	adds	r3, #6
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	18d3      	adds	r3, r2, r3
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1dfa      	adds	r2, r7, #7
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	0011      	movs	r1, r2
 8003eec:	2203      	movs	r2, #3
 8003eee:	400a      	ands	r2, r1
 8003ef0:	00d2      	lsls	r2, r2, #3
 8003ef2:	21ff      	movs	r1, #255	; 0xff
 8003ef4:	4091      	lsls	r1, r2
 8003ef6:	000a      	movs	r2, r1
 8003ef8:	43d2      	mvns	r2, r2
 8003efa:	401a      	ands	r2, r3
 8003efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	401a      	ands	r2, r3
 8003f06:	1dfb      	adds	r3, r7, #7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	4003      	ands	r3, r0
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f14:	4809      	ldr	r0, [pc, #36]	; (8003f3c <__NVIC_SetPriority+0xd8>)
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	001c      	movs	r4, r3
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	4023      	ands	r3, r4
 8003f20:	3b08      	subs	r3, #8
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	430a      	orrs	r2, r1
 8003f26:	3306      	adds	r3, #6
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	18c3      	adds	r3, r0, r3
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	601a      	str	r2, [r3, #0]
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b003      	add	sp, #12
 8003f36:	bd90      	pop	{r4, r7, pc}
 8003f38:	e000e100 	.word	0xe000e100
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	045b      	lsls	r3, r3, #17
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d301      	bcc.n	8003f58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f54:	2301      	movs	r3, #1
 8003f56:	e010      	b.n	8003f7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <SysTick_Config+0x44>)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f60:	2301      	movs	r3, #1
 8003f62:	425b      	negs	r3, r3
 8003f64:	2103      	movs	r1, #3
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff ff7c 	bl	8003e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <SysTick_Config+0x44>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SysTick_Config+0x44>)
 8003f74:	2207      	movs	r2, #7
 8003f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	e000e010 	.word	0xe000e010

08003f88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	210f      	movs	r1, #15
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	1c02      	adds	r2, r0, #0
 8003f98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff ff5d 	bl	8003e64 <__NVIC_SetPriority>
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	0002      	movs	r2, r0
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fbe:	1dfb      	adds	r3, r7, #7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff ff33 	bl	8003e30 <__NVIC_EnableIRQ>
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff ffaf 	bl	8003f40 <SysTick_Config>
 8003fe2:	0003      	movs	r3, r0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e056      	b.n	80040ac <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7f5b      	ldrb	r3, [r3, #29]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0018      	movs	r0, r3
 8004012:	f7fe fdc7 	bl	8002ba4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	791b      	ldrb	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10c      	bne.n	800403e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <HAL_CRC_Init+0xc8>)
 800402a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2118      	movs	r1, #24
 8004038:	438a      	bics	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e00b      	b.n	8004056 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6899      	ldr	r1, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f000 f835 	bl	80040b8 <HAL_CRCEx_Polynomial_Set>
 800404e:	1e03      	subs	r3, r0, #0
 8004050:	d001      	beq.n	8004056 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02a      	b.n	80040ac <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	795b      	ldrb	r3, [r3, #5]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	4252      	negs	r2, r2
 8004066:	611a      	str	r2, [r3, #16]
 8004068:	e004      	b.n	8004074 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6912      	ldr	r2, [r2, #16]
 8004072:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2260      	movs	r2, #96	; 0x60
 800407c:	4393      	bics	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	4393      	bics	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	04c11db7 	.word	0x04c11db7

080040b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2317      	movs	r3, #23
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80040cc:	231f      	movs	r3, #31
 80040ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	613a      	str	r2, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_CRCEx_Polynomial_Set+0x36>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	221f      	movs	r2, #31
 80040e0:	4013      	ands	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	40da      	lsrs	r2, r3
 80040e6:	0013      	movs	r3, r2
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d0f1      	beq.n	80040d2 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	d00f      	beq.n	8004114 <HAL_CRCEx_Polynomial_Set+0x5c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b18      	cmp	r3, #24
 80040f8:	d824      	bhi.n	8004144 <HAL_CRCEx_Polynomial_Set+0x8c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d011      	beq.n	8004124 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d81e      	bhi.n	8004144 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_CRCEx_Polynomial_Set+0x96>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d010      	beq.n	8004134 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004112:	e017      	b.n	8004144 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d91b      	bls.n	8004152 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 800411a:	2317      	movs	r3, #23
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004122:	e016      	b.n	8004152 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b07      	cmp	r3, #7
 8004128:	d915      	bls.n	8004156 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800412a:	2317      	movs	r3, #23
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004132:	e010      	b.n	8004156 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d90f      	bls.n	800415a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800413a:	2317      	movs	r3, #23
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004142:	e00a      	b.n	800415a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004144:	2317      	movs	r3, #23
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
      break;
 800414c:	e006      	b.n	800415c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	e004      	b.n	800415c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	e002      	b.n	800415c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	e000      	b.n	800415c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800415a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800415c:	2317      	movs	r3, #23
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10e      	bne.n	8004184 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2218      	movs	r2, #24
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004184:	2317      	movs	r3, #23
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	781b      	ldrb	r3, [r3, #0]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b006      	add	sp, #24
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e050      	b.n	8004248 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2225      	movs	r2, #37	; 0x25
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d008      	beq.n	80041c4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2204      	movs	r2, #4
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e041      	b.n	8004248 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	210e      	movs	r1, #14
 80041d0:	438a      	bics	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	491c      	ldr	r1, [pc, #112]	; (8004250 <HAL_DMA_Abort+0xbc>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <HAL_DMA_Abort+0xc0>)
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	221c      	movs	r2, #28
 80041fe:	4013      	ands	r3, r2
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_DMA_Abort+0xc0>)
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004212:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00c      	beq.n	8004236 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	490a      	ldr	r1, [pc, #40]	; (8004250 <HAL_DMA_Abort+0xbc>)
 8004228:	400a      	ands	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004234:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2225      	movs	r2, #37	; 0x25
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2224      	movs	r2, #36	; 0x24
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fffffeff 	.word	0xfffffeff
 8004254:	40020000 	.word	0x40020000

08004258 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	210f      	movs	r1, #15
 8004262:	187b      	adds	r3, r7, r1
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2225      	movs	r2, #37	; 0x25
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d006      	beq.n	8004282 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e049      	b.n	8004316 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	210e      	movs	r1, #14
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2101      	movs	r1, #1
 800429e:	438a      	bics	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	491d      	ldr	r1, [pc, #116]	; (8004324 <HAL_DMA_Abort_IT+0xcc>)
 80042ae:	400a      	ands	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_DMA_Abort_IT+0xd0>)
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	221c      	movs	r2, #28
 80042bc:	4013      	ands	r3, r2
 80042be:	2201      	movs	r2, #1
 80042c0:	409a      	lsls	r2, r3
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_DMA_Abort_IT+0xd0>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	490f      	ldr	r1, [pc, #60]	; (8004324 <HAL_DMA_Abort_IT+0xcc>)
 80042e6:	400a      	ands	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80042f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2225      	movs	r2, #37	; 0x25
 80042f8:	2101      	movs	r1, #1
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	0010      	movs	r0, r2
 8004314:	4798      	blx	r3
    }
  }
  return status;
 8004316:	230f      	movs	r3, #15
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	781b      	ldrb	r3, [r3, #0]
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b004      	add	sp, #16
 8004322:	bd80      	pop	{r7, pc}
 8004324:	fffffeff 	.word	0xfffffeff
 8004328:	40020000 	.word	0x40020000

0800432c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433a:	e147      	b.n	80045cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4091      	lsls	r1, r2
 8004346:	000a      	movs	r2, r1
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d100      	bne.n	8004354 <HAL_GPIO_Init+0x28>
 8004352:	e138      	b.n	80045c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2203      	movs	r2, #3
 800435a:	4013      	ands	r3, r2
 800435c:	2b01      	cmp	r3, #1
 800435e:	d005      	beq.n	800436c <HAL_GPIO_Init+0x40>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	4013      	ands	r3, r2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d130      	bne.n	80043ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	409a      	lsls	r2, r3
 800437a:	0013      	movs	r3, r2
 800437c:	43da      	mvns	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	0013      	movs	r3, r2
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a2:	2201      	movs	r2, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	409a      	lsls	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	43da      	mvns	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	2201      	movs	r2, #1
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2203      	movs	r2, #3
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d017      	beq.n	800440a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	409a      	lsls	r2, r3
 80043e8:	0013      	movs	r3, r2
 80043ea:	43da      	mvns	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	409a      	lsls	r2, r3
 80043fc:	0013      	movs	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2203      	movs	r2, #3
 8004410:	4013      	ands	r3, r2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d123      	bne.n	800445e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	0092      	lsls	r2, r2, #2
 8004420:	58d3      	ldr	r3, [r2, r3]
 8004422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	409a      	lsls	r2, r3
 8004430:	0013      	movs	r3, r2
 8004432:	43da      	mvns	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2107      	movs	r1, #7
 8004442:	400b      	ands	r3, r1
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	08da      	lsrs	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3208      	adds	r2, #8
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	6939      	ldr	r1, [r7, #16]
 800445c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	409a      	lsls	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	43da      	mvns	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2203      	movs	r2, #3
 800447c:	401a      	ands	r2, r3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	0013      	movs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	23c0      	movs	r3, #192	; 0xc0
 8004498:	029b      	lsls	r3, r3, #10
 800449a:	4013      	ands	r3, r2
 800449c:	d100      	bne.n	80044a0 <HAL_GPIO_Init+0x174>
 800449e:	e092      	b.n	80045c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80044a0:	4a50      	ldr	r2, [pc, #320]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3318      	adds	r3, #24
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	589b      	ldr	r3, [r3, r2]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2203      	movs	r2, #3
 80044b2:	4013      	ands	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	220f      	movs	r2, #15
 80044b8:	409a      	lsls	r2, r3
 80044ba:	0013      	movs	r3, r2
 80044bc:	43da      	mvns	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	23a0      	movs	r3, #160	; 0xa0
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d013      	beq.n	80044f6 <HAL_GPIO_Init+0x1ca>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a45      	ldr	r2, [pc, #276]	; (80045e8 <HAL_GPIO_Init+0x2bc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00d      	beq.n	80044f2 <HAL_GPIO_Init+0x1c6>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a44      	ldr	r2, [pc, #272]	; (80045ec <HAL_GPIO_Init+0x2c0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d007      	beq.n	80044ee <HAL_GPIO_Init+0x1c2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a43      	ldr	r2, [pc, #268]	; (80045f0 <HAL_GPIO_Init+0x2c4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_GPIO_Init+0x1be>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x1cc>
 80044ea:	2305      	movs	r3, #5
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x1cc>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x1cc>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x1cc>
 80044f6:	2300      	movs	r3, #0
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	2103      	movs	r1, #3
 80044fc:	400a      	ands	r2, r1
 80044fe:	00d2      	lsls	r2, r2, #3
 8004500:	4093      	lsls	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004508:	4936      	ldr	r1, [pc, #216]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3318      	adds	r3, #24
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	43da      	mvns	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	4013      	ands	r3, r2
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43da      	mvns	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	039b      	lsls	r3, r3, #14
 8004558:	4013      	ands	r3, r2
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004564:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 800456c:	2384      	movs	r3, #132	; 0x84
 800456e:	58d3      	ldr	r3, [r2, r3]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43da      	mvns	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004590:	4914      	ldr	r1, [pc, #80]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 8004592:	2284      	movs	r2, #132	; 0x84
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004598:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	58d3      	ldr	r3, [r2, r3]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	4013      	ands	r3, r2
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045be:	4909      	ldr	r1, [pc, #36]	; (80045e4 <HAL_GPIO_Init+0x2b8>)
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	3301      	adds	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	40da      	lsrs	r2, r3
 80045d4:	1e13      	subs	r3, r2, #0
 80045d6:	d000      	beq.n	80045da <HAL_GPIO_Init+0x2ae>
 80045d8:	e6b0      	b.n	800433c <HAL_GPIO_Init+0x10>
  }
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b006      	add	sp, #24
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021800 	.word	0x40021800
 80045e8:	50000400 	.word	0x50000400
 80045ec:	50000800 	.word	0x50000800
 80045f0:	50000c00 	.word	0x50000c00

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	0008      	movs	r0, r1
 80045fe:	0011      	movs	r1, r2
 8004600:	1cbb      	adds	r3, r7, #2
 8004602:	1c02      	adds	r2, r0, #0
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	1c7b      	adds	r3, r7, #1
 8004608:	1c0a      	adds	r2, r1, #0
 800460a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800460c:	1c7b      	adds	r3, r7, #1
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004614:	1cbb      	adds	r3, r7, #2
 8004616:	881a      	ldrh	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800461c:	e003      	b.n	8004626 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800461e:	1cbb      	adds	r3, r7, #2
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800463e:	4013      	ands	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	430a      	orrs	r2, r1
 8004648:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d11f      	bne.n	8004694 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	0013      	movs	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	189b      	adds	r3, r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4912      	ldr	r1, [pc, #72]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004662:	0018      	movs	r0, r3
 8004664:	f7fb fd56 	bl	8000114 <__udivsi3>
 8004668:	0003      	movs	r3, r0
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800466e:	e008      	b.n	8004682 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b01      	subs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e001      	b.n	8004682 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e009      	b.n	8004696 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	401a      	ands	r2, r3
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	429a      	cmp	r2, r3
 8004692:	d0ed      	beq.n	8004670 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b004      	add	sp, #16
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40007000 	.word	0x40007000
 80046a4:	fffff9ff 	.word	0xfffff9ff
 80046a8:	20000018 	.word	0x20000018
 80046ac:	000f4240 	.word	0x000f4240

080046b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	23e0      	movs	r3, #224	; 0xe0
 80046ba:	01db      	lsls	r3, r3, #7
 80046bc:	4013      	ands	r3, r2
}
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000

080046c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e2f3      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	4013      	ands	r3, r2
 80046e2:	d100      	bne.n	80046e6 <HAL_RCC_OscConfig+0x1e>
 80046e4:	e07c      	b.n	80047e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e6:	4bc3      	ldr	r3, [pc, #780]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2238      	movs	r2, #56	; 0x38
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046f0:	4bc0      	ldr	r3, [pc, #768]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2203      	movs	r2, #3
 80046f6:	4013      	ands	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d102      	bne.n	8004706 <HAL_RCC_OscConfig+0x3e>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d002      	beq.n	800470c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10b      	bne.n	8004724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	4bb9      	ldr	r3, [pc, #740]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	4013      	ands	r3, r2
 8004716:	d062      	beq.n	80047de <HAL_RCC_OscConfig+0x116>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d15e      	bne.n	80047de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e2ce      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	429a      	cmp	r2, r3
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x78>
 8004730:	4bb0      	ldr	r3, [pc, #704]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4baf      	ldr	r3, [pc, #700]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004736:	2180      	movs	r1, #128	; 0x80
 8004738:	0249      	lsls	r1, r1, #9
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e020      	b.n	8004782 <HAL_RCC_OscConfig+0xba>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	23a0      	movs	r3, #160	; 0xa0
 8004746:	02db      	lsls	r3, r3, #11
 8004748:	429a      	cmp	r2, r3
 800474a:	d10e      	bne.n	800476a <HAL_RCC_OscConfig+0xa2>
 800474c:	4ba9      	ldr	r3, [pc, #676]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4ba8      	ldr	r3, [pc, #672]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	02c9      	lsls	r1, r1, #11
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	4ba6      	ldr	r3, [pc, #664]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4ba5      	ldr	r3, [pc, #660]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	0249      	lsls	r1, r1, #9
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e00b      	b.n	8004782 <HAL_RCC_OscConfig+0xba>
 800476a:	4ba2      	ldr	r3, [pc, #648]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4ba1      	ldr	r3, [pc, #644]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004770:	49a1      	ldr	r1, [pc, #644]	; (80049f8 <HAL_RCC_OscConfig+0x330>)
 8004772:	400a      	ands	r2, r1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	4b9f      	ldr	r3, [pc, #636]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b9e      	ldr	r3, [pc, #632]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800477c:	499f      	ldr	r1, [pc, #636]	; (80049fc <HAL_RCC_OscConfig+0x334>)
 800477e:	400a      	ands	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d014      	beq.n	80047b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fe fbe9 	bl	8002f60 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fbe4 	bl	8002f60 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e28d      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a6:	4b93      	ldr	r3, [pc, #588]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	029b      	lsls	r3, r3, #10
 80047ae:	4013      	ands	r3, r2
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xcc>
 80047b2:	e015      	b.n	80047e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe fbd4 	bl	8002f60 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047be:	f7fe fbcf 	bl	8002f60 <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e278      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	4013      	ands	r3, r2
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0xf6>
 80047dc:	e000      	b.n	80047e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
 80047e8:	d100      	bne.n	80047ec <HAL_RCC_OscConfig+0x124>
 80047ea:	e099      	b.n	8004920 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ec:	4b81      	ldr	r3, [pc, #516]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2238      	movs	r2, #56	; 0x38
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f6:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2203      	movs	r2, #3
 80047fc:	4013      	ands	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b10      	cmp	r3, #16
 8004804:	d102      	bne.n	800480c <HAL_RCC_OscConfig+0x144>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d002      	beq.n	8004812 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d135      	bne.n	800487e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004812:	4b78      	ldr	r3, [pc, #480]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4013      	ands	r3, r2
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x162>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e24b      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_RCC_OscConfig+0x338>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	4b6e      	ldr	r3, [pc, #440]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d112      	bne.n	800486c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004846:	4b6b      	ldr	r3, [pc, #428]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6e      	ldr	r2, [pc, #440]	; (8004a04 <HAL_RCC_OscConfig+0x33c>)
 800484c:	4013      	ands	r3, r2
 800484e:	0019      	movs	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	4b67      	ldr	r3, [pc, #412]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800485a:	4b66      	ldr	r3, [pc, #408]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	0adb      	lsrs	r3, r3, #11
 8004860:	2207      	movs	r2, #7
 8004862:	4013      	ands	r3, r2
 8004864:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <HAL_RCC_OscConfig+0x340>)
 8004866:	40da      	lsrs	r2, r3
 8004868:	4b68      	ldr	r3, [pc, #416]	; (8004a0c <HAL_RCC_OscConfig+0x344>)
 800486a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <HAL_RCC_OscConfig+0x348>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0018      	movs	r0, r3
 8004872:	f7fe fb19 	bl	8002ea8 <HAL_InitTick>
 8004876:	1e03      	subs	r3, r0, #0
 8004878:	d051      	beq.n	800491e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e221      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d030      	beq.n	80048e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5e      	ldr	r2, [pc, #376]	; (8004a04 <HAL_RCC_OscConfig+0x33c>)
 800488c:	4013      	ands	r3, r2
 800488e:	0019      	movs	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b55      	ldr	r3, [pc, #340]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	0049      	lsls	r1, r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fb5a 	bl	8002f60 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fe fb55 	bl	8002f60 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1fe      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c4:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4013      	ands	r3, r2
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	4b48      	ldr	r3, [pc, #288]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a4a      	ldr	r2, [pc, #296]	; (8004a00 <HAL_RCC_OscConfig+0x338>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	0019      	movs	r1, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e01b      	b.n	8004920 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80048e8:	4b42      	ldr	r3, [pc, #264]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80048ee:	4949      	ldr	r1, [pc, #292]	; (8004a14 <HAL_RCC_OscConfig+0x34c>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fe fb34 	bl	8002f60 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fe fb2f 	bl	8002f60 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1d8      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004910:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4013      	ands	r3, r2
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x236>
 800491c:	e000      	b.n	8004920 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800491e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	4013      	ands	r3, r2
 8004928:	d047      	beq.n	80049ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800492a:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2238      	movs	r2, #56	; 0x38
 8004930:	4013      	ands	r3, r2
 8004932:	2b18      	cmp	r3, #24
 8004934:	d10a      	bne.n	800494c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004936:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d03c      	beq.n	80049ba <HAL_RCC_OscConfig+0x2f2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d138      	bne.n	80049ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e1ba      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d019      	beq.n	8004988 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004954:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 8004956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800495a:	2101      	movs	r1, #1
 800495c:	430a      	orrs	r2, r1
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe fafe 	bl	8002f60 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496a:	f7fe faf9 	bl	8002f60 <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e1a2      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800497e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004980:	2202      	movs	r2, #2
 8004982:	4013      	ands	r3, r2
 8004984:	d0f1      	beq.n	800496a <HAL_RCC_OscConfig+0x2a2>
 8004986:	e018      	b.n	80049ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004988:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800498a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 800498e:	2101      	movs	r1, #1
 8004990:	438a      	bics	r2, r1
 8004992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fae4 	bl	8002f60 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800499e:	f7fe fadf 	bl	8002f60 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e188      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	2202      	movs	r2, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	d1f1      	bne.n	800499e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2204      	movs	r2, #4
 80049c0:	4013      	ands	r3, r2
 80049c2:	d100      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2fe>
 80049c4:	e0c6      	b.n	8004b54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	231f      	movs	r3, #31
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2238      	movs	r2, #56	; 0x38
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d11e      	bne.n	8004a18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_OscConfig+0x32c>)
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	2202      	movs	r2, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	d100      	bne.n	80049e6 <HAL_RCC_OscConfig+0x31e>
 80049e4:	e0b6      	b.n	8004b54 <HAL_RCC_OscConfig+0x48c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d000      	beq.n	80049f0 <HAL_RCC_OscConfig+0x328>
 80049ee:	e0b1      	b.n	8004b54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e166      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
 80049f4:	40021000 	.word	0x40021000
 80049f8:	fffeffff 	.word	0xfffeffff
 80049fc:	fffbffff 	.word	0xfffbffff
 8004a00:	ffff80ff 	.word	0xffff80ff
 8004a04:	ffffc7ff 	.word	0xffffc7ff
 8004a08:	00f42400 	.word	0x00f42400
 8004a0c:	20000018 	.word	0x20000018
 8004a10:	2000001c 	.word	0x2000001c
 8004a14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a18:	4bac      	ldr	r3, [pc, #688]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	055b      	lsls	r3, r3, #21
 8004a20:	4013      	ands	r3, r2
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_OscConfig+0x360>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x362>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d011      	beq.n	8004a52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	4ba7      	ldr	r3, [pc, #668]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a32:	4ba6      	ldr	r3, [pc, #664]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	0549      	lsls	r1, r1, #21
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a3c:	4ba3      	ldr	r3, [pc, #652]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	055b      	lsls	r3, r3, #21
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004a4a:	231f      	movs	r3, #31
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a52:	4b9f      	ldr	r3, [pc, #636]	; (8004cd0 <HAL_RCC_OscConfig+0x608>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d11a      	bne.n	8004a94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5e:	4b9c      	ldr	r3, [pc, #624]	; (8004cd0 <HAL_RCC_OscConfig+0x608>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b9b      	ldr	r3, [pc, #620]	; (8004cd0 <HAL_RCC_OscConfig+0x608>)
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	0049      	lsls	r1, r1, #1
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fa78 	bl	8002f60 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fe fa73 	bl	8002f60 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e11c      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a88:	4b91      	ldr	r3, [pc, #580]	; (8004cd0 <HAL_RCC_OscConfig+0x608>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4013      	ands	r3, r2
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCC_OscConfig+0x3e2>
 8004a9c:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aa0:	4b8a      	ldr	r3, [pc, #552]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x41c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0x404>
 8004ab2:	4b86      	ldr	r3, [pc, #536]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ab6:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ab8:	2104      	movs	r1, #4
 8004aba:	430a      	orrs	r2, r1
 8004abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004abe:	4b83      	ldr	r3, [pc, #524]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ac0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ac2:	4b82      	ldr	r3, [pc, #520]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x41c>
 8004acc:	4b7f      	ldr	r3, [pc, #508]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ad0:	4b7e      	ldr	r3, [pc, #504]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	438a      	bics	r2, r1
 8004ad6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ad8:	4b7c      	ldr	r3, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004adc:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004ade:	2104      	movs	r1, #4
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d014      	beq.n	8004b16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fe fa38 	bl	8002f60 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af4:	e009      	b.n	8004b0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fe fa33 	bl	8002f60 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	4a74      	ldr	r2, [pc, #464]	; (8004cd4 <HAL_RCC_OscConfig+0x60c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0db      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0a:	4b70      	ldr	r3, [pc, #448]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	2202      	movs	r2, #2
 8004b10:	4013      	ands	r3, r2
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x42e>
 8004b14:	e013      	b.n	8004b3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe fa23 	bl	8002f60 <HAL_GetTick>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b1e:	e009      	b.n	8004b34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b20:	f7fe fa1e 	bl	8002f60 <HAL_GetTick>
 8004b24:	0002      	movs	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	4a6a      	ldr	r2, [pc, #424]	; (8004cd4 <HAL_RCC_OscConfig+0x60c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0c6      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b34:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004b3e:	231f      	movs	r3, #31
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004b48:	4b60      	ldr	r3, [pc, #384]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4c:	4b5f      	ldr	r3, [pc, #380]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b4e:	4962      	ldr	r1, [pc, #392]	; (8004cd8 <HAL_RCC_OscConfig+0x610>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d100      	bne.n	8004b5e <HAL_RCC_OscConfig+0x496>
 8004b5c:	e0b0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2238      	movs	r2, #56	; 0x38
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d100      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4a4>
 8004b6a:	e078      	b.n	8004c5e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d153      	bne.n	8004c1c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b74:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b54      	ldr	r3, [pc, #336]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b7a:	4958      	ldr	r1, [pc, #352]	; (8004cdc <HAL_RCC_OscConfig+0x614>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe f9ee 	bl	8002f60 <HAL_GetTick>
 8004b84:	0003      	movs	r3, r0
 8004b86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8a:	f7fe f9e9 	bl	8002f60 <HAL_GetTick>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e092      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	049b      	lsls	r3, r3, #18
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d1f0      	bne.n	8004b8a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba8:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a4c      	ldr	r2, [pc, #304]	; (8004ce0 <HAL_RCC_OscConfig+0x618>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	0449      	lsls	r1, r1, #17
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	0549      	lsls	r1, r1, #21
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fe f9b5 	bl	8002f60 <HAL_GetTick>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe f9b0 	bl	8002f60 <HAL_GetTick>
 8004c00:	0002      	movs	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e059      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	049b      	lsls	r3, r3, #18
 8004c16:	4013      	ands	r3, r2
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x534>
 8004c1a:	e051      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c22:	492e      	ldr	r1, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x614>)
 8004c24:	400a      	ands	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fe f99a 	bl	8002f60 <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe f995 	bl	8002f60 <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03e      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	049b      	lsls	r3, r3, #18
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c56:	4923      	ldr	r1, [pc, #140]	; (8004ce4 <HAL_RCC_OscConfig+0x61c>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e030      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e02b      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_RCC_OscConfig+0x604>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2203      	movs	r2, #3
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d11e      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2270      	movs	r2, #112	; 0x70
 8004c82:	401a      	ands	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d117      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	23fe      	movs	r3, #254	; 0xfe
 8004c90:	01db      	lsls	r3, r3, #7
 8004c92:	401a      	ands	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d10e      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	23f8      	movs	r3, #248	; 0xf8
 8004ca2:	039b      	lsls	r3, r3, #14
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d106      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	0f5b      	lsrs	r3, r3, #29
 8004cb2:	075a      	lsls	r2, r3, #29
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b008      	add	sp, #32
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	00001388 	.word	0x00001388
 8004cd8:	efffffff 	.word	0xefffffff
 8004cdc:	feffffff 	.word	0xfeffffff
 8004ce0:	1fc1808c 	.word	0x1fc1808c
 8004ce4:	effefffc 	.word	0xeffefffc

08004ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0e9      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b76      	ldr	r3, [pc, #472]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2207      	movs	r2, #7
 8004d02:	4013      	ands	r3, r2
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d91e      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b73      	ldr	r3, [pc, #460]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2207      	movs	r2, #7
 8004d10:	4393      	bics	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d1c:	f7fe f920 	bl	8002f60 <HAL_GetTick>
 8004d20:	0003      	movs	r3, r0
 8004d22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d24:	e009      	b.n	8004d3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d26:	f7fe f91b 	bl	8002f60 <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	4a6a      	ldr	r2, [pc, #424]	; (8004edc <HAL_RCC_ClockConfig+0x1f4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e0ca      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d3a:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2207      	movs	r2, #7
 8004d40:	4013      	ands	r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d1ee      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d015      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2204      	movs	r2, #4
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d006      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d5c:	4b60      	ldr	r3, [pc, #384]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	4b5f      	ldr	r3, [pc, #380]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d62:	21e0      	movs	r1, #224	; 0xe0
 8004d64:	01c9      	lsls	r1, r1, #7
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a5d      	ldr	r2, [pc, #372]	; (8004ee4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	4b59      	ldr	r3, [pc, #356]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	d057      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d90:	4b53      	ldr	r3, [pc, #332]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d12b      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e097      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da8:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	049b      	lsls	r3, r3, #18
 8004db0:	4013      	ands	r3, r2
 8004db2:	d11f      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e08b      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc0:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d113      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e07f      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	2202      	movs	r2, #2
 8004dde:	4013      	ands	r3, r2
 8004de0:	d108      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e074      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de6:	4b3e      	ldr	r3, [pc, #248]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	2202      	movs	r2, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e06d      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df4:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2207      	movs	r2, #7
 8004dfa:	4393      	bics	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e08:	f7fe f8aa 	bl	8002f60 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e10:	e009      	b.n	8004e26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e12:	f7fe f8a5 	bl	8002f60 <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	4a2f      	ldr	r2, [pc, #188]	; (8004edc <HAL_RCC_ClockConfig+0x1f4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e054      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2238      	movs	r2, #56	; 0x38
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d1ec      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e38:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	4013      	ands	r3, r2
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d21e      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2207      	movs	r2, #7
 8004e4c:	4393      	bics	r3, r2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e58:	f7fe f882 	bl	8002f60 <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e60:	e009      	b.n	8004e76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e62:	f7fe f87d 	bl	8002f60 <HAL_GetTick>
 8004e66:	0002      	movs	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_RCC_ClockConfig+0x1f4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e02c      	b.n	8004ed0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e76:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2207      	movs	r2, #7
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d1ee      	bne.n	8004e62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_RCC_ClockConfig+0x200>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ea2:	f000 f829 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004ea6:	0001      	movs	r1, r0
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f8>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	220f      	movs	r2, #15
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <HAL_RCC_ClockConfig+0x204>)
 8004eb4:	0092      	lsls	r2, r2, #2
 8004eb6:	58d3      	ldr	r3, [r2, r3]
 8004eb8:	221f      	movs	r2, #31
 8004eba:	4013      	ands	r3, r2
 8004ebc:	000a      	movs	r2, r1
 8004ebe:	40da      	lsrs	r2, r3
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_RCC_ClockConfig+0x208>)
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x20c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7fd ffed 	bl	8002ea8 <HAL_InitTick>
 8004ece:	0003      	movs	r3, r0
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b004      	add	sp, #16
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	00001388 	.word	0x00001388
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	fffff0ff 	.word	0xfffff0ff
 8004ee8:	ffff8fff 	.word	0xffff8fff
 8004eec:	0800735c 	.word	0x0800735c
 8004ef0:	20000018 	.word	0x20000018
 8004ef4:	2000001c 	.word	0x2000001c

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004efe:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2238      	movs	r2, #56	; 0x38
 8004f04:	4013      	ands	r3, r2
 8004f06:	d10f      	bne.n	8004f28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004f08:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	0adb      	lsrs	r3, r3, #11
 8004f0e:	2207      	movs	r2, #7
 8004f10:	4013      	ands	r3, r2
 8004f12:	2201      	movs	r2, #1
 8004f14:	409a      	lsls	r2, r3
 8004f16:	0013      	movs	r3, r2
 8004f18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	4835      	ldr	r0, [pc, #212]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f1e:	f7fb f8f9 	bl	8000114 <__udivsi3>
 8004f22:	0003      	movs	r3, r0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e05d      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f28:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2238      	movs	r2, #56	; 0x38
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d102      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f34:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e054      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2238      	movs	r2, #56	; 0x38
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d138      	bne.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	2207      	movs	r2, #7
 8004f58:	4013      	ands	r3, r2
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d10d      	bne.n	8004f80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4824      	ldr	r0, [pc, #144]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004f68:	f7fb f8d4 	bl	8000114 <__udivsi3>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	0019      	movs	r1, r3
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	227f      	movs	r2, #127	; 0x7f
 8004f78:	4013      	ands	r3, r2
 8004f7a:	434b      	muls	r3, r1
 8004f7c:	617b      	str	r3, [r7, #20]
        break;
 8004f7e:	e00d      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	481c      	ldr	r0, [pc, #112]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f84:	f7fb f8c6 	bl	8000114 <__udivsi3>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	227f      	movs	r2, #127	; 0x7f
 8004f94:	4013      	ands	r3, r2
 8004f96:	434b      	muls	r3, r1
 8004f98:	617b      	str	r3, [r7, #20]
        break;
 8004f9a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	0f5b      	lsrs	r3, r3, #29
 8004fa2:	2207      	movs	r2, #7
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	6978      	ldr	r0, [r7, #20]
 8004fae:	f7fb f8b1 	bl	8000114 <__udivsi3>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	e015      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2238      	movs	r2, #56	; 0x38
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d103      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2238      	movs	r2, #56	; 0x38
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b18      	cmp	r3, #24
 8004fd6:	d103      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004fd8:	23fa      	movs	r3, #250	; 0xfa
 8004fda:	01db      	lsls	r3, r3, #7
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e001      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fe4:	693b      	ldr	r3, [r7, #16]
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b006      	add	sp, #24
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <HAL_RCC_GetHCLKFreq+0x10>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	20000018 	.word	0x20000018

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b5b0      	push	{r4, r5, r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005014:	f7ff fff2 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005018:	0004      	movs	r4, r0
 800501a:	f7ff fb49 	bl	80046b0 <LL_RCC_GetAPB1Prescaler>
 800501e:	0003      	movs	r3, r0
 8005020:	0b1a      	lsrs	r2, r3, #12
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	58d3      	ldr	r3, [r2, r3]
 8005028:	221f      	movs	r2, #31
 800502a:	4013      	ands	r3, r2
 800502c:	40dc      	lsrs	r4, r3
 800502e:	0023      	movs	r3, r4
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	bdb0      	pop	{r4, r5, r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	0800739c 	.word	0x0800739c

0800503c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005044:	2313      	movs	r3, #19
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800504c:	2312      	movs	r3, #18
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	029b      	lsls	r3, r3, #10
 800505c:	4013      	ands	r3, r2
 800505e:	d100      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005060:	e0a3      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2011      	movs	r0, #17
 8005064:	183b      	adds	r3, r7, r0
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506a:	4b86      	ldr	r3, [pc, #536]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800506c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	055b      	lsls	r3, r3, #21
 8005072:	4013      	ands	r3, r2
 8005074:	d110      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	4b83      	ldr	r3, [pc, #524]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507a:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	0549      	lsls	r1, r1, #21
 8005080:	430a      	orrs	r2, r1
 8005082:	63da      	str	r2, [r3, #60]	; 0x3c
 8005084:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	055b      	lsls	r3, r3, #21
 800508c:	4013      	ands	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005092:	183b      	adds	r3, r7, r0
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005098:	4b7b      	ldr	r3, [pc, #492]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b7a      	ldr	r3, [pc, #488]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	0049      	lsls	r1, r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a6:	f7fd ff5b 	bl	8002f60 <HAL_GetTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ae:	e00b      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fd ff56 	bl	8002f60 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d904      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80050be:	2313      	movs	r3, #19
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	2203      	movs	r2, #3
 80050c4:	701a      	strb	r2, [r3, #0]
        break;
 80050c6:	e005      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c8:	4b6f      	ldr	r3, [pc, #444]	; (8005288 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	d0ed      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80050d4:	2313      	movs	r3, #19
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d154      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050de:	4b69      	ldr	r3, [pc, #420]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80050e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050e2:	23c0      	movs	r3, #192	; 0xc0
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4013      	ands	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d019      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d014      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050fa:	4b62      	ldr	r3, [pc, #392]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	4a63      	ldr	r2, [pc, #396]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005100:	4013      	ands	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005104:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005106:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005108:	4b5e      	ldr	r3, [pc, #376]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	0249      	lsls	r1, r1, #9
 800510e:	430a      	orrs	r2, r1
 8005110:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005118:	495d      	ldr	r1, [pc, #372]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800511a:	400a      	ands	r2, r1
 800511c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2201      	movs	r2, #1
 8005128:	4013      	ands	r3, r2
 800512a:	d016      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd ff18 	bl	8002f60 <HAL_GetTick>
 8005130:	0003      	movs	r3, r0
 8005132:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	e00c      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd ff13 	bl	8002f60 <HAL_GetTick>
 800513a:	0002      	movs	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	4a54      	ldr	r2, [pc, #336]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d904      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005146:	2313      	movs	r3, #19
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	2203      	movs	r2, #3
 800514c:	701a      	strb	r2, [r3, #0]
            break;
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	4b4c      	ldr	r3, [pc, #304]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	2202      	movs	r2, #2
 8005156:	4013      	ands	r3, r2
 8005158:	d0ed      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800515a:	2313      	movs	r3, #19
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005164:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	4a48      	ldr	r2, [pc, #288]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800516a:	4013      	ands	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	4b44      	ldr	r3, [pc, #272]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005174:	430a      	orrs	r2, r1
 8005176:	65da      	str	r2, [r3, #92]	; 0x5c
 8005178:	e00c      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517a:	2312      	movs	r3, #18
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2213      	movs	r2, #19
 8005180:	18ba      	adds	r2, r7, r2
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e005      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	2312      	movs	r3, #18
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	2213      	movs	r2, #19
 800518e:	18ba      	adds	r2, r7, r2
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005194:	2311      	movs	r3, #17
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051a4:	493c      	ldr	r1, [pc, #240]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b4:	4b33      	ldr	r3, [pc, #204]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	2203      	movs	r2, #3
 80051ba:	4393      	bics	r3, r2
 80051bc:	0019      	movs	r1, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051c4:	430a      	orrs	r2, r1
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2202      	movs	r2, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d2:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	220c      	movs	r2, #12
 80051d8:	4393      	bics	r3, r2
 80051da:	0019      	movs	r1, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	4013      	ands	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f4:	4a29      	ldr	r2, [pc, #164]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005200:	430a      	orrs	r2, r1
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	01db      	lsls	r3, r3, #7
 800520c:	4013      	ands	r3, r2
 800520e:	d015      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005210:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	0899      	lsrs	r1, r3, #2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800521e:	430a      	orrs	r2, r1
 8005220:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	05db      	lsls	r3, r3, #23
 800522a:	429a      	cmp	r2, r3
 800522c:	d106      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	4b14      	ldr	r3, [pc, #80]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	0249      	lsls	r1, r1, #9
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	4013      	ands	r3, r2
 8005246:	d016      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800524a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005258:	430a      	orrs	r2, r1
 800525a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	01db      	lsls	r3, r3, #7
 8005264:	429a      	cmp	r2, r3
 8005266:	d106      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0249      	lsls	r1, r1, #9
 8005272:	430a      	orrs	r2, r1
 8005274:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005276:	2312      	movs	r3, #18
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	781b      	ldrb	r3, [r3, #0]
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b006      	add	sp, #24
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	40007000 	.word	0x40007000
 800528c:	fffffcff 	.word	0xfffffcff
 8005290:	fffeffff 	.word	0xfffeffff
 8005294:	00001388 	.word	0x00001388
 8005298:	efffffff 	.word	0xefffffff
 800529c:	ffffcfff 	.word	0xffffcfff
 80052a0:	ffff3fff 	.word	0xffff3fff

080052a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e046      	b.n	8005344 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2288      	movs	r2, #136	; 0x88
 80052ba:	589b      	ldr	r3, [r3, r2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2284      	movs	r2, #132	; 0x84
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fd fc8a 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2288      	movs	r2, #136	; 0x88
 80052d4:	2124      	movs	r1, #36	; 0x24
 80052d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f000 fc0e 	bl	8005b0c <UART_SetConfig>
 80052f0:	0003      	movs	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e024      	b.n	8005344 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 fda5 	bl	8005e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	490d      	ldr	r1, [pc, #52]	; (800534c <HAL_UART_Init+0xa8>)
 8005316:	400a      	ands	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	212a      	movs	r1, #42	; 0x2a
 8005326:	438a      	bics	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 fe3d 	bl	8005fbc <UART_CheckIdleState>
 8005342:	0003      	movs	r3, r0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}
 800534c:	ffffb7ff 	.word	0xffffb7ff

08005350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	1dbb      	adds	r3, r7, #6
 800535e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2288      	movs	r2, #136	; 0x88
 8005364:	589b      	ldr	r3, [r3, r2]
 8005366:	2b20      	cmp	r3, #32
 8005368:	d000      	beq.n	800536c <HAL_UART_Transmit+0x1c>
 800536a:	e088      	b.n	800547e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_UART_Transmit+0x2a>
 8005372:	1dbb      	adds	r3, r7, #6
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e080      	b.n	8005480 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	015b      	lsls	r3, r3, #5
 8005386:	429a      	cmp	r2, r3
 8005388:	d109      	bne.n	800539e <HAL_UART_Transmit+0x4e>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2201      	movs	r2, #1
 8005396:	4013      	ands	r3, r2
 8005398:	d001      	beq.n	800539e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e070      	b.n	8005480 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2290      	movs	r2, #144	; 0x90
 80053a2:	2100      	movs	r1, #0
 80053a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2288      	movs	r2, #136	; 0x88
 80053aa:	2121      	movs	r1, #33	; 0x21
 80053ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ae:	f7fd fdd7 	bl	8002f60 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1dba      	adds	r2, r7, #6
 80053ba:	2154      	movs	r1, #84	; 0x54
 80053bc:	8812      	ldrh	r2, [r2, #0]
 80053be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1dba      	adds	r2, r7, #6
 80053c4:	2156      	movs	r1, #86	; 0x56
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	015b      	lsls	r3, r3, #5
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d108      	bne.n	80053e8 <HAL_UART_Transmit+0x98>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053f0:	e02c      	b.n	800544c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	0013      	movs	r3, r2
 80053fc:	2200      	movs	r2, #0
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	f000 fe2a 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d001      	beq.n	800540c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e039      	b.n	8005480 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	001a      	movs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	05d2      	lsls	r2, r2, #23
 800541e:	0dd2      	lsrs	r2, r2, #23
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3302      	adds	r3, #2
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e007      	b.n	800543a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2256      	movs	r2, #86	; 0x56
 800543e:	5a9b      	ldrh	r3, [r3, r2]
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b299      	uxth	r1, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2256      	movs	r2, #86	; 0x56
 800544a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2256      	movs	r2, #86	; 0x56
 8005450:	5a9b      	ldrh	r3, [r3, r2]
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1cc      	bne.n	80053f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	0013      	movs	r3, r2
 8005462:	2200      	movs	r2, #0
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	f000 fdf7 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2288      	movs	r2, #136	; 0x88
 8005476:	2120      	movs	r1, #32
 8005478:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b008      	add	sp, #32
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b0aa      	sub	sp, #168	; 0xa8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	22a4      	movs	r2, #164	; 0xa4
 8005498:	18b9      	adds	r1, r7, r2
 800549a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	20a0      	movs	r0, #160	; 0xa0
 80054a4:	1839      	adds	r1, r7, r0
 80054a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	249c      	movs	r4, #156	; 0x9c
 80054b0:	1939      	adds	r1, r7, r4
 80054b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054b4:	0011      	movs	r1, r2
 80054b6:	18bb      	adds	r3, r7, r2
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4aa2      	ldr	r2, [pc, #648]	; (8005744 <HAL_UART_IRQHandler+0x2bc>)
 80054bc:	4013      	ands	r3, r2
 80054be:	2298      	movs	r2, #152	; 0x98
 80054c0:	18bd      	adds	r5, r7, r2
 80054c2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80054c4:	18bb      	adds	r3, r7, r2
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11a      	bne.n	8005502 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054cc:	187b      	adds	r3, r7, r1
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2220      	movs	r2, #32
 80054d2:	4013      	ands	r3, r2
 80054d4:	d015      	beq.n	8005502 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054d6:	183b      	adds	r3, r7, r0
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2220      	movs	r2, #32
 80054dc:	4013      	ands	r3, r2
 80054de:	d105      	bne.n	80054ec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054e0:	193b      	adds	r3, r7, r4
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	055b      	lsls	r3, r3, #21
 80054e8:	4013      	ands	r3, r2
 80054ea:	d00a      	beq.n	8005502 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d100      	bne.n	80054f6 <HAL_UART_IRQHandler+0x6e>
 80054f4:	e2dc      	b.n	8005ab0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	0010      	movs	r0, r2
 80054fe:	4798      	blx	r3
      }
      return;
 8005500:	e2d6      	b.n	8005ab0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005502:	2398      	movs	r3, #152	; 0x98
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d100      	bne.n	800550e <HAL_UART_IRQHandler+0x86>
 800550c:	e122      	b.n	8005754 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800550e:	239c      	movs	r3, #156	; 0x9c
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a8c      	ldr	r2, [pc, #560]	; (8005748 <HAL_UART_IRQHandler+0x2c0>)
 8005516:	4013      	ands	r3, r2
 8005518:	d106      	bne.n	8005528 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800551a:	23a0      	movs	r3, #160	; 0xa0
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a8a      	ldr	r2, [pc, #552]	; (800574c <HAL_UART_IRQHandler+0x2c4>)
 8005522:	4013      	ands	r3, r2
 8005524:	d100      	bne.n	8005528 <HAL_UART_IRQHandler+0xa0>
 8005526:	e115      	b.n	8005754 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005528:	23a4      	movs	r3, #164	; 0xa4
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	4013      	ands	r3, r2
 8005532:	d012      	beq.n	800555a <HAL_UART_IRQHandler+0xd2>
 8005534:	23a0      	movs	r3, #160	; 0xa0
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4013      	ands	r3, r2
 8005540:	d00b      	beq.n	800555a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2290      	movs	r2, #144	; 0x90
 800554e:	589b      	ldr	r3, [r3, r2]
 8005550:	2201      	movs	r2, #1
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2190      	movs	r1, #144	; 0x90
 8005558:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800555a:	23a4      	movs	r3, #164	; 0xa4
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2202      	movs	r2, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d011      	beq.n	800558a <HAL_UART_IRQHandler+0x102>
 8005566:	239c      	movs	r3, #156	; 0x9c
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	4013      	ands	r3, r2
 8005570:	d00b      	beq.n	800558a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2202      	movs	r2, #2
 8005578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2290      	movs	r2, #144	; 0x90
 800557e:	589b      	ldr	r3, [r3, r2]
 8005580:	2204      	movs	r2, #4
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2190      	movs	r1, #144	; 0x90
 8005588:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800558a:	23a4      	movs	r3, #164	; 0xa4
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2204      	movs	r2, #4
 8005592:	4013      	ands	r3, r2
 8005594:	d011      	beq.n	80055ba <HAL_UART_IRQHandler+0x132>
 8005596:	239c      	movs	r3, #156	; 0x9c
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2204      	movs	r2, #4
 80055a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2290      	movs	r2, #144	; 0x90
 80055ae:	589b      	ldr	r3, [r3, r2]
 80055b0:	2202      	movs	r2, #2
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2190      	movs	r1, #144	; 0x90
 80055b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055ba:	23a4      	movs	r3, #164	; 0xa4
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4013      	ands	r3, r2
 80055c4:	d017      	beq.n	80055f6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055c6:	23a0      	movs	r3, #160	; 0xa0
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2220      	movs	r2, #32
 80055ce:	4013      	ands	r3, r2
 80055d0:	d105      	bne.n	80055de <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055d2:	239c      	movs	r3, #156	; 0x9c
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a5b      	ldr	r2, [pc, #364]	; (8005748 <HAL_UART_IRQHandler+0x2c0>)
 80055da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2290      	movs	r2, #144	; 0x90
 80055ea:	589b      	ldr	r3, [r3, r2]
 80055ec:	2208      	movs	r2, #8
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2190      	movs	r1, #144	; 0x90
 80055f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055f6:	23a4      	movs	r3, #164	; 0xa4
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_UART_IRQHandler+0x1a4>
 8005604:	23a0      	movs	r3, #160	; 0xa0
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	04db      	lsls	r3, r3, #19
 800560e:	4013      	ands	r3, r2
 8005610:	d00c      	beq.n	800562c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	0112      	lsls	r2, r2, #4
 800561a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2290      	movs	r2, #144	; 0x90
 8005620:	589b      	ldr	r3, [r3, r2]
 8005622:	2220      	movs	r2, #32
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2190      	movs	r1, #144	; 0x90
 800562a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2290      	movs	r2, #144	; 0x90
 8005630:	589b      	ldr	r3, [r3, r2]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d100      	bne.n	8005638 <HAL_UART_IRQHandler+0x1b0>
 8005636:	e23d      	b.n	8005ab4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005638:	23a4      	movs	r3, #164	; 0xa4
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2220      	movs	r2, #32
 8005640:	4013      	ands	r3, r2
 8005642:	d015      	beq.n	8005670 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005644:	23a0      	movs	r3, #160	; 0xa0
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2220      	movs	r2, #32
 800564c:	4013      	ands	r3, r2
 800564e:	d106      	bne.n	800565e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005650:	239c      	movs	r3, #156	; 0x9c
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	055b      	lsls	r3, r3, #21
 800565a:	4013      	ands	r3, r2
 800565c:	d008      	beq.n	8005670 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	0010      	movs	r0, r2
 800566e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2290      	movs	r2, #144	; 0x90
 8005674:	589b      	ldr	r3, [r3, r2]
 8005676:	2194      	movs	r1, #148	; 0x94
 8005678:	187a      	adds	r2, r7, r1
 800567a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2240      	movs	r2, #64	; 0x40
 8005684:	4013      	ands	r3, r2
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d004      	beq.n	8005694 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800568a:	187b      	adds	r3, r7, r1
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2228      	movs	r2, #40	; 0x28
 8005690:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005692:	d04c      	beq.n	800572e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fda6 	bl	80061e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2240      	movs	r2, #64	; 0x40
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d13c      	bne.n	8005724 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80056b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	2090      	movs	r0, #144	; 0x90
 80056b4:	183a      	adds	r2, r7, r0
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	2301      	movs	r3, #1
 80056ba:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2140      	movs	r1, #64	; 0x40
 80056d0:	438a      	bics	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	183b      	adds	r3, r7, r0
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	589b      	ldr	r3, [r3, r2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d016      	beq.n	800571a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	589b      	ldr	r3, [r3, r2]
 80056f2:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_UART_IRQHandler+0x2c8>)
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2280      	movs	r2, #128	; 0x80
 80056fa:	589b      	ldr	r3, [r3, r2]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fe fdab 	bl	8004258 <HAL_DMA_Abort_IT>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d01c      	beq.n	8005740 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	589b      	ldr	r3, [r3, r2]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	5852      	ldr	r2, [r2, r1]
 8005714:	0010      	movs	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e012      	b.n	8005740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f9e1 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005722:	e00d      	b.n	8005740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 f9dc 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e008      	b.n	8005740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f9d7 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2290      	movs	r2, #144	; 0x90
 800573a:	2100      	movs	r1, #0
 800573c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800573e:	e1b9      	b.n	8005ab4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	46c0      	nop			; (mov r8, r8)
    return;
 8005742:	e1b7      	b.n	8005ab4 <HAL_UART_IRQHandler+0x62c>
 8005744:	0000080f 	.word	0x0000080f
 8005748:	10000001 	.word	0x10000001
 800574c:	04000120 	.word	0x04000120
 8005750:	080062b5 	.word	0x080062b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d000      	beq.n	800575e <HAL_UART_IRQHandler+0x2d6>
 800575c:	e13e      	b.n	80059dc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800575e:	23a4      	movs	r3, #164	; 0xa4
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2210      	movs	r2, #16
 8005766:	4013      	ands	r3, r2
 8005768:	d100      	bne.n	800576c <HAL_UART_IRQHandler+0x2e4>
 800576a:	e137      	b.n	80059dc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800576c:	23a0      	movs	r3, #160	; 0xa0
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	4013      	ands	r3, r2
 8005776:	d100      	bne.n	800577a <HAL_UART_IRQHandler+0x2f2>
 8005778:	e130      	b.n	80059dc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2240      	movs	r2, #64	; 0x40
 800578a:	4013      	ands	r3, r2
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d000      	beq.n	8005792 <HAL_UART_IRQHandler+0x30a>
 8005790:	e0a4      	b.n	80058dc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2280      	movs	r2, #128	; 0x80
 8005796:	589b      	ldr	r3, [r3, r2]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	217e      	movs	r1, #126	; 0x7e
 800579e:	187b      	adds	r3, r7, r1
 80057a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d100      	bne.n	80057ac <HAL_UART_IRQHandler+0x324>
 80057aa:	e185      	b.n	8005ab8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	225c      	movs	r2, #92	; 0x5c
 80057b0:	5a9b      	ldrh	r3, [r3, r2]
 80057b2:	187a      	adds	r2, r7, r1
 80057b4:	8812      	ldrh	r2, [r2, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d300      	bcc.n	80057bc <HAL_UART_IRQHandler+0x334>
 80057ba:	e17d      	b.n	8005ab8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	187a      	adds	r2, r7, r1
 80057c0:	215e      	movs	r1, #94	; 0x5e
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	589b      	ldr	r3, [r3, r2]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2220      	movs	r2, #32
 80057d2:	4013      	ands	r3, r2
 80057d4:	d170      	bne.n	80058b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d6:	f3ef 8310 	mrs	r3, PRIMASK
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057de:	67bb      	str	r3, [r7, #120]	; 0x78
 80057e0:	2301      	movs	r3, #1
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	f383 8810 	msr	PRIMASK, r3
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	49b4      	ldr	r1, [pc, #720]	; (8005ac8 <HAL_UART_IRQHandler+0x640>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f383 8810 	msr	PRIMASK, r3
}
 8005806:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	677b      	str	r3, [r7, #116]	; 0x74
 8005812:	2301      	movs	r3, #1
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2101      	movs	r1, #1
 800582a:	438a      	bics	r2, r1
 800582c:	609a      	str	r2, [r3, #8]
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005840:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	673b      	str	r3, [r7, #112]	; 0x70
 8005844:	2301      	movs	r3, #1
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584a:	f383 8810 	msr	PRIMASK, r3
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2140      	movs	r1, #64	; 0x40
 800585c:	438a      	bics	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005862:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	228c      	movs	r2, #140	; 0x8c
 8005870:	2120      	movs	r1, #32
 8005872:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587a:	f3ef 8310 	mrs	r3, PRIMASK
 800587e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005880:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005884:	2301      	movs	r3, #1
 8005886:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800588a:	f383 8810 	msr	PRIMASK, r3
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2110      	movs	r1, #16
 800589c:	438a      	bics	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	589b      	ldr	r3, [r3, r2]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7fe fc6e 	bl	8004194 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	225c      	movs	r2, #92	; 0x5c
 80058c2:	5a9a      	ldrh	r2, [r3, r2]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	215e      	movs	r1, #94	; 0x5e
 80058c8:	5a5b      	ldrh	r3, [r3, r1]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0011      	movs	r1, r2
 80058d4:	0018      	movs	r0, r3
 80058d6:	f000 f90d 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058da:	e0ed      	b.n	8005ab8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	225c      	movs	r2, #92	; 0x5c
 80058e0:	5a99      	ldrh	r1, [r3, r2]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	225e      	movs	r2, #94	; 0x5e
 80058e6:	5a9b      	ldrh	r3, [r3, r2]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	208e      	movs	r0, #142	; 0x8e
 80058ec:	183b      	adds	r3, r7, r0
 80058ee:	1a8a      	subs	r2, r1, r2
 80058f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	225e      	movs	r2, #94	; 0x5e
 80058f6:	5a9b      	ldrh	r3, [r3, r2]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d100      	bne.n	8005900 <HAL_UART_IRQHandler+0x478>
 80058fe:	e0dd      	b.n	8005abc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005900:	183b      	adds	r3, r7, r0
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d100      	bne.n	800590a <HAL_UART_IRQHandler+0x482>
 8005908:	e0d8      	b.n	8005abc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005910:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005912:	2488      	movs	r4, #136	; 0x88
 8005914:	193a      	adds	r2, r7, r4
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	2301      	movs	r3, #1
 800591a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4967      	ldr	r1, [pc, #412]	; (8005acc <HAL_UART_IRQHandler+0x644>)
 8005930:	400a      	ands	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	193b      	adds	r3, r7, r4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005942:	f3ef 8310 	mrs	r3, PRIMASK
 8005946:	61bb      	str	r3, [r7, #24]
  return(result);
 8005948:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800594a:	2484      	movs	r4, #132	; 0x84
 800594c:	193a      	adds	r2, r7, r4
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	2301      	movs	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f383 8810 	msr	PRIMASK, r3
}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	495a      	ldr	r1, [pc, #360]	; (8005ad0 <HAL_UART_IRQHandler+0x648>)
 8005968:	400a      	ands	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	193b      	adds	r3, r7, r4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	228c      	movs	r2, #140	; 0x8c
 800597e:	2120      	movs	r1, #32
 8005980:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	2480      	movs	r4, #128	; 0x80
 8005998:	193a      	adds	r2, r7, r4
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	2301      	movs	r3, #1
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2110      	movs	r1, #16
 80059b4:	438a      	bics	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	193b      	adds	r3, r7, r4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059cc:	183b      	adds	r3, r7, r0
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0011      	movs	r1, r2
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 f88d 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059da:	e06f      	b.n	8005abc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059dc:	23a4      	movs	r3, #164	; 0xa4
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	035b      	lsls	r3, r3, #13
 80059e6:	4013      	ands	r3, r2
 80059e8:	d010      	beq.n	8005a0c <HAL_UART_IRQHandler+0x584>
 80059ea:	239c      	movs	r3, #156	; 0x9c
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	03db      	lsls	r3, r3, #15
 80059f4:	4013      	ands	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	0352      	lsls	r2, r2, #13
 8005a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f000 fc98 	bl	800633a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a0a:	e05a      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a0c:	23a4      	movs	r3, #164	; 0xa4
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	4013      	ands	r3, r2
 8005a16:	d016      	beq.n	8005a46 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a18:	23a0      	movs	r3, #160	; 0xa0
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	4013      	ands	r3, r2
 8005a22:	d106      	bne.n	8005a32 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a24:	239c      	movs	r3, #156	; 0x9c
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d042      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	0010      	movs	r0, r2
 8005a42:	4798      	blx	r3
    }
    return;
 8005a44:	e03c      	b.n	8005ac0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a46:	23a4      	movs	r3, #164	; 0xa4
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2240      	movs	r2, #64	; 0x40
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d00a      	beq.n	8005a68 <HAL_UART_IRQHandler+0x5e0>
 8005a52:	23a0      	movs	r3, #160	; 0xa0
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2240      	movs	r2, #64	; 0x40
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 fc3e 	bl	80062e2 <UART_EndTransmit_IT>
    return;
 8005a66:	e02c      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a68:	23a4      	movs	r3, #164	; 0xa4
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	4013      	ands	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <HAL_UART_IRQHandler+0x606>
 8005a76:	23a0      	movs	r3, #160	; 0xa0
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	4013      	ands	r3, r2
 8005a82:	d004      	beq.n	8005a8e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fc67 	bl	800635a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a8c:	e019      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a8e:	23a4      	movs	r3, #164	; 0xa4
 8005a90:	18fb      	adds	r3, r7, r3
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	045b      	lsls	r3, r3, #17
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d012      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
 8005a9c:	23a0      	movs	r3, #160	; 0xa0
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da0d      	bge.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 fc4e 	bl	800634a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aae:	e008      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	e006      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
    return;
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	e004      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	e002      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
      return;
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	e000      	b.n	8005ac2 <HAL_UART_IRQHandler+0x63a>
    return;
 8005ac0:	46c0      	nop			; (mov r8, r8)
  }
}
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b02a      	add	sp, #168	; 0xa8
 8005ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac8:	fffffeff 	.word	0xfffffeff
 8005acc:	fffffedf 	.word	0xfffffedf
 8005ad0:	effffffe 	.word	0xeffffffe

08005ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	000a      	movs	r2, r1
 8005afe:	1cbb      	adds	r3, r7, #2
 8005b00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b002      	add	sp, #8
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b14:	231a      	movs	r3, #26
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4abc      	ldr	r2, [pc, #752]	; (8005e2c <UART_SetConfig+0x320>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	0019      	movs	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4ab7      	ldr	r2, [pc, #732]	; (8005e30 <UART_SetConfig+0x324>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4aae      	ldr	r2, [pc, #696]	; (8005e34 <UART_SetConfig+0x328>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	220f      	movs	r2, #15
 8005b90:	4393      	bics	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4aa4      	ldr	r2, [pc, #656]	; (8005e38 <UART_SetConfig+0x32c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d127      	bne.n	8005bfa <UART_SetConfig+0xee>
 8005baa:	4ba4      	ldr	r3, [pc, #656]	; (8005e3c <UART_SetConfig+0x330>)
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	2203      	movs	r2, #3
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d017      	beq.n	8005be6 <UART_SetConfig+0xda>
 8005bb6:	d81b      	bhi.n	8005bf0 <UART_SetConfig+0xe4>
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d00a      	beq.n	8005bd2 <UART_SetConfig+0xc6>
 8005bbc:	d818      	bhi.n	8005bf0 <UART_SetConfig+0xe4>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <UART_SetConfig+0xbc>
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d00a      	beq.n	8005bdc <UART_SetConfig+0xd0>
 8005bc6:	e013      	b.n	8005bf0 <UART_SetConfig+0xe4>
 8005bc8:	231b      	movs	r3, #27
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e058      	b.n	8005c84 <UART_SetConfig+0x178>
 8005bd2:	231b      	movs	r3, #27
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e053      	b.n	8005c84 <UART_SetConfig+0x178>
 8005bdc:	231b      	movs	r3, #27
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	2204      	movs	r2, #4
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	e04e      	b.n	8005c84 <UART_SetConfig+0x178>
 8005be6:	231b      	movs	r3, #27
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e049      	b.n	8005c84 <UART_SetConfig+0x178>
 8005bf0:	231b      	movs	r3, #27
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e044      	b.n	8005c84 <UART_SetConfig+0x178>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a90      	ldr	r2, [pc, #576]	; (8005e40 <UART_SetConfig+0x334>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d127      	bne.n	8005c54 <UART_SetConfig+0x148>
 8005c04:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <UART_SetConfig+0x330>)
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	220c      	movs	r2, #12
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d017      	beq.n	8005c40 <UART_SetConfig+0x134>
 8005c10:	d81b      	bhi.n	8005c4a <UART_SetConfig+0x13e>
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d00a      	beq.n	8005c2c <UART_SetConfig+0x120>
 8005c16:	d818      	bhi.n	8005c4a <UART_SetConfig+0x13e>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <UART_SetConfig+0x116>
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d00a      	beq.n	8005c36 <UART_SetConfig+0x12a>
 8005c20:	e013      	b.n	8005c4a <UART_SetConfig+0x13e>
 8005c22:	231b      	movs	r3, #27
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e02b      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c2c:	231b      	movs	r3, #27
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	2202      	movs	r2, #2
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	e026      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c36:	231b      	movs	r3, #27
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e021      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c40:	231b      	movs	r3, #27
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	2208      	movs	r2, #8
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e01c      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c4a:	231b      	movs	r3, #27
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	2210      	movs	r2, #16
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	e017      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a7a      	ldr	r2, [pc, #488]	; (8005e44 <UART_SetConfig+0x338>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d104      	bne.n	8005c68 <UART_SetConfig+0x15c>
 8005c5e:	231b      	movs	r3, #27
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e00d      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a76      	ldr	r2, [pc, #472]	; (8005e48 <UART_SetConfig+0x33c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d104      	bne.n	8005c7c <UART_SetConfig+0x170>
 8005c72:	231b      	movs	r3, #27
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e003      	b.n	8005c84 <UART_SetConfig+0x178>
 8005c7c:	231b      	movs	r3, #27
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	2210      	movs	r2, #16
 8005c82:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d000      	beq.n	8005c92 <UART_SetConfig+0x186>
 8005c90:	e065      	b.n	8005d5e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005c92:	231b      	movs	r3, #27
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d015      	beq.n	8005cc8 <UART_SetConfig+0x1bc>
 8005c9c:	dc18      	bgt.n	8005cd0 <UART_SetConfig+0x1c4>
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00d      	beq.n	8005cbe <UART_SetConfig+0x1b2>
 8005ca2:	dc15      	bgt.n	8005cd0 <UART_SetConfig+0x1c4>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <UART_SetConfig+0x1a2>
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d005      	beq.n	8005cb8 <UART_SetConfig+0x1ac>
 8005cac:	e010      	b.n	8005cd0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cae:	f7ff f9af 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	617b      	str	r3, [r7, #20]
        break;
 8005cb6:	e012      	b.n	8005cde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <UART_SetConfig+0x340>)
 8005cba:	617b      	str	r3, [r7, #20]
        break;
 8005cbc:	e00f      	b.n	8005cde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7ff f91b 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	617b      	str	r3, [r7, #20]
        break;
 8005cc6:	e00a      	b.n	8005cde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	617b      	str	r3, [r7, #20]
        break;
 8005cce:	e006      	b.n	8005cde <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd4:	231a      	movs	r3, #26
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
        break;
 8005cdc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d100      	bne.n	8005ce6 <UART_SetConfig+0x1da>
 8005ce4:	e08d      	b.n	8005e02 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cea:	4b59      	ldr	r3, [pc, #356]	; (8005e50 <UART_SetConfig+0x344>)
 8005cec:	0052      	lsls	r2, r2, #1
 8005cee:	5ad3      	ldrh	r3, [r2, r3]
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	6978      	ldr	r0, [r7, #20]
 8005cf4:	f7fa fa0e 	bl	8000114 <__udivsi3>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	005a      	lsls	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	18d2      	adds	r2, r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	0019      	movs	r1, r3
 8005d0a:	0010      	movs	r0, r2
 8005d0c:	f7fa fa02 	bl	8000114 <__udivsi3>
 8005d10:	0003      	movs	r3, r0
 8005d12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d91c      	bls.n	8005d54 <UART_SetConfig+0x248>
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	025b      	lsls	r3, r3, #9
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d217      	bcs.n	8005d54 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	200e      	movs	r0, #14
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	210f      	movs	r1, #15
 8005d2e:	438a      	bics	r2, r1
 8005d30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2207      	movs	r2, #7
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	b299      	uxth	r1, r3
 8005d3e:	183b      	adds	r3, r7, r0
 8005d40:	183a      	adds	r2, r7, r0
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	183a      	adds	r2, r7, r0
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e056      	b.n	8005e02 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005d54:	231a      	movs	r3, #26
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	e051      	b.n	8005e02 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d5e:	231b      	movs	r3, #27
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d015      	beq.n	8005d94 <UART_SetConfig+0x288>
 8005d68:	dc18      	bgt.n	8005d9c <UART_SetConfig+0x290>
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d00d      	beq.n	8005d8a <UART_SetConfig+0x27e>
 8005d6e:	dc15      	bgt.n	8005d9c <UART_SetConfig+0x290>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <UART_SetConfig+0x26e>
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d005      	beq.n	8005d84 <UART_SetConfig+0x278>
 8005d78:	e010      	b.n	8005d9c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7a:	f7ff f949 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	617b      	str	r3, [r7, #20]
        break;
 8005d82:	e012      	b.n	8005daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d84:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <UART_SetConfig+0x340>)
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e00f      	b.n	8005daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8a:	f7ff f8b5 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	617b      	str	r3, [r7, #20]
        break;
 8005d92:	e00a      	b.n	8005daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	021b      	lsls	r3, r3, #8
 8005d98:	617b      	str	r3, [r7, #20]
        break;
 8005d9a:	e006      	b.n	8005daa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005da0:	231a      	movs	r3, #26
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
        break;
 8005da8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d028      	beq.n	8005e02 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005db4:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <UART_SetConfig+0x344>)
 8005db6:	0052      	lsls	r2, r2, #1
 8005db8:	5ad3      	ldrh	r3, [r2, r3]
 8005dba:	0019      	movs	r1, r3
 8005dbc:	6978      	ldr	r0, [r7, #20]
 8005dbe:	f7fa f9a9 	bl	8000114 <__udivsi3>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	18d2      	adds	r2, r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	0010      	movs	r0, r2
 8005dd6:	f7fa f99d 	bl	8000114 <__udivsi3>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b0f      	cmp	r3, #15
 8005de2:	d90a      	bls.n	8005dfa <UART_SetConfig+0x2ee>
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d205      	bcs.n	8005dfa <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60da      	str	r2, [r3, #12]
 8005df8:	e003      	b.n	8005e02 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfa:	231a      	movs	r3, #26
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	226a      	movs	r2, #106	; 0x6a
 8005e06:	2101      	movs	r1, #1
 8005e08:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2268      	movs	r2, #104	; 0x68
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e1e:	231a      	movs	r3, #26
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	781b      	ldrb	r3, [r3, #0]
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b008      	add	sp, #32
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	cfff69f3 	.word	0xcfff69f3
 8005e30:	ffffcfff 	.word	0xffffcfff
 8005e34:	11fff4ff 	.word	0x11fff4ff
 8005e38:	40013800 	.word	0x40013800
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40004400 	.word	0x40004400
 8005e44:	40004800 	.word	0x40004800
 8005e48:	40004c00 	.word	0x40004c00
 8005e4c:	00f42400 	.word	0x00f42400
 8005e50:	080073bc 	.word	0x080073bc

08005e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <UART_AdvFeatureConfig+0x144>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	2202      	movs	r2, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a43      	ldr	r2, [pc, #268]	; (8005f9c <UART_AdvFeatureConfig+0x148>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <UART_AdvFeatureConfig+0x14c>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a34      	ldr	r2, [pc, #208]	; (8005fa4 <UART_AdvFeatureConfig+0x150>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	2210      	movs	r2, #16
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <UART_AdvFeatureConfig+0x154>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	4a25      	ldr	r2, [pc, #148]	; (8005fac <UART_AdvFeatureConfig+0x158>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <UART_AdvFeatureConfig+0x15c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	035b      	lsls	r3, r3, #13
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d10b      	bne.n	8005f6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <UART_AdvFeatureConfig+0x160>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	4013      	ands	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <UART_AdvFeatureConfig+0x164>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	fffdffff 	.word	0xfffdffff
 8005f9c:	fffeffff 	.word	0xfffeffff
 8005fa0:	fffbffff 	.word	0xfffbffff
 8005fa4:	ffff7fff 	.word	0xffff7fff
 8005fa8:	ffffefff 	.word	0xffffefff
 8005fac:	ffffdfff 	.word	0xffffdfff
 8005fb0:	ffefffff 	.word	0xffefffff
 8005fb4:	ff9fffff 	.word	0xff9fffff
 8005fb8:	fff7ffff 	.word	0xfff7ffff

08005fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2290      	movs	r2, #144	; 0x90
 8005fc8:	2100      	movs	r1, #0
 8005fca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fcc:	f7fc ffc8 	bl	8002f60 <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d10c      	bne.n	8005ffc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	0391      	lsls	r1, r2, #14
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <UART_CheckIdleState+0x98>)
 8005fec:	9200      	str	r2, [sp, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f000 f832 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d001      	beq.n	8005ffc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e026      	b.n	800604a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2204      	movs	r2, #4
 8006004:	4013      	ands	r3, r2
 8006006:	2b04      	cmp	r3, #4
 8006008:	d10c      	bne.n	8006024 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	03d1      	lsls	r1, r2, #15
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4a10      	ldr	r2, [pc, #64]	; (8006054 <UART_CheckIdleState+0x98>)
 8006014:	9200      	str	r2, [sp, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f81e 	bl	8006058 <UART_WaitOnFlagUntilTimeout>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d001      	beq.n	8006024 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e012      	b.n	800604a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2288      	movs	r2, #136	; 0x88
 8006028:	2120      	movs	r1, #32
 800602a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	228c      	movs	r2, #140	; 0x8c
 8006030:	2120      	movs	r1, #32
 8006032:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2284      	movs	r2, #132	; 0x84
 8006044:	2100      	movs	r1, #0
 8006046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	0018      	movs	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	b004      	add	sp, #16
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	01ffffff 	.word	0x01ffffff

08006058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b094      	sub	sp, #80	; 0x50
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	1dfb      	adds	r3, r7, #7
 8006066:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006068:	e0a7      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800606c:	3301      	adds	r3, #1
 800606e:	d100      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006070:	e0a3      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fc ff75 	bl	8002f60 <HAL_GetTick>
 8006076:	0002      	movs	r2, r0
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <UART_WaitOnFlagUntilTimeout+0x30>
 8006082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006084:	2b00      	cmp	r3, #0
 8006086:	d13f      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006088:	f3ef 8310 	mrs	r3, PRIMASK
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
 8006092:	2301      	movs	r3, #1
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	f383 8810 	msr	PRIMASK, r3
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	494e      	ldr	r1, [pc, #312]	; (80061e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	f383 8810 	msr	PRIMASK, r3
}
 80060b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ba:	f3ef 8310 	mrs	r3, PRIMASK
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	643b      	str	r3, [r7, #64]	; 0x40
 80060c4:	2301      	movs	r3, #1
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	438a      	bics	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2288      	movs	r2, #136	; 0x88
 80060f0:	2120      	movs	r1, #32
 80060f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	228c      	movs	r2, #140	; 0x8c
 80060f8:	2120      	movs	r1, #32
 80060fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2284      	movs	r2, #132	; 0x84
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e069      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2204      	movs	r2, #4
 8006110:	4013      	ands	r3, r2
 8006112:	d052      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69da      	ldr	r2, [r3, #28]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	401a      	ands	r2, r3
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	429a      	cmp	r2, r3
 8006126:	d148      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2280      	movs	r2, #128	; 0x80
 800612e:	0112      	lsls	r2, r2, #4
 8006130:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	613b      	str	r3, [r7, #16]
  return(result);
 8006138:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800613a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800613c:	2301      	movs	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f383 8810 	msr	PRIMASK, r3
}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4924      	ldr	r1, [pc, #144]	; (80061e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006154:	400a      	ands	r2, r1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f383 8810 	msr	PRIMASK, r3
}
 8006162:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006164:	f3ef 8310 	mrs	r3, PRIMASK
 8006168:	61fb      	str	r3, [r7, #28]
  return(result);
 800616a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616c:	64bb      	str	r3, [r7, #72]	; 0x48
 800616e:	2301      	movs	r3, #1
 8006170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f383 8810 	msr	PRIMASK, r3
}
 8006178:	46c0      	nop			; (mov r8, r8)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	438a      	bics	r2, r1
 8006188:	609a      	str	r2, [r3, #8]
 800618a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	f383 8810 	msr	PRIMASK, r3
}
 8006194:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2288      	movs	r2, #136	; 0x88
 800619a:	2120      	movs	r1, #32
 800619c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	228c      	movs	r2, #140	; 0x8c
 80061a2:	2120      	movs	r1, #32
 80061a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2290      	movs	r2, #144	; 0x90
 80061aa:	2120      	movs	r1, #32
 80061ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2284      	movs	r2, #132	; 0x84
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e010      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	425a      	negs	r2, r3
 80061ca:	4153      	adcs	r3, r2
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	001a      	movs	r2, r3
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d100      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0x182>
 80061d8:	e747      	b.n	800606a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	0018      	movs	r0, r3
 80061de:	46bd      	mov	sp, r7
 80061e0:	b014      	add	sp, #80	; 0x50
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	fffffe5f 	.word	0xfffffe5f

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	; 0x38
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f0:	f3ef 8310 	mrs	r3, PRIMASK
 80061f4:	617b      	str	r3, [r7, #20]
  return(result);
 80061f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	2301      	movs	r3, #1
 80061fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f383 8810 	msr	PRIMASK, r3
}
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4926      	ldr	r1, [pc, #152]	; (80062ac <UART_EndRxTransfer+0xc4>)
 8006212:	400a      	ands	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f383 8810 	msr	PRIMASK, r3
}
 8006220:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006222:	f3ef 8310 	mrs	r3, PRIMASK
 8006226:	623b      	str	r3, [r7, #32]
  return(result);
 8006228:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
 800622c:	2301      	movs	r3, #1
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	f383 8810 	msr	PRIMASK, r3
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	491b      	ldr	r1, [pc, #108]	; (80062b0 <UART_EndRxTransfer+0xc8>)
 8006244:	400a      	ands	r2, r1
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	f383 8810 	msr	PRIMASK, r3
}
 8006252:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d118      	bne.n	800628e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	60bb      	str	r3, [r7, #8]
  return(result);
 8006262:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006266:	2301      	movs	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2110      	movs	r1, #16
 800627e:	438a      	bics	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	228c      	movs	r2, #140	; 0x8c
 8006292:	2120      	movs	r1, #32
 8006294:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b00e      	add	sp, #56	; 0x38
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	fffffedf 	.word	0xfffffedf
 80062b0:	effffffe 	.word	0xeffffffe

080062b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	225e      	movs	r2, #94	; 0x5e
 80062c6:	2100      	movs	r1, #0
 80062c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2256      	movs	r2, #86	; 0x56
 80062ce:	2100      	movs	r1, #0
 80062d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	0018      	movs	r0, r3
 80062d6:	f7ff fc05 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	46bd      	mov	sp, r7
 80062de:	b004      	add	sp, #16
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80062f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	2301      	movs	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f383 8810 	msr	PRIMASK, r3
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2140      	movs	r1, #64	; 0x40
 800630c:	438a      	bics	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f383 8810 	msr	PRIMASK, r3
}
 800631a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2288      	movs	r2, #136	; 0x88
 8006320:	2120      	movs	r1, #32
 8006322:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0018      	movs	r0, r3
 800632e:	f7ff fbd1 	bl	8005ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	46bd      	mov	sp, r7
 8006336:	b006      	add	sp, #24
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46bd      	mov	sp, r7
 8006346:	b002      	add	sp, #8
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	46bd      	mov	sp, r7
 8006356:	b002      	add	sp, #8
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	46bd      	mov	sp, r7
 8006366:	b002      	add	sp, #8
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2284      	movs	r2, #132	; 0x84
 8006378:	5c9b      	ldrb	r3, [r3, r2]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UARTEx_DisableFifoMode+0x16>
 800637e:	2302      	movs	r3, #2
 8006380:	e027      	b.n	80063d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2284      	movs	r2, #132	; 0x84
 8006386:	2101      	movs	r1, #1
 8006388:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2288      	movs	r2, #136	; 0x88
 800638e:	2124      	movs	r1, #36	; 0x24
 8006390:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2101      	movs	r1, #1
 80063a6:	438a      	bics	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80063ae:	4013      	ands	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2288      	movs	r2, #136	; 0x88
 80063c4:	2120      	movs	r1, #32
 80063c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2284      	movs	r2, #132	; 0x84
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b004      	add	sp, #16
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	dfffffff 	.word	0xdfffffff

080063e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2284      	movs	r2, #132	; 0x84
 80063ee:	5c9b      	ldrb	r3, [r3, r2]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e02e      	b.n	8006456 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2284      	movs	r2, #132	; 0x84
 80063fc:	2101      	movs	r1, #1
 80063fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2288      	movs	r2, #136	; 0x88
 8006404:	2124      	movs	r1, #36	; 0x24
 8006406:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2101      	movs	r1, #1
 800641c:	438a      	bics	r2, r1
 800641e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	08d9      	lsrs	r1, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0018      	movs	r0, r3
 8006438:	f000 f854 	bl	80064e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2288      	movs	r2, #136	; 0x88
 8006448:	2120      	movs	r1, #32
 800644a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2284      	movs	r2, #132	; 0x84
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2284      	movs	r2, #132	; 0x84
 800646e:	5c9b      	ldrb	r3, [r3, r2]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e02f      	b.n	80064d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2284      	movs	r2, #132	; 0x84
 800647c:	2101      	movs	r1, #1
 800647e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2288      	movs	r2, #136	; 0x88
 8006484:	2124      	movs	r1, #36	; 0x24
 8006486:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2101      	movs	r1, #1
 800649c:	438a      	bics	r2, r1
 800649e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	4a0e      	ldr	r2, [pc, #56]	; (80064e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	0019      	movs	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 f813 	bl	80064e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2288      	movs	r2, #136	; 0x88
 80064ca:	2120      	movs	r1, #32
 80064cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2284      	movs	r2, #132	; 0x84
 80064d2:	2100      	movs	r1, #0
 80064d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	b004      	add	sp, #16
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	f1ffffff 	.word	0xf1ffffff

080064e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	226a      	movs	r2, #106	; 0x6a
 80064f8:	2101      	movs	r1, #1
 80064fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2268      	movs	r2, #104	; 0x68
 8006500:	2101      	movs	r1, #1
 8006502:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006504:	e043      	b.n	800658e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006506:	260f      	movs	r6, #15
 8006508:	19bb      	adds	r3, r7, r6
 800650a:	2208      	movs	r2, #8
 800650c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800650e:	200e      	movs	r0, #14
 8006510:	183b      	adds	r3, r7, r0
 8006512:	2208      	movs	r2, #8
 8006514:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0e5b      	lsrs	r3, r3, #25
 800651e:	b2da      	uxtb	r2, r3
 8006520:	240d      	movs	r4, #13
 8006522:	193b      	adds	r3, r7, r4
 8006524:	2107      	movs	r1, #7
 8006526:	400a      	ands	r2, r1
 8006528:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	0f5b      	lsrs	r3, r3, #29
 8006532:	b2da      	uxtb	r2, r3
 8006534:	250c      	movs	r5, #12
 8006536:	197b      	adds	r3, r7, r5
 8006538:	2107      	movs	r1, #7
 800653a:	400a      	ands	r2, r1
 800653c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800653e:	183b      	adds	r3, r7, r0
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	197a      	adds	r2, r7, r5
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	4914      	ldr	r1, [pc, #80]	; (8006598 <UARTEx_SetNbDataToProcess+0xb4>)
 8006548:	5c8a      	ldrb	r2, [r1, r2]
 800654a:	435a      	muls	r2, r3
 800654c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800654e:	197b      	adds	r3, r7, r5
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	4a12      	ldr	r2, [pc, #72]	; (800659c <UARTEx_SetNbDataToProcess+0xb8>)
 8006554:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006556:	0019      	movs	r1, r3
 8006558:	f7f9 fe66 	bl	8000228 <__divsi3>
 800655c:	0003      	movs	r3, r0
 800655e:	b299      	uxth	r1, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	226a      	movs	r2, #106	; 0x6a
 8006564:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006566:	19bb      	adds	r3, r7, r6
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	193a      	adds	r2, r7, r4
 800656c:	7812      	ldrb	r2, [r2, #0]
 800656e:	490a      	ldr	r1, [pc, #40]	; (8006598 <UARTEx_SetNbDataToProcess+0xb4>)
 8006570:	5c8a      	ldrb	r2, [r1, r2]
 8006572:	435a      	muls	r2, r3
 8006574:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006576:	193b      	adds	r3, r7, r4
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <UARTEx_SetNbDataToProcess+0xb8>)
 800657c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800657e:	0019      	movs	r1, r3
 8006580:	f7f9 fe52 	bl	8000228 <__divsi3>
 8006584:	0003      	movs	r3, r0
 8006586:	b299      	uxth	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2268      	movs	r2, #104	; 0x68
 800658c:	5299      	strh	r1, [r3, r2]
}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	46bd      	mov	sp, r7
 8006592:	b005      	add	sp, #20
 8006594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	080073d4 	.word	0x080073d4
 800659c:	080073dc 	.word	0x080073dc

080065a0 <siprintf>:
 80065a0:	b40e      	push	{r1, r2, r3}
 80065a2:	b500      	push	{lr}
 80065a4:	490b      	ldr	r1, [pc, #44]	; (80065d4 <siprintf+0x34>)
 80065a6:	b09c      	sub	sp, #112	; 0x70
 80065a8:	ab1d      	add	r3, sp, #116	; 0x74
 80065aa:	9002      	str	r0, [sp, #8]
 80065ac:	9006      	str	r0, [sp, #24]
 80065ae:	9107      	str	r1, [sp, #28]
 80065b0:	9104      	str	r1, [sp, #16]
 80065b2:	4809      	ldr	r0, [pc, #36]	; (80065d8 <siprintf+0x38>)
 80065b4:	4909      	ldr	r1, [pc, #36]	; (80065dc <siprintf+0x3c>)
 80065b6:	cb04      	ldmia	r3!, {r2}
 80065b8:	9105      	str	r1, [sp, #20]
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	a902      	add	r1, sp, #8
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	f000 f9a2 	bl	8006908 <_svfiprintf_r>
 80065c4:	2200      	movs	r2, #0
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	b01c      	add	sp, #112	; 0x70
 80065cc:	bc08      	pop	{r3}
 80065ce:	b003      	add	sp, #12
 80065d0:	4718      	bx	r3
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	7fffffff 	.word	0x7fffffff
 80065d8:	20000070 	.word	0x20000070
 80065dc:	ffff0208 	.word	0xffff0208

080065e0 <memset>:
 80065e0:	0003      	movs	r3, r0
 80065e2:	1882      	adds	r2, r0, r2
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	7019      	strb	r1, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <__errno>:
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <__errno+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4770      	bx	lr
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	20000070 	.word	0x20000070

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	2600      	movs	r6, #0
 8006600:	4c0c      	ldr	r4, [pc, #48]	; (8006634 <__libc_init_array+0x38>)
 8006602:	4d0d      	ldr	r5, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006604:	1b64      	subs	r4, r4, r5
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	2600      	movs	r6, #0
 800660e:	f000 fe59 	bl	80072c4 <_init>
 8006612:	4c0a      	ldr	r4, [pc, #40]	; (800663c <__libc_init_array+0x40>)
 8006614:	4d0a      	ldr	r5, [pc, #40]	; (8006640 <__libc_init_array+0x44>)
 8006616:	1b64      	subs	r4, r4, r5
 8006618:	10a4      	asrs	r4, r4, #2
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	00b3      	lsls	r3, r6, #2
 8006622:	58eb      	ldr	r3, [r5, r3]
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	00b3      	lsls	r3, r6, #2
 800662c:	58eb      	ldr	r3, [r5, r3]
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	08007418 	.word	0x08007418
 8006638:	08007418 	.word	0x08007418
 800663c:	0800741c 	.word	0x0800741c
 8006640:	08007418 	.word	0x08007418

08006644 <__retarget_lock_acquire_recursive>:
 8006644:	4770      	bx	lr

08006646 <__retarget_lock_release_recursive>:
 8006646:	4770      	bx	lr

08006648 <_free_r>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	0005      	movs	r5, r0
 800664c:	2900      	cmp	r1, #0
 800664e:	d010      	beq.n	8006672 <_free_r+0x2a>
 8006650:	1f0c      	subs	r4, r1, #4
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	da00      	bge.n	800665a <_free_r+0x12>
 8006658:	18e4      	adds	r4, r4, r3
 800665a:	0028      	movs	r0, r5
 800665c:	f000 f8e2 	bl	8006824 <__malloc_lock>
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <_free_r+0x90>)
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <_free_r+0x2c>
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	6014      	str	r4, [r2, #0]
 800666c:	0028      	movs	r0, r5
 800666e:	f000 f8e1 	bl	8006834 <__malloc_unlock>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	42a3      	cmp	r3, r4
 8006676:	d908      	bls.n	800668a <_free_r+0x42>
 8006678:	6820      	ldr	r0, [r4, #0]
 800667a:	1821      	adds	r1, r4, r0
 800667c:	428b      	cmp	r3, r1
 800667e:	d1f3      	bne.n	8006668 <_free_r+0x20>
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	1809      	adds	r1, r1, r0
 8006686:	6021      	str	r1, [r4, #0]
 8006688:	e7ee      	b.n	8006668 <_free_r+0x20>
 800668a:	001a      	movs	r2, r3
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <_free_r+0x4e>
 8006692:	42a3      	cmp	r3, r4
 8006694:	d9f9      	bls.n	800668a <_free_r+0x42>
 8006696:	6811      	ldr	r1, [r2, #0]
 8006698:	1850      	adds	r0, r2, r1
 800669a:	42a0      	cmp	r0, r4
 800669c:	d10b      	bne.n	80066b6 <_free_r+0x6e>
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	1809      	adds	r1, r1, r0
 80066a2:	1850      	adds	r0, r2, r1
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	4283      	cmp	r3, r0
 80066a8:	d1e0      	bne.n	800666c <_free_r+0x24>
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	1841      	adds	r1, r0, r1
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	6053      	str	r3, [r2, #4]
 80066b4:	e7da      	b.n	800666c <_free_r+0x24>
 80066b6:	42a0      	cmp	r0, r4
 80066b8:	d902      	bls.n	80066c0 <_free_r+0x78>
 80066ba:	230c      	movs	r3, #12
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	e7d5      	b.n	800666c <_free_r+0x24>
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	1821      	adds	r1, r4, r0
 80066c4:	428b      	cmp	r3, r1
 80066c6:	d103      	bne.n	80066d0 <_free_r+0x88>
 80066c8:	6819      	ldr	r1, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	1809      	adds	r1, r1, r0
 80066ce:	6021      	str	r1, [r4, #0]
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6054      	str	r4, [r2, #4]
 80066d4:	e7ca      	b.n	800666c <_free_r+0x24>
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	200004b8 	.word	0x200004b8

080066dc <sbrk_aligned>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4e0f      	ldr	r6, [pc, #60]	; (800671c <sbrk_aligned+0x40>)
 80066e0:	000d      	movs	r5, r1
 80066e2:	6831      	ldr	r1, [r6, #0]
 80066e4:	0004      	movs	r4, r0
 80066e6:	2900      	cmp	r1, #0
 80066e8:	d102      	bne.n	80066f0 <sbrk_aligned+0x14>
 80066ea:	f000 fba1 	bl	8006e30 <_sbrk_r>
 80066ee:	6030      	str	r0, [r6, #0]
 80066f0:	0029      	movs	r1, r5
 80066f2:	0020      	movs	r0, r4
 80066f4:	f000 fb9c 	bl	8006e30 <_sbrk_r>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d00a      	beq.n	8006712 <sbrk_aligned+0x36>
 80066fc:	2303      	movs	r3, #3
 80066fe:	1cc5      	adds	r5, r0, #3
 8006700:	439d      	bics	r5, r3
 8006702:	42a8      	cmp	r0, r5
 8006704:	d007      	beq.n	8006716 <sbrk_aligned+0x3a>
 8006706:	1a29      	subs	r1, r5, r0
 8006708:	0020      	movs	r0, r4
 800670a:	f000 fb91 	bl	8006e30 <_sbrk_r>
 800670e:	3001      	adds	r0, #1
 8006710:	d101      	bne.n	8006716 <sbrk_aligned+0x3a>
 8006712:	2501      	movs	r5, #1
 8006714:	426d      	negs	r5, r5
 8006716:	0028      	movs	r0, r5
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	200004bc 	.word	0x200004bc

08006720 <_malloc_r>:
 8006720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006722:	2203      	movs	r2, #3
 8006724:	1ccb      	adds	r3, r1, #3
 8006726:	4393      	bics	r3, r2
 8006728:	3308      	adds	r3, #8
 800672a:	0006      	movs	r6, r0
 800672c:	001f      	movs	r7, r3
 800672e:	2b0c      	cmp	r3, #12
 8006730:	d238      	bcs.n	80067a4 <_malloc_r+0x84>
 8006732:	270c      	movs	r7, #12
 8006734:	42b9      	cmp	r1, r7
 8006736:	d837      	bhi.n	80067a8 <_malloc_r+0x88>
 8006738:	0030      	movs	r0, r6
 800673a:	f000 f873 	bl	8006824 <__malloc_lock>
 800673e:	4b38      	ldr	r3, [pc, #224]	; (8006820 <_malloc_r+0x100>)
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	001c      	movs	r4, r3
 8006746:	2c00      	cmp	r4, #0
 8006748:	d133      	bne.n	80067b2 <_malloc_r+0x92>
 800674a:	0039      	movs	r1, r7
 800674c:	0030      	movs	r0, r6
 800674e:	f7ff ffc5 	bl	80066dc <sbrk_aligned>
 8006752:	0004      	movs	r4, r0
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d15e      	bne.n	8006816 <_malloc_r+0xf6>
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	681c      	ldr	r4, [r3, #0]
 800675c:	0025      	movs	r5, r4
 800675e:	2d00      	cmp	r5, #0
 8006760:	d14e      	bne.n	8006800 <_malloc_r+0xe0>
 8006762:	2c00      	cmp	r4, #0
 8006764:	d051      	beq.n	800680a <_malloc_r+0xea>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	0029      	movs	r1, r5
 800676a:	18e3      	adds	r3, r4, r3
 800676c:	0030      	movs	r0, r6
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	f000 fb5e 	bl	8006e30 <_sbrk_r>
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	4283      	cmp	r3, r0
 8006778:	d147      	bne.n	800680a <_malloc_r+0xea>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	0030      	movs	r0, r6
 800677e:	1aff      	subs	r7, r7, r3
 8006780:	0039      	movs	r1, r7
 8006782:	f7ff ffab 	bl	80066dc <sbrk_aligned>
 8006786:	3001      	adds	r0, #1
 8006788:	d03f      	beq.n	800680a <_malloc_r+0xea>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	19db      	adds	r3, r3, r7
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	9b00      	ldr	r3, [sp, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d040      	beq.n	800681a <_malloc_r+0xfa>
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	42a2      	cmp	r2, r4
 800679c:	d133      	bne.n	8006806 <_malloc_r+0xe6>
 800679e:	2200      	movs	r2, #0
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	e014      	b.n	80067ce <_malloc_r+0xae>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dac5      	bge.n	8006734 <_malloc_r+0x14>
 80067a8:	230c      	movs	r3, #12
 80067aa:	2500      	movs	r5, #0
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	0028      	movs	r0, r5
 80067b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	1bc9      	subs	r1, r1, r7
 80067b6:	d420      	bmi.n	80067fa <_malloc_r+0xda>
 80067b8:	290b      	cmp	r1, #11
 80067ba:	d918      	bls.n	80067ee <_malloc_r+0xce>
 80067bc:	19e2      	adds	r2, r4, r7
 80067be:	6027      	str	r7, [r4, #0]
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d112      	bne.n	80067ea <_malloc_r+0xca>
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	6863      	ldr	r3, [r4, #4]
 80067ca:	6011      	str	r1, [r2, #0]
 80067cc:	6053      	str	r3, [r2, #4]
 80067ce:	0030      	movs	r0, r6
 80067d0:	0025      	movs	r5, r4
 80067d2:	f000 f82f 	bl	8006834 <__malloc_unlock>
 80067d6:	2207      	movs	r2, #7
 80067d8:	350b      	adds	r5, #11
 80067da:	1d23      	adds	r3, r4, #4
 80067dc:	4395      	bics	r5, r2
 80067de:	1aea      	subs	r2, r5, r3
 80067e0:	429d      	cmp	r5, r3
 80067e2:	d0e4      	beq.n	80067ae <_malloc_r+0x8e>
 80067e4:	1b5b      	subs	r3, r3, r5
 80067e6:	50a3      	str	r3, [r4, r2]
 80067e8:	e7e1      	b.n	80067ae <_malloc_r+0x8e>
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	e7ec      	b.n	80067c8 <_malloc_r+0xa8>
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	d1d5      	bne.n	80067a0 <_malloc_r+0x80>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e7e9      	b.n	80067ce <_malloc_r+0xae>
 80067fa:	0023      	movs	r3, r4
 80067fc:	6864      	ldr	r4, [r4, #4]
 80067fe:	e7a2      	b.n	8006746 <_malloc_r+0x26>
 8006800:	002c      	movs	r4, r5
 8006802:	686d      	ldr	r5, [r5, #4]
 8006804:	e7ab      	b.n	800675e <_malloc_r+0x3e>
 8006806:	0013      	movs	r3, r2
 8006808:	e7c4      	b.n	8006794 <_malloc_r+0x74>
 800680a:	230c      	movs	r3, #12
 800680c:	0030      	movs	r0, r6
 800680e:	6033      	str	r3, [r6, #0]
 8006810:	f000 f810 	bl	8006834 <__malloc_unlock>
 8006814:	e7cb      	b.n	80067ae <_malloc_r+0x8e>
 8006816:	6027      	str	r7, [r4, #0]
 8006818:	e7d9      	b.n	80067ce <_malloc_r+0xae>
 800681a:	605b      	str	r3, [r3, #4]
 800681c:	deff      	udf	#255	; 0xff
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	200004b8 	.word	0x200004b8

08006824 <__malloc_lock>:
 8006824:	b510      	push	{r4, lr}
 8006826:	4802      	ldr	r0, [pc, #8]	; (8006830 <__malloc_lock+0xc>)
 8006828:	f7ff ff0c 	bl	8006644 <__retarget_lock_acquire_recursive>
 800682c:	bd10      	pop	{r4, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	200004b4 	.word	0x200004b4

08006834 <__malloc_unlock>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4802      	ldr	r0, [pc, #8]	; (8006840 <__malloc_unlock+0xc>)
 8006838:	f7ff ff05 	bl	8006646 <__retarget_lock_release_recursive>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	200004b4 	.word	0x200004b4

08006844 <__ssputs_r>:
 8006844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006846:	b085      	sub	sp, #20
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	9203      	str	r2, [sp, #12]
 800684c:	688e      	ldr	r6, [r1, #8]
 800684e:	9a01      	ldr	r2, [sp, #4]
 8006850:	0007      	movs	r7, r0
 8006852:	000c      	movs	r4, r1
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	4296      	cmp	r6, r2
 8006858:	d831      	bhi.n	80068be <__ssputs_r+0x7a>
 800685a:	898a      	ldrh	r2, [r1, #12]
 800685c:	2190      	movs	r1, #144	; 0x90
 800685e:	00c9      	lsls	r1, r1, #3
 8006860:	420a      	tst	r2, r1
 8006862:	d029      	beq.n	80068b8 <__ssputs_r+0x74>
 8006864:	2003      	movs	r0, #3
 8006866:	6921      	ldr	r1, [r4, #16]
 8006868:	1a5b      	subs	r3, r3, r1
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	6963      	ldr	r3, [r4, #20]
 800686e:	4343      	muls	r3, r0
 8006870:	0fdd      	lsrs	r5, r3, #31
 8006872:	18ed      	adds	r5, r5, r3
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	9802      	ldr	r0, [sp, #8]
 8006878:	3301      	adds	r3, #1
 800687a:	181b      	adds	r3, r3, r0
 800687c:	106d      	asrs	r5, r5, #1
 800687e:	42ab      	cmp	r3, r5
 8006880:	d900      	bls.n	8006884 <__ssputs_r+0x40>
 8006882:	001d      	movs	r5, r3
 8006884:	0552      	lsls	r2, r2, #21
 8006886:	d529      	bpl.n	80068dc <__ssputs_r+0x98>
 8006888:	0029      	movs	r1, r5
 800688a:	0038      	movs	r0, r7
 800688c:	f7ff ff48 	bl	8006720 <_malloc_r>
 8006890:	1e06      	subs	r6, r0, #0
 8006892:	d02d      	beq.n	80068f0 <__ssputs_r+0xac>
 8006894:	9a02      	ldr	r2, [sp, #8]
 8006896:	6921      	ldr	r1, [r4, #16]
 8006898:	f000 fae7 	bl	8006e6a <memcpy>
 800689c:	89a2      	ldrh	r2, [r4, #12]
 800689e:	4b19      	ldr	r3, [pc, #100]	; (8006904 <__ssputs_r+0xc0>)
 80068a0:	401a      	ands	r2, r3
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	4313      	orrs	r3, r2
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	6126      	str	r6, [r4, #16]
 80068ac:	18f6      	adds	r6, r6, r3
 80068ae:	6026      	str	r6, [r4, #0]
 80068b0:	6165      	str	r5, [r4, #20]
 80068b2:	9e01      	ldr	r6, [sp, #4]
 80068b4:	1aed      	subs	r5, r5, r3
 80068b6:	60a5      	str	r5, [r4, #8]
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	429e      	cmp	r6, r3
 80068bc:	d900      	bls.n	80068c0 <__ssputs_r+0x7c>
 80068be:	9e01      	ldr	r6, [sp, #4]
 80068c0:	0032      	movs	r2, r6
 80068c2:	9903      	ldr	r1, [sp, #12]
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	f000 fa9f 	bl	8006e08 <memmove>
 80068ca:	2000      	movs	r0, #0
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	1b9b      	subs	r3, r3, r6
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	199b      	adds	r3, r3, r6
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	b005      	add	sp, #20
 80068da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068dc:	002a      	movs	r2, r5
 80068de:	0038      	movs	r0, r7
 80068e0:	f000 facc 	bl	8006e7c <_realloc_r>
 80068e4:	1e06      	subs	r6, r0, #0
 80068e6:	d1df      	bne.n	80068a8 <__ssputs_r+0x64>
 80068e8:	0038      	movs	r0, r7
 80068ea:	6921      	ldr	r1, [r4, #16]
 80068ec:	f7ff feac 	bl	8006648 <_free_r>
 80068f0:	230c      	movs	r3, #12
 80068f2:	2001      	movs	r0, #1
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	89a2      	ldrh	r2, [r4, #12]
 80068f8:	3334      	adds	r3, #52	; 0x34
 80068fa:	4313      	orrs	r3, r2
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	4240      	negs	r0, r0
 8006900:	e7ea      	b.n	80068d8 <__ssputs_r+0x94>
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	fffffb7f 	.word	0xfffffb7f

08006908 <_svfiprintf_r>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	b0a1      	sub	sp, #132	; 0x84
 800690c:	9003      	str	r0, [sp, #12]
 800690e:	001d      	movs	r5, r3
 8006910:	898b      	ldrh	r3, [r1, #12]
 8006912:	000f      	movs	r7, r1
 8006914:	0016      	movs	r6, r2
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	d511      	bpl.n	800693e <_svfiprintf_r+0x36>
 800691a:	690b      	ldr	r3, [r1, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10e      	bne.n	800693e <_svfiprintf_r+0x36>
 8006920:	2140      	movs	r1, #64	; 0x40
 8006922:	f7ff fefd 	bl	8006720 <_malloc_r>
 8006926:	6038      	str	r0, [r7, #0]
 8006928:	6138      	str	r0, [r7, #16]
 800692a:	2800      	cmp	r0, #0
 800692c:	d105      	bne.n	800693a <_svfiprintf_r+0x32>
 800692e:	230c      	movs	r3, #12
 8006930:	9a03      	ldr	r2, [sp, #12]
 8006932:	3801      	subs	r0, #1
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	b021      	add	sp, #132	; 0x84
 8006938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	ac08      	add	r4, sp, #32
 8006942:	6163      	str	r3, [r4, #20]
 8006944:	3320      	adds	r3, #32
 8006946:	7663      	strb	r3, [r4, #25]
 8006948:	3310      	adds	r3, #16
 800694a:	76a3      	strb	r3, [r4, #26]
 800694c:	9507      	str	r5, [sp, #28]
 800694e:	0035      	movs	r5, r6
 8006950:	782b      	ldrb	r3, [r5, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <_svfiprintf_r+0x52>
 8006956:	2b25      	cmp	r3, #37	; 0x25
 8006958:	d148      	bne.n	80069ec <_svfiprintf_r+0xe4>
 800695a:	1bab      	subs	r3, r5, r6
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	42b5      	cmp	r5, r6
 8006960:	d00b      	beq.n	800697a <_svfiprintf_r+0x72>
 8006962:	0032      	movs	r2, r6
 8006964:	0039      	movs	r1, r7
 8006966:	9803      	ldr	r0, [sp, #12]
 8006968:	f7ff ff6c 	bl	8006844 <__ssputs_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d100      	bne.n	8006972 <_svfiprintf_r+0x6a>
 8006970:	e0af      	b.n	8006ad2 <_svfiprintf_r+0x1ca>
 8006972:	6963      	ldr	r3, [r4, #20]
 8006974:	9a05      	ldr	r2, [sp, #20]
 8006976:	189b      	adds	r3, r3, r2
 8006978:	6163      	str	r3, [r4, #20]
 800697a:	782b      	ldrb	r3, [r5, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d100      	bne.n	8006982 <_svfiprintf_r+0x7a>
 8006980:	e0a7      	b.n	8006ad2 <_svfiprintf_r+0x1ca>
 8006982:	2201      	movs	r2, #1
 8006984:	2300      	movs	r3, #0
 8006986:	4252      	negs	r2, r2
 8006988:	6062      	str	r2, [r4, #4]
 800698a:	a904      	add	r1, sp, #16
 800698c:	3254      	adds	r2, #84	; 0x54
 800698e:	1852      	adds	r2, r2, r1
 8006990:	1c6e      	adds	r6, r5, #1
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	60e3      	str	r3, [r4, #12]
 8006996:	60a3      	str	r3, [r4, #8]
 8006998:	7013      	strb	r3, [r2, #0]
 800699a:	65a3      	str	r3, [r4, #88]	; 0x58
 800699c:	4b55      	ldr	r3, [pc, #340]	; (8006af4 <_svfiprintf_r+0x1ec>)
 800699e:	2205      	movs	r2, #5
 80069a0:	0018      	movs	r0, r3
 80069a2:	7831      	ldrb	r1, [r6, #0]
 80069a4:	9305      	str	r3, [sp, #20]
 80069a6:	f000 fa55 	bl	8006e54 <memchr>
 80069aa:	1c75      	adds	r5, r6, #1
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d11f      	bne.n	80069f0 <_svfiprintf_r+0xe8>
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	06d3      	lsls	r3, r2, #27
 80069b4:	d504      	bpl.n	80069c0 <_svfiprintf_r+0xb8>
 80069b6:	2353      	movs	r3, #83	; 0x53
 80069b8:	a904      	add	r1, sp, #16
 80069ba:	185b      	adds	r3, r3, r1
 80069bc:	2120      	movs	r1, #32
 80069be:	7019      	strb	r1, [r3, #0]
 80069c0:	0713      	lsls	r3, r2, #28
 80069c2:	d504      	bpl.n	80069ce <_svfiprintf_r+0xc6>
 80069c4:	2353      	movs	r3, #83	; 0x53
 80069c6:	a904      	add	r1, sp, #16
 80069c8:	185b      	adds	r3, r3, r1
 80069ca:	212b      	movs	r1, #43	; 0x2b
 80069cc:	7019      	strb	r1, [r3, #0]
 80069ce:	7833      	ldrb	r3, [r6, #0]
 80069d0:	2b2a      	cmp	r3, #42	; 0x2a
 80069d2:	d016      	beq.n	8006a02 <_svfiprintf_r+0xfa>
 80069d4:	0035      	movs	r5, r6
 80069d6:	2100      	movs	r1, #0
 80069d8:	200a      	movs	r0, #10
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	782a      	ldrb	r2, [r5, #0]
 80069de:	1c6e      	adds	r6, r5, #1
 80069e0:	3a30      	subs	r2, #48	; 0x30
 80069e2:	2a09      	cmp	r2, #9
 80069e4:	d94e      	bls.n	8006a84 <_svfiprintf_r+0x17c>
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d111      	bne.n	8006a0e <_svfiprintf_r+0x106>
 80069ea:	e017      	b.n	8006a1c <_svfiprintf_r+0x114>
 80069ec:	3501      	adds	r5, #1
 80069ee:	e7af      	b.n	8006950 <_svfiprintf_r+0x48>
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	1ac0      	subs	r0, r0, r3
 80069f6:	2301      	movs	r3, #1
 80069f8:	4083      	lsls	r3, r0
 80069fa:	4313      	orrs	r3, r2
 80069fc:	002e      	movs	r6, r5
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	e7cc      	b.n	800699c <_svfiprintf_r+0x94>
 8006a02:	9b07      	ldr	r3, [sp, #28]
 8006a04:	1d19      	adds	r1, r3, #4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	9107      	str	r1, [sp, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	db01      	blt.n	8006a12 <_svfiprintf_r+0x10a>
 8006a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a10:	e004      	b.n	8006a1c <_svfiprintf_r+0x114>
 8006a12:	425b      	negs	r3, r3
 8006a14:	60e3      	str	r3, [r4, #12]
 8006a16:	2302      	movs	r3, #2
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	782b      	ldrb	r3, [r5, #0]
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d10a      	bne.n	8006a38 <_svfiprintf_r+0x130>
 8006a22:	786b      	ldrb	r3, [r5, #1]
 8006a24:	2b2a      	cmp	r3, #42	; 0x2a
 8006a26:	d135      	bne.n	8006a94 <_svfiprintf_r+0x18c>
 8006a28:	9b07      	ldr	r3, [sp, #28]
 8006a2a:	3502      	adds	r5, #2
 8006a2c:	1d1a      	adds	r2, r3, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	9207      	str	r2, [sp, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	db2b      	blt.n	8006a8e <_svfiprintf_r+0x186>
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	4e2f      	ldr	r6, [pc, #188]	; (8006af8 <_svfiprintf_r+0x1f0>)
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	0030      	movs	r0, r6
 8006a3e:	7829      	ldrb	r1, [r5, #0]
 8006a40:	f000 fa08 	bl	8006e54 <memchr>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d006      	beq.n	8006a56 <_svfiprintf_r+0x14e>
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	1b80      	subs	r0, r0, r6
 8006a4c:	4083      	lsls	r3, r0
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	3501      	adds	r5, #1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	7829      	ldrb	r1, [r5, #0]
 8006a58:	2206      	movs	r2, #6
 8006a5a:	4828      	ldr	r0, [pc, #160]	; (8006afc <_svfiprintf_r+0x1f4>)
 8006a5c:	1c6e      	adds	r6, r5, #1
 8006a5e:	7621      	strb	r1, [r4, #24]
 8006a60:	f000 f9f8 	bl	8006e54 <memchr>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d03c      	beq.n	8006ae2 <_svfiprintf_r+0x1da>
 8006a68:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <_svfiprintf_r+0x1f8>)
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d125      	bne.n	8006aba <_svfiprintf_r+0x1b2>
 8006a6e:	2207      	movs	r2, #7
 8006a70:	9b07      	ldr	r3, [sp, #28]
 8006a72:	3307      	adds	r3, #7
 8006a74:	4393      	bics	r3, r2
 8006a76:	3308      	adds	r3, #8
 8006a78:	9307      	str	r3, [sp, #28]
 8006a7a:	6963      	ldr	r3, [r4, #20]
 8006a7c:	9a04      	ldr	r2, [sp, #16]
 8006a7e:	189b      	adds	r3, r3, r2
 8006a80:	6163      	str	r3, [r4, #20]
 8006a82:	e764      	b.n	800694e <_svfiprintf_r+0x46>
 8006a84:	4343      	muls	r3, r0
 8006a86:	0035      	movs	r5, r6
 8006a88:	2101      	movs	r1, #1
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	e7a6      	b.n	80069dc <_svfiprintf_r+0xd4>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	425b      	negs	r3, r3
 8006a92:	e7d0      	b.n	8006a36 <_svfiprintf_r+0x12e>
 8006a94:	2300      	movs	r3, #0
 8006a96:	200a      	movs	r0, #10
 8006a98:	001a      	movs	r2, r3
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	7829      	ldrb	r1, [r5, #0]
 8006aa0:	1c6e      	adds	r6, r5, #1
 8006aa2:	3930      	subs	r1, #48	; 0x30
 8006aa4:	2909      	cmp	r1, #9
 8006aa6:	d903      	bls.n	8006ab0 <_svfiprintf_r+0x1a8>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0c5      	beq.n	8006a38 <_svfiprintf_r+0x130>
 8006aac:	9209      	str	r2, [sp, #36]	; 0x24
 8006aae:	e7c3      	b.n	8006a38 <_svfiprintf_r+0x130>
 8006ab0:	4342      	muls	r2, r0
 8006ab2:	0035      	movs	r5, r6
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	1852      	adds	r2, r2, r1
 8006ab8:	e7f1      	b.n	8006a9e <_svfiprintf_r+0x196>
 8006aba:	aa07      	add	r2, sp, #28
 8006abc:	9200      	str	r2, [sp, #0]
 8006abe:	0021      	movs	r1, r4
 8006ac0:	003a      	movs	r2, r7
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <_svfiprintf_r+0x1fc>)
 8006ac4:	9803      	ldr	r0, [sp, #12]
 8006ac6:	e000      	b.n	8006aca <_svfiprintf_r+0x1c2>
 8006ac8:	bf00      	nop
 8006aca:	9004      	str	r0, [sp, #16]
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	d1d3      	bne.n	8006a7a <_svfiprintf_r+0x172>
 8006ad2:	89bb      	ldrh	r3, [r7, #12]
 8006ad4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	d400      	bmi.n	8006adc <_svfiprintf_r+0x1d4>
 8006ada:	e72c      	b.n	8006936 <_svfiprintf_r+0x2e>
 8006adc:	2001      	movs	r0, #1
 8006ade:	4240      	negs	r0, r0
 8006ae0:	e729      	b.n	8006936 <_svfiprintf_r+0x2e>
 8006ae2:	aa07      	add	r2, sp, #28
 8006ae4:	9200      	str	r2, [sp, #0]
 8006ae6:	0021      	movs	r1, r4
 8006ae8:	003a      	movs	r2, r7
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <_svfiprintf_r+0x1fc>)
 8006aec:	9803      	ldr	r0, [sp, #12]
 8006aee:	f000 f87b 	bl	8006be8 <_printf_i>
 8006af2:	e7ea      	b.n	8006aca <_svfiprintf_r+0x1c2>
 8006af4:	080073e4 	.word	0x080073e4
 8006af8:	080073ea 	.word	0x080073ea
 8006afc:	080073ee 	.word	0x080073ee
 8006b00:	00000000 	.word	0x00000000
 8006b04:	08006845 	.word	0x08006845

08006b08 <_printf_common>:
 8006b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0a:	0016      	movs	r6, r2
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	688a      	ldr	r2, [r1, #8]
 8006b10:	690b      	ldr	r3, [r1, #16]
 8006b12:	000c      	movs	r4, r1
 8006b14:	9000      	str	r0, [sp, #0]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	da00      	bge.n	8006b1c <_printf_common+0x14>
 8006b1a:	0013      	movs	r3, r2
 8006b1c:	0022      	movs	r2, r4
 8006b1e:	6033      	str	r3, [r6, #0]
 8006b20:	3243      	adds	r2, #67	; 0x43
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	2a00      	cmp	r2, #0
 8006b26:	d001      	beq.n	8006b2c <_printf_common+0x24>
 8006b28:	3301      	adds	r3, #1
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	069b      	lsls	r3, r3, #26
 8006b30:	d502      	bpl.n	8006b38 <_printf_common+0x30>
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	3302      	adds	r3, #2
 8006b36:	6033      	str	r3, [r6, #0]
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	2306      	movs	r3, #6
 8006b3c:	0015      	movs	r5, r2
 8006b3e:	401d      	ands	r5, r3
 8006b40:	421a      	tst	r2, r3
 8006b42:	d027      	beq.n	8006b94 <_printf_common+0x8c>
 8006b44:	0023      	movs	r3, r4
 8006b46:	3343      	adds	r3, #67	; 0x43
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	4193      	sbcs	r3, r2
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	0692      	lsls	r2, r2, #26
 8006b52:	d430      	bmi.n	8006bb6 <_printf_common+0xae>
 8006b54:	0022      	movs	r2, r4
 8006b56:	9901      	ldr	r1, [sp, #4]
 8006b58:	9800      	ldr	r0, [sp, #0]
 8006b5a:	9d08      	ldr	r5, [sp, #32]
 8006b5c:	3243      	adds	r2, #67	; 0x43
 8006b5e:	47a8      	blx	r5
 8006b60:	3001      	adds	r0, #1
 8006b62:	d025      	beq.n	8006bb0 <_printf_common+0xa8>
 8006b64:	2206      	movs	r2, #6
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	2500      	movs	r5, #0
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d105      	bne.n	8006b7c <_printf_common+0x74>
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	68e5      	ldr	r5, [r4, #12]
 8006b74:	1aed      	subs	r5, r5, r3
 8006b76:	43eb      	mvns	r3, r5
 8006b78:	17db      	asrs	r3, r3, #31
 8006b7a:	401d      	ands	r5, r3
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	6922      	ldr	r2, [r4, #16]
 8006b80:	4293      	cmp	r3, r2
 8006b82:	dd01      	ble.n	8006b88 <_printf_common+0x80>
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	18ed      	adds	r5, r5, r3
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42b5      	cmp	r5, r6
 8006b8c:	d120      	bne.n	8006bd0 <_printf_common+0xc8>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e010      	b.n	8006bb4 <_printf_common+0xac>
 8006b92:	3501      	adds	r5, #1
 8006b94:	68e3      	ldr	r3, [r4, #12]
 8006b96:	6832      	ldr	r2, [r6, #0]
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	42ab      	cmp	r3, r5
 8006b9c:	ddd2      	ble.n	8006b44 <_printf_common+0x3c>
 8006b9e:	0022      	movs	r2, r4
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	9901      	ldr	r1, [sp, #4]
 8006ba4:	9800      	ldr	r0, [sp, #0]
 8006ba6:	9f08      	ldr	r7, [sp, #32]
 8006ba8:	3219      	adds	r2, #25
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d1f0      	bne.n	8006b92 <_printf_common+0x8a>
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	4240      	negs	r0, r0
 8006bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bb6:	2030      	movs	r0, #48	; 0x30
 8006bb8:	18e1      	adds	r1, r4, r3
 8006bba:	3143      	adds	r1, #67	; 0x43
 8006bbc:	7008      	strb	r0, [r1, #0]
 8006bbe:	0021      	movs	r1, r4
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	3145      	adds	r1, #69	; 0x45
 8006bc4:	7809      	ldrb	r1, [r1, #0]
 8006bc6:	18a2      	adds	r2, r4, r2
 8006bc8:	3243      	adds	r2, #67	; 0x43
 8006bca:	3302      	adds	r3, #2
 8006bcc:	7011      	strb	r1, [r2, #0]
 8006bce:	e7c1      	b.n	8006b54 <_printf_common+0x4c>
 8006bd0:	0022      	movs	r2, r4
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	9901      	ldr	r1, [sp, #4]
 8006bd6:	9800      	ldr	r0, [sp, #0]
 8006bd8:	9f08      	ldr	r7, [sp, #32]
 8006bda:	321a      	adds	r2, #26
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	d0e6      	beq.n	8006bb0 <_printf_common+0xa8>
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7d1      	b.n	8006b8a <_printf_common+0x82>
	...

08006be8 <_printf_i>:
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	b08b      	sub	sp, #44	; 0x2c
 8006bec:	9206      	str	r2, [sp, #24]
 8006bee:	000a      	movs	r2, r1
 8006bf0:	3243      	adds	r2, #67	; 0x43
 8006bf2:	9307      	str	r3, [sp, #28]
 8006bf4:	9005      	str	r0, [sp, #20]
 8006bf6:	9204      	str	r2, [sp, #16]
 8006bf8:	7e0a      	ldrb	r2, [r1, #24]
 8006bfa:	000c      	movs	r4, r1
 8006bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bfe:	2a78      	cmp	r2, #120	; 0x78
 8006c00:	d809      	bhi.n	8006c16 <_printf_i+0x2e>
 8006c02:	2a62      	cmp	r2, #98	; 0x62
 8006c04:	d80b      	bhi.n	8006c1e <_printf_i+0x36>
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d100      	bne.n	8006c0c <_printf_i+0x24>
 8006c0a:	e0be      	b.n	8006d8a <_printf_i+0x1a2>
 8006c0c:	497c      	ldr	r1, [pc, #496]	; (8006e00 <_printf_i+0x218>)
 8006c0e:	9103      	str	r1, [sp, #12]
 8006c10:	2a58      	cmp	r2, #88	; 0x58
 8006c12:	d100      	bne.n	8006c16 <_printf_i+0x2e>
 8006c14:	e093      	b.n	8006d3e <_printf_i+0x156>
 8006c16:	0026      	movs	r6, r4
 8006c18:	3642      	adds	r6, #66	; 0x42
 8006c1a:	7032      	strb	r2, [r6, #0]
 8006c1c:	e022      	b.n	8006c64 <_printf_i+0x7c>
 8006c1e:	0010      	movs	r0, r2
 8006c20:	3863      	subs	r0, #99	; 0x63
 8006c22:	2815      	cmp	r0, #21
 8006c24:	d8f7      	bhi.n	8006c16 <_printf_i+0x2e>
 8006c26:	f7f9 fa6b 	bl	8000100 <__gnu_thumb1_case_shi>
 8006c2a:	0016      	.short	0x0016
 8006c2c:	fff6001f 	.word	0xfff6001f
 8006c30:	fff6fff6 	.word	0xfff6fff6
 8006c34:	001ffff6 	.word	0x001ffff6
 8006c38:	fff6fff6 	.word	0xfff6fff6
 8006c3c:	fff6fff6 	.word	0xfff6fff6
 8006c40:	003600a3 	.word	0x003600a3
 8006c44:	fff60083 	.word	0xfff60083
 8006c48:	00b4fff6 	.word	0x00b4fff6
 8006c4c:	0036fff6 	.word	0x0036fff6
 8006c50:	fff6fff6 	.word	0xfff6fff6
 8006c54:	0087      	.short	0x0087
 8006c56:	0026      	movs	r6, r4
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	3642      	adds	r6, #66	; 0x42
 8006c5c:	1d11      	adds	r1, r2, #4
 8006c5e:	6019      	str	r1, [r3, #0]
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	7033      	strb	r3, [r6, #0]
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0a2      	b.n	8006dae <_printf_i+0x1c6>
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	6809      	ldr	r1, [r1, #0]
 8006c6c:	1d02      	adds	r2, r0, #4
 8006c6e:	060d      	lsls	r5, r1, #24
 8006c70:	d50b      	bpl.n	8006c8a <_printf_i+0xa2>
 8006c72:	6805      	ldr	r5, [r0, #0]
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	da03      	bge.n	8006c82 <_printf_i+0x9a>
 8006c7a:	232d      	movs	r3, #45	; 0x2d
 8006c7c:	9a04      	ldr	r2, [sp, #16]
 8006c7e:	426d      	negs	r5, r5
 8006c80:	7013      	strb	r3, [r2, #0]
 8006c82:	4b5f      	ldr	r3, [pc, #380]	; (8006e00 <_printf_i+0x218>)
 8006c84:	270a      	movs	r7, #10
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	e01b      	b.n	8006cc2 <_printf_i+0xda>
 8006c8a:	6805      	ldr	r5, [r0, #0]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	0649      	lsls	r1, r1, #25
 8006c90:	d5f1      	bpl.n	8006c76 <_printf_i+0x8e>
 8006c92:	b22d      	sxth	r5, r5
 8006c94:	e7ef      	b.n	8006c76 <_printf_i+0x8e>
 8006c96:	680d      	ldr	r5, [r1, #0]
 8006c98:	6819      	ldr	r1, [r3, #0]
 8006c9a:	1d08      	adds	r0, r1, #4
 8006c9c:	6018      	str	r0, [r3, #0]
 8006c9e:	062e      	lsls	r6, r5, #24
 8006ca0:	d501      	bpl.n	8006ca6 <_printf_i+0xbe>
 8006ca2:	680d      	ldr	r5, [r1, #0]
 8006ca4:	e003      	b.n	8006cae <_printf_i+0xc6>
 8006ca6:	066d      	lsls	r5, r5, #25
 8006ca8:	d5fb      	bpl.n	8006ca2 <_printf_i+0xba>
 8006caa:	680d      	ldr	r5, [r1, #0]
 8006cac:	b2ad      	uxth	r5, r5
 8006cae:	4b54      	ldr	r3, [pc, #336]	; (8006e00 <_printf_i+0x218>)
 8006cb0:	2708      	movs	r7, #8
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	2a6f      	cmp	r2, #111	; 0x6f
 8006cb6:	d000      	beq.n	8006cba <_printf_i+0xd2>
 8006cb8:	3702      	adds	r7, #2
 8006cba:	0023      	movs	r3, r4
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	3343      	adds	r3, #67	; 0x43
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	60a3      	str	r3, [r4, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	db03      	blt.n	8006cd2 <_printf_i+0xea>
 8006cca:	2104      	movs	r1, #4
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	438a      	bics	r2, r1
 8006cd0:	6022      	str	r2, [r4, #0]
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	d102      	bne.n	8006cdc <_printf_i+0xf4>
 8006cd6:	9e04      	ldr	r6, [sp, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <_printf_i+0x10e>
 8006cdc:	9e04      	ldr	r6, [sp, #16]
 8006cde:	0028      	movs	r0, r5
 8006ce0:	0039      	movs	r1, r7
 8006ce2:	f7f9 fa9d 	bl	8000220 <__aeabi_uidivmod>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	3e01      	subs	r6, #1
 8006cea:	5c5b      	ldrb	r3, [r3, r1]
 8006cec:	7033      	strb	r3, [r6, #0]
 8006cee:	002b      	movs	r3, r5
 8006cf0:	0005      	movs	r5, r0
 8006cf2:	429f      	cmp	r7, r3
 8006cf4:	d9f3      	bls.n	8006cde <_printf_i+0xf6>
 8006cf6:	2f08      	cmp	r7, #8
 8006cf8:	d109      	bne.n	8006d0e <_printf_i+0x126>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	07db      	lsls	r3, r3, #31
 8006cfe:	d506      	bpl.n	8006d0e <_printf_i+0x126>
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	dc02      	bgt.n	8006d0e <_printf_i+0x126>
 8006d08:	2330      	movs	r3, #48	; 0x30
 8006d0a:	3e01      	subs	r6, #1
 8006d0c:	7033      	strb	r3, [r6, #0]
 8006d0e:	9b04      	ldr	r3, [sp, #16]
 8006d10:	1b9b      	subs	r3, r3, r6
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	0021      	movs	r1, r4
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	9805      	ldr	r0, [sp, #20]
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	aa09      	add	r2, sp, #36	; 0x24
 8006d20:	f7ff fef2 	bl	8006b08 <_printf_common>
 8006d24:	3001      	adds	r0, #1
 8006d26:	d147      	bne.n	8006db8 <_printf_i+0x1d0>
 8006d28:	2001      	movs	r0, #1
 8006d2a:	4240      	negs	r0, r0
 8006d2c:	b00b      	add	sp, #44	; 0x2c
 8006d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d30:	2220      	movs	r2, #32
 8006d32:	6809      	ldr	r1, [r1, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	6022      	str	r2, [r4, #0]
 8006d38:	2278      	movs	r2, #120	; 0x78
 8006d3a:	4932      	ldr	r1, [pc, #200]	; (8006e04 <_printf_i+0x21c>)
 8006d3c:	9103      	str	r1, [sp, #12]
 8006d3e:	0021      	movs	r1, r4
 8006d40:	3145      	adds	r1, #69	; 0x45
 8006d42:	700a      	strb	r2, [r1, #0]
 8006d44:	6819      	ldr	r1, [r3, #0]
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	c920      	ldmia	r1!, {r5}
 8006d4a:	0610      	lsls	r0, r2, #24
 8006d4c:	d402      	bmi.n	8006d54 <_printf_i+0x16c>
 8006d4e:	0650      	lsls	r0, r2, #25
 8006d50:	d500      	bpl.n	8006d54 <_printf_i+0x16c>
 8006d52:	b2ad      	uxth	r5, r5
 8006d54:	6019      	str	r1, [r3, #0]
 8006d56:	07d3      	lsls	r3, r2, #31
 8006d58:	d502      	bpl.n	8006d60 <_printf_i+0x178>
 8006d5a:	2320      	movs	r3, #32
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	2710      	movs	r7, #16
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	d1a9      	bne.n	8006cba <_printf_i+0xd2>
 8006d66:	2220      	movs	r2, #32
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	4393      	bics	r3, r2
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	e7a4      	b.n	8006cba <_printf_i+0xd2>
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	680d      	ldr	r5, [r1, #0]
 8006d74:	1d10      	adds	r0, r2, #4
 8006d76:	6949      	ldr	r1, [r1, #20]
 8006d78:	6018      	str	r0, [r3, #0]
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	062e      	lsls	r6, r5, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0x19c>
 8006d80:	6019      	str	r1, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0x1a2>
 8006d84:	066d      	lsls	r5, r5, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0x198>
 8006d88:	8019      	strh	r1, [r3, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9e04      	ldr	r6, [sp, #16]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	e7c0      	b.n	8006d14 <_printf_i+0x12c>
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	1d11      	adds	r1, r2, #4
 8006d96:	6019      	str	r1, [r3, #0]
 8006d98:	6816      	ldr	r6, [r2, #0]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	0030      	movs	r0, r6
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	f000 f858 	bl	8006e54 <memchr>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d001      	beq.n	8006dac <_printf_i+0x1c4>
 8006da8:	1b80      	subs	r0, r0, r6
 8006daa:	6060      	str	r0, [r4, #4]
 8006dac:	6863      	ldr	r3, [r4, #4]
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	2300      	movs	r3, #0
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	7013      	strb	r3, [r2, #0]
 8006db6:	e7ad      	b.n	8006d14 <_printf_i+0x12c>
 8006db8:	0032      	movs	r2, r6
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	9906      	ldr	r1, [sp, #24]
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	9d07      	ldr	r5, [sp, #28]
 8006dc2:	47a8      	blx	r5
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d0af      	beq.n	8006d28 <_printf_i+0x140>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	079b      	lsls	r3, r3, #30
 8006dcc:	d415      	bmi.n	8006dfa <_printf_i+0x212>
 8006dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd0:	68e0      	ldr	r0, [r4, #12]
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	daaa      	bge.n	8006d2c <_printf_i+0x144>
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	e7a8      	b.n	8006d2c <_printf_i+0x144>
 8006dda:	0022      	movs	r2, r4
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9906      	ldr	r1, [sp, #24]
 8006de0:	9805      	ldr	r0, [sp, #20]
 8006de2:	9e07      	ldr	r6, [sp, #28]
 8006de4:	3219      	adds	r2, #25
 8006de6:	47b0      	blx	r6
 8006de8:	3001      	adds	r0, #1
 8006dea:	d09d      	beq.n	8006d28 <_printf_i+0x140>
 8006dec:	3501      	adds	r5, #1
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dcf0      	bgt.n	8006dda <_printf_i+0x1f2>
 8006df8:	e7e9      	b.n	8006dce <_printf_i+0x1e6>
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	e7f7      	b.n	8006dee <_printf_i+0x206>
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	080073f5 	.word	0x080073f5
 8006e04:	08007406 	.word	0x08007406

08006e08 <memmove>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4288      	cmp	r0, r1
 8006e0c:	d902      	bls.n	8006e14 <memmove+0xc>
 8006e0e:	188b      	adds	r3, r1, r2
 8006e10:	4298      	cmp	r0, r3
 8006e12:	d303      	bcc.n	8006e1c <memmove+0x14>
 8006e14:	2300      	movs	r3, #0
 8006e16:	e007      	b.n	8006e28 <memmove+0x20>
 8006e18:	5c8b      	ldrb	r3, [r1, r2]
 8006e1a:	5483      	strb	r3, [r0, r2]
 8006e1c:	3a01      	subs	r2, #1
 8006e1e:	d2fb      	bcs.n	8006e18 <memmove+0x10>
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	5ccc      	ldrb	r4, [r1, r3]
 8006e24:	54c4      	strb	r4, [r0, r3]
 8006e26:	3301      	adds	r3, #1
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d1fa      	bne.n	8006e22 <memmove+0x1a>
 8006e2c:	e7f8      	b.n	8006e20 <memmove+0x18>
	...

08006e30 <_sbrk_r>:
 8006e30:	2300      	movs	r3, #0
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	4d06      	ldr	r5, [pc, #24]	; (8006e50 <_sbrk_r+0x20>)
 8006e36:	0004      	movs	r4, r0
 8006e38:	0008      	movs	r0, r1
 8006e3a:	602b      	str	r3, [r5, #0]
 8006e3c:	f7fb ffae 	bl	8002d9c <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d103      	bne.n	8006e4c <_sbrk_r+0x1c>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d000      	beq.n	8006e4c <_sbrk_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	200004b0 	.word	0x200004b0

08006e54 <memchr>:
 8006e54:	b2c9      	uxtb	r1, r1
 8006e56:	1882      	adds	r2, r0, r2
 8006e58:	4290      	cmp	r0, r2
 8006e5a:	d101      	bne.n	8006e60 <memchr+0xc>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4770      	bx	lr
 8006e60:	7803      	ldrb	r3, [r0, #0]
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d0fb      	beq.n	8006e5e <memchr+0xa>
 8006e66:	3001      	adds	r0, #1
 8006e68:	e7f6      	b.n	8006e58 <memchr+0x4>

08006e6a <memcpy>:
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d100      	bne.n	8006e74 <memcpy+0xa>
 8006e72:	bd10      	pop	{r4, pc}
 8006e74:	5ccc      	ldrb	r4, [r1, r3]
 8006e76:	54c4      	strb	r4, [r0, r3]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	e7f8      	b.n	8006e6e <memcpy+0x4>

08006e7c <_realloc_r>:
 8006e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7e:	0007      	movs	r7, r0
 8006e80:	000e      	movs	r6, r1
 8006e82:	0014      	movs	r4, r2
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d105      	bne.n	8006e94 <_realloc_r+0x18>
 8006e88:	0011      	movs	r1, r2
 8006e8a:	f7ff fc49 	bl	8006720 <_malloc_r>
 8006e8e:	0005      	movs	r5, r0
 8006e90:	0028      	movs	r0, r5
 8006e92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	d103      	bne.n	8006ea0 <_realloc_r+0x24>
 8006e98:	f7ff fbd6 	bl	8006648 <_free_r>
 8006e9c:	0025      	movs	r5, r4
 8006e9e:	e7f7      	b.n	8006e90 <_realloc_r+0x14>
 8006ea0:	f000 f81b 	bl	8006eda <_malloc_usable_size_r>
 8006ea4:	9001      	str	r0, [sp, #4]
 8006ea6:	4284      	cmp	r4, r0
 8006ea8:	d803      	bhi.n	8006eb2 <_realloc_r+0x36>
 8006eaa:	0035      	movs	r5, r6
 8006eac:	0843      	lsrs	r3, r0, #1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	d3ee      	bcc.n	8006e90 <_realloc_r+0x14>
 8006eb2:	0021      	movs	r1, r4
 8006eb4:	0038      	movs	r0, r7
 8006eb6:	f7ff fc33 	bl	8006720 <_malloc_r>
 8006eba:	1e05      	subs	r5, r0, #0
 8006ebc:	d0e8      	beq.n	8006e90 <_realloc_r+0x14>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	0022      	movs	r2, r4
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d900      	bls.n	8006ec8 <_realloc_r+0x4c>
 8006ec6:	001a      	movs	r2, r3
 8006ec8:	0031      	movs	r1, r6
 8006eca:	0028      	movs	r0, r5
 8006ecc:	f7ff ffcd 	bl	8006e6a <memcpy>
 8006ed0:	0031      	movs	r1, r6
 8006ed2:	0038      	movs	r0, r7
 8006ed4:	f7ff fbb8 	bl	8006648 <_free_r>
 8006ed8:	e7da      	b.n	8006e90 <_realloc_r+0x14>

08006eda <_malloc_usable_size_r>:
 8006eda:	1f0b      	subs	r3, r1, #4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	1f18      	subs	r0, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da01      	bge.n	8006ee8 <_malloc_usable_size_r+0xe>
 8006ee4:	580b      	ldr	r3, [r1, r0]
 8006ee6:	18c0      	adds	r0, r0, r3
 8006ee8:	4770      	bx	lr
	...

08006eec <log>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	0004      	movs	r4, r0
 8006ef0:	000d      	movs	r5, r1
 8006ef2:	f000 f837 	bl	8006f64 <__ieee754_log>
 8006ef6:	0022      	movs	r2, r4
 8006ef8:	0006      	movs	r6, r0
 8006efa:	000f      	movs	r7, r1
 8006efc:	002b      	movs	r3, r5
 8006efe:	0020      	movs	r0, r4
 8006f00:	0029      	movs	r1, r5
 8006f02:	f7fb f877 	bl	8001ff4 <__aeabi_dcmpun>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d115      	bne.n	8006f36 <log+0x4a>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	0020      	movs	r0, r4
 8006f10:	0029      	movs	r1, r5
 8006f12:	f7f9 fa9f 	bl	8000454 <__aeabi_dcmpgt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d10d      	bne.n	8006f36 <log+0x4a>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	0020      	movs	r0, r4
 8006f20:	0029      	movs	r1, r5
 8006f22:	f7f9 fa7d 	bl	8000420 <__aeabi_dcmpeq>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d008      	beq.n	8006f3c <log+0x50>
 8006f2a:	f7ff fb61 	bl	80065f0 <__errno>
 8006f2e:	2322      	movs	r3, #34	; 0x22
 8006f30:	2600      	movs	r6, #0
 8006f32:	4f07      	ldr	r7, [pc, #28]	; (8006f50 <log+0x64>)
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	0030      	movs	r0, r6
 8006f38:	0039      	movs	r1, r7
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3c:	f7ff fb58 	bl	80065f0 <__errno>
 8006f40:	2321      	movs	r3, #33	; 0x21
 8006f42:	6003      	str	r3, [r0, #0]
 8006f44:	4803      	ldr	r0, [pc, #12]	; (8006f54 <log+0x68>)
 8006f46:	f000 f807 	bl	8006f58 <nan>
 8006f4a:	0006      	movs	r6, r0
 8006f4c:	000f      	movs	r7, r1
 8006f4e:	e7f2      	b.n	8006f36 <log+0x4a>
 8006f50:	fff00000 	.word	0xfff00000
 8006f54:	080073e9 	.word	0x080073e9

08006f58 <nan>:
 8006f58:	2000      	movs	r0, #0
 8006f5a:	4901      	ldr	r1, [pc, #4]	; (8006f60 <nan+0x8>)
 8006f5c:	4770      	bx	lr
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	7ff80000 	.word	0x7ff80000

08006f64 <__ieee754_log>:
 8006f64:	2280      	movs	r2, #128	; 0x80
 8006f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f68:	000b      	movs	r3, r1
 8006f6a:	b08d      	sub	sp, #52	; 0x34
 8006f6c:	0352      	lsls	r2, r2, #13
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	da22      	bge.n	8006fb8 <__ieee754_log+0x54>
 8006f72:	004a      	lsls	r2, r1, #1
 8006f74:	0852      	lsrs	r2, r2, #1
 8006f76:	4302      	orrs	r2, r0
 8006f78:	d107      	bne.n	8006f8a <__ieee754_log+0x26>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2000      	movs	r0, #0
 8006f80:	49b3      	ldr	r1, [pc, #716]	; (8007250 <__ieee754_log+0x2ec>)
 8006f82:	f7f9 fdf9 	bl	8000b78 <__aeabi_ddiv>
 8006f86:	b00d      	add	sp, #52	; 0x34
 8006f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	da05      	bge.n	8006f9a <__ieee754_log+0x36>
 8006f8e:	0002      	movs	r2, r0
 8006f90:	f7fa fcae 	bl	80018f0 <__aeabi_dsub>
 8006f94:	2200      	movs	r2, #0
 8006f96:	2300      	movs	r3, #0
 8006f98:	e7f3      	b.n	8006f82 <__ieee754_log+0x1e>
 8006f9a:	4bae      	ldr	r3, [pc, #696]	; (8007254 <__ieee754_log+0x2f0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f7fa f9e5 	bl	800136c <__aeabi_dmul>
 8006fa2:	2436      	movs	r4, #54	; 0x36
 8006fa4:	000b      	movs	r3, r1
 8006fa6:	4264      	negs	r4, r4
 8006fa8:	4aab      	ldr	r2, [pc, #684]	; (8007258 <__ieee754_log+0x2f4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	dd06      	ble.n	8006fbc <__ieee754_log+0x58>
 8006fae:	0002      	movs	r2, r0
 8006fb0:	000b      	movs	r3, r1
 8006fb2:	f7f9 fa81 	bl	80004b8 <__aeabi_dadd>
 8006fb6:	e7e6      	b.n	8006f86 <__ieee754_log+0x22>
 8006fb8:	2400      	movs	r4, #0
 8006fba:	e7f5      	b.n	8006fa8 <__ieee754_log+0x44>
 8006fbc:	4da7      	ldr	r5, [pc, #668]	; (800725c <__ieee754_log+0x2f8>)
 8006fbe:	151a      	asrs	r2, r3, #20
 8006fc0:	1952      	adds	r2, r2, r5
 8006fc2:	1912      	adds	r2, r2, r4
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	4ca6      	ldr	r4, [pc, #664]	; (8007260 <__ieee754_log+0x2fc>)
 8006fc8:	0b1b      	lsrs	r3, r3, #12
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	191b      	adds	r3, r3, r4
 8006fce:	2480      	movs	r4, #128	; 0x80
 8006fd0:	0364      	lsls	r4, r4, #13
 8006fd2:	4023      	ands	r3, r4
 8006fd4:	4ca3      	ldr	r4, [pc, #652]	; (8007264 <__ieee754_log+0x300>)
 8006fd6:	9d02      	ldr	r5, [sp, #8]
 8006fd8:	405c      	eors	r4, r3
 8006fda:	151b      	asrs	r3, r3, #20
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	4325      	orrs	r5, r4
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	0029      	movs	r1, r5
 8006fe6:	4b9f      	ldr	r3, [pc, #636]	; (8007264 <__ieee754_log+0x300>)
 8006fe8:	f7fa fc82 	bl	80018f0 <__aeabi_dsub>
 8006fec:	9b02      	ldr	r3, [sp, #8]
 8006fee:	0006      	movs	r6, r0
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	031b      	lsls	r3, r3, #12
 8006ff4:	000f      	movs	r7, r1
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	0b1b      	lsrs	r3, r3, #12
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	dc64      	bgt.n	80070c8 <__ieee754_log+0x164>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f7f9 fa0e 	bl	8000420 <__aeabi_dcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	d019      	beq.n	800703c <__ieee754_log+0xd8>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d100      	bne.n	8007010 <__ieee754_log+0xac>
 800700e:	e11c      	b.n	800724a <__ieee754_log+0x2e6>
 8007010:	0018      	movs	r0, r3
 8007012:	f7fb f843 	bl	800209c <__aeabi_i2d>
 8007016:	4a94      	ldr	r2, [pc, #592]	; (8007268 <__ieee754_log+0x304>)
 8007018:	4b94      	ldr	r3, [pc, #592]	; (800726c <__ieee754_log+0x308>)
 800701a:	0004      	movs	r4, r0
 800701c:	000d      	movs	r5, r1
 800701e:	f7fa f9a5 	bl	800136c <__aeabi_dmul>
 8007022:	4a93      	ldr	r2, [pc, #588]	; (8007270 <__ieee754_log+0x30c>)
 8007024:	0006      	movs	r6, r0
 8007026:	000f      	movs	r7, r1
 8007028:	4b92      	ldr	r3, [pc, #584]	; (8007274 <__ieee754_log+0x310>)
 800702a:	0020      	movs	r0, r4
 800702c:	0029      	movs	r1, r5
 800702e:	f7fa f99d 	bl	800136c <__aeabi_dmul>
 8007032:	0002      	movs	r2, r0
 8007034:	000b      	movs	r3, r1
 8007036:	0030      	movs	r0, r6
 8007038:	0039      	movs	r1, r7
 800703a:	e7ba      	b.n	8006fb2 <__ieee754_log+0x4e>
 800703c:	4a8e      	ldr	r2, [pc, #568]	; (8007278 <__ieee754_log+0x314>)
 800703e:	4b8f      	ldr	r3, [pc, #572]	; (800727c <__ieee754_log+0x318>)
 8007040:	0030      	movs	r0, r6
 8007042:	0039      	movs	r1, r7
 8007044:	f7fa f992 	bl	800136c <__aeabi_dmul>
 8007048:	0002      	movs	r2, r0
 800704a:	000b      	movs	r3, r1
 800704c:	2000      	movs	r0, #0
 800704e:	498c      	ldr	r1, [pc, #560]	; (8007280 <__ieee754_log+0x31c>)
 8007050:	f7fa fc4e 	bl	80018f0 <__aeabi_dsub>
 8007054:	0032      	movs	r2, r6
 8007056:	0004      	movs	r4, r0
 8007058:	000d      	movs	r5, r1
 800705a:	003b      	movs	r3, r7
 800705c:	0030      	movs	r0, r6
 800705e:	0039      	movs	r1, r7
 8007060:	f7fa f984 	bl	800136c <__aeabi_dmul>
 8007064:	000b      	movs	r3, r1
 8007066:	0002      	movs	r2, r0
 8007068:	0029      	movs	r1, r5
 800706a:	0020      	movs	r0, r4
 800706c:	f7fa f97e 	bl	800136c <__aeabi_dmul>
 8007070:	9b00      	ldr	r3, [sp, #0]
 8007072:	9002      	str	r0, [sp, #8]
 8007074:	9103      	str	r1, [sp, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <__ieee754_log+0x124>
 800707a:	0002      	movs	r2, r0
 800707c:	000b      	movs	r3, r1
 800707e:	0030      	movs	r0, r6
 8007080:	0039      	movs	r1, r7
 8007082:	f7fa fc35 	bl	80018f0 <__aeabi_dsub>
 8007086:	e77e      	b.n	8006f86 <__ieee754_log+0x22>
 8007088:	9800      	ldr	r0, [sp, #0]
 800708a:	f7fb f807 	bl	800209c <__aeabi_i2d>
 800708e:	4a76      	ldr	r2, [pc, #472]	; (8007268 <__ieee754_log+0x304>)
 8007090:	4b76      	ldr	r3, [pc, #472]	; (800726c <__ieee754_log+0x308>)
 8007092:	0004      	movs	r4, r0
 8007094:	000d      	movs	r5, r1
 8007096:	f7fa f969 	bl	800136c <__aeabi_dmul>
 800709a:	4a75      	ldr	r2, [pc, #468]	; (8007270 <__ieee754_log+0x30c>)
 800709c:	9000      	str	r0, [sp, #0]
 800709e:	9101      	str	r1, [sp, #4]
 80070a0:	4b74      	ldr	r3, [pc, #464]	; (8007274 <__ieee754_log+0x310>)
 80070a2:	0020      	movs	r0, r4
 80070a4:	0029      	movs	r1, r5
 80070a6:	f7fa f961 	bl	800136c <__aeabi_dmul>
 80070aa:	0002      	movs	r2, r0
 80070ac:	000b      	movs	r3, r1
 80070ae:	9802      	ldr	r0, [sp, #8]
 80070b0:	9903      	ldr	r1, [sp, #12]
 80070b2:	f7fa fc1d 	bl	80018f0 <__aeabi_dsub>
 80070b6:	0032      	movs	r2, r6
 80070b8:	003b      	movs	r3, r7
 80070ba:	f7fa fc19 	bl	80018f0 <__aeabi_dsub>
 80070be:	0002      	movs	r2, r0
 80070c0:	000b      	movs	r3, r1
 80070c2:	9800      	ldr	r0, [sp, #0]
 80070c4:	9901      	ldr	r1, [sp, #4]
 80070c6:	e7dc      	b.n	8007082 <__ieee754_log+0x11e>
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	05db      	lsls	r3, r3, #23
 80070cc:	f7f9 f9f4 	bl	80004b8 <__aeabi_dadd>
 80070d0:	0002      	movs	r2, r0
 80070d2:	000b      	movs	r3, r1
 80070d4:	0030      	movs	r0, r6
 80070d6:	0039      	movs	r1, r7
 80070d8:	f7f9 fd4e 	bl	8000b78 <__aeabi_ddiv>
 80070dc:	9004      	str	r0, [sp, #16]
 80070de:	9105      	str	r1, [sp, #20]
 80070e0:	9800      	ldr	r0, [sp, #0]
 80070e2:	f7fa ffdb 	bl	800209c <__aeabi_i2d>
 80070e6:	9a04      	ldr	r2, [sp, #16]
 80070e8:	9b05      	ldr	r3, [sp, #20]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	9107      	str	r1, [sp, #28]
 80070ee:	0010      	movs	r0, r2
 80070f0:	0019      	movs	r1, r3
 80070f2:	f7fa f93b 	bl	800136c <__aeabi_dmul>
 80070f6:	4a63      	ldr	r2, [pc, #396]	; (8007284 <__ieee754_log+0x320>)
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	4694      	mov	ip, r2
 80070fc:	4463      	add	r3, ip
 80070fe:	0002      	movs	r2, r0
 8007100:	930b      	str	r3, [sp, #44]	; 0x2c
 8007102:	000b      	movs	r3, r1
 8007104:	9008      	str	r0, [sp, #32]
 8007106:	9109      	str	r1, [sp, #36]	; 0x24
 8007108:	f7fa f930 	bl	800136c <__aeabi_dmul>
 800710c:	0004      	movs	r4, r0
 800710e:	000d      	movs	r5, r1
 8007110:	4a5d      	ldr	r2, [pc, #372]	; (8007288 <__ieee754_log+0x324>)
 8007112:	4b5e      	ldr	r3, [pc, #376]	; (800728c <__ieee754_log+0x328>)
 8007114:	f7fa f92a 	bl	800136c <__aeabi_dmul>
 8007118:	4a5d      	ldr	r2, [pc, #372]	; (8007290 <__ieee754_log+0x32c>)
 800711a:	4b5e      	ldr	r3, [pc, #376]	; (8007294 <__ieee754_log+0x330>)
 800711c:	f7f9 f9cc 	bl	80004b8 <__aeabi_dadd>
 8007120:	0022      	movs	r2, r4
 8007122:	002b      	movs	r3, r5
 8007124:	f7fa f922 	bl	800136c <__aeabi_dmul>
 8007128:	4a5b      	ldr	r2, [pc, #364]	; (8007298 <__ieee754_log+0x334>)
 800712a:	4b5c      	ldr	r3, [pc, #368]	; (800729c <__ieee754_log+0x338>)
 800712c:	f7f9 f9c4 	bl	80004b8 <__aeabi_dadd>
 8007130:	0022      	movs	r2, r4
 8007132:	002b      	movs	r3, r5
 8007134:	f7fa f91a 	bl	800136c <__aeabi_dmul>
 8007138:	4a59      	ldr	r2, [pc, #356]	; (80072a0 <__ieee754_log+0x33c>)
 800713a:	4b5a      	ldr	r3, [pc, #360]	; (80072a4 <__ieee754_log+0x340>)
 800713c:	f7f9 f9bc 	bl	80004b8 <__aeabi_dadd>
 8007140:	9a08      	ldr	r2, [sp, #32]
 8007142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007144:	f7fa f912 	bl	800136c <__aeabi_dmul>
 8007148:	4a57      	ldr	r2, [pc, #348]	; (80072a8 <__ieee754_log+0x344>)
 800714a:	9008      	str	r0, [sp, #32]
 800714c:	9109      	str	r1, [sp, #36]	; 0x24
 800714e:	4b57      	ldr	r3, [pc, #348]	; (80072ac <__ieee754_log+0x348>)
 8007150:	0020      	movs	r0, r4
 8007152:	0029      	movs	r1, r5
 8007154:	f7fa f90a 	bl	800136c <__aeabi_dmul>
 8007158:	4a55      	ldr	r2, [pc, #340]	; (80072b0 <__ieee754_log+0x34c>)
 800715a:	4b56      	ldr	r3, [pc, #344]	; (80072b4 <__ieee754_log+0x350>)
 800715c:	f7f9 f9ac 	bl	80004b8 <__aeabi_dadd>
 8007160:	0022      	movs	r2, r4
 8007162:	002b      	movs	r3, r5
 8007164:	f7fa f902 	bl	800136c <__aeabi_dmul>
 8007168:	4a53      	ldr	r2, [pc, #332]	; (80072b8 <__ieee754_log+0x354>)
 800716a:	4b54      	ldr	r3, [pc, #336]	; (80072bc <__ieee754_log+0x358>)
 800716c:	f7f9 f9a4 	bl	80004b8 <__aeabi_dadd>
 8007170:	0022      	movs	r2, r4
 8007172:	002b      	movs	r3, r5
 8007174:	f7fa f8fa 	bl	800136c <__aeabi_dmul>
 8007178:	0002      	movs	r2, r0
 800717a:	000b      	movs	r3, r1
 800717c:	9808      	ldr	r0, [sp, #32]
 800717e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007180:	f7f9 f99a 	bl	80004b8 <__aeabi_dadd>
 8007184:	9a02      	ldr	r2, [sp, #8]
 8007186:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <__ieee754_log+0x35c>)
 8007188:	0004      	movs	r4, r0
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800718e:	000d      	movs	r5, r1
 8007190:	4313      	orrs	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	dd34      	ble.n	8007200 <__ieee754_log+0x29c>
 8007196:	2200      	movs	r2, #0
 8007198:	4b39      	ldr	r3, [pc, #228]	; (8007280 <__ieee754_log+0x31c>)
 800719a:	0030      	movs	r0, r6
 800719c:	0039      	movs	r1, r7
 800719e:	f7fa f8e5 	bl	800136c <__aeabi_dmul>
 80071a2:	0032      	movs	r2, r6
 80071a4:	003b      	movs	r3, r7
 80071a6:	f7fa f8e1 	bl	800136c <__aeabi_dmul>
 80071aa:	0002      	movs	r2, r0
 80071ac:	000b      	movs	r3, r1
 80071ae:	9002      	str	r0, [sp, #8]
 80071b0:	9103      	str	r1, [sp, #12]
 80071b2:	0020      	movs	r0, r4
 80071b4:	0029      	movs	r1, r5
 80071b6:	f7f9 f97f 	bl	80004b8 <__aeabi_dadd>
 80071ba:	9a04      	ldr	r2, [sp, #16]
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	f7fa f8d5 	bl	800136c <__aeabi_dmul>
 80071c2:	9b00      	ldr	r3, [sp, #0]
 80071c4:	0004      	movs	r4, r0
 80071c6:	000d      	movs	r5, r1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <__ieee754_log+0x276>
 80071cc:	0002      	movs	r2, r0
 80071ce:	000b      	movs	r3, r1
 80071d0:	9802      	ldr	r0, [sp, #8]
 80071d2:	9903      	ldr	r1, [sp, #12]
 80071d4:	f7fa fb8c 	bl	80018f0 <__aeabi_dsub>
 80071d8:	e74f      	b.n	800707a <__ieee754_log+0x116>
 80071da:	4a23      	ldr	r2, [pc, #140]	; (8007268 <__ieee754_log+0x304>)
 80071dc:	4b23      	ldr	r3, [pc, #140]	; (800726c <__ieee754_log+0x308>)
 80071de:	9806      	ldr	r0, [sp, #24]
 80071e0:	9907      	ldr	r1, [sp, #28]
 80071e2:	f7fa f8c3 	bl	800136c <__aeabi_dmul>
 80071e6:	4a22      	ldr	r2, [pc, #136]	; (8007270 <__ieee754_log+0x30c>)
 80071e8:	9000      	str	r0, [sp, #0]
 80071ea:	9101      	str	r1, [sp, #4]
 80071ec:	9806      	ldr	r0, [sp, #24]
 80071ee:	9907      	ldr	r1, [sp, #28]
 80071f0:	4b20      	ldr	r3, [pc, #128]	; (8007274 <__ieee754_log+0x310>)
 80071f2:	f7fa f8bb 	bl	800136c <__aeabi_dmul>
 80071f6:	0022      	movs	r2, r4
 80071f8:	002b      	movs	r3, r5
 80071fa:	f7f9 f95d 	bl	80004b8 <__aeabi_dadd>
 80071fe:	e754      	b.n	80070aa <__ieee754_log+0x146>
 8007200:	0002      	movs	r2, r0
 8007202:	000b      	movs	r3, r1
 8007204:	0030      	movs	r0, r6
 8007206:	0039      	movs	r1, r7
 8007208:	f7fa fb72 	bl	80018f0 <__aeabi_dsub>
 800720c:	9a04      	ldr	r2, [sp, #16]
 800720e:	9b05      	ldr	r3, [sp, #20]
 8007210:	f7fa f8ac 	bl	800136c <__aeabi_dmul>
 8007214:	9b00      	ldr	r3, [sp, #0]
 8007216:	0004      	movs	r4, r0
 8007218:	000d      	movs	r5, r1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <__ieee754_log+0x2c0>
 800721e:	0002      	movs	r2, r0
 8007220:	000b      	movs	r3, r1
 8007222:	e72c      	b.n	800707e <__ieee754_log+0x11a>
 8007224:	4a10      	ldr	r2, [pc, #64]	; (8007268 <__ieee754_log+0x304>)
 8007226:	4b11      	ldr	r3, [pc, #68]	; (800726c <__ieee754_log+0x308>)
 8007228:	9806      	ldr	r0, [sp, #24]
 800722a:	9907      	ldr	r1, [sp, #28]
 800722c:	f7fa f89e 	bl	800136c <__aeabi_dmul>
 8007230:	4a0f      	ldr	r2, [pc, #60]	; (8007270 <__ieee754_log+0x30c>)
 8007232:	9000      	str	r0, [sp, #0]
 8007234:	9101      	str	r1, [sp, #4]
 8007236:	9806      	ldr	r0, [sp, #24]
 8007238:	9907      	ldr	r1, [sp, #28]
 800723a:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <__ieee754_log+0x310>)
 800723c:	f7fa f896 	bl	800136c <__aeabi_dmul>
 8007240:	0002      	movs	r2, r0
 8007242:	000b      	movs	r3, r1
 8007244:	0020      	movs	r0, r4
 8007246:	0029      	movs	r1, r5
 8007248:	e733      	b.n	80070b2 <__ieee754_log+0x14e>
 800724a:	2000      	movs	r0, #0
 800724c:	2100      	movs	r1, #0
 800724e:	e69a      	b.n	8006f86 <__ieee754_log+0x22>
 8007250:	c3500000 	.word	0xc3500000
 8007254:	43500000 	.word	0x43500000
 8007258:	7fefffff 	.word	0x7fefffff
 800725c:	fffffc01 	.word	0xfffffc01
 8007260:	00095f64 	.word	0x00095f64
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	fee00000 	.word	0xfee00000
 800726c:	3fe62e42 	.word	0x3fe62e42
 8007270:	35793c76 	.word	0x35793c76
 8007274:	3dea39ef 	.word	0x3dea39ef
 8007278:	55555555 	.word	0x55555555
 800727c:	3fd55555 	.word	0x3fd55555
 8007280:	3fe00000 	.word	0x3fe00000
 8007284:	fff9eb86 	.word	0xfff9eb86
 8007288:	df3e5244 	.word	0xdf3e5244
 800728c:	3fc2f112 	.word	0x3fc2f112
 8007290:	96cb03de 	.word	0x96cb03de
 8007294:	3fc74664 	.word	0x3fc74664
 8007298:	94229359 	.word	0x94229359
 800729c:	3fd24924 	.word	0x3fd24924
 80072a0:	55555593 	.word	0x55555593
 80072a4:	3fe55555 	.word	0x3fe55555
 80072a8:	d078c69f 	.word	0xd078c69f
 80072ac:	3fc39a09 	.word	0x3fc39a09
 80072b0:	1d8e78af 	.word	0x1d8e78af
 80072b4:	3fcc71c5 	.word	0x3fcc71c5
 80072b8:	9997fa04 	.word	0x9997fa04
 80072bc:	3fd99999 	.word	0x3fd99999
 80072c0:	0006b851 	.word	0x0006b851

080072c4 <_init>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr

080072d0 <_fini>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d6:	bc08      	pop	{r3}
 80072d8:	469e      	mov	lr, r3
 80072da:	4770      	bx	lr
