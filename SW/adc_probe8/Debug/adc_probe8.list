
adc_probe8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007370  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007570  08007570  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007570  08007570  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007570  08007570  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007578  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000074  080075ec  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080075ec  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e308  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002455  00000000  00000000  000173a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00019800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  0001a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fc2  00000000  00000000  0001ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea4f  00000000  00000000  00031be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc28  00000000  00000000  00040630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f5c  00000000  00000000  000d029c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d31f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007410 	.word	0x08007410

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08007410 	.word	0x08007410

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0010      	movs	r0, r2
 8000404:	4662      	mov	r2, ip
 8000406:	468c      	mov	ip, r1
 8000408:	0019      	movs	r1, r3
 800040a:	4663      	mov	r3, ip
 800040c:	e000      	b.n	8000410 <__aeabi_cdcmpeq>
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 ff87 	bl	8001324 <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cdcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_dcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fec7 	bl	80011b4 <__eqdf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_dcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff79 	bl	8001324 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_dcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff6f 	bl	8001324 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_dcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fef1 	bl	800123c <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_dcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fee7 	bl	800123c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_dcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_d2uiz>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	2200      	movs	r2, #0
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <__aeabi_d2uiz+0x38>)
 8000482:	0004      	movs	r4, r0
 8000484:	000d      	movs	r5, r1
 8000486:	f7ff ffef 	bl	8000468 <__aeabi_dcmpge>
 800048a:	2800      	cmp	r0, #0
 800048c:	d104      	bne.n	8000498 <__aeabi_d2uiz+0x1c>
 800048e:	0020      	movs	r0, r4
 8000490:	0029      	movs	r1, r5
 8000492:	f001 fe3f 	bl	8002114 <__aeabi_d2iz>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <__aeabi_d2uiz+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	0020      	movs	r0, r4
 800049e:	0029      	movs	r1, r5
 80004a0:	f001 fa7a 	bl	8001998 <__aeabi_dsub>
 80004a4:	f001 fe36 	bl	8002114 <__aeabi_d2iz>
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	061b      	lsls	r3, r3, #24
 80004ac:	469c      	mov	ip, r3
 80004ae:	4460      	add	r0, ip
 80004b0:	e7f1      	b.n	8000496 <__aeabi_d2uiz+0x1a>
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	41e00000 	.word	0x41e00000

080004b8 <__aeabi_dadd>:
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	4657      	mov	r7, sl
 80004bc:	464e      	mov	r6, r9
 80004be:	4645      	mov	r5, r8
 80004c0:	46de      	mov	lr, fp
 80004c2:	b5e0      	push	{r5, r6, r7, lr}
 80004c4:	b083      	sub	sp, #12
 80004c6:	9000      	str	r0, [sp, #0]
 80004c8:	9101      	str	r1, [sp, #4]
 80004ca:	030c      	lsls	r4, r1, #12
 80004cc:	004f      	lsls	r7, r1, #1
 80004ce:	0fce      	lsrs	r6, r1, #31
 80004d0:	0a61      	lsrs	r1, r4, #9
 80004d2:	9c00      	ldr	r4, [sp, #0]
 80004d4:	031d      	lsls	r5, r3, #12
 80004d6:	0f64      	lsrs	r4, r4, #29
 80004d8:	430c      	orrs	r4, r1
 80004da:	9900      	ldr	r1, [sp, #0]
 80004dc:	9200      	str	r2, [sp, #0]
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	00c8      	lsls	r0, r1, #3
 80004e2:	0059      	lsls	r1, r3, #1
 80004e4:	0d4b      	lsrs	r3, r1, #21
 80004e6:	4699      	mov	r9, r3
 80004e8:	9a00      	ldr	r2, [sp, #0]
 80004ea:	9b01      	ldr	r3, [sp, #4]
 80004ec:	0a6d      	lsrs	r5, r5, #9
 80004ee:	0fd9      	lsrs	r1, r3, #31
 80004f0:	0f53      	lsrs	r3, r2, #29
 80004f2:	432b      	orrs	r3, r5
 80004f4:	469a      	mov	sl, r3
 80004f6:	9b00      	ldr	r3, [sp, #0]
 80004f8:	0d7f      	lsrs	r7, r7, #21
 80004fa:	00da      	lsls	r2, r3, #3
 80004fc:	4694      	mov	ip, r2
 80004fe:	464a      	mov	r2, r9
 8000500:	46b0      	mov	r8, r6
 8000502:	1aba      	subs	r2, r7, r2
 8000504:	428e      	cmp	r6, r1
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x52>
 8000508:	e0b0      	b.n	800066c <__aeabi_dadd+0x1b4>
 800050a:	2a00      	cmp	r2, #0
 800050c:	dc00      	bgt.n	8000510 <__aeabi_dadd+0x58>
 800050e:	e078      	b.n	8000602 <__aeabi_dadd+0x14a>
 8000510:	4649      	mov	r1, r9
 8000512:	2900      	cmp	r1, #0
 8000514:	d100      	bne.n	8000518 <__aeabi_dadd+0x60>
 8000516:	e0e9      	b.n	80006ec <__aeabi_dadd+0x234>
 8000518:	49c9      	ldr	r1, [pc, #804]	@ (8000840 <__aeabi_dadd+0x388>)
 800051a:	428f      	cmp	r7, r1
 800051c:	d100      	bne.n	8000520 <__aeabi_dadd+0x68>
 800051e:	e195      	b.n	800084c <__aeabi_dadd+0x394>
 8000520:	2501      	movs	r5, #1
 8000522:	2a38      	cmp	r2, #56	@ 0x38
 8000524:	dc16      	bgt.n	8000554 <__aeabi_dadd+0x9c>
 8000526:	2180      	movs	r1, #128	@ 0x80
 8000528:	4653      	mov	r3, sl
 800052a:	0409      	lsls	r1, r1, #16
 800052c:	430b      	orrs	r3, r1
 800052e:	469a      	mov	sl, r3
 8000530:	2a1f      	cmp	r2, #31
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0x7e>
 8000534:	e1e7      	b.n	8000906 <__aeabi_dadd+0x44e>
 8000536:	2120      	movs	r1, #32
 8000538:	4655      	mov	r5, sl
 800053a:	1a8b      	subs	r3, r1, r2
 800053c:	4661      	mov	r1, ip
 800053e:	409d      	lsls	r5, r3
 8000540:	40d1      	lsrs	r1, r2
 8000542:	430d      	orrs	r5, r1
 8000544:	4661      	mov	r1, ip
 8000546:	4099      	lsls	r1, r3
 8000548:	1e4b      	subs	r3, r1, #1
 800054a:	4199      	sbcs	r1, r3
 800054c:	4653      	mov	r3, sl
 800054e:	40d3      	lsrs	r3, r2
 8000550:	430d      	orrs	r5, r1
 8000552:	1ae4      	subs	r4, r4, r3
 8000554:	1b45      	subs	r5, r0, r5
 8000556:	42a8      	cmp	r0, r5
 8000558:	4180      	sbcs	r0, r0
 800055a:	4240      	negs	r0, r0
 800055c:	1a24      	subs	r4, r4, r0
 800055e:	0223      	lsls	r3, r4, #8
 8000560:	d400      	bmi.n	8000564 <__aeabi_dadd+0xac>
 8000562:	e10f      	b.n	8000784 <__aeabi_dadd+0x2cc>
 8000564:	0264      	lsls	r4, r4, #9
 8000566:	0a64      	lsrs	r4, r4, #9
 8000568:	2c00      	cmp	r4, #0
 800056a:	d100      	bne.n	800056e <__aeabi_dadd+0xb6>
 800056c:	e139      	b.n	80007e2 <__aeabi_dadd+0x32a>
 800056e:	0020      	movs	r0, r4
 8000570:	f001 fe3a 	bl	80021e8 <__clzsi2>
 8000574:	0003      	movs	r3, r0
 8000576:	3b08      	subs	r3, #8
 8000578:	2120      	movs	r1, #32
 800057a:	0028      	movs	r0, r5
 800057c:	1aca      	subs	r2, r1, r3
 800057e:	40d0      	lsrs	r0, r2
 8000580:	409c      	lsls	r4, r3
 8000582:	0002      	movs	r2, r0
 8000584:	409d      	lsls	r5, r3
 8000586:	4322      	orrs	r2, r4
 8000588:	429f      	cmp	r7, r3
 800058a:	dd00      	ble.n	800058e <__aeabi_dadd+0xd6>
 800058c:	e173      	b.n	8000876 <__aeabi_dadd+0x3be>
 800058e:	1bd8      	subs	r0, r3, r7
 8000590:	3001      	adds	r0, #1
 8000592:	1a09      	subs	r1, r1, r0
 8000594:	002c      	movs	r4, r5
 8000596:	408d      	lsls	r5, r1
 8000598:	40c4      	lsrs	r4, r0
 800059a:	1e6b      	subs	r3, r5, #1
 800059c:	419d      	sbcs	r5, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	40c2      	lsrs	r2, r0
 80005a2:	408b      	lsls	r3, r1
 80005a4:	4325      	orrs	r5, r4
 80005a6:	2700      	movs	r7, #0
 80005a8:	0014      	movs	r4, r2
 80005aa:	431d      	orrs	r5, r3
 80005ac:	076b      	lsls	r3, r5, #29
 80005ae:	d009      	beq.n	80005c4 <__aeabi_dadd+0x10c>
 80005b0:	230f      	movs	r3, #15
 80005b2:	402b      	ands	r3, r5
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d005      	beq.n	80005c4 <__aeabi_dadd+0x10c>
 80005b8:	1d2b      	adds	r3, r5, #4
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	41ad      	sbcs	r5, r5
 80005be:	426d      	negs	r5, r5
 80005c0:	1964      	adds	r4, r4, r5
 80005c2:	001d      	movs	r5, r3
 80005c4:	0223      	lsls	r3, r4, #8
 80005c6:	d400      	bmi.n	80005ca <__aeabi_dadd+0x112>
 80005c8:	e12d      	b.n	8000826 <__aeabi_dadd+0x36e>
 80005ca:	4a9d      	ldr	r2, [pc, #628]	@ (8000840 <__aeabi_dadd+0x388>)
 80005cc:	3701      	adds	r7, #1
 80005ce:	4297      	cmp	r7, r2
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x11c>
 80005d2:	e0d3      	b.n	800077c <__aeabi_dadd+0x2c4>
 80005d4:	4646      	mov	r6, r8
 80005d6:	499b      	ldr	r1, [pc, #620]	@ (8000844 <__aeabi_dadd+0x38c>)
 80005d8:	08ed      	lsrs	r5, r5, #3
 80005da:	4021      	ands	r1, r4
 80005dc:	074a      	lsls	r2, r1, #29
 80005de:	432a      	orrs	r2, r5
 80005e0:	057c      	lsls	r4, r7, #21
 80005e2:	024d      	lsls	r5, r1, #9
 80005e4:	0b2d      	lsrs	r5, r5, #12
 80005e6:	0d64      	lsrs	r4, r4, #21
 80005e8:	0524      	lsls	r4, r4, #20
 80005ea:	432c      	orrs	r4, r5
 80005ec:	07f6      	lsls	r6, r6, #31
 80005ee:	4334      	orrs	r4, r6
 80005f0:	0010      	movs	r0, r2
 80005f2:	0021      	movs	r1, r4
 80005f4:	b003      	add	sp, #12
 80005f6:	bcf0      	pop	{r4, r5, r6, r7}
 80005f8:	46bb      	mov	fp, r7
 80005fa:	46b2      	mov	sl, r6
 80005fc:	46a9      	mov	r9, r5
 80005fe:	46a0      	mov	r8, r4
 8000600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000602:	2a00      	cmp	r2, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x150>
 8000606:	e084      	b.n	8000712 <__aeabi_dadd+0x25a>
 8000608:	464a      	mov	r2, r9
 800060a:	1bd2      	subs	r2, r2, r7
 800060c:	2f00      	cmp	r7, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_dadd+0x15a>
 8000610:	e16d      	b.n	80008ee <__aeabi_dadd+0x436>
 8000612:	0025      	movs	r5, r4
 8000614:	4305      	orrs	r5, r0
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x162>
 8000618:	e127      	b.n	800086a <__aeabi_dadd+0x3b2>
 800061a:	1e56      	subs	r6, r2, #1
 800061c:	2a01      	cmp	r2, #1
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x16a>
 8000620:	e23b      	b.n	8000a9a <__aeabi_dadd+0x5e2>
 8000622:	4d87      	ldr	r5, [pc, #540]	@ (8000840 <__aeabi_dadd+0x388>)
 8000624:	42aa      	cmp	r2, r5
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x172>
 8000628:	e26a      	b.n	8000b00 <__aeabi_dadd+0x648>
 800062a:	2501      	movs	r5, #1
 800062c:	2e38      	cmp	r6, #56	@ 0x38
 800062e:	dc12      	bgt.n	8000656 <__aeabi_dadd+0x19e>
 8000630:	0032      	movs	r2, r6
 8000632:	2a1f      	cmp	r2, #31
 8000634:	dd00      	ble.n	8000638 <__aeabi_dadd+0x180>
 8000636:	e1f8      	b.n	8000a2a <__aeabi_dadd+0x572>
 8000638:	2620      	movs	r6, #32
 800063a:	0025      	movs	r5, r4
 800063c:	1ab6      	subs	r6, r6, r2
 800063e:	0007      	movs	r7, r0
 8000640:	4653      	mov	r3, sl
 8000642:	40b0      	lsls	r0, r6
 8000644:	40d4      	lsrs	r4, r2
 8000646:	40b5      	lsls	r5, r6
 8000648:	40d7      	lsrs	r7, r2
 800064a:	1e46      	subs	r6, r0, #1
 800064c:	41b0      	sbcs	r0, r6
 800064e:	1b1b      	subs	r3, r3, r4
 8000650:	469a      	mov	sl, r3
 8000652:	433d      	orrs	r5, r7
 8000654:	4305      	orrs	r5, r0
 8000656:	4662      	mov	r2, ip
 8000658:	1b55      	subs	r5, r2, r5
 800065a:	45ac      	cmp	ip, r5
 800065c:	4192      	sbcs	r2, r2
 800065e:	4653      	mov	r3, sl
 8000660:	4252      	negs	r2, r2
 8000662:	000e      	movs	r6, r1
 8000664:	464f      	mov	r7, r9
 8000666:	4688      	mov	r8, r1
 8000668:	1a9c      	subs	r4, r3, r2
 800066a:	e778      	b.n	800055e <__aeabi_dadd+0xa6>
 800066c:	2a00      	cmp	r2, #0
 800066e:	dc00      	bgt.n	8000672 <__aeabi_dadd+0x1ba>
 8000670:	e08e      	b.n	8000790 <__aeabi_dadd+0x2d8>
 8000672:	4649      	mov	r1, r9
 8000674:	2900      	cmp	r1, #0
 8000676:	d175      	bne.n	8000764 <__aeabi_dadd+0x2ac>
 8000678:	4661      	mov	r1, ip
 800067a:	4653      	mov	r3, sl
 800067c:	4319      	orrs	r1, r3
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x1ca>
 8000680:	e0f6      	b.n	8000870 <__aeabi_dadd+0x3b8>
 8000682:	1e51      	subs	r1, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x1d2>
 8000688:	e191      	b.n	80009ae <__aeabi_dadd+0x4f6>
 800068a:	4d6d      	ldr	r5, [pc, #436]	@ (8000840 <__aeabi_dadd+0x388>)
 800068c:	42aa      	cmp	r2, r5
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x1da>
 8000690:	e0dc      	b.n	800084c <__aeabi_dadd+0x394>
 8000692:	2501      	movs	r5, #1
 8000694:	2938      	cmp	r1, #56	@ 0x38
 8000696:	dc14      	bgt.n	80006c2 <__aeabi_dadd+0x20a>
 8000698:	000a      	movs	r2, r1
 800069a:	2a1f      	cmp	r2, #31
 800069c:	dd00      	ble.n	80006a0 <__aeabi_dadd+0x1e8>
 800069e:	e1a2      	b.n	80009e6 <__aeabi_dadd+0x52e>
 80006a0:	2120      	movs	r1, #32
 80006a2:	4653      	mov	r3, sl
 80006a4:	1a89      	subs	r1, r1, r2
 80006a6:	408b      	lsls	r3, r1
 80006a8:	001d      	movs	r5, r3
 80006aa:	4663      	mov	r3, ip
 80006ac:	40d3      	lsrs	r3, r2
 80006ae:	431d      	orrs	r5, r3
 80006b0:	4663      	mov	r3, ip
 80006b2:	408b      	lsls	r3, r1
 80006b4:	0019      	movs	r1, r3
 80006b6:	1e4b      	subs	r3, r1, #1
 80006b8:	4199      	sbcs	r1, r3
 80006ba:	4653      	mov	r3, sl
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	430d      	orrs	r5, r1
 80006c0:	18e4      	adds	r4, r4, r3
 80006c2:	182d      	adds	r5, r5, r0
 80006c4:	4285      	cmp	r5, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4240      	negs	r0, r0
 80006ca:	1824      	adds	r4, r4, r0
 80006cc:	0223      	lsls	r3, r4, #8
 80006ce:	d559      	bpl.n	8000784 <__aeabi_dadd+0x2cc>
 80006d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000840 <__aeabi_dadd+0x388>)
 80006d2:	3701      	adds	r7, #1
 80006d4:	429f      	cmp	r7, r3
 80006d6:	d051      	beq.n	800077c <__aeabi_dadd+0x2c4>
 80006d8:	2101      	movs	r1, #1
 80006da:	4b5a      	ldr	r3, [pc, #360]	@ (8000844 <__aeabi_dadd+0x38c>)
 80006dc:	086a      	lsrs	r2, r5, #1
 80006de:	401c      	ands	r4, r3
 80006e0:	4029      	ands	r1, r5
 80006e2:	430a      	orrs	r2, r1
 80006e4:	07e5      	lsls	r5, r4, #31
 80006e6:	4315      	orrs	r5, r2
 80006e8:	0864      	lsrs	r4, r4, #1
 80006ea:	e75f      	b.n	80005ac <__aeabi_dadd+0xf4>
 80006ec:	4661      	mov	r1, ip
 80006ee:	4653      	mov	r3, sl
 80006f0:	4319      	orrs	r1, r3
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x23e>
 80006f4:	e0bc      	b.n	8000870 <__aeabi_dadd+0x3b8>
 80006f6:	1e51      	subs	r1, r2, #1
 80006f8:	2a01      	cmp	r2, #1
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x246>
 80006fc:	e164      	b.n	80009c8 <__aeabi_dadd+0x510>
 80006fe:	4d50      	ldr	r5, [pc, #320]	@ (8000840 <__aeabi_dadd+0x388>)
 8000700:	42aa      	cmp	r2, r5
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x24e>
 8000704:	e16a      	b.n	80009dc <__aeabi_dadd+0x524>
 8000706:	2501      	movs	r5, #1
 8000708:	2938      	cmp	r1, #56	@ 0x38
 800070a:	dd00      	ble.n	800070e <__aeabi_dadd+0x256>
 800070c:	e722      	b.n	8000554 <__aeabi_dadd+0x9c>
 800070e:	000a      	movs	r2, r1
 8000710:	e70e      	b.n	8000530 <__aeabi_dadd+0x78>
 8000712:	4a4d      	ldr	r2, [pc, #308]	@ (8000848 <__aeabi_dadd+0x390>)
 8000714:	1c7d      	adds	r5, r7, #1
 8000716:	4215      	tst	r5, r2
 8000718:	d000      	beq.n	800071c <__aeabi_dadd+0x264>
 800071a:	e0d0      	b.n	80008be <__aeabi_dadd+0x406>
 800071c:	0025      	movs	r5, r4
 800071e:	4662      	mov	r2, ip
 8000720:	4653      	mov	r3, sl
 8000722:	4305      	orrs	r5, r0
 8000724:	431a      	orrs	r2, r3
 8000726:	2f00      	cmp	r7, #0
 8000728:	d000      	beq.n	800072c <__aeabi_dadd+0x274>
 800072a:	e137      	b.n	800099c <__aeabi_dadd+0x4e4>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x27a>
 8000730:	e1a8      	b.n	8000a84 <__aeabi_dadd+0x5cc>
 8000732:	2a00      	cmp	r2, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x280>
 8000736:	e16a      	b.n	8000a0e <__aeabi_dadd+0x556>
 8000738:	4663      	mov	r3, ip
 800073a:	1ac5      	subs	r5, r0, r3
 800073c:	4653      	mov	r3, sl
 800073e:	1ae2      	subs	r2, r4, r3
 8000740:	42a8      	cmp	r0, r5
 8000742:	419b      	sbcs	r3, r3
 8000744:	425b      	negs	r3, r3
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	021a      	lsls	r2, r3, #8
 800074a:	d400      	bmi.n	800074e <__aeabi_dadd+0x296>
 800074c:	e203      	b.n	8000b56 <__aeabi_dadd+0x69e>
 800074e:	4663      	mov	r3, ip
 8000750:	1a1d      	subs	r5, r3, r0
 8000752:	45ac      	cmp	ip, r5
 8000754:	4192      	sbcs	r2, r2
 8000756:	4653      	mov	r3, sl
 8000758:	4252      	negs	r2, r2
 800075a:	1b1c      	subs	r4, r3, r4
 800075c:	000e      	movs	r6, r1
 800075e:	4688      	mov	r8, r1
 8000760:	1aa4      	subs	r4, r4, r2
 8000762:	e723      	b.n	80005ac <__aeabi_dadd+0xf4>
 8000764:	4936      	ldr	r1, [pc, #216]	@ (8000840 <__aeabi_dadd+0x388>)
 8000766:	428f      	cmp	r7, r1
 8000768:	d070      	beq.n	800084c <__aeabi_dadd+0x394>
 800076a:	2501      	movs	r5, #1
 800076c:	2a38      	cmp	r2, #56	@ 0x38
 800076e:	dca8      	bgt.n	80006c2 <__aeabi_dadd+0x20a>
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	4653      	mov	r3, sl
 8000774:	0409      	lsls	r1, r1, #16
 8000776:	430b      	orrs	r3, r1
 8000778:	469a      	mov	sl, r3
 800077a:	e78e      	b.n	800069a <__aeabi_dadd+0x1e2>
 800077c:	003c      	movs	r4, r7
 800077e:	2500      	movs	r5, #0
 8000780:	2200      	movs	r2, #0
 8000782:	e731      	b.n	80005e8 <__aeabi_dadd+0x130>
 8000784:	2307      	movs	r3, #7
 8000786:	402b      	ands	r3, r5
 8000788:	2b00      	cmp	r3, #0
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x2d6>
 800078c:	e710      	b.n	80005b0 <__aeabi_dadd+0xf8>
 800078e:	e093      	b.n	80008b8 <__aeabi_dadd+0x400>
 8000790:	2a00      	cmp	r2, #0
 8000792:	d074      	beq.n	800087e <__aeabi_dadd+0x3c6>
 8000794:	464a      	mov	r2, r9
 8000796:	1bd2      	subs	r2, r2, r7
 8000798:	2f00      	cmp	r7, #0
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2e6>
 800079c:	e0c7      	b.n	800092e <__aeabi_dadd+0x476>
 800079e:	4928      	ldr	r1, [pc, #160]	@ (8000840 <__aeabi_dadd+0x388>)
 80007a0:	4589      	cmp	r9, r1
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x2ee>
 80007a4:	e185      	b.n	8000ab2 <__aeabi_dadd+0x5fa>
 80007a6:	2501      	movs	r5, #1
 80007a8:	2a38      	cmp	r2, #56	@ 0x38
 80007aa:	dc12      	bgt.n	80007d2 <__aeabi_dadd+0x31a>
 80007ac:	2180      	movs	r1, #128	@ 0x80
 80007ae:	0409      	lsls	r1, r1, #16
 80007b0:	430c      	orrs	r4, r1
 80007b2:	2a1f      	cmp	r2, #31
 80007b4:	dd00      	ble.n	80007b8 <__aeabi_dadd+0x300>
 80007b6:	e1ab      	b.n	8000b10 <__aeabi_dadd+0x658>
 80007b8:	2120      	movs	r1, #32
 80007ba:	0025      	movs	r5, r4
 80007bc:	1a89      	subs	r1, r1, r2
 80007be:	0007      	movs	r7, r0
 80007c0:	4088      	lsls	r0, r1
 80007c2:	408d      	lsls	r5, r1
 80007c4:	40d7      	lsrs	r7, r2
 80007c6:	1e41      	subs	r1, r0, #1
 80007c8:	4188      	sbcs	r0, r1
 80007ca:	40d4      	lsrs	r4, r2
 80007cc:	433d      	orrs	r5, r7
 80007ce:	4305      	orrs	r5, r0
 80007d0:	44a2      	add	sl, r4
 80007d2:	4465      	add	r5, ip
 80007d4:	4565      	cmp	r5, ip
 80007d6:	4192      	sbcs	r2, r2
 80007d8:	4252      	negs	r2, r2
 80007da:	4452      	add	r2, sl
 80007dc:	0014      	movs	r4, r2
 80007de:	464f      	mov	r7, r9
 80007e0:	e774      	b.n	80006cc <__aeabi_dadd+0x214>
 80007e2:	0028      	movs	r0, r5
 80007e4:	f001 fd00 	bl	80021e8 <__clzsi2>
 80007e8:	0003      	movs	r3, r0
 80007ea:	3318      	adds	r3, #24
 80007ec:	2b1f      	cmp	r3, #31
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_dadd+0x33a>
 80007f0:	e6c2      	b.n	8000578 <__aeabi_dadd+0xc0>
 80007f2:	002a      	movs	r2, r5
 80007f4:	3808      	subs	r0, #8
 80007f6:	4082      	lsls	r2, r0
 80007f8:	429f      	cmp	r7, r3
 80007fa:	dd00      	ble.n	80007fe <__aeabi_dadd+0x346>
 80007fc:	e0a9      	b.n	8000952 <__aeabi_dadd+0x49a>
 80007fe:	1bdb      	subs	r3, r3, r7
 8000800:	1c58      	adds	r0, r3, #1
 8000802:	281f      	cmp	r0, #31
 8000804:	dc00      	bgt.n	8000808 <__aeabi_dadd+0x350>
 8000806:	e1ac      	b.n	8000b62 <__aeabi_dadd+0x6aa>
 8000808:	0015      	movs	r5, r2
 800080a:	3b1f      	subs	r3, #31
 800080c:	40dd      	lsrs	r5, r3
 800080e:	2820      	cmp	r0, #32
 8000810:	d005      	beq.n	800081e <__aeabi_dadd+0x366>
 8000812:	2340      	movs	r3, #64	@ 0x40
 8000814:	1a1b      	subs	r3, r3, r0
 8000816:	409a      	lsls	r2, r3
 8000818:	1e53      	subs	r3, r2, #1
 800081a:	419a      	sbcs	r2, r3
 800081c:	4315      	orrs	r5, r2
 800081e:	2307      	movs	r3, #7
 8000820:	2700      	movs	r7, #0
 8000822:	402b      	ands	r3, r5
 8000824:	e7b0      	b.n	8000788 <__aeabi_dadd+0x2d0>
 8000826:	08ed      	lsrs	r5, r5, #3
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <__aeabi_dadd+0x388>)
 800082a:	0762      	lsls	r2, r4, #29
 800082c:	432a      	orrs	r2, r5
 800082e:	08e4      	lsrs	r4, r4, #3
 8000830:	429f      	cmp	r7, r3
 8000832:	d00f      	beq.n	8000854 <__aeabi_dadd+0x39c>
 8000834:	0324      	lsls	r4, r4, #12
 8000836:	0b25      	lsrs	r5, r4, #12
 8000838:	057c      	lsls	r4, r7, #21
 800083a:	0d64      	lsrs	r4, r4, #21
 800083c:	e6d4      	b.n	80005e8 <__aeabi_dadd+0x130>
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	000007ff 	.word	0x000007ff
 8000844:	ff7fffff 	.word	0xff7fffff
 8000848:	000007fe 	.word	0x000007fe
 800084c:	08c0      	lsrs	r0, r0, #3
 800084e:	0762      	lsls	r2, r4, #29
 8000850:	4302      	orrs	r2, r0
 8000852:	08e4      	lsrs	r4, r4, #3
 8000854:	0013      	movs	r3, r2
 8000856:	4323      	orrs	r3, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3a4>
 800085a:	e186      	b.n	8000b6a <__aeabi_dadd+0x6b2>
 800085c:	2580      	movs	r5, #128	@ 0x80
 800085e:	032d      	lsls	r5, r5, #12
 8000860:	4325      	orrs	r5, r4
 8000862:	032d      	lsls	r5, r5, #12
 8000864:	4cc3      	ldr	r4, [pc, #780]	@ (8000b74 <__aeabi_dadd+0x6bc>)
 8000866:	0b2d      	lsrs	r5, r5, #12
 8000868:	e6be      	b.n	80005e8 <__aeabi_dadd+0x130>
 800086a:	4660      	mov	r0, ip
 800086c:	4654      	mov	r4, sl
 800086e:	000e      	movs	r6, r1
 8000870:	0017      	movs	r7, r2
 8000872:	08c5      	lsrs	r5, r0, #3
 8000874:	e7d8      	b.n	8000828 <__aeabi_dadd+0x370>
 8000876:	4cc0      	ldr	r4, [pc, #768]	@ (8000b78 <__aeabi_dadd+0x6c0>)
 8000878:	1aff      	subs	r7, r7, r3
 800087a:	4014      	ands	r4, r2
 800087c:	e696      	b.n	80005ac <__aeabi_dadd+0xf4>
 800087e:	4abf      	ldr	r2, [pc, #764]	@ (8000b7c <__aeabi_dadd+0x6c4>)
 8000880:	1c79      	adds	r1, r7, #1
 8000882:	4211      	tst	r1, r2
 8000884:	d16b      	bne.n	800095e <__aeabi_dadd+0x4a6>
 8000886:	0022      	movs	r2, r4
 8000888:	4302      	orrs	r2, r0
 800088a:	2f00      	cmp	r7, #0
 800088c:	d000      	beq.n	8000890 <__aeabi_dadd+0x3d8>
 800088e:	e0db      	b.n	8000a48 <__aeabi_dadd+0x590>
 8000890:	2a00      	cmp	r2, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x3de>
 8000894:	e12d      	b.n	8000af2 <__aeabi_dadd+0x63a>
 8000896:	4662      	mov	r2, ip
 8000898:	4653      	mov	r3, sl
 800089a:	431a      	orrs	r2, r3
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x3e8>
 800089e:	e0b6      	b.n	8000a0e <__aeabi_dadd+0x556>
 80008a0:	4663      	mov	r3, ip
 80008a2:	18c5      	adds	r5, r0, r3
 80008a4:	4285      	cmp	r5, r0
 80008a6:	4180      	sbcs	r0, r0
 80008a8:	4454      	add	r4, sl
 80008aa:	4240      	negs	r0, r0
 80008ac:	1824      	adds	r4, r4, r0
 80008ae:	0223      	lsls	r3, r4, #8
 80008b0:	d502      	bpl.n	80008b8 <__aeabi_dadd+0x400>
 80008b2:	000f      	movs	r7, r1
 80008b4:	4bb0      	ldr	r3, [pc, #704]	@ (8000b78 <__aeabi_dadd+0x6c0>)
 80008b6:	401c      	ands	r4, r3
 80008b8:	003a      	movs	r2, r7
 80008ba:	0028      	movs	r0, r5
 80008bc:	e7d8      	b.n	8000870 <__aeabi_dadd+0x3b8>
 80008be:	4662      	mov	r2, ip
 80008c0:	1a85      	subs	r5, r0, r2
 80008c2:	42a8      	cmp	r0, r5
 80008c4:	4192      	sbcs	r2, r2
 80008c6:	4653      	mov	r3, sl
 80008c8:	4252      	negs	r2, r2
 80008ca:	4691      	mov	r9, r2
 80008cc:	1ae3      	subs	r3, r4, r3
 80008ce:	001a      	movs	r2, r3
 80008d0:	464b      	mov	r3, r9
 80008d2:	1ad2      	subs	r2, r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	4691      	mov	r9, r2
 80008d8:	021a      	lsls	r2, r3, #8
 80008da:	d454      	bmi.n	8000986 <__aeabi_dadd+0x4ce>
 80008dc:	464a      	mov	r2, r9
 80008de:	464c      	mov	r4, r9
 80008e0:	432a      	orrs	r2, r5
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x42e>
 80008e4:	e640      	b.n	8000568 <__aeabi_dadd+0xb0>
 80008e6:	2600      	movs	r6, #0
 80008e8:	2400      	movs	r4, #0
 80008ea:	2500      	movs	r5, #0
 80008ec:	e67c      	b.n	80005e8 <__aeabi_dadd+0x130>
 80008ee:	4da1      	ldr	r5, [pc, #644]	@ (8000b74 <__aeabi_dadd+0x6bc>)
 80008f0:	45a9      	cmp	r9, r5
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x43e>
 80008f4:	e090      	b.n	8000a18 <__aeabi_dadd+0x560>
 80008f6:	2501      	movs	r5, #1
 80008f8:	2a38      	cmp	r2, #56	@ 0x38
 80008fa:	dd00      	ble.n	80008fe <__aeabi_dadd+0x446>
 80008fc:	e6ab      	b.n	8000656 <__aeabi_dadd+0x19e>
 80008fe:	2580      	movs	r5, #128	@ 0x80
 8000900:	042d      	lsls	r5, r5, #16
 8000902:	432c      	orrs	r4, r5
 8000904:	e695      	b.n	8000632 <__aeabi_dadd+0x17a>
 8000906:	0011      	movs	r1, r2
 8000908:	4655      	mov	r5, sl
 800090a:	3920      	subs	r1, #32
 800090c:	40cd      	lsrs	r5, r1
 800090e:	46a9      	mov	r9, r5
 8000910:	2a20      	cmp	r2, #32
 8000912:	d006      	beq.n	8000922 <__aeabi_dadd+0x46a>
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	4653      	mov	r3, sl
 8000918:	1a8a      	subs	r2, r1, r2
 800091a:	4093      	lsls	r3, r2
 800091c:	4662      	mov	r2, ip
 800091e:	431a      	orrs	r2, r3
 8000920:	4694      	mov	ip, r2
 8000922:	4665      	mov	r5, ip
 8000924:	1e6b      	subs	r3, r5, #1
 8000926:	419d      	sbcs	r5, r3
 8000928:	464b      	mov	r3, r9
 800092a:	431d      	orrs	r5, r3
 800092c:	e612      	b.n	8000554 <__aeabi_dadd+0x9c>
 800092e:	0021      	movs	r1, r4
 8000930:	4301      	orrs	r1, r0
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x47e>
 8000934:	e0c4      	b.n	8000ac0 <__aeabi_dadd+0x608>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x486>
 800093c:	e0fb      	b.n	8000b36 <__aeabi_dadd+0x67e>
 800093e:	4d8d      	ldr	r5, [pc, #564]	@ (8000b74 <__aeabi_dadd+0x6bc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x48e>
 8000944:	e0b5      	b.n	8000ab2 <__aeabi_dadd+0x5fa>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x496>
 800094c:	e741      	b.n	80007d2 <__aeabi_dadd+0x31a>
 800094e:	000a      	movs	r2, r1
 8000950:	e72f      	b.n	80007b2 <__aeabi_dadd+0x2fa>
 8000952:	4c89      	ldr	r4, [pc, #548]	@ (8000b78 <__aeabi_dadd+0x6c0>)
 8000954:	1aff      	subs	r7, r7, r3
 8000956:	4014      	ands	r4, r2
 8000958:	0762      	lsls	r2, r4, #29
 800095a:	08e4      	lsrs	r4, r4, #3
 800095c:	e76a      	b.n	8000834 <__aeabi_dadd+0x37c>
 800095e:	4a85      	ldr	r2, [pc, #532]	@ (8000b74 <__aeabi_dadd+0x6bc>)
 8000960:	4291      	cmp	r1, r2
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x4ae>
 8000964:	e0e3      	b.n	8000b2e <__aeabi_dadd+0x676>
 8000966:	4663      	mov	r3, ip
 8000968:	18c2      	adds	r2, r0, r3
 800096a:	4282      	cmp	r2, r0
 800096c:	4180      	sbcs	r0, r0
 800096e:	0023      	movs	r3, r4
 8000970:	4240      	negs	r0, r0
 8000972:	4453      	add	r3, sl
 8000974:	181b      	adds	r3, r3, r0
 8000976:	07dd      	lsls	r5, r3, #31
 8000978:	085c      	lsrs	r4, r3, #1
 800097a:	2307      	movs	r3, #7
 800097c:	0852      	lsrs	r2, r2, #1
 800097e:	4315      	orrs	r5, r2
 8000980:	000f      	movs	r7, r1
 8000982:	402b      	ands	r3, r5
 8000984:	e700      	b.n	8000788 <__aeabi_dadd+0x2d0>
 8000986:	4663      	mov	r3, ip
 8000988:	1a1d      	subs	r5, r3, r0
 800098a:	45ac      	cmp	ip, r5
 800098c:	4192      	sbcs	r2, r2
 800098e:	4653      	mov	r3, sl
 8000990:	4252      	negs	r2, r2
 8000992:	1b1c      	subs	r4, r3, r4
 8000994:	000e      	movs	r6, r1
 8000996:	4688      	mov	r8, r1
 8000998:	1aa4      	subs	r4, r4, r2
 800099a:	e5e5      	b.n	8000568 <__aeabi_dadd+0xb0>
 800099c:	2d00      	cmp	r5, #0
 800099e:	d000      	beq.n	80009a2 <__aeabi_dadd+0x4ea>
 80009a0:	e091      	b.n	8000ac6 <__aeabi_dadd+0x60e>
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d138      	bne.n	8000a18 <__aeabi_dadd+0x560>
 80009a6:	2480      	movs	r4, #128	@ 0x80
 80009a8:	2600      	movs	r6, #0
 80009aa:	0324      	lsls	r4, r4, #12
 80009ac:	e756      	b.n	800085c <__aeabi_dadd+0x3a4>
 80009ae:	4663      	mov	r3, ip
 80009b0:	18c5      	adds	r5, r0, r3
 80009b2:	4285      	cmp	r5, r0
 80009b4:	4180      	sbcs	r0, r0
 80009b6:	4454      	add	r4, sl
 80009b8:	4240      	negs	r0, r0
 80009ba:	1824      	adds	r4, r4, r0
 80009bc:	2701      	movs	r7, #1
 80009be:	0223      	lsls	r3, r4, #8
 80009c0:	d400      	bmi.n	80009c4 <__aeabi_dadd+0x50c>
 80009c2:	e6df      	b.n	8000784 <__aeabi_dadd+0x2cc>
 80009c4:	2702      	movs	r7, #2
 80009c6:	e687      	b.n	80006d8 <__aeabi_dadd+0x220>
 80009c8:	4663      	mov	r3, ip
 80009ca:	1ac5      	subs	r5, r0, r3
 80009cc:	42a8      	cmp	r0, r5
 80009ce:	4180      	sbcs	r0, r0
 80009d0:	4653      	mov	r3, sl
 80009d2:	4240      	negs	r0, r0
 80009d4:	1ae4      	subs	r4, r4, r3
 80009d6:	2701      	movs	r7, #1
 80009d8:	1a24      	subs	r4, r4, r0
 80009da:	e5c0      	b.n	800055e <__aeabi_dadd+0xa6>
 80009dc:	0762      	lsls	r2, r4, #29
 80009de:	08c0      	lsrs	r0, r0, #3
 80009e0:	4302      	orrs	r2, r0
 80009e2:	08e4      	lsrs	r4, r4, #3
 80009e4:	e736      	b.n	8000854 <__aeabi_dadd+0x39c>
 80009e6:	0011      	movs	r1, r2
 80009e8:	4653      	mov	r3, sl
 80009ea:	3920      	subs	r1, #32
 80009ec:	40cb      	lsrs	r3, r1
 80009ee:	4699      	mov	r9, r3
 80009f0:	2a20      	cmp	r2, #32
 80009f2:	d006      	beq.n	8000a02 <__aeabi_dadd+0x54a>
 80009f4:	2140      	movs	r1, #64	@ 0x40
 80009f6:	4653      	mov	r3, sl
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	4093      	lsls	r3, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	431a      	orrs	r2, r3
 8000a00:	4694      	mov	ip, r2
 8000a02:	4665      	mov	r5, ip
 8000a04:	1e6b      	subs	r3, r5, #1
 8000a06:	419d      	sbcs	r5, r3
 8000a08:	464b      	mov	r3, r9
 8000a0a:	431d      	orrs	r5, r3
 8000a0c:	e659      	b.n	80006c2 <__aeabi_dadd+0x20a>
 8000a0e:	0762      	lsls	r2, r4, #29
 8000a10:	08c0      	lsrs	r0, r0, #3
 8000a12:	4302      	orrs	r2, r0
 8000a14:	08e4      	lsrs	r4, r4, #3
 8000a16:	e70d      	b.n	8000834 <__aeabi_dadd+0x37c>
 8000a18:	4653      	mov	r3, sl
 8000a1a:	075a      	lsls	r2, r3, #29
 8000a1c:	4663      	mov	r3, ip
 8000a1e:	08d8      	lsrs	r0, r3, #3
 8000a20:	4653      	mov	r3, sl
 8000a22:	000e      	movs	r6, r1
 8000a24:	4302      	orrs	r2, r0
 8000a26:	08dc      	lsrs	r4, r3, #3
 8000a28:	e714      	b.n	8000854 <__aeabi_dadd+0x39c>
 8000a2a:	0015      	movs	r5, r2
 8000a2c:	0026      	movs	r6, r4
 8000a2e:	3d20      	subs	r5, #32
 8000a30:	40ee      	lsrs	r6, r5
 8000a32:	2a20      	cmp	r2, #32
 8000a34:	d003      	beq.n	8000a3e <__aeabi_dadd+0x586>
 8000a36:	2540      	movs	r5, #64	@ 0x40
 8000a38:	1aaa      	subs	r2, r5, r2
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	4320      	orrs	r0, r4
 8000a3e:	1e42      	subs	r2, r0, #1
 8000a40:	4190      	sbcs	r0, r2
 8000a42:	0005      	movs	r5, r0
 8000a44:	4335      	orrs	r5, r6
 8000a46:	e606      	b.n	8000656 <__aeabi_dadd+0x19e>
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d07c      	beq.n	8000b46 <__aeabi_dadd+0x68e>
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	4653      	mov	r3, sl
 8000a50:	08c0      	lsrs	r0, r0, #3
 8000a52:	431a      	orrs	r2, r3
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x5a0>
 8000a56:	e6fa      	b.n	800084e <__aeabi_dadd+0x396>
 8000a58:	0762      	lsls	r2, r4, #29
 8000a5a:	4310      	orrs	r0, r2
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	08e4      	lsrs	r4, r4, #3
 8000a60:	0312      	lsls	r2, r2, #12
 8000a62:	4214      	tst	r4, r2
 8000a64:	d008      	beq.n	8000a78 <__aeabi_dadd+0x5c0>
 8000a66:	08d9      	lsrs	r1, r3, #3
 8000a68:	4211      	tst	r1, r2
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_dadd+0x5c0>
 8000a6c:	4663      	mov	r3, ip
 8000a6e:	08d8      	lsrs	r0, r3, #3
 8000a70:	4653      	mov	r3, sl
 8000a72:	000c      	movs	r4, r1
 8000a74:	075b      	lsls	r3, r3, #29
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0f42      	lsrs	r2, r0, #29
 8000a7a:	00c0      	lsls	r0, r0, #3
 8000a7c:	08c0      	lsrs	r0, r0, #3
 8000a7e:	0752      	lsls	r2, r2, #29
 8000a80:	4302      	orrs	r2, r0
 8000a82:	e6e7      	b.n	8000854 <__aeabi_dadd+0x39c>
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x5d2>
 8000a88:	e72d      	b.n	80008e6 <__aeabi_dadd+0x42e>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	08d8      	lsrs	r0, r3, #3
 8000a8e:	4653      	mov	r3, sl
 8000a90:	075a      	lsls	r2, r3, #29
 8000a92:	000e      	movs	r6, r1
 8000a94:	4302      	orrs	r2, r0
 8000a96:	08dc      	lsrs	r4, r3, #3
 8000a98:	e6cc      	b.n	8000834 <__aeabi_dadd+0x37c>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	1a1d      	subs	r5, r3, r0
 8000a9e:	45ac      	cmp	ip, r5
 8000aa0:	4192      	sbcs	r2, r2
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	1b1c      	subs	r4, r3, r4
 8000aa8:	000e      	movs	r6, r1
 8000aaa:	4688      	mov	r8, r1
 8000aac:	1aa4      	subs	r4, r4, r2
 8000aae:	3701      	adds	r7, #1
 8000ab0:	e555      	b.n	800055e <__aeabi_dadd+0xa6>
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	08d9      	lsrs	r1, r3, #3
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	075a      	lsls	r2, r3, #29
 8000aba:	430a      	orrs	r2, r1
 8000abc:	08dc      	lsrs	r4, r3, #3
 8000abe:	e6c9      	b.n	8000854 <__aeabi_dadd+0x39c>
 8000ac0:	4660      	mov	r0, ip
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	e6d4      	b.n	8000870 <__aeabi_dadd+0x3b8>
 8000ac6:	08c0      	lsrs	r0, r0, #3
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x616>
 8000acc:	e6bf      	b.n	800084e <__aeabi_dadd+0x396>
 8000ace:	0762      	lsls	r2, r4, #29
 8000ad0:	4310      	orrs	r0, r2
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	08e4      	lsrs	r4, r4, #3
 8000ad6:	0312      	lsls	r2, r2, #12
 8000ad8:	4214      	tst	r4, r2
 8000ada:	d0cd      	beq.n	8000a78 <__aeabi_dadd+0x5c0>
 8000adc:	08dd      	lsrs	r5, r3, #3
 8000ade:	4215      	tst	r5, r2
 8000ae0:	d1ca      	bne.n	8000a78 <__aeabi_dadd+0x5c0>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	08d8      	lsrs	r0, r3, #3
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	075b      	lsls	r3, r3, #29
 8000aea:	000e      	movs	r6, r1
 8000aec:	002c      	movs	r4, r5
 8000aee:	4318      	orrs	r0, r3
 8000af0:	e7c2      	b.n	8000a78 <__aeabi_dadd+0x5c0>
 8000af2:	4663      	mov	r3, ip
 8000af4:	08d9      	lsrs	r1, r3, #3
 8000af6:	4653      	mov	r3, sl
 8000af8:	075a      	lsls	r2, r3, #29
 8000afa:	430a      	orrs	r2, r1
 8000afc:	08dc      	lsrs	r4, r3, #3
 8000afe:	e699      	b.n	8000834 <__aeabi_dadd+0x37c>
 8000b00:	4663      	mov	r3, ip
 8000b02:	08d8      	lsrs	r0, r3, #3
 8000b04:	4653      	mov	r3, sl
 8000b06:	075a      	lsls	r2, r3, #29
 8000b08:	000e      	movs	r6, r1
 8000b0a:	4302      	orrs	r2, r0
 8000b0c:	08dc      	lsrs	r4, r3, #3
 8000b0e:	e6a1      	b.n	8000854 <__aeabi_dadd+0x39c>
 8000b10:	0011      	movs	r1, r2
 8000b12:	0027      	movs	r7, r4
 8000b14:	3920      	subs	r1, #32
 8000b16:	40cf      	lsrs	r7, r1
 8000b18:	2a20      	cmp	r2, #32
 8000b1a:	d003      	beq.n	8000b24 <__aeabi_dadd+0x66c>
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	1a8a      	subs	r2, r1, r2
 8000b20:	4094      	lsls	r4, r2
 8000b22:	4320      	orrs	r0, r4
 8000b24:	1e42      	subs	r2, r0, #1
 8000b26:	4190      	sbcs	r0, r2
 8000b28:	0005      	movs	r5, r0
 8000b2a:	433d      	orrs	r5, r7
 8000b2c:	e651      	b.n	80007d2 <__aeabi_dadd+0x31a>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	2500      	movs	r5, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	e558      	b.n	80005e8 <__aeabi_dadd+0x130>
 8000b36:	4460      	add	r0, ip
 8000b38:	4560      	cmp	r0, ip
 8000b3a:	4192      	sbcs	r2, r2
 8000b3c:	4454      	add	r4, sl
 8000b3e:	4252      	negs	r2, r2
 8000b40:	0005      	movs	r5, r0
 8000b42:	18a4      	adds	r4, r4, r2
 8000b44:	e73a      	b.n	80009bc <__aeabi_dadd+0x504>
 8000b46:	4653      	mov	r3, sl
 8000b48:	075a      	lsls	r2, r3, #29
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	08d9      	lsrs	r1, r3, #3
 8000b4e:	4653      	mov	r3, sl
 8000b50:	430a      	orrs	r2, r1
 8000b52:	08dc      	lsrs	r4, r3, #3
 8000b54:	e67e      	b.n	8000854 <__aeabi_dadd+0x39c>
 8000b56:	001a      	movs	r2, r3
 8000b58:	001c      	movs	r4, r3
 8000b5a:	432a      	orrs	r2, r5
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x6a8>
 8000b5e:	e6ab      	b.n	80008b8 <__aeabi_dadd+0x400>
 8000b60:	e6c1      	b.n	80008e6 <__aeabi_dadd+0x42e>
 8000b62:	2120      	movs	r1, #32
 8000b64:	2500      	movs	r5, #0
 8000b66:	1a09      	subs	r1, r1, r0
 8000b68:	e519      	b.n	800059e <__aeabi_dadd+0xe6>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	4c01      	ldr	r4, [pc, #4]	@ (8000b74 <__aeabi_dadd+0x6bc>)
 8000b70:	e53a      	b.n	80005e8 <__aeabi_dadd+0x130>
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff
 8000b7c:	000007fe 	.word	0x000007fe

08000b80 <__aeabi_ddiv>:
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	46de      	mov	lr, fp
 8000b84:	4645      	mov	r5, r8
 8000b86:	4657      	mov	r7, sl
 8000b88:	464e      	mov	r6, r9
 8000b8a:	b5e0      	push	{r5, r6, r7, lr}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	9200      	str	r2, [sp, #0]
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	030b      	lsls	r3, r1, #12
 8000b94:	0b1b      	lsrs	r3, r3, #12
 8000b96:	469b      	mov	fp, r3
 8000b98:	0fca      	lsrs	r2, r1, #31
 8000b9a:	004b      	lsls	r3, r1, #1
 8000b9c:	0004      	movs	r4, r0
 8000b9e:	4680      	mov	r8, r0
 8000ba0:	0d5b      	lsrs	r3, r3, #21
 8000ba2:	9202      	str	r2, [sp, #8]
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x28>
 8000ba6:	e16a      	b.n	8000e7e <__aeabi_ddiv+0x2fe>
 8000ba8:	4ad4      	ldr	r2, [pc, #848]	@ (8000efc <__aeabi_ddiv+0x37c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_ddiv+0x30>
 8000bae:	e18c      	b.n	8000eca <__aeabi_ddiv+0x34a>
 8000bb0:	4659      	mov	r1, fp
 8000bb2:	0f42      	lsrs	r2, r0, #29
 8000bb4:	00c9      	lsls	r1, r1, #3
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0409      	lsls	r1, r1, #16
 8000bbc:	4311      	orrs	r1, r2
 8000bbe:	00c2      	lsls	r2, r0, #3
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	4acf      	ldr	r2, [pc, #828]	@ (8000f00 <__aeabi_ddiv+0x380>)
 8000bc4:	4689      	mov	r9, r1
 8000bc6:	4692      	mov	sl, r2
 8000bc8:	449a      	add	sl, r3
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2400      	movs	r4, #0
 8000bce:	9303      	str	r3, [sp, #12]
 8000bd0:	9e00      	ldr	r6, [sp, #0]
 8000bd2:	9f01      	ldr	r7, [sp, #4]
 8000bd4:	033b      	lsls	r3, r7, #12
 8000bd6:	0b1b      	lsrs	r3, r3, #12
 8000bd8:	469b      	mov	fp, r3
 8000bda:	007b      	lsls	r3, r7, #1
 8000bdc:	0030      	movs	r0, r6
 8000bde:	0d5b      	lsrs	r3, r3, #21
 8000be0:	0ffd      	lsrs	r5, r7, #31
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_ddiv+0x68>
 8000be6:	e128      	b.n	8000e3a <__aeabi_ddiv+0x2ba>
 8000be8:	4ac4      	ldr	r2, [pc, #784]	@ (8000efc <__aeabi_ddiv+0x37c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_ddiv+0x70>
 8000bee:	e177      	b.n	8000ee0 <__aeabi_ddiv+0x360>
 8000bf0:	4659      	mov	r1, fp
 8000bf2:	0f72      	lsrs	r2, r6, #29
 8000bf4:	00c9      	lsls	r1, r1, #3
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	0409      	lsls	r1, r1, #16
 8000bfc:	4311      	orrs	r1, r2
 8000bfe:	468b      	mov	fp, r1
 8000c00:	49bf      	ldr	r1, [pc, #764]	@ (8000f00 <__aeabi_ddiv+0x380>)
 8000c02:	00f2      	lsls	r2, r6, #3
 8000c04:	468c      	mov	ip, r1
 8000c06:	4651      	mov	r1, sl
 8000c08:	4463      	add	r3, ip
 8000c0a:	1acb      	subs	r3, r1, r3
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9e02      	ldr	r6, [sp, #8]
 8000c12:	406e      	eors	r6, r5
 8000c14:	2c0f      	cmp	r4, #15
 8000c16:	d827      	bhi.n	8000c68 <__aeabi_ddiv+0xe8>
 8000c18:	49ba      	ldr	r1, [pc, #744]	@ (8000f04 <__aeabi_ddiv+0x384>)
 8000c1a:	00a4      	lsls	r4, r4, #2
 8000c1c:	5909      	ldr	r1, [r1, r4]
 8000c1e:	468f      	mov	pc, r1
 8000c20:	46cb      	mov	fp, r9
 8000c22:	4642      	mov	r2, r8
 8000c24:	9e02      	ldr	r6, [sp, #8]
 8000c26:	9b03      	ldr	r3, [sp, #12]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d016      	beq.n	8000c5a <__aeabi_ddiv+0xda>
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_ddiv+0xb2>
 8000c30:	e2a6      	b.n	8001180 <__aeabi_ddiv+0x600>
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d000      	beq.n	8000c38 <__aeabi_ddiv+0xb8>
 8000c36:	e0df      	b.n	8000df8 <__aeabi_ddiv+0x278>
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4690      	mov	r8, r2
 8000c40:	051b      	lsls	r3, r3, #20
 8000c42:	4323      	orrs	r3, r4
 8000c44:	07f6      	lsls	r6, r6, #31
 8000c46:	4333      	orrs	r3, r6
 8000c48:	4640      	mov	r0, r8
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	b007      	add	sp, #28
 8000c4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c50:	46bb      	mov	fp, r7
 8000c52:	46b2      	mov	sl, r6
 8000c54:	46a9      	mov	r9, r5
 8000c56:	46a0      	mov	r8, r4
 8000c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4ba6      	ldr	r3, [pc, #664]	@ (8000efc <__aeabi_ddiv+0x37c>)
 8000c62:	e7ed      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000c64:	002e      	movs	r6, r5
 8000c66:	e7df      	b.n	8000c28 <__aeabi_ddiv+0xa8>
 8000c68:	45cb      	cmp	fp, r9
 8000c6a:	d200      	bcs.n	8000c6e <__aeabi_ddiv+0xee>
 8000c6c:	e1d4      	b.n	8001018 <__aeabi_ddiv+0x498>
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_ddiv+0xf2>
 8000c70:	e1cf      	b.n	8001012 <__aeabi_ddiv+0x492>
 8000c72:	2301      	movs	r3, #1
 8000c74:	425b      	negs	r3, r3
 8000c76:	469c      	mov	ip, r3
 8000c78:	4644      	mov	r4, r8
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	44e2      	add	sl, ip
 8000c80:	465b      	mov	r3, fp
 8000c82:	0e15      	lsrs	r5, r2, #24
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	431d      	orrs	r5, r3
 8000c88:	0c19      	lsrs	r1, r3, #16
 8000c8a:	042b      	lsls	r3, r5, #16
 8000c8c:	0212      	lsls	r2, r2, #8
 8000c8e:	9500      	str	r5, [sp, #0]
 8000c90:	0c1d      	lsrs	r5, r3, #16
 8000c92:	4691      	mov	r9, r2
 8000c94:	9102      	str	r1, [sp, #8]
 8000c96:	9503      	str	r5, [sp, #12]
 8000c98:	f7ff fac2 	bl	8000220 <__aeabi_uidivmod>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	436a      	muls	r2, r5
 8000ca0:	040b      	lsls	r3, r1, #16
 8000ca2:	0c21      	lsrs	r1, r4, #16
 8000ca4:	4680      	mov	r8, r0
 8000ca6:	4319      	orrs	r1, r3
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	d909      	bls.n	8000cc0 <__aeabi_ddiv+0x140>
 8000cac:	9d00      	ldr	r5, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	46ac      	mov	ip, r5
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	4461      	add	r1, ip
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	44e0      	add	r8, ip
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	d800      	bhi.n	8000cc0 <__aeabi_ddiv+0x140>
 8000cbe:	e1fb      	b.n	80010b8 <__aeabi_ddiv+0x538>
 8000cc0:	1a88      	subs	r0, r1, r2
 8000cc2:	9902      	ldr	r1, [sp, #8]
 8000cc4:	f7ff faac 	bl	8000220 <__aeabi_uidivmod>
 8000cc8:	9a03      	ldr	r2, [sp, #12]
 8000cca:	0424      	lsls	r4, r4, #16
 8000ccc:	4342      	muls	r2, r0
 8000cce:	0409      	lsls	r1, r1, #16
 8000cd0:	0c24      	lsrs	r4, r4, #16
 8000cd2:	0003      	movs	r3, r0
 8000cd4:	430c      	orrs	r4, r1
 8000cd6:	42a2      	cmp	r2, r4
 8000cd8:	d906      	bls.n	8000ce8 <__aeabi_ddiv+0x168>
 8000cda:	9900      	ldr	r1, [sp, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4464      	add	r4, ip
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	d800      	bhi.n	8000ce8 <__aeabi_ddiv+0x168>
 8000ce6:	e1e1      	b.n	80010ac <__aeabi_ddiv+0x52c>
 8000ce8:	1aa0      	subs	r0, r4, r2
 8000cea:	4642      	mov	r2, r8
 8000cec:	0412      	lsls	r2, r2, #16
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	4693      	mov	fp, r2
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	4659      	mov	r1, fp
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	001d      	movs	r5, r3
 8000cfa:	9304      	str	r3, [sp, #16]
 8000cfc:	040b      	lsls	r3, r1, #16
 8000cfe:	4649      	mov	r1, r9
 8000d00:	0409      	lsls	r1, r1, #16
 8000d02:	0c09      	lsrs	r1, r1, #16
 8000d04:	000c      	movs	r4, r1
 8000d06:	0c1b      	lsrs	r3, r3, #16
 8000d08:	435c      	muls	r4, r3
 8000d0a:	0c12      	lsrs	r2, r2, #16
 8000d0c:	436b      	muls	r3, r5
 8000d0e:	4688      	mov	r8, r1
 8000d10:	4351      	muls	r1, r2
 8000d12:	436a      	muls	r2, r5
 8000d14:	0c25      	lsrs	r5, r4, #16
 8000d16:	46ac      	mov	ip, r5
 8000d18:	185b      	adds	r3, r3, r1
 8000d1a:	4463      	add	r3, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d903      	bls.n	8000d28 <__aeabi_ddiv+0x1a8>
 8000d20:	2180      	movs	r1, #128	@ 0x80
 8000d22:	0249      	lsls	r1, r1, #9
 8000d24:	468c      	mov	ip, r1
 8000d26:	4462      	add	r2, ip
 8000d28:	0c19      	lsrs	r1, r3, #16
 8000d2a:	0424      	lsls	r4, r4, #16
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	0c24      	lsrs	r4, r4, #16
 8000d30:	188a      	adds	r2, r1, r2
 8000d32:	191c      	adds	r4, r3, r4
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d302      	bcc.n	8000d3e <__aeabi_ddiv+0x1be>
 8000d38:	d116      	bne.n	8000d68 <__aeabi_ddiv+0x1e8>
 8000d3a:	42a7      	cmp	r7, r4
 8000d3c:	d214      	bcs.n	8000d68 <__aeabi_ddiv+0x1e8>
 8000d3e:	465b      	mov	r3, fp
 8000d40:	9d00      	ldr	r5, [sp, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	444f      	add	r7, r9
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	454f      	cmp	r7, r9
 8000d4a:	419b      	sbcs	r3, r3
 8000d4c:	46ac      	mov	ip, r5
 8000d4e:	425b      	negs	r3, r3
 8000d50:	4463      	add	r3, ip
 8000d52:	18c0      	adds	r0, r0, r3
 8000d54:	4285      	cmp	r5, r0
 8000d56:	d300      	bcc.n	8000d5a <__aeabi_ddiv+0x1da>
 8000d58:	e1a1      	b.n	800109e <__aeabi_ddiv+0x51e>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	d900      	bls.n	8000d60 <__aeabi_ddiv+0x1e0>
 8000d5e:	e1f6      	b.n	800114e <__aeabi_ddiv+0x5ce>
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0x1e4>
 8000d62:	e1f1      	b.n	8001148 <__aeabi_ddiv+0x5c8>
 8000d64:	9b05      	ldr	r3, [sp, #20]
 8000d66:	469b      	mov	fp, r3
 8000d68:	1b3c      	subs	r4, r7, r4
 8000d6a:	42a7      	cmp	r7, r4
 8000d6c:	41bf      	sbcs	r7, r7
 8000d6e:	9d00      	ldr	r5, [sp, #0]
 8000d70:	1a80      	subs	r0, r0, r2
 8000d72:	427f      	negs	r7, r7
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	4285      	cmp	r5, r0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_ddiv+0x1fc>
 8000d7a:	e1d0      	b.n	800111e <__aeabi_ddiv+0x59e>
 8000d7c:	9902      	ldr	r1, [sp, #8]
 8000d7e:	f7ff fa4f 	bl	8000220 <__aeabi_uidivmod>
 8000d82:	9a03      	ldr	r2, [sp, #12]
 8000d84:	040b      	lsls	r3, r1, #16
 8000d86:	4342      	muls	r2, r0
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	0007      	movs	r7, r0
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	428a      	cmp	r2, r1
 8000d90:	d900      	bls.n	8000d94 <__aeabi_ddiv+0x214>
 8000d92:	e178      	b.n	8001086 <__aeabi_ddiv+0x506>
 8000d94:	1a88      	subs	r0, r1, r2
 8000d96:	9902      	ldr	r1, [sp, #8]
 8000d98:	f7ff fa42 	bl	8000220 <__aeabi_uidivmod>
 8000d9c:	9a03      	ldr	r2, [sp, #12]
 8000d9e:	0424      	lsls	r4, r4, #16
 8000da0:	4342      	muls	r2, r0
 8000da2:	0409      	lsls	r1, r1, #16
 8000da4:	0c24      	lsrs	r4, r4, #16
 8000da6:	0003      	movs	r3, r0
 8000da8:	430c      	orrs	r4, r1
 8000daa:	42a2      	cmp	r2, r4
 8000dac:	d900      	bls.n	8000db0 <__aeabi_ddiv+0x230>
 8000dae:	e15d      	b.n	800106c <__aeabi_ddiv+0x4ec>
 8000db0:	4641      	mov	r1, r8
 8000db2:	1aa4      	subs	r4, r4, r2
 8000db4:	043a      	lsls	r2, r7, #16
 8000db6:	431a      	orrs	r2, r3
 8000db8:	9d04      	ldr	r5, [sp, #16]
 8000dba:	0413      	lsls	r3, r2, #16
 8000dbc:	0c1b      	lsrs	r3, r3, #16
 8000dbe:	4359      	muls	r1, r3
 8000dc0:	4647      	mov	r7, r8
 8000dc2:	436b      	muls	r3, r5
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	0c10      	lsrs	r0, r2, #16
 8000dc8:	4347      	muls	r7, r0
 8000dca:	0c0b      	lsrs	r3, r1, #16
 8000dcc:	44bc      	add	ip, r7
 8000dce:	4463      	add	r3, ip
 8000dd0:	4368      	muls	r0, r5
 8000dd2:	429f      	cmp	r7, r3
 8000dd4:	d903      	bls.n	8000dde <__aeabi_ddiv+0x25e>
 8000dd6:	2580      	movs	r5, #128	@ 0x80
 8000dd8:	026d      	lsls	r5, r5, #9
 8000dda:	46ac      	mov	ip, r5
 8000ddc:	4460      	add	r0, ip
 8000dde:	0c1f      	lsrs	r7, r3, #16
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	041b      	lsls	r3, r3, #16
 8000de4:	0c09      	lsrs	r1, r1, #16
 8000de6:	183f      	adds	r7, r7, r0
 8000de8:	185b      	adds	r3, r3, r1
 8000dea:	42bc      	cmp	r4, r7
 8000dec:	d200      	bcs.n	8000df0 <__aeabi_ddiv+0x270>
 8000dee:	e102      	b.n	8000ff6 <__aeabi_ddiv+0x476>
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x274>
 8000df2:	e0fd      	b.n	8000ff0 <__aeabi_ddiv+0x470>
 8000df4:	2301      	movs	r3, #1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <__aeabi_ddiv+0x388>)
 8000dfa:	4453      	add	r3, sl
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dc00      	bgt.n	8000e02 <__aeabi_ddiv+0x282>
 8000e00:	e0ae      	b.n	8000f60 <__aeabi_ddiv+0x3e0>
 8000e02:	0751      	lsls	r1, r2, #29
 8000e04:	d000      	beq.n	8000e08 <__aeabi_ddiv+0x288>
 8000e06:	e198      	b.n	800113a <__aeabi_ddiv+0x5ba>
 8000e08:	4659      	mov	r1, fp
 8000e0a:	01c9      	lsls	r1, r1, #7
 8000e0c:	d506      	bpl.n	8000e1c <__aeabi_ddiv+0x29c>
 8000e0e:	4659      	mov	r1, fp
 8000e10:	4b3e      	ldr	r3, [pc, #248]	@ (8000f0c <__aeabi_ddiv+0x38c>)
 8000e12:	4019      	ands	r1, r3
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	468b      	mov	fp, r1
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4453      	add	r3, sl
 8000e1c:	493c      	ldr	r1, [pc, #240]	@ (8000f10 <__aeabi_ddiv+0x390>)
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	dd00      	ble.n	8000e24 <__aeabi_ddiv+0x2a4>
 8000e22:	e71a      	b.n	8000c5a <__aeabi_ddiv+0xda>
 8000e24:	4659      	mov	r1, fp
 8000e26:	08d2      	lsrs	r2, r2, #3
 8000e28:	0749      	lsls	r1, r1, #29
 8000e2a:	4311      	orrs	r1, r2
 8000e2c:	465a      	mov	r2, fp
 8000e2e:	055b      	lsls	r3, r3, #21
 8000e30:	0254      	lsls	r4, r2, #9
 8000e32:	4688      	mov	r8, r1
 8000e34:	0b24      	lsrs	r4, r4, #12
 8000e36:	0d5b      	lsrs	r3, r3, #21
 8000e38:	e702      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000e3a:	465a      	mov	r2, fp
 8000e3c:	9b00      	ldr	r3, [sp, #0]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	d100      	bne.n	8000e44 <__aeabi_ddiv+0x2c4>
 8000e42:	e07e      	b.n	8000f42 <__aeabi_ddiv+0x3c2>
 8000e44:	465b      	mov	r3, fp
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x2cc>
 8000e4a:	e100      	b.n	800104e <__aeabi_ddiv+0x4ce>
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	f001 f9cb 	bl	80021e8 <__clzsi2>
 8000e52:	0002      	movs	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	3a0b      	subs	r2, #11
 8000e58:	271d      	movs	r7, #29
 8000e5a:	9e00      	ldr	r6, [sp, #0]
 8000e5c:	1aba      	subs	r2, r7, r2
 8000e5e:	0019      	movs	r1, r3
 8000e60:	4658      	mov	r0, fp
 8000e62:	40d6      	lsrs	r6, r2
 8000e64:	3908      	subs	r1, #8
 8000e66:	4088      	lsls	r0, r1
 8000e68:	0032      	movs	r2, r6
 8000e6a:	4302      	orrs	r2, r0
 8000e6c:	4693      	mov	fp, r2
 8000e6e:	9a00      	ldr	r2, [sp, #0]
 8000e70:	408a      	lsls	r2, r1
 8000e72:	4928      	ldr	r1, [pc, #160]	@ (8000f14 <__aeabi_ddiv+0x394>)
 8000e74:	4453      	add	r3, sl
 8000e76:	468a      	mov	sl, r1
 8000e78:	449a      	add	sl, r3
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e6c8      	b.n	8000c10 <__aeabi_ddiv+0x90>
 8000e7e:	465b      	mov	r3, fp
 8000e80:	4303      	orrs	r3, r0
 8000e82:	4699      	mov	r9, r3
 8000e84:	d056      	beq.n	8000f34 <__aeabi_ddiv+0x3b4>
 8000e86:	465b      	mov	r3, fp
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0x30e>
 8000e8c:	e0cd      	b.n	800102a <__aeabi_ddiv+0x4aa>
 8000e8e:	4658      	mov	r0, fp
 8000e90:	f001 f9aa 	bl	80021e8 <__clzsi2>
 8000e94:	230b      	movs	r3, #11
 8000e96:	425b      	negs	r3, r3
 8000e98:	469c      	mov	ip, r3
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	4484      	add	ip, r0
 8000e9e:	4666      	mov	r6, ip
 8000ea0:	231d      	movs	r3, #29
 8000ea2:	1b9b      	subs	r3, r3, r6
 8000ea4:	0026      	movs	r6, r4
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	4658      	mov	r0, fp
 8000eaa:	40de      	lsrs	r6, r3
 8000eac:	3908      	subs	r1, #8
 8000eae:	4088      	lsls	r0, r1
 8000eb0:	0033      	movs	r3, r6
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	0023      	movs	r3, r4
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	4698      	mov	r8, r3
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <__aeabi_ddiv+0x398>)
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9303      	str	r3, [sp, #12]
 8000ec8:	e682      	b.n	8000bd0 <__aeabi_ddiv+0x50>
 8000eca:	465a      	mov	r2, fp
 8000ecc:	4302      	orrs	r2, r0
 8000ece:	4691      	mov	r9, r2
 8000ed0:	d12a      	bne.n	8000f28 <__aeabi_ddiv+0x3a8>
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	469a      	mov	sl, r3
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	4690      	mov	r8, r2
 8000eda:	2408      	movs	r4, #8
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	e677      	b.n	8000bd0 <__aeabi_ddiv+0x50>
 8000ee0:	465a      	mov	r2, fp
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <__aeabi_ddiv+0x39c>)
 8000ee8:	469c      	mov	ip, r3
 8000eea:	44e2      	add	sl, ip
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d117      	bne.n	8000f20 <__aeabi_ddiv+0x3a0>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	469b      	mov	fp, r3
 8000ef8:	3302      	adds	r3, #2
 8000efa:	e689      	b.n	8000c10 <__aeabi_ddiv+0x90>
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	fffffc01 	.word	0xfffffc01
 8000f04:	08007454 	.word	0x08007454
 8000f08:	000003ff 	.word	0x000003ff
 8000f0c:	feffffff 	.word	0xfeffffff
 8000f10:	000007fe 	.word	0x000007fe
 8000f14:	000003f3 	.word	0x000003f3
 8000f18:	fffffc0d 	.word	0xfffffc0d
 8000f1c:	fffff801 	.word	0xfffff801
 8000f20:	2303      	movs	r3, #3
 8000f22:	0032      	movs	r2, r6
 8000f24:	431c      	orrs	r4, r3
 8000f26:	e673      	b.n	8000c10 <__aeabi_ddiv+0x90>
 8000f28:	469a      	mov	sl, r3
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	46d9      	mov	r9, fp
 8000f2e:	240c      	movs	r4, #12
 8000f30:	9303      	str	r3, [sp, #12]
 8000f32:	e64d      	b.n	8000bd0 <__aeabi_ddiv+0x50>
 8000f34:	2300      	movs	r3, #0
 8000f36:	4698      	mov	r8, r3
 8000f38:	469a      	mov	sl, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2404      	movs	r4, #4
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e646      	b.n	8000bd0 <__aeabi_ddiv+0x50>
 8000f42:	2301      	movs	r3, #1
 8000f44:	431c      	orrs	r4, r3
 8000f46:	2300      	movs	r3, #0
 8000f48:	469b      	mov	fp, r3
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	e660      	b.n	8000c10 <__aeabi_ddiv+0x90>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2480      	movs	r4, #128	@ 0x80
 8000f52:	4698      	mov	r8, r3
 8000f54:	2600      	movs	r6, #0
 8000f56:	4b92      	ldr	r3, [pc, #584]	@ (80011a0 <__aeabi_ddiv+0x620>)
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	e671      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4252      	negs	r2, r2
 8000f60:	2101      	movs	r1, #1
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	2938      	cmp	r1, #56	@ 0x38
 8000f66:	dd00      	ble.n	8000f6a <__aeabi_ddiv+0x3ea>
 8000f68:	e666      	b.n	8000c38 <__aeabi_ddiv+0xb8>
 8000f6a:	291f      	cmp	r1, #31
 8000f6c:	dc00      	bgt.n	8000f70 <__aeabi_ddiv+0x3f0>
 8000f6e:	e0ab      	b.n	80010c8 <__aeabi_ddiv+0x548>
 8000f70:	201f      	movs	r0, #31
 8000f72:	4240      	negs	r0, r0
 8000f74:	1ac3      	subs	r3, r0, r3
 8000f76:	4658      	mov	r0, fp
 8000f78:	40d8      	lsrs	r0, r3
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	2920      	cmp	r1, #32
 8000f7e:	d004      	beq.n	8000f8a <__aeabi_ddiv+0x40a>
 8000f80:	4658      	mov	r0, fp
 8000f82:	4988      	ldr	r1, [pc, #544]	@ (80011a4 <__aeabi_ddiv+0x624>)
 8000f84:	4451      	add	r1, sl
 8000f86:	4088      	lsls	r0, r1
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	1e51      	subs	r1, r2, #1
 8000f8c:	418a      	sbcs	r2, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	2307      	movs	r3, #7
 8000f92:	0019      	movs	r1, r3
 8000f94:	2400      	movs	r4, #0
 8000f96:	4011      	ands	r1, r2
 8000f98:	4213      	tst	r3, r2
 8000f9a:	d00c      	beq.n	8000fb6 <__aeabi_ddiv+0x436>
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_ddiv+0x426>
 8000fa4:	e0f9      	b.n	800119a <__aeabi_ddiv+0x61a>
 8000fa6:	1d11      	adds	r1, r2, #4
 8000fa8:	4291      	cmp	r1, r2
 8000faa:	419b      	sbcs	r3, r3
 8000fac:	000a      	movs	r2, r1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	0759      	lsls	r1, r3, #29
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	0b1c      	lsrs	r4, r3, #12
 8000fb6:	08d2      	lsrs	r2, r2, #3
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	4690      	mov	r8, r2
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e63f      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000fc0:	2480      	movs	r4, #128	@ 0x80
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	0324      	lsls	r4, r4, #12
 8000fc6:	4223      	tst	r3, r4
 8000fc8:	d009      	beq.n	8000fde <__aeabi_ddiv+0x45e>
 8000fca:	465b      	mov	r3, fp
 8000fcc:	4223      	tst	r3, r4
 8000fce:	d106      	bne.n	8000fde <__aeabi_ddiv+0x45e>
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	002e      	movs	r6, r5
 8000fd6:	4690      	mov	r8, r2
 8000fd8:	4b71      	ldr	r3, [pc, #452]	@ (80011a0 <__aeabi_ddiv+0x620>)
 8000fda:	0b24      	lsrs	r4, r4, #12
 8000fdc:	e630      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000fde:	2480      	movs	r4, #128	@ 0x80
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	0324      	lsls	r4, r4, #12
 8000fe4:	431c      	orrs	r4, r3
 8000fe6:	0324      	lsls	r4, r4, #12
 8000fe8:	9e02      	ldr	r6, [sp, #8]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	@ (80011a0 <__aeabi_ddiv+0x620>)
 8000fec:	0b24      	lsrs	r4, r4, #12
 8000fee:	e627      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x476>
 8000ff4:	e700      	b.n	8000df8 <__aeabi_ddiv+0x278>
 8000ff6:	9800      	ldr	r0, [sp, #0]
 8000ff8:	1e51      	subs	r1, r2, #1
 8000ffa:	4684      	mov	ip, r0
 8000ffc:	4464      	add	r4, ip
 8000ffe:	4284      	cmp	r4, r0
 8001000:	d200      	bcs.n	8001004 <__aeabi_ddiv+0x484>
 8001002:	e084      	b.n	800110e <__aeabi_ddiv+0x58e>
 8001004:	42bc      	cmp	r4, r7
 8001006:	d200      	bcs.n	800100a <__aeabi_ddiv+0x48a>
 8001008:	e0ae      	b.n	8001168 <__aeabi_ddiv+0x5e8>
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x48e>
 800100c:	e0c1      	b.n	8001192 <__aeabi_ddiv+0x612>
 800100e:	000a      	movs	r2, r1
 8001010:	e6f0      	b.n	8000df4 <__aeabi_ddiv+0x274>
 8001012:	4542      	cmp	r2, r8
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x498>
 8001016:	e62c      	b.n	8000c72 <__aeabi_ddiv+0xf2>
 8001018:	464b      	mov	r3, r9
 800101a:	07dc      	lsls	r4, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	4643      	mov	r3, r8
 8001020:	085b      	lsrs	r3, r3, #1
 8001022:	431c      	orrs	r4, r3
 8001024:	4643      	mov	r3, r8
 8001026:	07df      	lsls	r7, r3, #31
 8001028:	e62a      	b.n	8000c80 <__aeabi_ddiv+0x100>
 800102a:	f001 f8dd 	bl	80021e8 <__clzsi2>
 800102e:	2315      	movs	r3, #21
 8001030:	469c      	mov	ip, r3
 8001032:	4484      	add	ip, r0
 8001034:	0002      	movs	r2, r0
 8001036:	4663      	mov	r3, ip
 8001038:	3220      	adds	r2, #32
 800103a:	2b1c      	cmp	r3, #28
 800103c:	dc00      	bgt.n	8001040 <__aeabi_ddiv+0x4c0>
 800103e:	e72e      	b.n	8000e9e <__aeabi_ddiv+0x31e>
 8001040:	0023      	movs	r3, r4
 8001042:	3808      	subs	r0, #8
 8001044:	4083      	lsls	r3, r0
 8001046:	4699      	mov	r9, r3
 8001048:	2300      	movs	r3, #0
 800104a:	4698      	mov	r8, r3
 800104c:	e736      	b.n	8000ebc <__aeabi_ddiv+0x33c>
 800104e:	f001 f8cb 	bl	80021e8 <__clzsi2>
 8001052:	0002      	movs	r2, r0
 8001054:	0003      	movs	r3, r0
 8001056:	3215      	adds	r2, #21
 8001058:	3320      	adds	r3, #32
 800105a:	2a1c      	cmp	r2, #28
 800105c:	dc00      	bgt.n	8001060 <__aeabi_ddiv+0x4e0>
 800105e:	e6fb      	b.n	8000e58 <__aeabi_ddiv+0x2d8>
 8001060:	9900      	ldr	r1, [sp, #0]
 8001062:	3808      	subs	r0, #8
 8001064:	4081      	lsls	r1, r0
 8001066:	2200      	movs	r2, #0
 8001068:	468b      	mov	fp, r1
 800106a:	e702      	b.n	8000e72 <__aeabi_ddiv+0x2f2>
 800106c:	9900      	ldr	r1, [sp, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	468c      	mov	ip, r1
 8001072:	4464      	add	r4, ip
 8001074:	42a1      	cmp	r1, r4
 8001076:	d900      	bls.n	800107a <__aeabi_ddiv+0x4fa>
 8001078:	e69a      	b.n	8000db0 <__aeabi_ddiv+0x230>
 800107a:	42a2      	cmp	r2, r4
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x500>
 800107e:	e697      	b.n	8000db0 <__aeabi_ddiv+0x230>
 8001080:	1e83      	subs	r3, r0, #2
 8001082:	4464      	add	r4, ip
 8001084:	e694      	b.n	8000db0 <__aeabi_ddiv+0x230>
 8001086:	46ac      	mov	ip, r5
 8001088:	4461      	add	r1, ip
 800108a:	3f01      	subs	r7, #1
 800108c:	428d      	cmp	r5, r1
 800108e:	d900      	bls.n	8001092 <__aeabi_ddiv+0x512>
 8001090:	e680      	b.n	8000d94 <__aeabi_ddiv+0x214>
 8001092:	428a      	cmp	r2, r1
 8001094:	d800      	bhi.n	8001098 <__aeabi_ddiv+0x518>
 8001096:	e67d      	b.n	8000d94 <__aeabi_ddiv+0x214>
 8001098:	1e87      	subs	r7, r0, #2
 800109a:	4461      	add	r1, ip
 800109c:	e67a      	b.n	8000d94 <__aeabi_ddiv+0x214>
 800109e:	4285      	cmp	r5, r0
 80010a0:	d000      	beq.n	80010a4 <__aeabi_ddiv+0x524>
 80010a2:	e65f      	b.n	8000d64 <__aeabi_ddiv+0x1e4>
 80010a4:	45b9      	cmp	r9, r7
 80010a6:	d900      	bls.n	80010aa <__aeabi_ddiv+0x52a>
 80010a8:	e65c      	b.n	8000d64 <__aeabi_ddiv+0x1e4>
 80010aa:	e656      	b.n	8000d5a <__aeabi_ddiv+0x1da>
 80010ac:	42a2      	cmp	r2, r4
 80010ae:	d800      	bhi.n	80010b2 <__aeabi_ddiv+0x532>
 80010b0:	e61a      	b.n	8000ce8 <__aeabi_ddiv+0x168>
 80010b2:	1e83      	subs	r3, r0, #2
 80010b4:	4464      	add	r4, ip
 80010b6:	e617      	b.n	8000ce8 <__aeabi_ddiv+0x168>
 80010b8:	428a      	cmp	r2, r1
 80010ba:	d800      	bhi.n	80010be <__aeabi_ddiv+0x53e>
 80010bc:	e600      	b.n	8000cc0 <__aeabi_ddiv+0x140>
 80010be:	46ac      	mov	ip, r5
 80010c0:	1e83      	subs	r3, r0, #2
 80010c2:	4698      	mov	r8, r3
 80010c4:	4461      	add	r1, ip
 80010c6:	e5fb      	b.n	8000cc0 <__aeabi_ddiv+0x140>
 80010c8:	4837      	ldr	r0, [pc, #220]	@ (80011a8 <__aeabi_ddiv+0x628>)
 80010ca:	0014      	movs	r4, r2
 80010cc:	4450      	add	r0, sl
 80010ce:	4082      	lsls	r2, r0
 80010d0:	465b      	mov	r3, fp
 80010d2:	0017      	movs	r7, r2
 80010d4:	4083      	lsls	r3, r0
 80010d6:	40cc      	lsrs	r4, r1
 80010d8:	1e7a      	subs	r2, r7, #1
 80010da:	4197      	sbcs	r7, r2
 80010dc:	4323      	orrs	r3, r4
 80010de:	433b      	orrs	r3, r7
 80010e0:	001a      	movs	r2, r3
 80010e2:	465b      	mov	r3, fp
 80010e4:	40cb      	lsrs	r3, r1
 80010e6:	0751      	lsls	r1, r2, #29
 80010e8:	d009      	beq.n	80010fe <__aeabi_ddiv+0x57e>
 80010ea:	210f      	movs	r1, #15
 80010ec:	4011      	ands	r1, r2
 80010ee:	2904      	cmp	r1, #4
 80010f0:	d005      	beq.n	80010fe <__aeabi_ddiv+0x57e>
 80010f2:	1d11      	adds	r1, r2, #4
 80010f4:	4291      	cmp	r1, r2
 80010f6:	4192      	sbcs	r2, r2
 80010f8:	4252      	negs	r2, r2
 80010fa:	189b      	adds	r3, r3, r2
 80010fc:	000a      	movs	r2, r1
 80010fe:	0219      	lsls	r1, r3, #8
 8001100:	d400      	bmi.n	8001104 <__aeabi_ddiv+0x584>
 8001102:	e755      	b.n	8000fb0 <__aeabi_ddiv+0x430>
 8001104:	2200      	movs	r2, #0
 8001106:	2301      	movs	r3, #1
 8001108:	2400      	movs	r4, #0
 800110a:	4690      	mov	r8, r2
 800110c:	e598      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 800110e:	000a      	movs	r2, r1
 8001110:	42bc      	cmp	r4, r7
 8001112:	d000      	beq.n	8001116 <__aeabi_ddiv+0x596>
 8001114:	e66e      	b.n	8000df4 <__aeabi_ddiv+0x274>
 8001116:	454b      	cmp	r3, r9
 8001118:	d000      	beq.n	800111c <__aeabi_ddiv+0x59c>
 800111a:	e66b      	b.n	8000df4 <__aeabi_ddiv+0x274>
 800111c:	e66c      	b.n	8000df8 <__aeabi_ddiv+0x278>
 800111e:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <__aeabi_ddiv+0x62c>)
 8001120:	4a23      	ldr	r2, [pc, #140]	@ (80011b0 <__aeabi_ddiv+0x630>)
 8001122:	4453      	add	r3, sl
 8001124:	4592      	cmp	sl, r2
 8001126:	da00      	bge.n	800112a <__aeabi_ddiv+0x5aa>
 8001128:	e718      	b.n	8000f5c <__aeabi_ddiv+0x3dc>
 800112a:	2101      	movs	r1, #1
 800112c:	4249      	negs	r1, r1
 800112e:	1d0a      	adds	r2, r1, #4
 8001130:	428a      	cmp	r2, r1
 8001132:	4189      	sbcs	r1, r1
 8001134:	4249      	negs	r1, r1
 8001136:	448b      	add	fp, r1
 8001138:	e666      	b.n	8000e08 <__aeabi_ddiv+0x288>
 800113a:	210f      	movs	r1, #15
 800113c:	4011      	ands	r1, r2
 800113e:	2904      	cmp	r1, #4
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x5c4>
 8001142:	e661      	b.n	8000e08 <__aeabi_ddiv+0x288>
 8001144:	0011      	movs	r1, r2
 8001146:	e7f2      	b.n	800112e <__aeabi_ddiv+0x5ae>
 8001148:	42bc      	cmp	r4, r7
 800114a:	d800      	bhi.n	800114e <__aeabi_ddiv+0x5ce>
 800114c:	e60a      	b.n	8000d64 <__aeabi_ddiv+0x1e4>
 800114e:	2302      	movs	r3, #2
 8001150:	425b      	negs	r3, r3
 8001152:	469c      	mov	ip, r3
 8001154:	9900      	ldr	r1, [sp, #0]
 8001156:	444f      	add	r7, r9
 8001158:	454f      	cmp	r7, r9
 800115a:	419b      	sbcs	r3, r3
 800115c:	44e3      	add	fp, ip
 800115e:	468c      	mov	ip, r1
 8001160:	425b      	negs	r3, r3
 8001162:	4463      	add	r3, ip
 8001164:	18c0      	adds	r0, r0, r3
 8001166:	e5ff      	b.n	8000d68 <__aeabi_ddiv+0x1e8>
 8001168:	4649      	mov	r1, r9
 800116a:	9d00      	ldr	r5, [sp, #0]
 800116c:	0048      	lsls	r0, r1, #1
 800116e:	4548      	cmp	r0, r9
 8001170:	4189      	sbcs	r1, r1
 8001172:	46ac      	mov	ip, r5
 8001174:	4249      	negs	r1, r1
 8001176:	4461      	add	r1, ip
 8001178:	4681      	mov	r9, r0
 800117a:	3a02      	subs	r2, #2
 800117c:	1864      	adds	r4, r4, r1
 800117e:	e7c7      	b.n	8001110 <__aeabi_ddiv+0x590>
 8001180:	2480      	movs	r4, #128	@ 0x80
 8001182:	465b      	mov	r3, fp
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	431c      	orrs	r4, r3
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	4690      	mov	r8, r2
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__aeabi_ddiv+0x620>)
 800118e:	0b24      	lsrs	r4, r4, #12
 8001190:	e556      	b.n	8000c40 <__aeabi_ddiv+0xc0>
 8001192:	4599      	cmp	r9, r3
 8001194:	d3e8      	bcc.n	8001168 <__aeabi_ddiv+0x5e8>
 8001196:	000a      	movs	r2, r1
 8001198:	e7bd      	b.n	8001116 <__aeabi_ddiv+0x596>
 800119a:	2300      	movs	r3, #0
 800119c:	e708      	b.n	8000fb0 <__aeabi_ddiv+0x430>
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	000007ff 	.word	0x000007ff
 80011a4:	0000043e 	.word	0x0000043e
 80011a8:	0000041e 	.word	0x0000041e
 80011ac:	000003ff 	.word	0x000003ff
 80011b0:	fffffc02 	.word	0xfffffc02

080011b4 <__eqdf2>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4657      	mov	r7, sl
 80011b8:	46de      	mov	lr, fp
 80011ba:	464e      	mov	r6, r9
 80011bc:	4645      	mov	r5, r8
 80011be:	b5e0      	push	{r5, r6, r7, lr}
 80011c0:	000d      	movs	r5, r1
 80011c2:	0004      	movs	r4, r0
 80011c4:	0fe8      	lsrs	r0, r5, #31
 80011c6:	4683      	mov	fp, r0
 80011c8:	0309      	lsls	r1, r1, #12
 80011ca:	0fd8      	lsrs	r0, r3, #31
 80011cc:	0b09      	lsrs	r1, r1, #12
 80011ce:	4682      	mov	sl, r0
 80011d0:	4819      	ldr	r0, [pc, #100]	@ (8001238 <__eqdf2+0x84>)
 80011d2:	468c      	mov	ip, r1
 80011d4:	031f      	lsls	r7, r3, #12
 80011d6:	0069      	lsls	r1, r5, #1
 80011d8:	005e      	lsls	r6, r3, #1
 80011da:	0d49      	lsrs	r1, r1, #21
 80011dc:	0b3f      	lsrs	r7, r7, #12
 80011de:	0d76      	lsrs	r6, r6, #21
 80011e0:	4281      	cmp	r1, r0
 80011e2:	d018      	beq.n	8001216 <__eqdf2+0x62>
 80011e4:	4286      	cmp	r6, r0
 80011e6:	d00f      	beq.n	8001208 <__eqdf2+0x54>
 80011e8:	2001      	movs	r0, #1
 80011ea:	42b1      	cmp	r1, r6
 80011ec:	d10d      	bne.n	800120a <__eqdf2+0x56>
 80011ee:	45bc      	cmp	ip, r7
 80011f0:	d10b      	bne.n	800120a <__eqdf2+0x56>
 80011f2:	4294      	cmp	r4, r2
 80011f4:	d109      	bne.n	800120a <__eqdf2+0x56>
 80011f6:	45d3      	cmp	fp, sl
 80011f8:	d01c      	beq.n	8001234 <__eqdf2+0x80>
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d105      	bne.n	800120a <__eqdf2+0x56>
 80011fe:	4660      	mov	r0, ip
 8001200:	4320      	orrs	r0, r4
 8001202:	1e43      	subs	r3, r0, #1
 8001204:	4198      	sbcs	r0, r3
 8001206:	e000      	b.n	800120a <__eqdf2+0x56>
 8001208:	2001      	movs	r0, #1
 800120a:	bcf0      	pop	{r4, r5, r6, r7}
 800120c:	46bb      	mov	fp, r7
 800120e:	46b2      	mov	sl, r6
 8001210:	46a9      	mov	r9, r5
 8001212:	46a0      	mov	r8, r4
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	2001      	movs	r0, #1
 8001218:	428e      	cmp	r6, r1
 800121a:	d1f6      	bne.n	800120a <__eqdf2+0x56>
 800121c:	4661      	mov	r1, ip
 800121e:	4339      	orrs	r1, r7
 8001220:	000f      	movs	r7, r1
 8001222:	4317      	orrs	r7, r2
 8001224:	4327      	orrs	r7, r4
 8001226:	d1f0      	bne.n	800120a <__eqdf2+0x56>
 8001228:	465b      	mov	r3, fp
 800122a:	4652      	mov	r2, sl
 800122c:	1a98      	subs	r0, r3, r2
 800122e:	1e43      	subs	r3, r0, #1
 8001230:	4198      	sbcs	r0, r3
 8001232:	e7ea      	b.n	800120a <__eqdf2+0x56>
 8001234:	2000      	movs	r0, #0
 8001236:	e7e8      	b.n	800120a <__eqdf2+0x56>
 8001238:	000007ff 	.word	0x000007ff

0800123c <__gedf2>:
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	4657      	mov	r7, sl
 8001240:	464e      	mov	r6, r9
 8001242:	4645      	mov	r5, r8
 8001244:	46de      	mov	lr, fp
 8001246:	b5e0      	push	{r5, r6, r7, lr}
 8001248:	000d      	movs	r5, r1
 800124a:	030f      	lsls	r7, r1, #12
 800124c:	0b39      	lsrs	r1, r7, #12
 800124e:	b083      	sub	sp, #12
 8001250:	0004      	movs	r4, r0
 8001252:	4680      	mov	r8, r0
 8001254:	9101      	str	r1, [sp, #4]
 8001256:	0058      	lsls	r0, r3, #1
 8001258:	0fe9      	lsrs	r1, r5, #31
 800125a:	4f31      	ldr	r7, [pc, #196]	@ (8001320 <__gedf2+0xe4>)
 800125c:	0d40      	lsrs	r0, r0, #21
 800125e:	468c      	mov	ip, r1
 8001260:	006e      	lsls	r6, r5, #1
 8001262:	0319      	lsls	r1, r3, #12
 8001264:	4682      	mov	sl, r0
 8001266:	4691      	mov	r9, r2
 8001268:	0d76      	lsrs	r6, r6, #21
 800126a:	0b09      	lsrs	r1, r1, #12
 800126c:	0fd8      	lsrs	r0, r3, #31
 800126e:	42be      	cmp	r6, r7
 8001270:	d01f      	beq.n	80012b2 <__gedf2+0x76>
 8001272:	45ba      	cmp	sl, r7
 8001274:	d00f      	beq.n	8001296 <__gedf2+0x5a>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d12f      	bne.n	80012da <__gedf2+0x9e>
 800127a:	4655      	mov	r5, sl
 800127c:	9e01      	ldr	r6, [sp, #4]
 800127e:	4334      	orrs	r4, r6
 8001280:	2d00      	cmp	r5, #0
 8001282:	d127      	bne.n	80012d4 <__gedf2+0x98>
 8001284:	430a      	orrs	r2, r1
 8001286:	d03a      	beq.n	80012fe <__gedf2+0xc2>
 8001288:	2c00      	cmp	r4, #0
 800128a:	d145      	bne.n	8001318 <__gedf2+0xdc>
 800128c:	2800      	cmp	r0, #0
 800128e:	d11a      	bne.n	80012c6 <__gedf2+0x8a>
 8001290:	2001      	movs	r0, #1
 8001292:	4240      	negs	r0, r0
 8001294:	e017      	b.n	80012c6 <__gedf2+0x8a>
 8001296:	4311      	orrs	r1, r2
 8001298:	d13b      	bne.n	8001312 <__gedf2+0xd6>
 800129a:	2e00      	cmp	r6, #0
 800129c:	d102      	bne.n	80012a4 <__gedf2+0x68>
 800129e:	9f01      	ldr	r7, [sp, #4]
 80012a0:	4327      	orrs	r7, r4
 80012a2:	d0f3      	beq.n	800128c <__gedf2+0x50>
 80012a4:	4584      	cmp	ip, r0
 80012a6:	d109      	bne.n	80012bc <__gedf2+0x80>
 80012a8:	4663      	mov	r3, ip
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <__gedf2+0x54>
 80012ae:	4660      	mov	r0, ip
 80012b0:	e009      	b.n	80012c6 <__gedf2+0x8a>
 80012b2:	9f01      	ldr	r7, [sp, #4]
 80012b4:	4327      	orrs	r7, r4
 80012b6:	d12c      	bne.n	8001312 <__gedf2+0xd6>
 80012b8:	45b2      	cmp	sl, r6
 80012ba:	d024      	beq.n	8001306 <__gedf2+0xca>
 80012bc:	4663      	mov	r3, ip
 80012be:	2002      	movs	r0, #2
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4018      	ands	r0, r3
 80012c4:	3801      	subs	r0, #1
 80012c6:	b003      	add	sp, #12
 80012c8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ca:	46bb      	mov	fp, r7
 80012cc:	46b2      	mov	sl, r6
 80012ce:	46a9      	mov	r9, r5
 80012d0:	46a0      	mov	r8, r4
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	2c00      	cmp	r4, #0
 80012d6:	d0d9      	beq.n	800128c <__gedf2+0x50>
 80012d8:	e7e4      	b.n	80012a4 <__gedf2+0x68>
 80012da:	4654      	mov	r4, sl
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d0ed      	beq.n	80012bc <__gedf2+0x80>
 80012e0:	4584      	cmp	ip, r0
 80012e2:	d1eb      	bne.n	80012bc <__gedf2+0x80>
 80012e4:	4556      	cmp	r6, sl
 80012e6:	dce9      	bgt.n	80012bc <__gedf2+0x80>
 80012e8:	dbde      	blt.n	80012a8 <__gedf2+0x6c>
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	428b      	cmp	r3, r1
 80012ee:	d8e5      	bhi.n	80012bc <__gedf2+0x80>
 80012f0:	d1da      	bne.n	80012a8 <__gedf2+0x6c>
 80012f2:	45c8      	cmp	r8, r9
 80012f4:	d8e2      	bhi.n	80012bc <__gedf2+0x80>
 80012f6:	2000      	movs	r0, #0
 80012f8:	45c8      	cmp	r8, r9
 80012fa:	d2e4      	bcs.n	80012c6 <__gedf2+0x8a>
 80012fc:	e7d4      	b.n	80012a8 <__gedf2+0x6c>
 80012fe:	2000      	movs	r0, #0
 8001300:	2c00      	cmp	r4, #0
 8001302:	d0e0      	beq.n	80012c6 <__gedf2+0x8a>
 8001304:	e7da      	b.n	80012bc <__gedf2+0x80>
 8001306:	4311      	orrs	r1, r2
 8001308:	d103      	bne.n	8001312 <__gedf2+0xd6>
 800130a:	4584      	cmp	ip, r0
 800130c:	d1d6      	bne.n	80012bc <__gedf2+0x80>
 800130e:	2000      	movs	r0, #0
 8001310:	e7d9      	b.n	80012c6 <__gedf2+0x8a>
 8001312:	2002      	movs	r0, #2
 8001314:	4240      	negs	r0, r0
 8001316:	e7d6      	b.n	80012c6 <__gedf2+0x8a>
 8001318:	4584      	cmp	ip, r0
 800131a:	d0e6      	beq.n	80012ea <__gedf2+0xae>
 800131c:	e7ce      	b.n	80012bc <__gedf2+0x80>
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	000007ff 	.word	0x000007ff

08001324 <__ledf2>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	000d      	movs	r5, r1
 8001332:	030f      	lsls	r7, r1, #12
 8001334:	0004      	movs	r4, r0
 8001336:	4680      	mov	r8, r0
 8001338:	0fe8      	lsrs	r0, r5, #31
 800133a:	0b39      	lsrs	r1, r7, #12
 800133c:	4684      	mov	ip, r0
 800133e:	b083      	sub	sp, #12
 8001340:	0058      	lsls	r0, r3, #1
 8001342:	4f30      	ldr	r7, [pc, #192]	@ (8001404 <__ledf2+0xe0>)
 8001344:	0d40      	lsrs	r0, r0, #21
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	031e      	lsls	r6, r3, #12
 800134a:	0069      	lsls	r1, r5, #1
 800134c:	4682      	mov	sl, r0
 800134e:	4691      	mov	r9, r2
 8001350:	0d49      	lsrs	r1, r1, #21
 8001352:	0b36      	lsrs	r6, r6, #12
 8001354:	0fd8      	lsrs	r0, r3, #31
 8001356:	42b9      	cmp	r1, r7
 8001358:	d020      	beq.n	800139c <__ledf2+0x78>
 800135a:	45ba      	cmp	sl, r7
 800135c:	d00f      	beq.n	800137e <__ledf2+0x5a>
 800135e:	2900      	cmp	r1, #0
 8001360:	d12b      	bne.n	80013ba <__ledf2+0x96>
 8001362:	9901      	ldr	r1, [sp, #4]
 8001364:	430c      	orrs	r4, r1
 8001366:	4651      	mov	r1, sl
 8001368:	2900      	cmp	r1, #0
 800136a:	d137      	bne.n	80013dc <__ledf2+0xb8>
 800136c:	4332      	orrs	r2, r6
 800136e:	d038      	beq.n	80013e2 <__ledf2+0xbe>
 8001370:	2c00      	cmp	r4, #0
 8001372:	d144      	bne.n	80013fe <__ledf2+0xda>
 8001374:	2800      	cmp	r0, #0
 8001376:	d119      	bne.n	80013ac <__ledf2+0x88>
 8001378:	2001      	movs	r0, #1
 800137a:	4240      	negs	r0, r0
 800137c:	e016      	b.n	80013ac <__ledf2+0x88>
 800137e:	4316      	orrs	r6, r2
 8001380:	d113      	bne.n	80013aa <__ledf2+0x86>
 8001382:	2900      	cmp	r1, #0
 8001384:	d102      	bne.n	800138c <__ledf2+0x68>
 8001386:	9f01      	ldr	r7, [sp, #4]
 8001388:	4327      	orrs	r7, r4
 800138a:	d0f3      	beq.n	8001374 <__ledf2+0x50>
 800138c:	4584      	cmp	ip, r0
 800138e:	d020      	beq.n	80013d2 <__ledf2+0xae>
 8001390:	4663      	mov	r3, ip
 8001392:	2002      	movs	r0, #2
 8001394:	3b01      	subs	r3, #1
 8001396:	4018      	ands	r0, r3
 8001398:	3801      	subs	r0, #1
 800139a:	e007      	b.n	80013ac <__ledf2+0x88>
 800139c:	9f01      	ldr	r7, [sp, #4]
 800139e:	4327      	orrs	r7, r4
 80013a0:	d103      	bne.n	80013aa <__ledf2+0x86>
 80013a2:	458a      	cmp	sl, r1
 80013a4:	d1f4      	bne.n	8001390 <__ledf2+0x6c>
 80013a6:	4316      	orrs	r6, r2
 80013a8:	d01f      	beq.n	80013ea <__ledf2+0xc6>
 80013aa:	2002      	movs	r0, #2
 80013ac:	b003      	add	sp, #12
 80013ae:	bcf0      	pop	{r4, r5, r6, r7}
 80013b0:	46bb      	mov	fp, r7
 80013b2:	46b2      	mov	sl, r6
 80013b4:	46a9      	mov	r9, r5
 80013b6:	46a0      	mov	r8, r4
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	4654      	mov	r4, sl
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d0e7      	beq.n	8001390 <__ledf2+0x6c>
 80013c0:	4584      	cmp	ip, r0
 80013c2:	d1e5      	bne.n	8001390 <__ledf2+0x6c>
 80013c4:	4551      	cmp	r1, sl
 80013c6:	dce3      	bgt.n	8001390 <__ledf2+0x6c>
 80013c8:	db03      	blt.n	80013d2 <__ledf2+0xae>
 80013ca:	9b01      	ldr	r3, [sp, #4]
 80013cc:	42b3      	cmp	r3, r6
 80013ce:	d8df      	bhi.n	8001390 <__ledf2+0x6c>
 80013d0:	d00f      	beq.n	80013f2 <__ledf2+0xce>
 80013d2:	4663      	mov	r3, ip
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0cf      	beq.n	8001378 <__ledf2+0x54>
 80013d8:	4660      	mov	r0, ip
 80013da:	e7e7      	b.n	80013ac <__ledf2+0x88>
 80013dc:	2c00      	cmp	r4, #0
 80013de:	d0c9      	beq.n	8001374 <__ledf2+0x50>
 80013e0:	e7d4      	b.n	800138c <__ledf2+0x68>
 80013e2:	2000      	movs	r0, #0
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d0e1      	beq.n	80013ac <__ledf2+0x88>
 80013e8:	e7d2      	b.n	8001390 <__ledf2+0x6c>
 80013ea:	4584      	cmp	ip, r0
 80013ec:	d1d0      	bne.n	8001390 <__ledf2+0x6c>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7dc      	b.n	80013ac <__ledf2+0x88>
 80013f2:	45c8      	cmp	r8, r9
 80013f4:	d8cc      	bhi.n	8001390 <__ledf2+0x6c>
 80013f6:	2000      	movs	r0, #0
 80013f8:	45c8      	cmp	r8, r9
 80013fa:	d2d7      	bcs.n	80013ac <__ledf2+0x88>
 80013fc:	e7e9      	b.n	80013d2 <__ledf2+0xae>
 80013fe:	4584      	cmp	ip, r0
 8001400:	d0e3      	beq.n	80013ca <__ledf2+0xa6>
 8001402:	e7c5      	b.n	8001390 <__ledf2+0x6c>
 8001404:	000007ff 	.word	0x000007ff

08001408 <__aeabi_dmul>:
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	4657      	mov	r7, sl
 800140c:	46de      	mov	lr, fp
 800140e:	464e      	mov	r6, r9
 8001410:	4645      	mov	r5, r8
 8001412:	b5e0      	push	{r5, r6, r7, lr}
 8001414:	001f      	movs	r7, r3
 8001416:	030b      	lsls	r3, r1, #12
 8001418:	0b1b      	lsrs	r3, r3, #12
 800141a:	0016      	movs	r6, r2
 800141c:	469a      	mov	sl, r3
 800141e:	0fca      	lsrs	r2, r1, #31
 8001420:	004b      	lsls	r3, r1, #1
 8001422:	0004      	movs	r4, r0
 8001424:	4693      	mov	fp, r2
 8001426:	b087      	sub	sp, #28
 8001428:	0d5b      	lsrs	r3, r3, #21
 800142a:	d100      	bne.n	800142e <__aeabi_dmul+0x26>
 800142c:	e0d5      	b.n	80015da <__aeabi_dmul+0x1d2>
 800142e:	4abb      	ldr	r2, [pc, #748]	@ (800171c <__aeabi_dmul+0x314>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d100      	bne.n	8001436 <__aeabi_dmul+0x2e>
 8001434:	e0f8      	b.n	8001628 <__aeabi_dmul+0x220>
 8001436:	4651      	mov	r1, sl
 8001438:	0f42      	lsrs	r2, r0, #29
 800143a:	00c9      	lsls	r1, r1, #3
 800143c:	430a      	orrs	r2, r1
 800143e:	2180      	movs	r1, #128	@ 0x80
 8001440:	0409      	lsls	r1, r1, #16
 8001442:	4311      	orrs	r1, r2
 8001444:	00c2      	lsls	r2, r0, #3
 8001446:	4691      	mov	r9, r2
 8001448:	4ab5      	ldr	r2, [pc, #724]	@ (8001720 <__aeabi_dmul+0x318>)
 800144a:	468a      	mov	sl, r1
 800144c:	189d      	adds	r5, r3, r2
 800144e:	2300      	movs	r3, #0
 8001450:	4698      	mov	r8, r3
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	033c      	lsls	r4, r7, #12
 8001456:	007b      	lsls	r3, r7, #1
 8001458:	0ffa      	lsrs	r2, r7, #31
 800145a:	0030      	movs	r0, r6
 800145c:	0b24      	lsrs	r4, r4, #12
 800145e:	0d5b      	lsrs	r3, r3, #21
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	d100      	bne.n	8001466 <__aeabi_dmul+0x5e>
 8001464:	e096      	b.n	8001594 <__aeabi_dmul+0x18c>
 8001466:	4aad      	ldr	r2, [pc, #692]	@ (800171c <__aeabi_dmul+0x314>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d031      	beq.n	80014d0 <__aeabi_dmul+0xc8>
 800146c:	0f72      	lsrs	r2, r6, #29
 800146e:	00e4      	lsls	r4, r4, #3
 8001470:	4322      	orrs	r2, r4
 8001472:	2480      	movs	r4, #128	@ 0x80
 8001474:	0424      	lsls	r4, r4, #16
 8001476:	4314      	orrs	r4, r2
 8001478:	4aa9      	ldr	r2, [pc, #676]	@ (8001720 <__aeabi_dmul+0x318>)
 800147a:	00f0      	lsls	r0, r6, #3
 800147c:	4694      	mov	ip, r2
 800147e:	4463      	add	r3, ip
 8001480:	195b      	adds	r3, r3, r5
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	4642      	mov	r2, r8
 8001488:	2600      	movs	r6, #0
 800148a:	2a0a      	cmp	r2, #10
 800148c:	dc42      	bgt.n	8001514 <__aeabi_dmul+0x10c>
 800148e:	465a      	mov	r2, fp
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	404a      	eors	r2, r1
 8001494:	4693      	mov	fp, r2
 8001496:	4642      	mov	r2, r8
 8001498:	2a02      	cmp	r2, #2
 800149a:	dc32      	bgt.n	8001502 <__aeabi_dmul+0xfa>
 800149c:	3a01      	subs	r2, #1
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d900      	bls.n	80014a4 <__aeabi_dmul+0x9c>
 80014a2:	e149      	b.n	8001738 <__aeabi_dmul+0x330>
 80014a4:	2e02      	cmp	r6, #2
 80014a6:	d100      	bne.n	80014aa <__aeabi_dmul+0xa2>
 80014a8:	e0ca      	b.n	8001640 <__aeabi_dmul+0x238>
 80014aa:	2e01      	cmp	r6, #1
 80014ac:	d13d      	bne.n	800152a <__aeabi_dmul+0x122>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2400      	movs	r4, #0
 80014b2:	2200      	movs	r2, #0
 80014b4:	0010      	movs	r0, r2
 80014b6:	465a      	mov	r2, fp
 80014b8:	051b      	lsls	r3, r3, #20
 80014ba:	4323      	orrs	r3, r4
 80014bc:	07d2      	lsls	r2, r2, #31
 80014be:	4313      	orrs	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	b007      	add	sp, #28
 80014c4:	bcf0      	pop	{r4, r5, r6, r7}
 80014c6:	46bb      	mov	fp, r7
 80014c8:	46b2      	mov	sl, r6
 80014ca:	46a9      	mov	r9, r5
 80014cc:	46a0      	mov	r8, r4
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	4b92      	ldr	r3, [pc, #584]	@ (800171c <__aeabi_dmul+0x314>)
 80014d2:	4326      	orrs	r6, r4
 80014d4:	18eb      	adds	r3, r5, r3
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dmul+0xd4>
 80014da:	e0bb      	b.n	8001654 <__aeabi_dmul+0x24c>
 80014dc:	2203      	movs	r2, #3
 80014de:	4641      	mov	r1, r8
 80014e0:	4311      	orrs	r1, r2
 80014e2:	465a      	mov	r2, fp
 80014e4:	4688      	mov	r8, r1
 80014e6:	9900      	ldr	r1, [sp, #0]
 80014e8:	404a      	eors	r2, r1
 80014ea:	2180      	movs	r1, #128	@ 0x80
 80014ec:	0109      	lsls	r1, r1, #4
 80014ee:	468c      	mov	ip, r1
 80014f0:	0029      	movs	r1, r5
 80014f2:	4461      	add	r1, ip
 80014f4:	9101      	str	r1, [sp, #4]
 80014f6:	4641      	mov	r1, r8
 80014f8:	290a      	cmp	r1, #10
 80014fa:	dd00      	ble.n	80014fe <__aeabi_dmul+0xf6>
 80014fc:	e233      	b.n	8001966 <__aeabi_dmul+0x55e>
 80014fe:	4693      	mov	fp, r2
 8001500:	2603      	movs	r6, #3
 8001502:	4642      	mov	r2, r8
 8001504:	2701      	movs	r7, #1
 8001506:	4097      	lsls	r7, r2
 8001508:	21a6      	movs	r1, #166	@ 0xa6
 800150a:	003a      	movs	r2, r7
 800150c:	00c9      	lsls	r1, r1, #3
 800150e:	400a      	ands	r2, r1
 8001510:	420f      	tst	r7, r1
 8001512:	d031      	beq.n	8001578 <__aeabi_dmul+0x170>
 8001514:	9e02      	ldr	r6, [sp, #8]
 8001516:	2e02      	cmp	r6, #2
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x114>
 800151a:	e235      	b.n	8001988 <__aeabi_dmul+0x580>
 800151c:	2e03      	cmp	r6, #3
 800151e:	d100      	bne.n	8001522 <__aeabi_dmul+0x11a>
 8001520:	e1d2      	b.n	80018c8 <__aeabi_dmul+0x4c0>
 8001522:	4654      	mov	r4, sl
 8001524:	4648      	mov	r0, r9
 8001526:	2e01      	cmp	r6, #1
 8001528:	d0c1      	beq.n	80014ae <__aeabi_dmul+0xa6>
 800152a:	9a01      	ldr	r2, [sp, #4]
 800152c:	4b7d      	ldr	r3, [pc, #500]	@ (8001724 <__aeabi_dmul+0x31c>)
 800152e:	4694      	mov	ip, r2
 8001530:	4463      	add	r3, ip
 8001532:	2b00      	cmp	r3, #0
 8001534:	dc00      	bgt.n	8001538 <__aeabi_dmul+0x130>
 8001536:	e0c0      	b.n	80016ba <__aeabi_dmul+0x2b2>
 8001538:	0742      	lsls	r2, r0, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_dmul+0x148>
 800153c:	220f      	movs	r2, #15
 800153e:	4002      	ands	r2, r0
 8001540:	2a04      	cmp	r2, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_dmul+0x148>
 8001544:	1d02      	adds	r2, r0, #4
 8001546:	4282      	cmp	r2, r0
 8001548:	4180      	sbcs	r0, r0
 800154a:	4240      	negs	r0, r0
 800154c:	1824      	adds	r4, r4, r0
 800154e:	0010      	movs	r0, r2
 8001550:	01e2      	lsls	r2, r4, #7
 8001552:	d506      	bpl.n	8001562 <__aeabi_dmul+0x15a>
 8001554:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <__aeabi_dmul+0x320>)
 8001556:	9a01      	ldr	r2, [sp, #4]
 8001558:	401c      	ands	r4, r3
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	4694      	mov	ip, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4463      	add	r3, ip
 8001562:	4a72      	ldr	r2, [pc, #456]	@ (800172c <__aeabi_dmul+0x324>)
 8001564:	4293      	cmp	r3, r2
 8001566:	dc6b      	bgt.n	8001640 <__aeabi_dmul+0x238>
 8001568:	0762      	lsls	r2, r4, #29
 800156a:	08c0      	lsrs	r0, r0, #3
 800156c:	0264      	lsls	r4, r4, #9
 800156e:	055b      	lsls	r3, r3, #21
 8001570:	4302      	orrs	r2, r0
 8001572:	0b24      	lsrs	r4, r4, #12
 8001574:	0d5b      	lsrs	r3, r3, #21
 8001576:	e79d      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001578:	2190      	movs	r1, #144	@ 0x90
 800157a:	0089      	lsls	r1, r1, #2
 800157c:	420f      	tst	r7, r1
 800157e:	d163      	bne.n	8001648 <__aeabi_dmul+0x240>
 8001580:	2288      	movs	r2, #136	@ 0x88
 8001582:	423a      	tst	r2, r7
 8001584:	d100      	bne.n	8001588 <__aeabi_dmul+0x180>
 8001586:	e0d7      	b.n	8001738 <__aeabi_dmul+0x330>
 8001588:	9b00      	ldr	r3, [sp, #0]
 800158a:	46a2      	mov	sl, r4
 800158c:	469b      	mov	fp, r3
 800158e:	4681      	mov	r9, r0
 8001590:	9602      	str	r6, [sp, #8]
 8001592:	e7bf      	b.n	8001514 <__aeabi_dmul+0x10c>
 8001594:	0023      	movs	r3, r4
 8001596:	4333      	orrs	r3, r6
 8001598:	d100      	bne.n	800159c <__aeabi_dmul+0x194>
 800159a:	e07f      	b.n	800169c <__aeabi_dmul+0x294>
 800159c:	2c00      	cmp	r4, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x19a>
 80015a0:	e1ad      	b.n	80018fe <__aeabi_dmul+0x4f6>
 80015a2:	0020      	movs	r0, r4
 80015a4:	f000 fe20 	bl	80021e8 <__clzsi2>
 80015a8:	0002      	movs	r2, r0
 80015aa:	0003      	movs	r3, r0
 80015ac:	3a0b      	subs	r2, #11
 80015ae:	201d      	movs	r0, #29
 80015b0:	0019      	movs	r1, r3
 80015b2:	1a82      	subs	r2, r0, r2
 80015b4:	0030      	movs	r0, r6
 80015b6:	3908      	subs	r1, #8
 80015b8:	40d0      	lsrs	r0, r2
 80015ba:	408c      	lsls	r4, r1
 80015bc:	4304      	orrs	r4, r0
 80015be:	0030      	movs	r0, r6
 80015c0:	4088      	lsls	r0, r1
 80015c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001730 <__aeabi_dmul+0x328>)
 80015c4:	1aeb      	subs	r3, r5, r3
 80015c6:	4694      	mov	ip, r2
 80015c8:	4463      	add	r3, ip
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	4642      	mov	r2, r8
 80015d0:	2600      	movs	r6, #0
 80015d2:	2a0a      	cmp	r2, #10
 80015d4:	dc00      	bgt.n	80015d8 <__aeabi_dmul+0x1d0>
 80015d6:	e75a      	b.n	800148e <__aeabi_dmul+0x86>
 80015d8:	e79c      	b.n	8001514 <__aeabi_dmul+0x10c>
 80015da:	4653      	mov	r3, sl
 80015dc:	4303      	orrs	r3, r0
 80015de:	4699      	mov	r9, r3
 80015e0:	d054      	beq.n	800168c <__aeabi_dmul+0x284>
 80015e2:	4653      	mov	r3, sl
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0x1e2>
 80015e8:	e177      	b.n	80018da <__aeabi_dmul+0x4d2>
 80015ea:	4650      	mov	r0, sl
 80015ec:	f000 fdfc 	bl	80021e8 <__clzsi2>
 80015f0:	230b      	movs	r3, #11
 80015f2:	425b      	negs	r3, r3
 80015f4:	469c      	mov	ip, r3
 80015f6:	0002      	movs	r2, r0
 80015f8:	4484      	add	ip, r0
 80015fa:	0011      	movs	r1, r2
 80015fc:	4650      	mov	r0, sl
 80015fe:	3908      	subs	r1, #8
 8001600:	4088      	lsls	r0, r1
 8001602:	231d      	movs	r3, #29
 8001604:	4680      	mov	r8, r0
 8001606:	4660      	mov	r0, ip
 8001608:	1a1b      	subs	r3, r3, r0
 800160a:	0020      	movs	r0, r4
 800160c:	40d8      	lsrs	r0, r3
 800160e:	0003      	movs	r3, r0
 8001610:	4640      	mov	r0, r8
 8001612:	4303      	orrs	r3, r0
 8001614:	469a      	mov	sl, r3
 8001616:	0023      	movs	r3, r4
 8001618:	408b      	lsls	r3, r1
 800161a:	4699      	mov	r9, r3
 800161c:	2300      	movs	r3, #0
 800161e:	4d44      	ldr	r5, [pc, #272]	@ (8001730 <__aeabi_dmul+0x328>)
 8001620:	4698      	mov	r8, r3
 8001622:	1aad      	subs	r5, r5, r2
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	e715      	b.n	8001454 <__aeabi_dmul+0x4c>
 8001628:	4652      	mov	r2, sl
 800162a:	4302      	orrs	r2, r0
 800162c:	4691      	mov	r9, r2
 800162e:	d126      	bne.n	800167e <__aeabi_dmul+0x276>
 8001630:	2200      	movs	r2, #0
 8001632:	001d      	movs	r5, r3
 8001634:	2302      	movs	r3, #2
 8001636:	4692      	mov	sl, r2
 8001638:	3208      	adds	r2, #8
 800163a:	4690      	mov	r8, r2
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	e709      	b.n	8001454 <__aeabi_dmul+0x4c>
 8001640:	2400      	movs	r4, #0
 8001642:	2200      	movs	r2, #0
 8001644:	4b35      	ldr	r3, [pc, #212]	@ (800171c <__aeabi_dmul+0x314>)
 8001646:	e735      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001648:	2300      	movs	r3, #0
 800164a:	2480      	movs	r4, #128	@ 0x80
 800164c:	469b      	mov	fp, r3
 800164e:	0324      	lsls	r4, r4, #12
 8001650:	4b32      	ldr	r3, [pc, #200]	@ (800171c <__aeabi_dmul+0x314>)
 8001652:	e72f      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001654:	2202      	movs	r2, #2
 8001656:	4641      	mov	r1, r8
 8001658:	4311      	orrs	r1, r2
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	4694      	mov	ip, r2
 8001660:	002a      	movs	r2, r5
 8001662:	4462      	add	r2, ip
 8001664:	4688      	mov	r8, r1
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	290a      	cmp	r1, #10
 800166a:	dd00      	ble.n	800166e <__aeabi_dmul+0x266>
 800166c:	e752      	b.n	8001514 <__aeabi_dmul+0x10c>
 800166e:	465a      	mov	r2, fp
 8001670:	2000      	movs	r0, #0
 8001672:	9900      	ldr	r1, [sp, #0]
 8001674:	0004      	movs	r4, r0
 8001676:	404a      	eors	r2, r1
 8001678:	4693      	mov	fp, r2
 800167a:	2602      	movs	r6, #2
 800167c:	e70b      	b.n	8001496 <__aeabi_dmul+0x8e>
 800167e:	220c      	movs	r2, #12
 8001680:	001d      	movs	r5, r3
 8001682:	2303      	movs	r3, #3
 8001684:	4681      	mov	r9, r0
 8001686:	4690      	mov	r8, r2
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e6e3      	b.n	8001454 <__aeabi_dmul+0x4c>
 800168c:	2300      	movs	r3, #0
 800168e:	469a      	mov	sl, r3
 8001690:	3304      	adds	r3, #4
 8001692:	4698      	mov	r8, r3
 8001694:	3b03      	subs	r3, #3
 8001696:	2500      	movs	r5, #0
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	e6db      	b.n	8001454 <__aeabi_dmul+0x4c>
 800169c:	4642      	mov	r2, r8
 800169e:	3301      	adds	r3, #1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	002b      	movs	r3, r5
 80016a4:	4690      	mov	r8, r2
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	4642      	mov	r2, r8
 80016ac:	2400      	movs	r4, #0
 80016ae:	2000      	movs	r0, #0
 80016b0:	2601      	movs	r6, #1
 80016b2:	2a0a      	cmp	r2, #10
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x2b0>
 80016b6:	e6ea      	b.n	800148e <__aeabi_dmul+0x86>
 80016b8:	e72c      	b.n	8001514 <__aeabi_dmul+0x10c>
 80016ba:	2201      	movs	r2, #1
 80016bc:	1ad2      	subs	r2, r2, r3
 80016be:	2a38      	cmp	r2, #56	@ 0x38
 80016c0:	dd00      	ble.n	80016c4 <__aeabi_dmul+0x2bc>
 80016c2:	e6f4      	b.n	80014ae <__aeabi_dmul+0xa6>
 80016c4:	2a1f      	cmp	r2, #31
 80016c6:	dc00      	bgt.n	80016ca <__aeabi_dmul+0x2c2>
 80016c8:	e12a      	b.n	8001920 <__aeabi_dmul+0x518>
 80016ca:	211f      	movs	r1, #31
 80016cc:	4249      	negs	r1, r1
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	0021      	movs	r1, r4
 80016d2:	40d9      	lsrs	r1, r3
 80016d4:	000b      	movs	r3, r1
 80016d6:	2a20      	cmp	r2, #32
 80016d8:	d005      	beq.n	80016e6 <__aeabi_dmul+0x2de>
 80016da:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <__aeabi_dmul+0x32c>)
 80016dc:	9d01      	ldr	r5, [sp, #4]
 80016de:	4694      	mov	ip, r2
 80016e0:	4465      	add	r5, ip
 80016e2:	40ac      	lsls	r4, r5
 80016e4:	4320      	orrs	r0, r4
 80016e6:	1e42      	subs	r2, r0, #1
 80016e8:	4190      	sbcs	r0, r2
 80016ea:	4318      	orrs	r0, r3
 80016ec:	2307      	movs	r3, #7
 80016ee:	0019      	movs	r1, r3
 80016f0:	2400      	movs	r4, #0
 80016f2:	4001      	ands	r1, r0
 80016f4:	4203      	tst	r3, r0
 80016f6:	d00c      	beq.n	8001712 <__aeabi_dmul+0x30a>
 80016f8:	230f      	movs	r3, #15
 80016fa:	4003      	ands	r3, r0
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d100      	bne.n	8001702 <__aeabi_dmul+0x2fa>
 8001700:	e140      	b.n	8001984 <__aeabi_dmul+0x57c>
 8001702:	1d03      	adds	r3, r0, #4
 8001704:	4283      	cmp	r3, r0
 8001706:	41a4      	sbcs	r4, r4
 8001708:	0018      	movs	r0, r3
 800170a:	4264      	negs	r4, r4
 800170c:	0761      	lsls	r1, r4, #29
 800170e:	0264      	lsls	r4, r4, #9
 8001710:	0b24      	lsrs	r4, r4, #12
 8001712:	08c2      	lsrs	r2, r0, #3
 8001714:	2300      	movs	r3, #0
 8001716:	430a      	orrs	r2, r1
 8001718:	e6cc      	b.n	80014b4 <__aeabi_dmul+0xac>
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	000007ff 	.word	0x000007ff
 8001720:	fffffc01 	.word	0xfffffc01
 8001724:	000003ff 	.word	0x000003ff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	000007fe 	.word	0x000007fe
 8001730:	fffffc0d 	.word	0xfffffc0d
 8001734:	0000043e 	.word	0x0000043e
 8001738:	4649      	mov	r1, r9
 800173a:	464a      	mov	r2, r9
 800173c:	0409      	lsls	r1, r1, #16
 800173e:	0c09      	lsrs	r1, r1, #16
 8001740:	000d      	movs	r5, r1
 8001742:	0c16      	lsrs	r6, r2, #16
 8001744:	0c02      	lsrs	r2, r0, #16
 8001746:	0400      	lsls	r0, r0, #16
 8001748:	0c00      	lsrs	r0, r0, #16
 800174a:	4345      	muls	r5, r0
 800174c:	46ac      	mov	ip, r5
 800174e:	0005      	movs	r5, r0
 8001750:	4375      	muls	r5, r6
 8001752:	46a8      	mov	r8, r5
 8001754:	0015      	movs	r5, r2
 8001756:	000f      	movs	r7, r1
 8001758:	4375      	muls	r5, r6
 800175a:	9200      	str	r2, [sp, #0]
 800175c:	9502      	str	r5, [sp, #8]
 800175e:	002a      	movs	r2, r5
 8001760:	9d00      	ldr	r5, [sp, #0]
 8001762:	436f      	muls	r7, r5
 8001764:	4665      	mov	r5, ip
 8001766:	0c2d      	lsrs	r5, r5, #16
 8001768:	46a9      	mov	r9, r5
 800176a:	4447      	add	r7, r8
 800176c:	444f      	add	r7, r9
 800176e:	45b8      	cmp	r8, r7
 8001770:	d905      	bls.n	800177e <__aeabi_dmul+0x376>
 8001772:	0015      	movs	r5, r2
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	0252      	lsls	r2, r2, #9
 8001778:	4690      	mov	r8, r2
 800177a:	4445      	add	r5, r8
 800177c:	9502      	str	r5, [sp, #8]
 800177e:	0c3d      	lsrs	r5, r7, #16
 8001780:	9503      	str	r5, [sp, #12]
 8001782:	4665      	mov	r5, ip
 8001784:	042d      	lsls	r5, r5, #16
 8001786:	043f      	lsls	r7, r7, #16
 8001788:	0c2d      	lsrs	r5, r5, #16
 800178a:	46ac      	mov	ip, r5
 800178c:	003d      	movs	r5, r7
 800178e:	4465      	add	r5, ip
 8001790:	9504      	str	r5, [sp, #16]
 8001792:	0c25      	lsrs	r5, r4, #16
 8001794:	0424      	lsls	r4, r4, #16
 8001796:	0c24      	lsrs	r4, r4, #16
 8001798:	46ac      	mov	ip, r5
 800179a:	0025      	movs	r5, r4
 800179c:	4375      	muls	r5, r6
 800179e:	46a8      	mov	r8, r5
 80017a0:	4665      	mov	r5, ip
 80017a2:	000f      	movs	r7, r1
 80017a4:	4369      	muls	r1, r5
 80017a6:	4441      	add	r1, r8
 80017a8:	4689      	mov	r9, r1
 80017aa:	4367      	muls	r7, r4
 80017ac:	0c39      	lsrs	r1, r7, #16
 80017ae:	4449      	add	r1, r9
 80017b0:	436e      	muls	r6, r5
 80017b2:	4588      	cmp	r8, r1
 80017b4:	d903      	bls.n	80017be <__aeabi_dmul+0x3b6>
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	0252      	lsls	r2, r2, #9
 80017ba:	4690      	mov	r8, r2
 80017bc:	4446      	add	r6, r8
 80017be:	0c0d      	lsrs	r5, r1, #16
 80017c0:	46a8      	mov	r8, r5
 80017c2:	0035      	movs	r5, r6
 80017c4:	4445      	add	r5, r8
 80017c6:	9505      	str	r5, [sp, #20]
 80017c8:	9d03      	ldr	r5, [sp, #12]
 80017ca:	043f      	lsls	r7, r7, #16
 80017cc:	46a8      	mov	r8, r5
 80017ce:	0c3f      	lsrs	r7, r7, #16
 80017d0:	0409      	lsls	r1, r1, #16
 80017d2:	19c9      	adds	r1, r1, r7
 80017d4:	4488      	add	r8, r1
 80017d6:	4645      	mov	r5, r8
 80017d8:	9503      	str	r5, [sp, #12]
 80017da:	4655      	mov	r5, sl
 80017dc:	042e      	lsls	r6, r5, #16
 80017de:	0c36      	lsrs	r6, r6, #16
 80017e0:	0c2f      	lsrs	r7, r5, #16
 80017e2:	0035      	movs	r5, r6
 80017e4:	4345      	muls	r5, r0
 80017e6:	4378      	muls	r0, r7
 80017e8:	4681      	mov	r9, r0
 80017ea:	0038      	movs	r0, r7
 80017ec:	46a8      	mov	r8, r5
 80017ee:	0c2d      	lsrs	r5, r5, #16
 80017f0:	46aa      	mov	sl, r5
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	4350      	muls	r0, r2
 80017f6:	4372      	muls	r2, r6
 80017f8:	444a      	add	r2, r9
 80017fa:	4452      	add	r2, sl
 80017fc:	4591      	cmp	r9, r2
 80017fe:	d903      	bls.n	8001808 <__aeabi_dmul+0x400>
 8001800:	2580      	movs	r5, #128	@ 0x80
 8001802:	026d      	lsls	r5, r5, #9
 8001804:	46a9      	mov	r9, r5
 8001806:	4448      	add	r0, r9
 8001808:	0c15      	lsrs	r5, r2, #16
 800180a:	46a9      	mov	r9, r5
 800180c:	4645      	mov	r5, r8
 800180e:	042d      	lsls	r5, r5, #16
 8001810:	0c2d      	lsrs	r5, r5, #16
 8001812:	46a8      	mov	r8, r5
 8001814:	4665      	mov	r5, ip
 8001816:	437d      	muls	r5, r7
 8001818:	0412      	lsls	r2, r2, #16
 800181a:	4448      	add	r0, r9
 800181c:	4490      	add	r8, r2
 800181e:	46a9      	mov	r9, r5
 8001820:	0032      	movs	r2, r6
 8001822:	4665      	mov	r5, ip
 8001824:	4362      	muls	r2, r4
 8001826:	436e      	muls	r6, r5
 8001828:	437c      	muls	r4, r7
 800182a:	0c17      	lsrs	r7, r2, #16
 800182c:	1936      	adds	r6, r6, r4
 800182e:	19bf      	adds	r7, r7, r6
 8001830:	42bc      	cmp	r4, r7
 8001832:	d903      	bls.n	800183c <__aeabi_dmul+0x434>
 8001834:	2480      	movs	r4, #128	@ 0x80
 8001836:	0264      	lsls	r4, r4, #9
 8001838:	46a4      	mov	ip, r4
 800183a:	44e1      	add	r9, ip
 800183c:	9c02      	ldr	r4, [sp, #8]
 800183e:	9e03      	ldr	r6, [sp, #12]
 8001840:	46a4      	mov	ip, r4
 8001842:	9d05      	ldr	r5, [sp, #20]
 8001844:	4466      	add	r6, ip
 8001846:	428e      	cmp	r6, r1
 8001848:	4189      	sbcs	r1, r1
 800184a:	46ac      	mov	ip, r5
 800184c:	0412      	lsls	r2, r2, #16
 800184e:	043c      	lsls	r4, r7, #16
 8001850:	0c12      	lsrs	r2, r2, #16
 8001852:	18a2      	adds	r2, r4, r2
 8001854:	4462      	add	r2, ip
 8001856:	4249      	negs	r1, r1
 8001858:	1854      	adds	r4, r2, r1
 800185a:	4446      	add	r6, r8
 800185c:	46a4      	mov	ip, r4
 800185e:	4546      	cmp	r6, r8
 8001860:	41a4      	sbcs	r4, r4
 8001862:	4682      	mov	sl, r0
 8001864:	4264      	negs	r4, r4
 8001866:	46a0      	mov	r8, r4
 8001868:	42aa      	cmp	r2, r5
 800186a:	4192      	sbcs	r2, r2
 800186c:	458c      	cmp	ip, r1
 800186e:	4189      	sbcs	r1, r1
 8001870:	44e2      	add	sl, ip
 8001872:	44d0      	add	r8, sl
 8001874:	4249      	negs	r1, r1
 8001876:	4252      	negs	r2, r2
 8001878:	430a      	orrs	r2, r1
 800187a:	45a0      	cmp	r8, r4
 800187c:	41a4      	sbcs	r4, r4
 800187e:	4582      	cmp	sl, r0
 8001880:	4189      	sbcs	r1, r1
 8001882:	4264      	negs	r4, r4
 8001884:	4249      	negs	r1, r1
 8001886:	430c      	orrs	r4, r1
 8001888:	4641      	mov	r1, r8
 800188a:	0c3f      	lsrs	r7, r7, #16
 800188c:	19d2      	adds	r2, r2, r7
 800188e:	1912      	adds	r2, r2, r4
 8001890:	0dcc      	lsrs	r4, r1, #23
 8001892:	9904      	ldr	r1, [sp, #16]
 8001894:	0270      	lsls	r0, r6, #9
 8001896:	4308      	orrs	r0, r1
 8001898:	1e41      	subs	r1, r0, #1
 800189a:	4188      	sbcs	r0, r1
 800189c:	4641      	mov	r1, r8
 800189e:	444a      	add	r2, r9
 80018a0:	0df6      	lsrs	r6, r6, #23
 80018a2:	0252      	lsls	r2, r2, #9
 80018a4:	4330      	orrs	r0, r6
 80018a6:	0249      	lsls	r1, r1, #9
 80018a8:	4314      	orrs	r4, r2
 80018aa:	4308      	orrs	r0, r1
 80018ac:	01d2      	lsls	r2, r2, #7
 80018ae:	d535      	bpl.n	800191c <__aeabi_dmul+0x514>
 80018b0:	2201      	movs	r2, #1
 80018b2:	0843      	lsrs	r3, r0, #1
 80018b4:	4002      	ands	r2, r0
 80018b6:	4313      	orrs	r3, r2
 80018b8:	07e0      	lsls	r0, r4, #31
 80018ba:	4318      	orrs	r0, r3
 80018bc:	0864      	lsrs	r4, r4, #1
 80018be:	e634      	b.n	800152a <__aeabi_dmul+0x122>
 80018c0:	9b00      	ldr	r3, [sp, #0]
 80018c2:	46a2      	mov	sl, r4
 80018c4:	469b      	mov	fp, r3
 80018c6:	4681      	mov	r9, r0
 80018c8:	2480      	movs	r4, #128	@ 0x80
 80018ca:	4653      	mov	r3, sl
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	431c      	orrs	r4, r3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	464a      	mov	r2, r9
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <__aeabi_dmul+0x588>)
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	e5ec      	b.n	80014b4 <__aeabi_dmul+0xac>
 80018da:	f000 fc85 	bl	80021e8 <__clzsi2>
 80018de:	2315      	movs	r3, #21
 80018e0:	469c      	mov	ip, r3
 80018e2:	4484      	add	ip, r0
 80018e4:	0002      	movs	r2, r0
 80018e6:	4663      	mov	r3, ip
 80018e8:	3220      	adds	r2, #32
 80018ea:	2b1c      	cmp	r3, #28
 80018ec:	dc00      	bgt.n	80018f0 <__aeabi_dmul+0x4e8>
 80018ee:	e684      	b.n	80015fa <__aeabi_dmul+0x1f2>
 80018f0:	2300      	movs	r3, #0
 80018f2:	4699      	mov	r9, r3
 80018f4:	0023      	movs	r3, r4
 80018f6:	3808      	subs	r0, #8
 80018f8:	4083      	lsls	r3, r0
 80018fa:	469a      	mov	sl, r3
 80018fc:	e68e      	b.n	800161c <__aeabi_dmul+0x214>
 80018fe:	f000 fc73 	bl	80021e8 <__clzsi2>
 8001902:	0002      	movs	r2, r0
 8001904:	0003      	movs	r3, r0
 8001906:	3215      	adds	r2, #21
 8001908:	3320      	adds	r3, #32
 800190a:	2a1c      	cmp	r2, #28
 800190c:	dc00      	bgt.n	8001910 <__aeabi_dmul+0x508>
 800190e:	e64e      	b.n	80015ae <__aeabi_dmul+0x1a6>
 8001910:	0002      	movs	r2, r0
 8001912:	0034      	movs	r4, r6
 8001914:	3a08      	subs	r2, #8
 8001916:	2000      	movs	r0, #0
 8001918:	4094      	lsls	r4, r2
 800191a:	e652      	b.n	80015c2 <__aeabi_dmul+0x1ba>
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	e604      	b.n	800152a <__aeabi_dmul+0x122>
 8001920:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <__aeabi_dmul+0x58c>)
 8001922:	0021      	movs	r1, r4
 8001924:	469c      	mov	ip, r3
 8001926:	0003      	movs	r3, r0
 8001928:	9d01      	ldr	r5, [sp, #4]
 800192a:	40d3      	lsrs	r3, r2
 800192c:	4465      	add	r5, ip
 800192e:	40a9      	lsls	r1, r5
 8001930:	4319      	orrs	r1, r3
 8001932:	0003      	movs	r3, r0
 8001934:	40ab      	lsls	r3, r5
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	4183      	sbcs	r3, r0
 800193a:	4319      	orrs	r1, r3
 800193c:	0008      	movs	r0, r1
 800193e:	40d4      	lsrs	r4, r2
 8001940:	074b      	lsls	r3, r1, #29
 8001942:	d009      	beq.n	8001958 <__aeabi_dmul+0x550>
 8001944:	230f      	movs	r3, #15
 8001946:	400b      	ands	r3, r1
 8001948:	2b04      	cmp	r3, #4
 800194a:	d005      	beq.n	8001958 <__aeabi_dmul+0x550>
 800194c:	1d0b      	adds	r3, r1, #4
 800194e:	428b      	cmp	r3, r1
 8001950:	4180      	sbcs	r0, r0
 8001952:	4240      	negs	r0, r0
 8001954:	1824      	adds	r4, r4, r0
 8001956:	0018      	movs	r0, r3
 8001958:	0223      	lsls	r3, r4, #8
 800195a:	d400      	bmi.n	800195e <__aeabi_dmul+0x556>
 800195c:	e6d6      	b.n	800170c <__aeabi_dmul+0x304>
 800195e:	2301      	movs	r3, #1
 8001960:	2400      	movs	r4, #0
 8001962:	2200      	movs	r2, #0
 8001964:	e5a6      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001966:	290f      	cmp	r1, #15
 8001968:	d1aa      	bne.n	80018c0 <__aeabi_dmul+0x4b8>
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	4652      	mov	r2, sl
 800196e:	031b      	lsls	r3, r3, #12
 8001970:	421a      	tst	r2, r3
 8001972:	d0a9      	beq.n	80018c8 <__aeabi_dmul+0x4c0>
 8001974:	421c      	tst	r4, r3
 8001976:	d1a7      	bne.n	80018c8 <__aeabi_dmul+0x4c0>
 8001978:	431c      	orrs	r4, r3
 800197a:	9b00      	ldr	r3, [sp, #0]
 800197c:	0002      	movs	r2, r0
 800197e:	469b      	mov	fp, r3
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <__aeabi_dmul+0x588>)
 8001982:	e597      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001984:	2400      	movs	r4, #0
 8001986:	e6c1      	b.n	800170c <__aeabi_dmul+0x304>
 8001988:	2400      	movs	r4, #0
 800198a:	4b01      	ldr	r3, [pc, #4]	@ (8001990 <__aeabi_dmul+0x588>)
 800198c:	0022      	movs	r2, r4
 800198e:	e591      	b.n	80014b4 <__aeabi_dmul+0xac>
 8001990:	000007ff 	.word	0x000007ff
 8001994:	0000041e 	.word	0x0000041e

08001998 <__aeabi_dsub>:
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199a:	464e      	mov	r6, r9
 800199c:	4645      	mov	r5, r8
 800199e:	46de      	mov	lr, fp
 80019a0:	4657      	mov	r7, sl
 80019a2:	b5e0      	push	{r5, r6, r7, lr}
 80019a4:	b085      	sub	sp, #20
 80019a6:	9000      	str	r0, [sp, #0]
 80019a8:	9101      	str	r1, [sp, #4]
 80019aa:	030c      	lsls	r4, r1, #12
 80019ac:	004f      	lsls	r7, r1, #1
 80019ae:	0fce      	lsrs	r6, r1, #31
 80019b0:	0a61      	lsrs	r1, r4, #9
 80019b2:	9c00      	ldr	r4, [sp, #0]
 80019b4:	46b0      	mov	r8, r6
 80019b6:	0f64      	lsrs	r4, r4, #29
 80019b8:	430c      	orrs	r4, r1
 80019ba:	9900      	ldr	r1, [sp, #0]
 80019bc:	0d7f      	lsrs	r7, r7, #21
 80019be:	00c8      	lsls	r0, r1, #3
 80019c0:	0011      	movs	r1, r2
 80019c2:	001a      	movs	r2, r3
 80019c4:	031b      	lsls	r3, r3, #12
 80019c6:	469c      	mov	ip, r3
 80019c8:	9100      	str	r1, [sp, #0]
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	0051      	lsls	r1, r2, #1
 80019ce:	0d4b      	lsrs	r3, r1, #21
 80019d0:	4699      	mov	r9, r3
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	9d00      	ldr	r5, [sp, #0]
 80019d6:	0fd9      	lsrs	r1, r3, #31
 80019d8:	4663      	mov	r3, ip
 80019da:	0f6a      	lsrs	r2, r5, #29
 80019dc:	0a5b      	lsrs	r3, r3, #9
 80019de:	4313      	orrs	r3, r2
 80019e0:	00ea      	lsls	r2, r5, #3
 80019e2:	4694      	mov	ip, r2
 80019e4:	4693      	mov	fp, r2
 80019e6:	4ac1      	ldr	r2, [pc, #772]	@ (8001cec <__aeabi_dsub+0x354>)
 80019e8:	9003      	str	r0, [sp, #12]
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	4591      	cmp	r9, r2
 80019ee:	d100      	bne.n	80019f2 <__aeabi_dsub+0x5a>
 80019f0:	e0cd      	b.n	8001b8e <__aeabi_dsub+0x1f6>
 80019f2:	2501      	movs	r5, #1
 80019f4:	4069      	eors	r1, r5
 80019f6:	464d      	mov	r5, r9
 80019f8:	1b7d      	subs	r5, r7, r5
 80019fa:	46aa      	mov	sl, r5
 80019fc:	428e      	cmp	r6, r1
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x6a>
 8001a00:	e080      	b.n	8001b04 <__aeabi_dsub+0x16c>
 8001a02:	2d00      	cmp	r5, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_dsub+0x70>
 8001a06:	e335      	b.n	8002074 <__aeabi_dsub+0x6dc>
 8001a08:	4649      	mov	r1, r9
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x78>
 8001a0e:	e0df      	b.n	8001bd0 <__aeabi_dsub+0x238>
 8001a10:	4297      	cmp	r7, r2
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x7e>
 8001a14:	e194      	b.n	8001d40 <__aeabi_dsub+0x3a8>
 8001a16:	4652      	mov	r2, sl
 8001a18:	2501      	movs	r5, #1
 8001a1a:	2a38      	cmp	r2, #56	@ 0x38
 8001a1c:	dc19      	bgt.n	8001a52 <__aeabi_dsub+0xba>
 8001a1e:	2280      	movs	r2, #128	@ 0x80
 8001a20:	9b02      	ldr	r3, [sp, #8]
 8001a22:	0412      	lsls	r2, r2, #16
 8001a24:	4313      	orrs	r3, r2
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	4652      	mov	r2, sl
 8001a2a:	2a1f      	cmp	r2, #31
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dsub+0x98>
 8001a2e:	e1e3      	b.n	8001df8 <__aeabi_dsub+0x460>
 8001a30:	4653      	mov	r3, sl
 8001a32:	2220      	movs	r2, #32
 8001a34:	4661      	mov	r1, ip
 8001a36:	9d02      	ldr	r5, [sp, #8]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	4095      	lsls	r5, r2
 8001a3c:	40d9      	lsrs	r1, r3
 8001a3e:	430d      	orrs	r5, r1
 8001a40:	4661      	mov	r1, ip
 8001a42:	4091      	lsls	r1, r2
 8001a44:	000a      	movs	r2, r1
 8001a46:	1e51      	subs	r1, r2, #1
 8001a48:	418a      	sbcs	r2, r1
 8001a4a:	4315      	orrs	r5, r2
 8001a4c:	9a02      	ldr	r2, [sp, #8]
 8001a4e:	40da      	lsrs	r2, r3
 8001a50:	1aa4      	subs	r4, r4, r2
 8001a52:	1b45      	subs	r5, r0, r5
 8001a54:	42a8      	cmp	r0, r5
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4240      	negs	r0, r0
 8001a5a:	1a24      	subs	r4, r4, r0
 8001a5c:	0223      	lsls	r3, r4, #8
 8001a5e:	d400      	bmi.n	8001a62 <__aeabi_dsub+0xca>
 8001a60:	e13d      	b.n	8001cde <__aeabi_dsub+0x346>
 8001a62:	0264      	lsls	r4, r4, #9
 8001a64:	0a64      	lsrs	r4, r4, #9
 8001a66:	2c00      	cmp	r4, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0xd4>
 8001a6a:	e147      	b.n	8001cfc <__aeabi_dsub+0x364>
 8001a6c:	0020      	movs	r0, r4
 8001a6e:	f000 fbbb 	bl	80021e8 <__clzsi2>
 8001a72:	0003      	movs	r3, r0
 8001a74:	3b08      	subs	r3, #8
 8001a76:	2120      	movs	r1, #32
 8001a78:	0028      	movs	r0, r5
 8001a7a:	1aca      	subs	r2, r1, r3
 8001a7c:	40d0      	lsrs	r0, r2
 8001a7e:	409c      	lsls	r4, r3
 8001a80:	0002      	movs	r2, r0
 8001a82:	409d      	lsls	r5, r3
 8001a84:	4322      	orrs	r2, r4
 8001a86:	429f      	cmp	r7, r3
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dsub+0xf4>
 8001a8a:	e177      	b.n	8001d7c <__aeabi_dsub+0x3e4>
 8001a8c:	1bd8      	subs	r0, r3, r7
 8001a8e:	3001      	adds	r0, #1
 8001a90:	1a09      	subs	r1, r1, r0
 8001a92:	002c      	movs	r4, r5
 8001a94:	408d      	lsls	r5, r1
 8001a96:	40c4      	lsrs	r4, r0
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	419d      	sbcs	r5, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	40c2      	lsrs	r2, r0
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	4325      	orrs	r5, r4
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	0014      	movs	r4, r2
 8001aa8:	431d      	orrs	r5, r3
 8001aaa:	076b      	lsls	r3, r5, #29
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dsub+0x12a>
 8001aae:	230f      	movs	r3, #15
 8001ab0:	402b      	ands	r3, r5
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d005      	beq.n	8001ac2 <__aeabi_dsub+0x12a>
 8001ab6:	1d2b      	adds	r3, r5, #4
 8001ab8:	42ab      	cmp	r3, r5
 8001aba:	41ad      	sbcs	r5, r5
 8001abc:	426d      	negs	r5, r5
 8001abe:	1964      	adds	r4, r4, r5
 8001ac0:	001d      	movs	r5, r3
 8001ac2:	0223      	lsls	r3, r4, #8
 8001ac4:	d400      	bmi.n	8001ac8 <__aeabi_dsub+0x130>
 8001ac6:	e140      	b.n	8001d4a <__aeabi_dsub+0x3b2>
 8001ac8:	4a88      	ldr	r2, [pc, #544]	@ (8001cec <__aeabi_dsub+0x354>)
 8001aca:	3701      	adds	r7, #1
 8001acc:	4297      	cmp	r7, r2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x13a>
 8001ad0:	e101      	b.n	8001cd6 <__aeabi_dsub+0x33e>
 8001ad2:	2601      	movs	r6, #1
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	4986      	ldr	r1, [pc, #536]	@ (8001cf0 <__aeabi_dsub+0x358>)
 8001ad8:	08ed      	lsrs	r5, r5, #3
 8001ada:	4021      	ands	r1, r4
 8001adc:	074a      	lsls	r2, r1, #29
 8001ade:	432a      	orrs	r2, r5
 8001ae0:	057c      	lsls	r4, r7, #21
 8001ae2:	024d      	lsls	r5, r1, #9
 8001ae4:	0b2d      	lsrs	r5, r5, #12
 8001ae6:	0d64      	lsrs	r4, r4, #21
 8001ae8:	401e      	ands	r6, r3
 8001aea:	0524      	lsls	r4, r4, #20
 8001aec:	432c      	orrs	r4, r5
 8001aee:	07f6      	lsls	r6, r6, #31
 8001af0:	4334      	orrs	r4, r6
 8001af2:	0010      	movs	r0, r2
 8001af4:	0021      	movs	r1, r4
 8001af6:	b005      	add	sp, #20
 8001af8:	bcf0      	pop	{r4, r5, r6, r7}
 8001afa:	46bb      	mov	fp, r7
 8001afc:	46b2      	mov	sl, r6
 8001afe:	46a9      	mov	r9, r5
 8001b00:	46a0      	mov	r8, r4
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	dc00      	bgt.n	8001b0a <__aeabi_dsub+0x172>
 8001b08:	e2d0      	b.n	80020ac <__aeabi_dsub+0x714>
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dsub+0x17a>
 8001b10:	e0d4      	b.n	8001cbc <__aeabi_dsub+0x324>
 8001b12:	4661      	mov	r1, ip
 8001b14:	9b02      	ldr	r3, [sp, #8]
 8001b16:	4319      	orrs	r1, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x184>
 8001b1a:	e12b      	b.n	8001d74 <__aeabi_dsub+0x3dc>
 8001b1c:	1e69      	subs	r1, r5, #1
 8001b1e:	2d01      	cmp	r5, #1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x18c>
 8001b22:	e1d9      	b.n	8001ed8 <__aeabi_dsub+0x540>
 8001b24:	4295      	cmp	r5, r2
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dsub+0x192>
 8001b28:	e10a      	b.n	8001d40 <__aeabi_dsub+0x3a8>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2938      	cmp	r1, #56	@ 0x38
 8001b2e:	dc17      	bgt.n	8001b60 <__aeabi_dsub+0x1c8>
 8001b30:	468a      	mov	sl, r1
 8001b32:	4653      	mov	r3, sl
 8001b34:	2b1f      	cmp	r3, #31
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dsub+0x1a2>
 8001b38:	e1e7      	b.n	8001f0a <__aeabi_dsub+0x572>
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	1ad2      	subs	r2, r2, r3
 8001b3e:	9b02      	ldr	r3, [sp, #8]
 8001b40:	4661      	mov	r1, ip
 8001b42:	4093      	lsls	r3, r2
 8001b44:	001d      	movs	r5, r3
 8001b46:	4653      	mov	r3, sl
 8001b48:	40d9      	lsrs	r1, r3
 8001b4a:	4663      	mov	r3, ip
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	001a      	movs	r2, r3
 8001b50:	430d      	orrs	r5, r1
 8001b52:	1e51      	subs	r1, r2, #1
 8001b54:	418a      	sbcs	r2, r1
 8001b56:	4653      	mov	r3, sl
 8001b58:	4315      	orrs	r5, r2
 8001b5a:	9a02      	ldr	r2, [sp, #8]
 8001b5c:	40da      	lsrs	r2, r3
 8001b5e:	18a4      	adds	r4, r4, r2
 8001b60:	182d      	adds	r5, r5, r0
 8001b62:	4285      	cmp	r5, r0
 8001b64:	4180      	sbcs	r0, r0
 8001b66:	4240      	negs	r0, r0
 8001b68:	1824      	adds	r4, r4, r0
 8001b6a:	0223      	lsls	r3, r4, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0x1d8>
 8001b6e:	e0b6      	b.n	8001cde <__aeabi_dsub+0x346>
 8001b70:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <__aeabi_dsub+0x354>)
 8001b72:	3701      	adds	r7, #1
 8001b74:	429f      	cmp	r7, r3
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dsub+0x1e2>
 8001b78:	e0ad      	b.n	8001cd6 <__aeabi_dsub+0x33e>
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <__aeabi_dsub+0x358>)
 8001b7e:	086a      	lsrs	r2, r5, #1
 8001b80:	401c      	ands	r4, r3
 8001b82:	4029      	ands	r1, r5
 8001b84:	430a      	orrs	r2, r1
 8001b86:	07e5      	lsls	r5, r4, #31
 8001b88:	4315      	orrs	r5, r2
 8001b8a:	0864      	lsrs	r4, r4, #1
 8001b8c:	e78d      	b.n	8001aaa <__aeabi_dsub+0x112>
 8001b8e:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <__aeabi_dsub+0x35c>)
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	4692      	mov	sl, r2
 8001b94:	4662      	mov	r2, ip
 8001b96:	44ba      	add	sl, r7
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	d02c      	beq.n	8001bf6 <__aeabi_dsub+0x25e>
 8001b9c:	428e      	cmp	r6, r1
 8001b9e:	d02e      	beq.n	8001bfe <__aeabi_dsub+0x266>
 8001ba0:	4652      	mov	r2, sl
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d060      	beq.n	8001c68 <__aeabi_dsub+0x2d0>
 8001ba6:	2f00      	cmp	r7, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x214>
 8001baa:	e0db      	b.n	8001d64 <__aeabi_dsub+0x3cc>
 8001bac:	4663      	mov	r3, ip
 8001bae:	000e      	movs	r6, r1
 8001bb0:	9c02      	ldr	r4, [sp, #8]
 8001bb2:	08d8      	lsrs	r0, r3, #3
 8001bb4:	0762      	lsls	r2, r4, #29
 8001bb6:	4302      	orrs	r2, r0
 8001bb8:	08e4      	lsrs	r4, r4, #3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	4323      	orrs	r3, r4
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x22a>
 8001bc0:	e254      	b.n	800206c <__aeabi_dsub+0x6d4>
 8001bc2:	2580      	movs	r5, #128	@ 0x80
 8001bc4:	032d      	lsls	r5, r5, #12
 8001bc6:	4325      	orrs	r5, r4
 8001bc8:	032d      	lsls	r5, r5, #12
 8001bca:	4c48      	ldr	r4, [pc, #288]	@ (8001cec <__aeabi_dsub+0x354>)
 8001bcc:	0b2d      	lsrs	r5, r5, #12
 8001bce:	e78c      	b.n	8001aea <__aeabi_dsub+0x152>
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	9b02      	ldr	r3, [sp, #8]
 8001bd4:	4319      	orrs	r1, r3
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x242>
 8001bd8:	e0cc      	b.n	8001d74 <__aeabi_dsub+0x3dc>
 8001bda:	0029      	movs	r1, r5
 8001bdc:	3901      	subs	r1, #1
 8001bde:	2d01      	cmp	r5, #1
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x24c>
 8001be2:	e188      	b.n	8001ef6 <__aeabi_dsub+0x55e>
 8001be4:	4295      	cmp	r5, r2
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x252>
 8001be8:	e0aa      	b.n	8001d40 <__aeabi_dsub+0x3a8>
 8001bea:	2501      	movs	r5, #1
 8001bec:	2938      	cmp	r1, #56	@ 0x38
 8001bee:	dd00      	ble.n	8001bf2 <__aeabi_dsub+0x25a>
 8001bf0:	e72f      	b.n	8001a52 <__aeabi_dsub+0xba>
 8001bf2:	468a      	mov	sl, r1
 8001bf4:	e718      	b.n	8001a28 <__aeabi_dsub+0x90>
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4051      	eors	r1, r2
 8001bfa:	428e      	cmp	r6, r1
 8001bfc:	d1d0      	bne.n	8001ba0 <__aeabi_dsub+0x208>
 8001bfe:	4653      	mov	r3, sl
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x26e>
 8001c04:	e0be      	b.n	8001d84 <__aeabi_dsub+0x3ec>
 8001c06:	2f00      	cmp	r7, #0
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x274>
 8001c0a:	e138      	b.n	8001e7e <__aeabi_dsub+0x4e6>
 8001c0c:	46ca      	mov	sl, r9
 8001c0e:	0022      	movs	r2, r4
 8001c10:	4302      	orrs	r2, r0
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x27e>
 8001c14:	e1e2      	b.n	8001fdc <__aeabi_dsub+0x644>
 8001c16:	4653      	mov	r3, sl
 8001c18:	1e59      	subs	r1, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x288>
 8001c1e:	e20d      	b.n	800203c <__aeabi_dsub+0x6a4>
 8001c20:	4a32      	ldr	r2, [pc, #200]	@ (8001cec <__aeabi_dsub+0x354>)
 8001c22:	4592      	cmp	sl, r2
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x290>
 8001c26:	e1d2      	b.n	8001fce <__aeabi_dsub+0x636>
 8001c28:	2701      	movs	r7, #1
 8001c2a:	2938      	cmp	r1, #56	@ 0x38
 8001c2c:	dc13      	bgt.n	8001c56 <__aeabi_dsub+0x2be>
 8001c2e:	291f      	cmp	r1, #31
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_dsub+0x29c>
 8001c32:	e1ee      	b.n	8002012 <__aeabi_dsub+0x67a>
 8001c34:	2220      	movs	r2, #32
 8001c36:	9b02      	ldr	r3, [sp, #8]
 8001c38:	1a52      	subs	r2, r2, r1
 8001c3a:	0025      	movs	r5, r4
 8001c3c:	0007      	movs	r7, r0
 8001c3e:	469a      	mov	sl, r3
 8001c40:	40cc      	lsrs	r4, r1
 8001c42:	4090      	lsls	r0, r2
 8001c44:	4095      	lsls	r5, r2
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	44a2      	add	sl, r4
 8001c4a:	1e42      	subs	r2, r0, #1
 8001c4c:	4190      	sbcs	r0, r2
 8001c4e:	4653      	mov	r3, sl
 8001c50:	432f      	orrs	r7, r5
 8001c52:	4307      	orrs	r7, r0
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	003d      	movs	r5, r7
 8001c58:	4465      	add	r5, ip
 8001c5a:	4565      	cmp	r5, ip
 8001c5c:	4192      	sbcs	r2, r2
 8001c5e:	9b02      	ldr	r3, [sp, #8]
 8001c60:	4252      	negs	r2, r2
 8001c62:	464f      	mov	r7, r9
 8001c64:	18d4      	adds	r4, r2, r3
 8001c66:	e780      	b.n	8001b6a <__aeabi_dsub+0x1d2>
 8001c68:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <__aeabi_dsub+0x360>)
 8001c6a:	1c7d      	adds	r5, r7, #1
 8001c6c:	4215      	tst	r5, r2
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x2da>
 8001c70:	e0aa      	b.n	8001dc8 <__aeabi_dsub+0x430>
 8001c72:	4662      	mov	r2, ip
 8001c74:	0025      	movs	r5, r4
 8001c76:	9b02      	ldr	r3, [sp, #8]
 8001c78:	4305      	orrs	r5, r0
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	2f00      	cmp	r7, #0
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x2ea>
 8001c80:	e0f5      	b.n	8001e6e <__aeabi_dsub+0x4d6>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x2f0>
 8001c86:	e16b      	b.n	8001f60 <__aeabi_dsub+0x5c8>
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x2f6>
 8001c8c:	e152      	b.n	8001f34 <__aeabi_dsub+0x59c>
 8001c8e:	4663      	mov	r3, ip
 8001c90:	1ac5      	subs	r5, r0, r3
 8001c92:	9b02      	ldr	r3, [sp, #8]
 8001c94:	1ae2      	subs	r2, r4, r3
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	419b      	sbcs	r3, r3
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	d400      	bmi.n	8001ca4 <__aeabi_dsub+0x30c>
 8001ca2:	e1d5      	b.n	8002050 <__aeabi_dsub+0x6b8>
 8001ca4:	4663      	mov	r3, ip
 8001ca6:	1a1d      	subs	r5, r3, r0
 8001ca8:	45ac      	cmp	ip, r5
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	2601      	movs	r6, #1
 8001cae:	9b02      	ldr	r3, [sp, #8]
 8001cb0:	4252      	negs	r2, r2
 8001cb2:	1b1c      	subs	r4, r3, r4
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	1aa4      	subs	r4, r4, r2
 8001cb8:	400e      	ands	r6, r1
 8001cba:	e6f6      	b.n	8001aaa <__aeabi_dsub+0x112>
 8001cbc:	4297      	cmp	r7, r2
 8001cbe:	d03f      	beq.n	8001d40 <__aeabi_dsub+0x3a8>
 8001cc0:	4652      	mov	r2, sl
 8001cc2:	2501      	movs	r5, #1
 8001cc4:	2a38      	cmp	r2, #56	@ 0x38
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_dsub+0x332>
 8001cc8:	e74a      	b.n	8001b60 <__aeabi_dsub+0x1c8>
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	9b02      	ldr	r3, [sp, #8]
 8001cce:	0412      	lsls	r2, r2, #16
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	e72d      	b.n	8001b32 <__aeabi_dsub+0x19a>
 8001cd6:	003c      	movs	r4, r7
 8001cd8:	2500      	movs	r5, #0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	e705      	b.n	8001aea <__aeabi_dsub+0x152>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	402b      	ands	r3, r5
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x350>
 8001ce6:	e6e2      	b.n	8001aae <__aeabi_dsub+0x116>
 8001ce8:	e06b      	b.n	8001dc2 <__aeabi_dsub+0x42a>
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	000007ff 	.word	0x000007ff
 8001cf0:	ff7fffff 	.word	0xff7fffff
 8001cf4:	fffff801 	.word	0xfffff801
 8001cf8:	000007fe 	.word	0x000007fe
 8001cfc:	0028      	movs	r0, r5
 8001cfe:	f000 fa73 	bl	80021e8 <__clzsi2>
 8001d02:	0003      	movs	r3, r0
 8001d04:	3318      	adds	r3, #24
 8001d06:	2b1f      	cmp	r3, #31
 8001d08:	dc00      	bgt.n	8001d0c <__aeabi_dsub+0x374>
 8001d0a:	e6b4      	b.n	8001a76 <__aeabi_dsub+0xde>
 8001d0c:	002a      	movs	r2, r5
 8001d0e:	3808      	subs	r0, #8
 8001d10:	4082      	lsls	r2, r0
 8001d12:	429f      	cmp	r7, r3
 8001d14:	dd00      	ble.n	8001d18 <__aeabi_dsub+0x380>
 8001d16:	e0b9      	b.n	8001e8c <__aeabi_dsub+0x4f4>
 8001d18:	1bdb      	subs	r3, r3, r7
 8001d1a:	1c58      	adds	r0, r3, #1
 8001d1c:	281f      	cmp	r0, #31
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x38a>
 8001d20:	e1a0      	b.n	8002064 <__aeabi_dsub+0x6cc>
 8001d22:	0015      	movs	r5, r2
 8001d24:	3b1f      	subs	r3, #31
 8001d26:	40dd      	lsrs	r5, r3
 8001d28:	2820      	cmp	r0, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x3a0>
 8001d2c:	2340      	movs	r3, #64	@ 0x40
 8001d2e:	1a1b      	subs	r3, r3, r0
 8001d30:	409a      	lsls	r2, r3
 8001d32:	1e53      	subs	r3, r2, #1
 8001d34:	419a      	sbcs	r2, r3
 8001d36:	4315      	orrs	r5, r2
 8001d38:	2307      	movs	r3, #7
 8001d3a:	2700      	movs	r7, #0
 8001d3c:	402b      	ands	r3, r5
 8001d3e:	e7d0      	b.n	8001ce2 <__aeabi_dsub+0x34a>
 8001d40:	08c0      	lsrs	r0, r0, #3
 8001d42:	0762      	lsls	r2, r4, #29
 8001d44:	4302      	orrs	r2, r0
 8001d46:	08e4      	lsrs	r4, r4, #3
 8001d48:	e737      	b.n	8001bba <__aeabi_dsub+0x222>
 8001d4a:	08ea      	lsrs	r2, r5, #3
 8001d4c:	0763      	lsls	r3, r4, #29
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	4bd3      	ldr	r3, [pc, #844]	@ (80020a0 <__aeabi_dsub+0x708>)
 8001d52:	08e4      	lsrs	r4, r4, #3
 8001d54:	429f      	cmp	r7, r3
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x3c2>
 8001d58:	e72f      	b.n	8001bba <__aeabi_dsub+0x222>
 8001d5a:	0324      	lsls	r4, r4, #12
 8001d5c:	0b25      	lsrs	r5, r4, #12
 8001d5e:	057c      	lsls	r4, r7, #21
 8001d60:	0d64      	lsrs	r4, r4, #21
 8001d62:	e6c2      	b.n	8001aea <__aeabi_dsub+0x152>
 8001d64:	46ca      	mov	sl, r9
 8001d66:	0022      	movs	r2, r4
 8001d68:	4302      	orrs	r2, r0
 8001d6a:	d158      	bne.n	8001e1e <__aeabi_dsub+0x486>
 8001d6c:	4663      	mov	r3, ip
 8001d6e:	000e      	movs	r6, r1
 8001d70:	9c02      	ldr	r4, [sp, #8]
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	9b03      	ldr	r3, [sp, #12]
 8001d76:	4657      	mov	r7, sl
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	e7e7      	b.n	8001d4c <__aeabi_dsub+0x3b4>
 8001d7c:	4cc9      	ldr	r4, [pc, #804]	@ (80020a4 <__aeabi_dsub+0x70c>)
 8001d7e:	1aff      	subs	r7, r7, r3
 8001d80:	4014      	ands	r4, r2
 8001d82:	e692      	b.n	8001aaa <__aeabi_dsub+0x112>
 8001d84:	4dc8      	ldr	r5, [pc, #800]	@ (80020a8 <__aeabi_dsub+0x710>)
 8001d86:	1c7a      	adds	r2, r7, #1
 8001d88:	422a      	tst	r2, r5
 8001d8a:	d000      	beq.n	8001d8e <__aeabi_dsub+0x3f6>
 8001d8c:	e084      	b.n	8001e98 <__aeabi_dsub+0x500>
 8001d8e:	0022      	movs	r2, r4
 8001d90:	4302      	orrs	r2, r0
 8001d92:	2f00      	cmp	r7, #0
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x400>
 8001d96:	e0ef      	b.n	8001f78 <__aeabi_dsub+0x5e0>
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x406>
 8001d9c:	e0e5      	b.n	8001f6a <__aeabi_dsub+0x5d2>
 8001d9e:	4662      	mov	r2, ip
 8001da0:	9902      	ldr	r1, [sp, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x410>
 8001da6:	e0c5      	b.n	8001f34 <__aeabi_dsub+0x59c>
 8001da8:	4663      	mov	r3, ip
 8001daa:	18c5      	adds	r5, r0, r3
 8001dac:	468c      	mov	ip, r1
 8001dae:	4285      	cmp	r5, r0
 8001db0:	4180      	sbcs	r0, r0
 8001db2:	4464      	add	r4, ip
 8001db4:	4240      	negs	r0, r0
 8001db6:	1824      	adds	r4, r4, r0
 8001db8:	0223      	lsls	r3, r4, #8
 8001dba:	d502      	bpl.n	8001dc2 <__aeabi_dsub+0x42a>
 8001dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80020a4 <__aeabi_dsub+0x70c>)
 8001dbe:	3701      	adds	r7, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	46ba      	mov	sl, r7
 8001dc4:	9503      	str	r5, [sp, #12]
 8001dc6:	e7d5      	b.n	8001d74 <__aeabi_dsub+0x3dc>
 8001dc8:	4662      	mov	r2, ip
 8001dca:	1a85      	subs	r5, r0, r2
 8001dcc:	42a8      	cmp	r0, r5
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	9b02      	ldr	r3, [sp, #8]
 8001dd6:	1ae3      	subs	r3, r4, r3
 8001dd8:	001a      	movs	r2, r3
 8001dda:	464b      	mov	r3, r9
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	0013      	movs	r3, r2
 8001de0:	4691      	mov	r9, r2
 8001de2:	021a      	lsls	r2, r3, #8
 8001de4:	d46c      	bmi.n	8001ec0 <__aeabi_dsub+0x528>
 8001de6:	464a      	mov	r2, r9
 8001de8:	464c      	mov	r4, r9
 8001dea:	432a      	orrs	r2, r5
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x458>
 8001dee:	e63a      	b.n	8001a66 <__aeabi_dsub+0xce>
 8001df0:	2600      	movs	r6, #0
 8001df2:	2400      	movs	r4, #0
 8001df4:	2500      	movs	r5, #0
 8001df6:	e678      	b.n	8001aea <__aeabi_dsub+0x152>
 8001df8:	9902      	ldr	r1, [sp, #8]
 8001dfa:	4653      	mov	r3, sl
 8001dfc:	000d      	movs	r5, r1
 8001dfe:	3a20      	subs	r2, #32
 8001e00:	40d5      	lsrs	r5, r2
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d006      	beq.n	8001e14 <__aeabi_dsub+0x47c>
 8001e06:	2240      	movs	r2, #64	@ 0x40
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	4662      	mov	r2, ip
 8001e10:	431a      	orrs	r2, r3
 8001e12:	4693      	mov	fp, r2
 8001e14:	465b      	mov	r3, fp
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	4193      	sbcs	r3, r2
 8001e1a:	431d      	orrs	r5, r3
 8001e1c:	e619      	b.n	8001a52 <__aeabi_dsub+0xba>
 8001e1e:	4653      	mov	r3, sl
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x490>
 8001e26:	e0c6      	b.n	8001fb6 <__aeabi_dsub+0x61e>
 8001e28:	4e9d      	ldr	r6, [pc, #628]	@ (80020a0 <__aeabi_dsub+0x708>)
 8001e2a:	45b2      	cmp	sl, r6
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x498>
 8001e2e:	e6bd      	b.n	8001bac <__aeabi_dsub+0x214>
 8001e30:	4688      	mov	r8, r1
 8001e32:	000e      	movs	r6, r1
 8001e34:	2501      	movs	r5, #1
 8001e36:	2a38      	cmp	r2, #56	@ 0x38
 8001e38:	dc10      	bgt.n	8001e5c <__aeabi_dsub+0x4c4>
 8001e3a:	2a1f      	cmp	r2, #31
 8001e3c:	dc7f      	bgt.n	8001f3e <__aeabi_dsub+0x5a6>
 8001e3e:	2120      	movs	r1, #32
 8001e40:	0025      	movs	r5, r4
 8001e42:	1a89      	subs	r1, r1, r2
 8001e44:	0007      	movs	r7, r0
 8001e46:	4088      	lsls	r0, r1
 8001e48:	408d      	lsls	r5, r1
 8001e4a:	40d7      	lsrs	r7, r2
 8001e4c:	40d4      	lsrs	r4, r2
 8001e4e:	1e41      	subs	r1, r0, #1
 8001e50:	4188      	sbcs	r0, r1
 8001e52:	9b02      	ldr	r3, [sp, #8]
 8001e54:	433d      	orrs	r5, r7
 8001e56:	1b1b      	subs	r3, r3, r4
 8001e58:	4305      	orrs	r5, r0
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	1b55      	subs	r5, r2, r5
 8001e60:	45ac      	cmp	ip, r5
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	9b02      	ldr	r3, [sp, #8]
 8001e66:	4252      	negs	r2, r2
 8001e68:	464f      	mov	r7, r9
 8001e6a:	1a9c      	subs	r4, r3, r2
 8001e6c:	e5f6      	b.n	8001a5c <__aeabi_dsub+0xc4>
 8001e6e:	2d00      	cmp	r5, #0
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x4dc>
 8001e72:	e0b7      	b.n	8001fe4 <__aeabi_dsub+0x64c>
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_dsub+0x4e2>
 8001e78:	e0f0      	b.n	800205c <__aeabi_dsub+0x6c4>
 8001e7a:	2601      	movs	r6, #1
 8001e7c:	400e      	ands	r6, r1
 8001e7e:	4663      	mov	r3, ip
 8001e80:	9802      	ldr	r0, [sp, #8]
 8001e82:	08d9      	lsrs	r1, r3, #3
 8001e84:	0742      	lsls	r2, r0, #29
 8001e86:	430a      	orrs	r2, r1
 8001e88:	08c4      	lsrs	r4, r0, #3
 8001e8a:	e696      	b.n	8001bba <__aeabi_dsub+0x222>
 8001e8c:	4c85      	ldr	r4, [pc, #532]	@ (80020a4 <__aeabi_dsub+0x70c>)
 8001e8e:	1aff      	subs	r7, r7, r3
 8001e90:	4014      	ands	r4, r2
 8001e92:	0762      	lsls	r2, r4, #29
 8001e94:	08e4      	lsrs	r4, r4, #3
 8001e96:	e760      	b.n	8001d5a <__aeabi_dsub+0x3c2>
 8001e98:	4981      	ldr	r1, [pc, #516]	@ (80020a0 <__aeabi_dsub+0x708>)
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x508>
 8001e9e:	e0c9      	b.n	8002034 <__aeabi_dsub+0x69c>
 8001ea0:	4663      	mov	r3, ip
 8001ea2:	18c1      	adds	r1, r0, r3
 8001ea4:	4281      	cmp	r1, r0
 8001ea6:	4180      	sbcs	r0, r0
 8001ea8:	9b02      	ldr	r3, [sp, #8]
 8001eaa:	4240      	negs	r0, r0
 8001eac:	18e3      	adds	r3, r4, r3
 8001eae:	181b      	adds	r3, r3, r0
 8001eb0:	07dd      	lsls	r5, r3, #31
 8001eb2:	085c      	lsrs	r4, r3, #1
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	0849      	lsrs	r1, r1, #1
 8001eb8:	430d      	orrs	r5, r1
 8001eba:	0017      	movs	r7, r2
 8001ebc:	402b      	ands	r3, r5
 8001ebe:	e710      	b.n	8001ce2 <__aeabi_dsub+0x34a>
 8001ec0:	4663      	mov	r3, ip
 8001ec2:	1a1d      	subs	r5, r3, r0
 8001ec4:	45ac      	cmp	ip, r5
 8001ec6:	4192      	sbcs	r2, r2
 8001ec8:	2601      	movs	r6, #1
 8001eca:	9b02      	ldr	r3, [sp, #8]
 8001ecc:	4252      	negs	r2, r2
 8001ece:	1b1c      	subs	r4, r3, r4
 8001ed0:	4688      	mov	r8, r1
 8001ed2:	1aa4      	subs	r4, r4, r2
 8001ed4:	400e      	ands	r6, r1
 8001ed6:	e5c6      	b.n	8001a66 <__aeabi_dsub+0xce>
 8001ed8:	4663      	mov	r3, ip
 8001eda:	18c5      	adds	r5, r0, r3
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	4285      	cmp	r5, r0
 8001ee0:	4180      	sbcs	r0, r0
 8001ee2:	469c      	mov	ip, r3
 8001ee4:	4240      	negs	r0, r0
 8001ee6:	4464      	add	r4, ip
 8001ee8:	1824      	adds	r4, r4, r0
 8001eea:	2701      	movs	r7, #1
 8001eec:	0223      	lsls	r3, r4, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_dsub+0x55a>
 8001ef0:	e6f5      	b.n	8001cde <__aeabi_dsub+0x346>
 8001ef2:	2702      	movs	r7, #2
 8001ef4:	e641      	b.n	8001b7a <__aeabi_dsub+0x1e2>
 8001ef6:	4663      	mov	r3, ip
 8001ef8:	1ac5      	subs	r5, r0, r3
 8001efa:	42a8      	cmp	r0, r5
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	9b02      	ldr	r3, [sp, #8]
 8001f00:	4240      	negs	r0, r0
 8001f02:	1ae4      	subs	r4, r4, r3
 8001f04:	2701      	movs	r7, #1
 8001f06:	1a24      	subs	r4, r4, r0
 8001f08:	e5a8      	b.n	8001a5c <__aeabi_dsub+0xc4>
 8001f0a:	9d02      	ldr	r5, [sp, #8]
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	002b      	movs	r3, r5
 8001f10:	3a20      	subs	r2, #32
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	4653      	mov	r3, sl
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d006      	beq.n	8001f2a <__aeabi_dsub+0x592>
 8001f1c:	2240      	movs	r2, #64	@ 0x40
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	002b      	movs	r3, r5
 8001f22:	4093      	lsls	r3, r2
 8001f24:	4662      	mov	r2, ip
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4693      	mov	fp, r2
 8001f2a:	465d      	mov	r5, fp
 8001f2c:	1e6b      	subs	r3, r5, #1
 8001f2e:	419d      	sbcs	r5, r3
 8001f30:	430d      	orrs	r5, r1
 8001f32:	e615      	b.n	8001b60 <__aeabi_dsub+0x1c8>
 8001f34:	0762      	lsls	r2, r4, #29
 8001f36:	08c0      	lsrs	r0, r0, #3
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	08e4      	lsrs	r4, r4, #3
 8001f3c:	e70d      	b.n	8001d5a <__aeabi_dsub+0x3c2>
 8001f3e:	0011      	movs	r1, r2
 8001f40:	0027      	movs	r7, r4
 8001f42:	3920      	subs	r1, #32
 8001f44:	40cf      	lsrs	r7, r1
 8001f46:	2a20      	cmp	r2, #32
 8001f48:	d005      	beq.n	8001f56 <__aeabi_dsub+0x5be>
 8001f4a:	2140      	movs	r1, #64	@ 0x40
 8001f4c:	1a8a      	subs	r2, r1, r2
 8001f4e:	4094      	lsls	r4, r2
 8001f50:	0025      	movs	r5, r4
 8001f52:	4305      	orrs	r5, r0
 8001f54:	9503      	str	r5, [sp, #12]
 8001f56:	9d03      	ldr	r5, [sp, #12]
 8001f58:	1e6a      	subs	r2, r5, #1
 8001f5a:	4195      	sbcs	r5, r2
 8001f5c:	433d      	orrs	r5, r7
 8001f5e:	e77d      	b.n	8001e5c <__aeabi_dsub+0x4c4>
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x5ce>
 8001f64:	e744      	b.n	8001df0 <__aeabi_dsub+0x458>
 8001f66:	2601      	movs	r6, #1
 8001f68:	400e      	ands	r6, r1
 8001f6a:	4663      	mov	r3, ip
 8001f6c:	08d9      	lsrs	r1, r3, #3
 8001f6e:	9b02      	ldr	r3, [sp, #8]
 8001f70:	075a      	lsls	r2, r3, #29
 8001f72:	430a      	orrs	r2, r1
 8001f74:	08dc      	lsrs	r4, r3, #3
 8001f76:	e6f0      	b.n	8001d5a <__aeabi_dsub+0x3c2>
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	d028      	beq.n	8001fce <__aeabi_dsub+0x636>
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	9f02      	ldr	r7, [sp, #8]
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	433a      	orrs	r2, r7
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x5f0>
 8001f86:	e6dc      	b.n	8001d42 <__aeabi_dsub+0x3aa>
 8001f88:	0762      	lsls	r2, r4, #29
 8001f8a:	4310      	orrs	r0, r2
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	08e4      	lsrs	r4, r4, #3
 8001f90:	0312      	lsls	r2, r2, #12
 8001f92:	4214      	tst	r4, r2
 8001f94:	d009      	beq.n	8001faa <__aeabi_dsub+0x612>
 8001f96:	08fd      	lsrs	r5, r7, #3
 8001f98:	4215      	tst	r5, r2
 8001f9a:	d106      	bne.n	8001faa <__aeabi_dsub+0x612>
 8001f9c:	4663      	mov	r3, ip
 8001f9e:	2601      	movs	r6, #1
 8001fa0:	002c      	movs	r4, r5
 8001fa2:	08d8      	lsrs	r0, r3, #3
 8001fa4:	077b      	lsls	r3, r7, #29
 8001fa6:	4318      	orrs	r0, r3
 8001fa8:	400e      	ands	r6, r1
 8001faa:	0f42      	lsrs	r2, r0, #29
 8001fac:	00c0      	lsls	r0, r0, #3
 8001fae:	08c0      	lsrs	r0, r0, #3
 8001fb0:	0752      	lsls	r2, r2, #29
 8001fb2:	4302      	orrs	r2, r0
 8001fb4:	e601      	b.n	8001bba <__aeabi_dsub+0x222>
 8001fb6:	4663      	mov	r3, ip
 8001fb8:	1a1d      	subs	r5, r3, r0
 8001fba:	45ac      	cmp	ip, r5
 8001fbc:	4192      	sbcs	r2, r2
 8001fbe:	9b02      	ldr	r3, [sp, #8]
 8001fc0:	4252      	negs	r2, r2
 8001fc2:	1b1c      	subs	r4, r3, r4
 8001fc4:	000e      	movs	r6, r1
 8001fc6:	4688      	mov	r8, r1
 8001fc8:	2701      	movs	r7, #1
 8001fca:	1aa4      	subs	r4, r4, r2
 8001fcc:	e546      	b.n	8001a5c <__aeabi_dsub+0xc4>
 8001fce:	4663      	mov	r3, ip
 8001fd0:	08d9      	lsrs	r1, r3, #3
 8001fd2:	9b02      	ldr	r3, [sp, #8]
 8001fd4:	075a      	lsls	r2, r3, #29
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	08dc      	lsrs	r4, r3, #3
 8001fda:	e5ee      	b.n	8001bba <__aeabi_dsub+0x222>
 8001fdc:	4663      	mov	r3, ip
 8001fde:	9c02      	ldr	r4, [sp, #8]
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	e6c7      	b.n	8001d74 <__aeabi_dsub+0x3dc>
 8001fe4:	08c0      	lsrs	r0, r0, #3
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x654>
 8001fea:	e6aa      	b.n	8001d42 <__aeabi_dsub+0x3aa>
 8001fec:	0762      	lsls	r2, r4, #29
 8001fee:	4310      	orrs	r0, r2
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	08e4      	lsrs	r4, r4, #3
 8001ff4:	0312      	lsls	r2, r2, #12
 8001ff6:	4214      	tst	r4, r2
 8001ff8:	d0d7      	beq.n	8001faa <__aeabi_dsub+0x612>
 8001ffa:	9f02      	ldr	r7, [sp, #8]
 8001ffc:	08fd      	lsrs	r5, r7, #3
 8001ffe:	4215      	tst	r5, r2
 8002000:	d1d3      	bne.n	8001faa <__aeabi_dsub+0x612>
 8002002:	4663      	mov	r3, ip
 8002004:	2601      	movs	r6, #1
 8002006:	08d8      	lsrs	r0, r3, #3
 8002008:	077b      	lsls	r3, r7, #29
 800200a:	002c      	movs	r4, r5
 800200c:	4318      	orrs	r0, r3
 800200e:	400e      	ands	r6, r1
 8002010:	e7cb      	b.n	8001faa <__aeabi_dsub+0x612>
 8002012:	000a      	movs	r2, r1
 8002014:	0027      	movs	r7, r4
 8002016:	3a20      	subs	r2, #32
 8002018:	40d7      	lsrs	r7, r2
 800201a:	2920      	cmp	r1, #32
 800201c:	d005      	beq.n	800202a <__aeabi_dsub+0x692>
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	1a52      	subs	r2, r2, r1
 8002022:	4094      	lsls	r4, r2
 8002024:	0025      	movs	r5, r4
 8002026:	4305      	orrs	r5, r0
 8002028:	9503      	str	r5, [sp, #12]
 800202a:	9d03      	ldr	r5, [sp, #12]
 800202c:	1e6a      	subs	r2, r5, #1
 800202e:	4195      	sbcs	r5, r2
 8002030:	432f      	orrs	r7, r5
 8002032:	e610      	b.n	8001c56 <__aeabi_dsub+0x2be>
 8002034:	0014      	movs	r4, r2
 8002036:	2500      	movs	r5, #0
 8002038:	2200      	movs	r2, #0
 800203a:	e556      	b.n	8001aea <__aeabi_dsub+0x152>
 800203c:	9b02      	ldr	r3, [sp, #8]
 800203e:	4460      	add	r0, ip
 8002040:	4699      	mov	r9, r3
 8002042:	4560      	cmp	r0, ip
 8002044:	4192      	sbcs	r2, r2
 8002046:	444c      	add	r4, r9
 8002048:	4252      	negs	r2, r2
 800204a:	0005      	movs	r5, r0
 800204c:	18a4      	adds	r4, r4, r2
 800204e:	e74c      	b.n	8001eea <__aeabi_dsub+0x552>
 8002050:	001a      	movs	r2, r3
 8002052:	001c      	movs	r4, r3
 8002054:	432a      	orrs	r2, r5
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x6c2>
 8002058:	e6b3      	b.n	8001dc2 <__aeabi_dsub+0x42a>
 800205a:	e6c9      	b.n	8001df0 <__aeabi_dsub+0x458>
 800205c:	2480      	movs	r4, #128	@ 0x80
 800205e:	2600      	movs	r6, #0
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	e5ae      	b.n	8001bc2 <__aeabi_dsub+0x22a>
 8002064:	2120      	movs	r1, #32
 8002066:	2500      	movs	r5, #0
 8002068:	1a09      	subs	r1, r1, r0
 800206a:	e517      	b.n	8001a9c <__aeabi_dsub+0x104>
 800206c:	2200      	movs	r2, #0
 800206e:	2500      	movs	r5, #0
 8002070:	4c0b      	ldr	r4, [pc, #44]	@ (80020a0 <__aeabi_dsub+0x708>)
 8002072:	e53a      	b.n	8001aea <__aeabi_dsub+0x152>
 8002074:	2d00      	cmp	r5, #0
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x6e2>
 8002078:	e5f6      	b.n	8001c68 <__aeabi_dsub+0x2d0>
 800207a:	464b      	mov	r3, r9
 800207c:	1bda      	subs	r2, r3, r7
 800207e:	4692      	mov	sl, r2
 8002080:	2f00      	cmp	r7, #0
 8002082:	d100      	bne.n	8002086 <__aeabi_dsub+0x6ee>
 8002084:	e66f      	b.n	8001d66 <__aeabi_dsub+0x3ce>
 8002086:	2a38      	cmp	r2, #56	@ 0x38
 8002088:	dc05      	bgt.n	8002096 <__aeabi_dsub+0x6fe>
 800208a:	2680      	movs	r6, #128	@ 0x80
 800208c:	0436      	lsls	r6, r6, #16
 800208e:	4334      	orrs	r4, r6
 8002090:	4688      	mov	r8, r1
 8002092:	000e      	movs	r6, r1
 8002094:	e6d1      	b.n	8001e3a <__aeabi_dsub+0x4a2>
 8002096:	4688      	mov	r8, r1
 8002098:	000e      	movs	r6, r1
 800209a:	2501      	movs	r5, #1
 800209c:	e6de      	b.n	8001e5c <__aeabi_dsub+0x4c4>
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	000007ff 	.word	0x000007ff
 80020a4:	ff7fffff 	.word	0xff7fffff
 80020a8:	000007fe 	.word	0x000007fe
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x71a>
 80020b0:	e668      	b.n	8001d84 <__aeabi_dsub+0x3ec>
 80020b2:	464b      	mov	r3, r9
 80020b4:	1bd9      	subs	r1, r3, r7
 80020b6:	2f00      	cmp	r7, #0
 80020b8:	d101      	bne.n	80020be <__aeabi_dsub+0x726>
 80020ba:	468a      	mov	sl, r1
 80020bc:	e5a7      	b.n	8001c0e <__aeabi_dsub+0x276>
 80020be:	2701      	movs	r7, #1
 80020c0:	2938      	cmp	r1, #56	@ 0x38
 80020c2:	dd00      	ble.n	80020c6 <__aeabi_dsub+0x72e>
 80020c4:	e5c7      	b.n	8001c56 <__aeabi_dsub+0x2be>
 80020c6:	2280      	movs	r2, #128	@ 0x80
 80020c8:	0412      	lsls	r2, r2, #16
 80020ca:	4314      	orrs	r4, r2
 80020cc:	e5af      	b.n	8001c2e <__aeabi_dsub+0x296>
 80020ce:	46c0      	nop			@ (mov r8, r8)

080020d0 <__aeabi_dcmpun>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	46c6      	mov	lr, r8
 80020d4:	031e      	lsls	r6, r3, #12
 80020d6:	0b36      	lsrs	r6, r6, #12
 80020d8:	46b0      	mov	r8, r6
 80020da:	4e0d      	ldr	r6, [pc, #52]	@ (8002110 <__aeabi_dcmpun+0x40>)
 80020dc:	030c      	lsls	r4, r1, #12
 80020de:	004d      	lsls	r5, r1, #1
 80020e0:	005f      	lsls	r7, r3, #1
 80020e2:	b500      	push	{lr}
 80020e4:	0b24      	lsrs	r4, r4, #12
 80020e6:	0d6d      	lsrs	r5, r5, #21
 80020e8:	0d7f      	lsrs	r7, r7, #21
 80020ea:	42b5      	cmp	r5, r6
 80020ec:	d00b      	beq.n	8002106 <__aeabi_dcmpun+0x36>
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__aeabi_dcmpun+0x40>)
 80020f0:	2000      	movs	r0, #0
 80020f2:	428f      	cmp	r7, r1
 80020f4:	d104      	bne.n	8002100 <__aeabi_dcmpun+0x30>
 80020f6:	4646      	mov	r6, r8
 80020f8:	4316      	orrs	r6, r2
 80020fa:	0030      	movs	r0, r6
 80020fc:	1e43      	subs	r3, r0, #1
 80020fe:	4198      	sbcs	r0, r3
 8002100:	bc80      	pop	{r7}
 8002102:	46b8      	mov	r8, r7
 8002104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002106:	4304      	orrs	r4, r0
 8002108:	2001      	movs	r0, #1
 800210a:	2c00      	cmp	r4, #0
 800210c:	d1f8      	bne.n	8002100 <__aeabi_dcmpun+0x30>
 800210e:	e7ee      	b.n	80020ee <__aeabi_dcmpun+0x1e>
 8002110:	000007ff 	.word	0x000007ff

08002114 <__aeabi_d2iz>:
 8002114:	000b      	movs	r3, r1
 8002116:	0002      	movs	r2, r0
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	4d16      	ldr	r5, [pc, #88]	@ (8002174 <__aeabi_d2iz+0x60>)
 800211c:	030c      	lsls	r4, r1, #12
 800211e:	b082      	sub	sp, #8
 8002120:	0049      	lsls	r1, r1, #1
 8002122:	2000      	movs	r0, #0
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	0b24      	lsrs	r4, r4, #12
 800212a:	0d49      	lsrs	r1, r1, #21
 800212c:	0fde      	lsrs	r6, r3, #31
 800212e:	42a9      	cmp	r1, r5
 8002130:	dd04      	ble.n	800213c <__aeabi_d2iz+0x28>
 8002132:	4811      	ldr	r0, [pc, #68]	@ (8002178 <__aeabi_d2iz+0x64>)
 8002134:	4281      	cmp	r1, r0
 8002136:	dd03      	ble.n	8002140 <__aeabi_d2iz+0x2c>
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <__aeabi_d2iz+0x68>)
 800213a:	18f0      	adds	r0, r6, r3
 800213c:	b002      	add	sp, #8
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	2080      	movs	r0, #128	@ 0x80
 8002142:	0340      	lsls	r0, r0, #13
 8002144:	4320      	orrs	r0, r4
 8002146:	4c0e      	ldr	r4, [pc, #56]	@ (8002180 <__aeabi_d2iz+0x6c>)
 8002148:	1a64      	subs	r4, r4, r1
 800214a:	2c1f      	cmp	r4, #31
 800214c:	dd08      	ble.n	8002160 <__aeabi_d2iz+0x4c>
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <__aeabi_d2iz+0x70>)
 8002150:	1a5b      	subs	r3, r3, r1
 8002152:	40d8      	lsrs	r0, r3
 8002154:	0003      	movs	r3, r0
 8002156:	4258      	negs	r0, r3
 8002158:	2e00      	cmp	r6, #0
 800215a:	d1ef      	bne.n	800213c <__aeabi_d2iz+0x28>
 800215c:	0018      	movs	r0, r3
 800215e:	e7ed      	b.n	800213c <__aeabi_d2iz+0x28>
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <__aeabi_d2iz+0x74>)
 8002162:	9a00      	ldr	r2, [sp, #0]
 8002164:	469c      	mov	ip, r3
 8002166:	0003      	movs	r3, r0
 8002168:	4461      	add	r1, ip
 800216a:	408b      	lsls	r3, r1
 800216c:	40e2      	lsrs	r2, r4
 800216e:	4313      	orrs	r3, r2
 8002170:	e7f1      	b.n	8002156 <__aeabi_d2iz+0x42>
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	000003fe 	.word	0x000003fe
 8002178:	0000041d 	.word	0x0000041d
 800217c:	7fffffff 	.word	0x7fffffff
 8002180:	00000433 	.word	0x00000433
 8002184:	00000413 	.word	0x00000413
 8002188:	fffffbed 	.word	0xfffffbed

0800218c <__aeabi_i2d>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	2800      	cmp	r0, #0
 8002190:	d016      	beq.n	80021c0 <__aeabi_i2d+0x34>
 8002192:	17c3      	asrs	r3, r0, #31
 8002194:	18c5      	adds	r5, r0, r3
 8002196:	405d      	eors	r5, r3
 8002198:	0fc4      	lsrs	r4, r0, #31
 800219a:	0028      	movs	r0, r5
 800219c:	f000 f824 	bl	80021e8 <__clzsi2>
 80021a0:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <__aeabi_i2d+0x58>)
 80021a2:	1a1b      	subs	r3, r3, r0
 80021a4:	055b      	lsls	r3, r3, #21
 80021a6:	0d5b      	lsrs	r3, r3, #21
 80021a8:	280a      	cmp	r0, #10
 80021aa:	dc14      	bgt.n	80021d6 <__aeabi_i2d+0x4a>
 80021ac:	0002      	movs	r2, r0
 80021ae:	002e      	movs	r6, r5
 80021b0:	3215      	adds	r2, #21
 80021b2:	4096      	lsls	r6, r2
 80021b4:	220b      	movs	r2, #11
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	40d5      	lsrs	r5, r2
 80021ba:	032d      	lsls	r5, r5, #12
 80021bc:	0b2d      	lsrs	r5, r5, #12
 80021be:	e003      	b.n	80021c8 <__aeabi_i2d+0x3c>
 80021c0:	2400      	movs	r4, #0
 80021c2:	2300      	movs	r3, #0
 80021c4:	2500      	movs	r5, #0
 80021c6:	2600      	movs	r6, #0
 80021c8:	051b      	lsls	r3, r3, #20
 80021ca:	432b      	orrs	r3, r5
 80021cc:	07e4      	lsls	r4, r4, #31
 80021ce:	4323      	orrs	r3, r4
 80021d0:	0030      	movs	r0, r6
 80021d2:	0019      	movs	r1, r3
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	380b      	subs	r0, #11
 80021d8:	4085      	lsls	r5, r0
 80021da:	032d      	lsls	r5, r5, #12
 80021dc:	2600      	movs	r6, #0
 80021de:	0b2d      	lsrs	r5, r5, #12
 80021e0:	e7f2      	b.n	80021c8 <__aeabi_i2d+0x3c>
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	0000041e 	.word	0x0000041e

080021e8 <__clzsi2>:
 80021e8:	211c      	movs	r1, #28
 80021ea:	2301      	movs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	4298      	cmp	r0, r3
 80021f0:	d301      	bcc.n	80021f6 <__clzsi2+0xe>
 80021f2:	0c00      	lsrs	r0, r0, #16
 80021f4:	3910      	subs	r1, #16
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	4298      	cmp	r0, r3
 80021fa:	d301      	bcc.n	8002200 <__clzsi2+0x18>
 80021fc:	0a00      	lsrs	r0, r0, #8
 80021fe:	3908      	subs	r1, #8
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	4298      	cmp	r0, r3
 8002204:	d301      	bcc.n	800220a <__clzsi2+0x22>
 8002206:	0900      	lsrs	r0, r0, #4
 8002208:	3904      	subs	r1, #4
 800220a:	a202      	add	r2, pc, #8	@ (adr r2, 8002214 <__clzsi2+0x2c>)
 800220c:	5c10      	ldrb	r0, [r2, r0]
 800220e:	1840      	adds	r0, r0, r1
 8002210:	4770      	bx	lr
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	02020304 	.word	0x02020304
 8002218:	01010101 	.word	0x01010101
	...

08002224 <test_leds>:
#define TOGGLE(PIN) HAL_GPIO_TogglePin(PIN ## _GPIO_Port, PIN ## _Pin)
#define SHORT_TIMEOUT 10

void test_leds(void);

void test_leds(){
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	ON(RED);
 8002228:	4b2e      	ldr	r3, [pc, #184]	@ (80022e4 <test_leds+0xc0>)
 800222a:	2201      	movs	r2, #1
 800222c:	2108      	movs	r1, #8
 800222e:	0018      	movs	r0, r3
 8002230:	f002 fa80 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002234:	200a      	movs	r0, #10
 8002236:	f000 ff35 	bl	80030a4 <HAL_Delay>
	ON(GREEN);
 800223a:	4b2a      	ldr	r3, [pc, #168]	@ (80022e4 <test_leds+0xc0>)
 800223c:	2201      	movs	r2, #1
 800223e:	2110      	movs	r1, #16
 8002240:	0018      	movs	r0, r3
 8002242:	f002 fa77 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002246:	200a      	movs	r0, #10
 8002248:	f000 ff2c 	bl	80030a4 <HAL_Delay>
	ON(BLUE1);
 800224c:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <test_leds+0xc0>)
 800224e:	2201      	movs	r2, #1
 8002250:	2120      	movs	r1, #32
 8002252:	0018      	movs	r0, r3
 8002254:	f002 fa6e 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002258:	200a      	movs	r0, #10
 800225a:	f000 ff23 	bl	80030a4 <HAL_Delay>
	ON(BLUE2);
 800225e:	4b21      	ldr	r3, [pc, #132]	@ (80022e4 <test_leds+0xc0>)
 8002260:	2201      	movs	r2, #1
 8002262:	2140      	movs	r1, #64	@ 0x40
 8002264:	0018      	movs	r0, r3
 8002266:	f002 fa65 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f000 ff1a 	bl	80030a4 <HAL_Delay>
	ON(BLUE3);
 8002270:	4b1c      	ldr	r3, [pc, #112]	@ (80022e4 <test_leds+0xc0>)
 8002272:	2201      	movs	r2, #1
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0018      	movs	r0, r3
 8002278:	f002 fa5c 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f000 ff11 	bl	80030a4 <HAL_Delay>
	OFF(RED);
 8002282:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <test_leds+0xc0>)
 8002284:	2200      	movs	r2, #0
 8002286:	2108      	movs	r1, #8
 8002288:	0018      	movs	r0, r3
 800228a:	f002 fa53 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800228e:	200a      	movs	r0, #10
 8002290:	f000 ff08 	bl	80030a4 <HAL_Delay>
	OFF(GREEN);
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <test_leds+0xc0>)
 8002296:	2200      	movs	r2, #0
 8002298:	2110      	movs	r1, #16
 800229a:	0018      	movs	r0, r3
 800229c:	f002 fa4a 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022a0:	200a      	movs	r0, #10
 80022a2:	f000 feff 	bl	80030a4 <HAL_Delay>
	OFF(BLUE1);
 80022a6:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <test_leds+0xc0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	2120      	movs	r1, #32
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 fa41 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022b2:	200a      	movs	r0, #10
 80022b4:	f000 fef6 	bl	80030a4 <HAL_Delay>
	OFF(BLUE2);
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <test_leds+0xc0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	2140      	movs	r1, #64	@ 0x40
 80022be:	0018      	movs	r0, r3
 80022c0:	f002 fa38 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022c4:	200a      	movs	r0, #10
 80022c6:	f000 feed 	bl	80030a4 <HAL_Delay>
	OFF(BLUE3);
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <test_leds+0xc0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	2180      	movs	r1, #128	@ 0x80
 80022d0:	0018      	movs	r0, r3
 80022d2:	f002 fa2f 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022d6:	200a      	movs	r0, #10
 80022d8:	f000 fee4 	bl	80030a4 <HAL_Delay>

}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	50000400 	.word	0x50000400

080022e8 <calctemp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calctemp() {
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b08b      	sub	sp, #44	@ 0x2c
 80022ec:	af00      	add	r7, sp, #0
	// gets °C data from raw adc data
	for (int i = 0; i < NUMSENSORS; i++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f2:	e098      	b.n	8002426 <calctemp+0x13e>
		uint16_t value = adc_values[i] - AD_CORRECTION;
 80022f4:	4b50      	ldr	r3, [pc, #320]	@ (8002438 <calctemp+0x150>)
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	58d2      	ldr	r2, [r2, r3]
 80022fc:	2616      	movs	r6, #22
 80022fe:	19bb      	adds	r3, r7, r6
 8002300:	801a      	strh	r2, [r3, #0]
		double voltage = VREF / (double) 4096 * value;
 8002302:	4b4e      	ldr	r3, [pc, #312]	@ (800243c <calctemp+0x154>)
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	4b4d      	ldr	r3, [pc, #308]	@ (8002440 <calctemp+0x158>)
 800230c:	f7fe fc38 	bl	8000b80 <__aeabi_ddiv>
 8002310:	0002      	movs	r2, r0
 8002312:	000b      	movs	r3, r1
 8002314:	0014      	movs	r4, r2
 8002316:	001d      	movs	r5, r3
 8002318:	19bb      	adds	r3, r7, r6
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ff35 	bl	800218c <__aeabi_i2d>
 8002322:	0002      	movs	r2, r0
 8002324:	000b      	movs	r3, r1
 8002326:	0020      	movs	r0, r4
 8002328:	0029      	movs	r1, r5
 800232a:	f7ff f86d 	bl	8001408 <__aeabi_dmul>
 800232e:	0002      	movs	r2, r0
 8002330:	000b      	movs	r3, r1
 8002332:	60ba      	str	r2, [r7, #8]
 8002334:	60fb      	str	r3, [r7, #12]
		double ntc_resistance = voltage / (VREF - voltage) * DIVIDER_RESISTANCE;
 8002336:	4b41      	ldr	r3, [pc, #260]	@ (800243c <calctemp+0x154>)
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f7ff fb2a 	bl	8001998 <__aeabi_dsub>
 8002344:	0002      	movs	r2, r0
 8002346:	000b      	movs	r3, r1
 8002348:	68b8      	ldr	r0, [r7, #8]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	f7fe fc18 	bl	8000b80 <__aeabi_ddiv>
 8002350:	0002      	movs	r2, r0
 8002352:	000b      	movs	r3, r1
 8002354:	0010      	movs	r0, r2
 8002356:	0019      	movs	r1, r3
 8002358:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <calctemp+0x15c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f7ff f853 	bl	8001408 <__aeabi_dmul>
 8002362:	0002      	movs	r2, r0
 8002364:	000b      	movs	r3, r1
 8002366:	603a      	str	r2, [r7, #0]
 8002368:	607b      	str	r3, [r7, #4]
		double temperature = (double) ntc_resistance
				/ (double) NOMINAL_RESISTANCE;
 800236a:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <calctemp+0x160>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
		double temperature = (double) ntc_resistance
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f7fe fc04 	bl	8000b80 <__aeabi_ddiv>
 8002378:	0002      	movs	r2, r0
 800237a:	000b      	movs	r3, r1
 800237c:	61ba      	str	r2, [r7, #24]
 800237e:	61fb      	str	r3, [r7, #28]
		temperature = log(temperature);
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	0010      	movs	r0, r2
 8002386:	0019      	movs	r1, r3
 8002388:	f004 fe54 	bl	8007034 <log>
 800238c:	0002      	movs	r2, r0
 800238e:	000b      	movs	r3, r1
 8002390:	61ba      	str	r2, [r7, #24]
 8002392:	61fb      	str	r3, [r7, #28]
		temperature /= BETA;
 8002394:	2200      	movs	r2, #0
 8002396:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <calctemp+0x164>)
 8002398:	69b8      	ldr	r0, [r7, #24]
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	f7fe fbf0 	bl	8000b80 <__aeabi_ddiv>
 80023a0:	0002      	movs	r2, r0
 80023a2:	000b      	movs	r3, r1
 80023a4:	61ba      	str	r2, [r7, #24]
 80023a6:	61fb      	str	r3, [r7, #28]
		temperature += 1.0 / NOMINAL_TEMPERATURE;
 80023a8:	4a29      	ldr	r2, [pc, #164]	@ (8002450 <calctemp+0x168>)
 80023aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <calctemp+0x16c>)
 80023ac:	69b8      	ldr	r0, [r7, #24]
 80023ae:	69f9      	ldr	r1, [r7, #28]
 80023b0:	f7fe f882 	bl	80004b8 <__aeabi_dadd>
 80023b4:	0002      	movs	r2, r0
 80023b6:	000b      	movs	r3, r1
 80023b8:	61ba      	str	r2, [r7, #24]
 80023ba:	61fb      	str	r3, [r7, #28]
		temperature = 1.0 / temperature;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	2000      	movs	r0, #0
 80023c2:	4925      	ldr	r1, [pc, #148]	@ (8002458 <calctemp+0x170>)
 80023c4:	f7fe fbdc 	bl	8000b80 <__aeabi_ddiv>
 80023c8:	0002      	movs	r2, r0
 80023ca:	000b      	movs	r3, r1
 80023cc:	61ba      	str	r2, [r7, #24]
 80023ce:	61fb      	str	r3, [r7, #28]
		temperature -= 273.15;
 80023d0:	4a22      	ldr	r2, [pc, #136]	@ (800245c <calctemp+0x174>)
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <calctemp+0x178>)
 80023d4:	69b8      	ldr	r0, [r7, #24]
 80023d6:	69f9      	ldr	r1, [r7, #28]
 80023d8:	f7ff fade 	bl	8001998 <__aeabi_dsub>
 80023dc:	0002      	movs	r2, r0
 80023de:	000b      	movs	r3, r1
 80023e0:	61ba      	str	r2, [r7, #24]
 80023e2:	61fb      	str	r3, [r7, #28]

		if (temperature < RANGE_L || temperature > RANGE_H) {
 80023e4:	2200      	movs	r2, #0
 80023e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <calctemp+0x17c>)
 80023e8:	69b8      	ldr	r0, [r7, #24]
 80023ea:	69f9      	ldr	r1, [r7, #28]
 80023ec:	f7fe f81e 	bl	800042c <__aeabi_dcmplt>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d107      	bne.n	8002404 <calctemp+0x11c>
 80023f4:	2200      	movs	r2, #0
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <calctemp+0x180>)
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	69f9      	ldr	r1, [r7, #28]
 80023fc:	f7fe f82a 	bl	8000454 <__aeabi_dcmpgt>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d003      	beq.n	800240c <calctemp+0x124>
			temperature = INVALID_VAL;
 8002404:	2200      	movs	r2, #0
 8002406:	4b19      	ldr	r3, [pc, #100]	@ (800246c <calctemp+0x184>)
 8002408:	61ba      	str	r2, [r7, #24]
 800240a:	61fb      	str	r3, [r7, #28]
		}

		temperatures_data[i] = temperature;
 800240c:	69b8      	ldr	r0, [r7, #24]
 800240e:	69f9      	ldr	r1, [r7, #28]
 8002410:	f7fe f834 	bl	800047c <__aeabi_d2uiz>
 8002414:	0003      	movs	r3, r0
 8002416:	b299      	uxth	r1, r3
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <calctemp+0x188>)
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	0052      	lsls	r2, r2, #1
 800241e:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < NUMSENSORS; i++) {
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	2b07      	cmp	r3, #7
 800242a:	dc00      	bgt.n	800242e <calctemp+0x146>
 800242c:	e762      	b.n	80022f4 <calctemp+0xc>
	}
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b00b      	add	sp, #44	@ 0x2c
 8002436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002438:	20000240 	.word	0x20000240
 800243c:	20000010 	.word	0x20000010
 8002440:	40b00000 	.word	0x40b00000
 8002444:	20000008 	.word	0x20000008
 8002448:	20000000 	.word	0x20000000
 800244c:	40ab1c00 	.word	0x40ab1c00
 8002450:	dcb5db83 	.word	0xdcb5db83
 8002454:	3f6b79e1 	.word	0x3f6b79e1
 8002458:	3ff00000 	.word	0x3ff00000
 800245c:	66666666 	.word	0x66666666
 8002460:	40711266 	.word	0x40711266
 8002464:	c0440000 	.word	0xc0440000
 8002468:	40690000 	.word	0x40690000
 800246c:	406fe000 	.word	0x406fe000
 8002470:	20000260 	.word	0x20000260

08002474 <select_adc_channel>:
		}
	}
	return counter;
}
//-------------------------------------------------------
void select_adc_channel(int channel) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800247c:	230c      	movs	r3, #12
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	0018      	movs	r0, r3
 8002482:	230c      	movs	r3, #12
 8002484:	001a      	movs	r2, r3
 8002486:	2100      	movs	r1, #0
 8002488:	f004 f956 	bl	8006738 <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
	switch (channel) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d82d      	bhi.n	80024ee <select_adc_channel+0x7a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <select_adc_channel+0xac>)
 8002498:	18d3      	adds	r3, r2, r3
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	469f      	mov	pc, r3
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 800249e:	230c      	movs	r3, #12
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
		break;
 80024a6:	e026      	b.n	80024f6 <select_adc_channel+0x82>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 80024a8:	230c      	movs	r3, #12
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <select_adc_channel+0xb0>)
 80024ae:	601a      	str	r2, [r3, #0]
		break;
 80024b0:	e021      	b.n	80024f6 <select_adc_channel+0x82>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 80024b2:	230c      	movs	r3, #12
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <select_adc_channel+0xb4>)
 80024b8:	601a      	str	r2, [r3, #0]
		break;
 80024ba:	e01c      	b.n	80024f6 <select_adc_channel+0x82>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 80024bc:	230c      	movs	r3, #12
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	4a1a      	ldr	r2, [pc, #104]	@ (800252c <select_adc_channel+0xb8>)
 80024c2:	601a      	str	r2, [r3, #0]
		break;
 80024c4:	e017      	b.n	80024f6 <select_adc_channel+0x82>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 80024c6:	230c      	movs	r3, #12
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <select_adc_channel+0xbc>)
 80024cc:	601a      	str	r2, [r3, #0]
		break;
 80024ce:	e012      	b.n	80024f6 <select_adc_channel+0x82>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 80024d0:	230c      	movs	r3, #12
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <select_adc_channel+0xc0>)
 80024d6:	601a      	str	r2, [r3, #0]
		break;
 80024d8:	e00d      	b.n	80024f6 <select_adc_channel+0x82>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 80024da:	230c      	movs	r3, #12
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	4a16      	ldr	r2, [pc, #88]	@ (8002538 <select_adc_channel+0xc4>)
 80024e0:	601a      	str	r2, [r3, #0]
		break;
 80024e2:	e008      	b.n	80024f6 <select_adc_channel+0x82>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 80024e4:	230c      	movs	r3, #12
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	4a14      	ldr	r2, [pc, #80]	@ (800253c <select_adc_channel+0xc8>)
 80024ea:	601a      	str	r2, [r3, #0]
		break;
 80024ec:	e003      	b.n	80024f6 <select_adc_channel+0x82>
	default:
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80024ee:	230c      	movs	r3, #12
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <select_adc_channel+0xcc>)
 80024f4:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80024f6:	210c      	movs	r1, #12
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002504:	187a      	adds	r2, r7, r1
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <select_adc_channel+0xd0>)
 8002508:	0011      	movs	r1, r2
 800250a:	0018      	movs	r0, r3
 800250c:	f001 fa2a 	bl	8003964 <HAL_ADC_ConfigChannel>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <select_adc_channel+0xa4>
		Error_Handler();
 8002514:	f000 fb3a 	bl	8002b8c <Error_Handler>
	}
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08007494 	.word	0x08007494
 8002524:	04000002 	.word	0x04000002
 8002528:	08000004 	.word	0x08000004
 800252c:	0c000008 	.word	0x0c000008
 8002530:	10000010 	.word	0x10000010
 8002534:	14000020 	.word	0x14000020
 8002538:	18000040 	.word	0x18000040
 800253c:	1c000080 	.word	0x1c000080
 8002540:	b0001000 	.word	0xb0001000
 8002544:	20000090 	.word	0x20000090

08002548 <convert>:
//----------------------------------------------

void convert() {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	int p;

	for (p = 0; p < NUMSENSORS; p++) {
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	e027      	b.n	80025a4 <convert+0x5c>
		select_adc_channel(p);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff ff8c 	bl	8002474 <select_adc_channel>
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <convert+0x6c>)
 800255e:	0018      	movs	r0, r3
 8002560:	f001 f8d6 	bl	8003710 <HAL_ADC_Start>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <convert+0x24>
			Error_Handler();
 8002568:	f000 fb10 	bl	8002b8c <Error_Handler>
		}
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 800256c:	2301      	movs	r3, #1
 800256e:	425a      	negs	r2, r3
 8002570:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <convert+0x6c>)
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f001 f955 	bl	8003824 <HAL_ADC_PollForConversion>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d001      	beq.n	8002582 <convert+0x3a>
			Error_Handler();
 800257e:	f000 fb05 	bl	8002b8c <Error_Handler>
		}
		adc_values[p] = HAL_ADC_GetValue(&hadc1);
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <convert+0x6c>)
 8002584:	0018      	movs	r0, r3
 8002586:	f001 f9e1 	bl	800394c <HAL_ADC_GetValue>
 800258a:	0003      	movs	r3, r0
 800258c:	0019      	movs	r1, r3
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <convert+0x70>)
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(&hadc1);
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <convert+0x6c>)
 8002598:	0018      	movs	r0, r3
 800259a:	f001 f907 	bl	80037ac <HAL_ADC_Stop>
	for (p = 0; p < NUMSENSORS; p++) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3301      	adds	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	ddd4      	ble.n	8002554 <convert+0xc>

	}
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000090 	.word	0x20000090
 80025b8:	20000240 	.word	0x20000240

080025bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	46ce      	mov	lr, r9
 80025c0:	4647      	mov	r7, r8
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b089      	sub	sp, #36	@ 0x24
 80025c6:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
int length=0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025cc:	f000 fce4 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d0:	f000 f872 	bl	80026b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d4:	f000 fa5a 	bl	8002a8c <MX_GPIO_Init>
  MX_ADC1_Init();
 80025d8:	f000 f8c8 	bl	800276c <MX_ADC1_Init>
  MX_CRC_Init();
 80025dc:	f000 f9b0 	bl	8002940 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80025e0:	f000 f9d2 	bl	8002988 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025e4:	f000 fa1e 	bl	8002a24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	test_leds();
 80025e8:	f7ff fe1c 	bl	8002224 <test_leds>
	ON(ENSPWR);
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	0059      	lsls	r1, r3, #1
 80025f0:	23a0      	movs	r3, #160	@ 0xa0
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	2201      	movs	r2, #1
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 f89c 	bl	8004734 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80025fc:	2064      	movs	r0, #100	@ 0x64
 80025fe:	f000 fd51 	bl	80030a4 <HAL_Delay>
	convert();
 8002602:	f7ff ffa1 	bl	8002548 <convert>
	calctemp();
 8002606:	f7ff fe6f 	bl	80022e8 <calctemp>
	convert();
 800260a:	f7ff ff9d 	bl	8002548 <convert>
	calctemp();
 800260e:	f7ff fe6b 	bl	80022e8 <calctemp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		convert();
 8002612:	f7ff ff99 	bl	8002548 <convert>
//	  msglength=sprintf(tx_buffer,"ADC %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
		calctemp();
 8002616:	f7ff fe67 	bl	80022e8 <calctemp>
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
//------------------------------------------------------------------------
		// wait for rising edge
		//while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin))
			;
		ON(GREEN);
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <main+0xe4>)
 800261c:	2201      	movs	r2, #1
 800261e:	2110      	movs	r1, #16
 8002620:	0018      	movs	r0, r3
 8002622:	f002 f887 	bl	8004734 <HAL_GPIO_WritePin>

		 // send
		 //sendData();
		 */
		//sendDataCal();
		length=sprintf(tx_buffer,"%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d \r\n", temperatures_data[0], temperatures_data[1], temperatures_data[2], temperatures_data[3], temperatures_data[4], temperatures_data[5], temperatures_data[6], temperatures_data[7]);
 8002626:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <main+0xe8>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	4698      	mov	r8, r3
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <main+0xe8>)
 800262e:	885b      	ldrh	r3, [r3, #2]
 8002630:	4699      	mov	r9, r3
 8002632:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <main+0xe8>)
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	001a      	movs	r2, r3
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <main+0xe8>)
 800263a:	88db      	ldrh	r3, [r3, #6]
 800263c:	001c      	movs	r4, r3
 800263e:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <main+0xe8>)
 8002640:	891b      	ldrh	r3, [r3, #8]
 8002642:	001d      	movs	r5, r3
 8002644:	4b17      	ldr	r3, [pc, #92]	@ (80026a4 <main+0xe8>)
 8002646:	895b      	ldrh	r3, [r3, #10]
 8002648:	001e      	movs	r6, r3
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <main+0xe8>)
 800264c:	899b      	ldrh	r3, [r3, #12]
 800264e:	469c      	mov	ip, r3
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <main+0xe8>)
 8002652:	89db      	ldrh	r3, [r3, #14]
 8002654:	4914      	ldr	r1, [pc, #80]	@ (80026a8 <main+0xec>)
 8002656:	4815      	ldr	r0, [pc, #84]	@ (80026ac <main+0xf0>)
 8002658:	9305      	str	r3, [sp, #20]
 800265a:	4663      	mov	r3, ip
 800265c:	9304      	str	r3, [sp, #16]
 800265e:	9603      	str	r6, [sp, #12]
 8002660:	9502      	str	r5, [sp, #8]
 8002662:	9401      	str	r4, [sp, #4]
 8002664:	9200      	str	r2, [sp, #0]
 8002666:	464b      	mov	r3, r9
 8002668:	4642      	mov	r2, r8
 800266a:	f004 f845 	bl	80066f8 <siprintf>
 800266e:	0003      	movs	r3, r0
 8002670:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*)tx_buffer, length, 20);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	b29a      	uxth	r2, r3
 8002676:	490d      	ldr	r1, [pc, #52]	@ (80026ac <main+0xf0>)
 8002678:	480d      	ldr	r0, [pc, #52]	@ (80026b0 <main+0xf4>)
 800267a:	2314      	movs	r3, #20
 800267c:	f002 ff08 	bl	8005490 <HAL_UART_Transmit>
		OFF(GREEN);
 8002680:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <main+0xe4>)
 8002682:	2200      	movs	r2, #0
 8002684:	2110      	movs	r1, #16
 8002686:	0018      	movs	r0, r3
 8002688:	f002 f854 	bl	8004734 <HAL_GPIO_WritePin>
		// wait for falling edge
		//while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
		HAL_Delay(5000);
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <main+0xf8>)
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fd08 	bl	80030a4 <HAL_Delay>


//------------------------------------------------------------------------
		HAL_Delay(100);
 8002694:	2064      	movs	r0, #100	@ 0x64
 8002696:	f000 fd05 	bl	80030a4 <HAL_Delay>
		convert();
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	e7b9      	b.n	8002612 <main+0x56>
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	50000400 	.word	0x50000400
 80026a4:	20000260 	.word	0x20000260
 80026a8:	08007428 	.word	0x08007428
 80026ac:	20000270 	.word	0x20000270
 80026b0:	200001ac 	.word	0x200001ac
 80026b4:	00001388 	.word	0x00001388

080026b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b093      	sub	sp, #76	@ 0x4c
 80026bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026be:	2414      	movs	r4, #20
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	0018      	movs	r0, r3
 80026c4:	2334      	movs	r3, #52	@ 0x34
 80026c6:	001a      	movs	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	f004 f835 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	0018      	movs	r0, r3
 80026d2:	2310      	movs	r3, #16
 80026d4:	001a      	movs	r2, r3
 80026d6:	2100      	movs	r1, #0
 80026d8:	f004 f82e 	bl	8006738 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f002 f845 	bl	8004770 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	0052      	lsls	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80026f4:	0021      	movs	r1, r4
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2240      	movs	r2, #64	@ 0x40
 8002700:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2202      	movs	r2, #2
 8002706:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2202      	movs	r2, #2
 800270c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2208      	movs	r2, #8
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	22c0      	movs	r2, #192	@ 0xc0
 800271e:	02d2      	lsls	r2, r2, #11
 8002720:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	0592      	lsls	r2, r2, #22
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272a:	187b      	adds	r3, r7, r1
 800272c:	0018      	movs	r0, r3
 800272e:	f002 f86b 	bl	8004808 <HAL_RCC_OscConfig>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002736:	f000 fa29 	bl	8002b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2202      	movs	r2, #2
 8002744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2102      	movs	r1, #2
 8002756:	0018      	movs	r0, r3
 8002758:	f002 fb66 	bl	8004e28 <HAL_RCC_ClockConfig>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002760:	f000 fa14 	bl	8002b8c <Error_Handler>
  }
}
 8002764:	46c0      	nop			@ (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b013      	add	sp, #76	@ 0x4c
 800276a:	bd90      	pop	{r4, r7, pc}

0800276c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	0018      	movs	r0, r3
 8002776:	230c      	movs	r3, #12
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	f003 ffdc 	bl	8006738 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002780:	4b66      	ldr	r3, [pc, #408]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002782:	4a67      	ldr	r2, [pc, #412]	@ (8002920 <MX_ADC1_Init+0x1b4>)
 8002784:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	0312      	lsls	r2, r2, #12
 800278c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800278e:	4b63      	ldr	r3, [pc, #396]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002794:	4b61      	ldr	r3, [pc, #388]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800279a:	4b60      	ldr	r3, [pc, #384]	@ (800291c <MX_ADC1_Init+0x1b0>)
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	0392      	lsls	r2, r2, #14
 80027a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027a2:	4b5e      	ldr	r3, [pc, #376]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027a4:	2208      	movs	r2, #8
 80027a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027a8:	4b5c      	ldr	r3, [pc, #368]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027ae:	4b5b      	ldr	r3, [pc, #364]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 80027ba:	4b58      	ldr	r3, [pc, #352]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027bc:	2208      	movs	r2, #8
 80027be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027c0:	4b56      	ldr	r3, [pc, #344]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027c2:	2220      	movs	r2, #32
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c8:	4b54      	ldr	r3, [pc, #336]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027ce:	4b53      	ldr	r3, [pc, #332]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027d4:	4b51      	ldr	r3, [pc, #324]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027d6:	222c      	movs	r2, #44	@ 0x2c
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027dc:	4b4f      	ldr	r3, [pc, #316]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80027e2:	4b4e      	ldr	r3, [pc, #312]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80027e8:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80027ee:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027f0:	223c      	movs	r2, #60	@ 0x3c
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80027f6:	4b49      	ldr	r3, [pc, #292]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027fc:	4b47      	ldr	r3, [pc, #284]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fdde 	bl	80033c0 <HAL_ADC_Init>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002808:	f000 f9c0 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800281e:	1d3a      	adds	r2, r7, #4
 8002820:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002822:	0011      	movs	r1, r2
 8002824:	0018      	movs	r0, r3
 8002826:	f001 f89d 	bl	8003964 <HAL_ADC_ConfigChannel>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d001      	beq.n	8002832 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800282e:	f000 f9ad 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	4a3b      	ldr	r2, [pc, #236]	@ (8002924 <MX_ADC1_Init+0x1b8>)
 8002836:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2204      	movs	r2, #4
 800283c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800283e:	1d3a      	adds	r2, r7, #4
 8002840:	4b36      	ldr	r3, [pc, #216]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f001 f88d 	bl	8003964 <HAL_ADC_ConfigChannel>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d001      	beq.n	8002852 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800284e:	f000 f99d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4a34      	ldr	r2, [pc, #208]	@ (8002928 <MX_ADC1_Init+0x1bc>)
 8002856:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2208      	movs	r2, #8
 800285c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285e:	1d3a      	adds	r2, r7, #4
 8002860:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f001 f87d 	bl	8003964 <HAL_ADC_ConfigChannel>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800286e:	f000 f98d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <MX_ADC1_Init+0x1c0>)
 8002876:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	220c      	movs	r2, #12
 800287c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	4b26      	ldr	r3, [pc, #152]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f001 f86d 	bl	8003964 <HAL_ADC_ConfigChannel>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d001      	beq.n	8002892 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800288e:	f000 f97d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4a26      	ldr	r2, [pc, #152]	@ (8002930 <MX_ADC1_Init+0x1c4>)
 8002896:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	2210      	movs	r2, #16
 800289c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289e:	1d3a      	adds	r2, r7, #4
 80028a0:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f001 f85d 	bl	8003964 <HAL_ADC_ConfigChannel>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80028ae:	f000 f96d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002934 <MX_ADC1_Init+0x1c8>)
 80028b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2214      	movs	r2, #20
 80028bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028be:	1d3a      	adds	r2, r7, #4
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 f84d 	bl	8003964 <HAL_ADC_ConfigChannel>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 80028ce:	f000 f95d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <MX_ADC1_Init+0x1cc>)
 80028d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2218      	movs	r2, #24
 80028dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028de:	1d3a      	adds	r2, r7, #4
 80028e0:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <MX_ADC1_Init+0x1b0>)
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 f83d 	bl	8003964 <HAL_ADC_ConfigChannel>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d001      	beq.n	80028f2 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 80028ee:	f000 f94d 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <MX_ADC1_Init+0x1d0>)
 80028f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	221c      	movs	r2, #28
 80028fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028fe:	1d3a      	adds	r2, r7, #4
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <MX_ADC1_Init+0x1b0>)
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f001 f82d 	bl	8003964 <HAL_ADC_ConfigChannel>
 800290a:	1e03      	subs	r3, r0, #0
 800290c:	d001      	beq.n	8002912 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800290e:	f000 f93d 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	20000090 	.word	0x20000090
 8002920:	40012400 	.word	0x40012400
 8002924:	04000002 	.word	0x04000002
 8002928:	08000004 	.word	0x08000004
 800292c:	0c000008 	.word	0x0c000008
 8002930:	10000010 	.word	0x10000010
 8002934:	14000020 	.word	0x14000020
 8002938:	18000040 	.word	0x18000040
 800293c:	1c000080 	.word	0x1c000080

08002940 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <MX_CRC_Init+0x40>)
 8002946:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <MX_CRC_Init+0x44>)
 8002948:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <MX_CRC_Init+0x40>)
 800294c:	2200      	movs	r2, #0
 800294e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <MX_CRC_Init+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <MX_CRC_Init+0x40>)
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800295c:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <MX_CRC_Init+0x40>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002962:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <MX_CRC_Init+0x40>)
 8002964:	2201      	movs	r2, #1
 8002966:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002968:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <MX_CRC_Init+0x40>)
 800296a:	0018      	movs	r0, r3
 800296c:	f001 fbd6 	bl	800411c <HAL_CRC_Init>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d001      	beq.n	8002978 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002974:	f000 f90a 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	200000f4 	.word	0x200000f4
 8002984:	40023000 	.word	0x40023000

08002988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800298c:	4b23      	ldr	r3, [pc, #140]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 800298e:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <MX_USART1_UART_Init+0x98>)
 8002990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 8002994:	22e1      	movs	r2, #225	@ 0xe1
 8002996:	0252      	lsls	r2, r2, #9
 8002998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b18      	ldr	r3, [pc, #96]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029c4:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ca:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029d2:	0018      	movs	r0, r3
 80029d4:	f002 fd06 	bl	80053e4 <HAL_UART_Init>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029dc:	f000 f8d6 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	0018      	movs	r0, r3
 80029e6:	f003 fda7 	bl	8006538 <HAL_UARTEx_SetTxFifoThreshold>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029ee:	f000 f8cd 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f003 fdde 	bl	80065b8 <HAL_UARTEx_SetRxFifoThreshold>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a00:	f000 f8c4 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <MX_USART1_UART_Init+0x94>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f003 fd5c 	bl	80064c4 <HAL_UARTEx_DisableFifoMode>
 8002a0c:	1e03      	subs	r3, r0, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a10:	f000 f8bc 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	20000118 	.word	0x20000118
 8002a20:	40013800 	.word	0x40013800

08002a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a2a:	4a17      	ldr	r2, [pc, #92]	@ (8002a88 <MX_USART3_UART_Init+0x64>)
 8002a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a30:	22e1      	movs	r2, #225	@ 0xe1
 8002a32:	0252      	lsls	r2, r2, #9
 8002a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a42:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a48:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a60:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <MX_USART3_UART_Init+0x60>)
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 fcb8 	bl	80053e4 <HAL_UART_Init>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a78:	f000 f888 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a7c:	46c0      	nop			@ (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	200001ac 	.word	0x200001ac
 8002a88:	40004800 	.word	0x40004800

08002a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a92:	240c      	movs	r4, #12
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	0018      	movs	r0, r3
 8002a98:	2314      	movs	r3, #20
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f003 fe4b 	bl	8006738 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002abe:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ad8:	2102      	movs	r1, #2
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ade:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <MX_GPIO_Init+0xf4>)
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENSPWR_GPIO_Port, ENSPWR_Pin, GPIO_PIN_RESET);
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	0059      	lsls	r1, r3, #1
 8002aee:	23a0      	movs	r3, #160	@ 0xa0
 8002af0:	05db      	lsls	r3, r3, #23
 8002af2:	2200      	movs	r2, #0
 8002af4:	0018      	movs	r0, r3
 8002af6:	f001 fe1d 	bl	8004734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <MX_GPIO_Init+0xf8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	21f8      	movs	r1, #248	@ 0xf8
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fe17 	bl	8004734 <HAL_GPIO_WritePin>
                          |BLUE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	0192      	lsls	r2, r2, #6
 8002b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	193b      	adds	r3, r7, r4
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	193b      	adds	r3, r7, r4
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b88 <MX_GPIO_Init+0xfc>)
 8002b1e:	0019      	movs	r1, r3
 8002b20:	0010      	movs	r0, r2
 8002b22:	f001 fca3 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENSPWR_Pin */
  GPIO_InitStruct.Pin = ENSPWR_Pin;
 8002b26:	0021      	movs	r1, r4
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	000c      	movs	r4, r1
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	2201      	movs	r2, #1
 8002b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENSPWR_GPIO_Port, &GPIO_InitStruct);
 8002b44:	193a      	adds	r2, r7, r4
 8002b46:	23a0      	movs	r3, #160	@ 0xa0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 fc8d 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE1_Pin BLUE2_Pin
                           BLUE3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002b52:	0021      	movs	r1, r4
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	22f8      	movs	r2, #248	@ 0xf8
 8002b58:	601a      	str	r2, [r3, #0]
                          |BLUE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <MX_GPIO_Init+0xf8>)
 8002b70:	0019      	movs	r1, r3
 8002b72:	0010      	movs	r0, r2
 8002b74:	f001 fc7a 	bl	800446c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b78:	46c0      	nop			@ (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b009      	add	sp, #36	@ 0x24
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	50000400 	.word	0x50000400
 8002b88:	50000800 	.word	0x50000800

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	e7fd      	b.n	8002b94 <Error_Handler+0x8>

08002b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <HAL_MspInit+0x44>)
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_MspInit+0x44>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <HAL_MspInit+0x44>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_MspInit+0x44>)
 8002bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_MspInit+0x44>)
 8002bbc:	2180      	movs	r1, #128	@ 0x80
 8002bbe:	0549      	lsls	r1, r1, #21
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_MspInit+0x44>)
 8002bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	055b      	lsls	r3, r3, #21
 8002bcc:	4013      	ands	r3, r2
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b093      	sub	sp, #76	@ 0x4c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	2334      	movs	r3, #52	@ 0x34
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	0018      	movs	r0, r3
 8002bee:	2314      	movs	r3, #20
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f003 fda0 	bl	8006738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf8:	2418      	movs	r4, #24
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	231c      	movs	r3, #28
 8002c00:	001a      	movs	r2, r3
 8002c02:	2100      	movs	r1, #0
 8002c04:	f003 fd98 	bl	8006738 <memset>
  if(hadc->Instance==ADC1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc4 <HAL_ADC_MspInit+0xe4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d154      	bne.n	8002cbc <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	01d2      	lsls	r2, r2, #7
 8002c18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	0018      	movs	r0, r3
 8002c24:	f002 faaa 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002c2c:	f7ff ffae 	bl	8002b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c34:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	0349      	lsls	r1, r1, #13
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	035b      	lsls	r3, r3, #13
 8002c46:	4013      	ands	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c64:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c70:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_ADC_MspInit+0xe8>)
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8002c7c:	2434      	movs	r4, #52	@ 0x34
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	22ff      	movs	r2, #255	@ 0xff
 8002c82:	601a      	str	r2, [r3, #0]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	2203      	movs	r2, #3
 8002c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	193a      	adds	r2, r7, r4
 8002c92:	23a0      	movs	r3, #160	@ 0xa0
 8002c94:	05db      	lsls	r3, r3, #23
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f001 fbe7 	bl	800446c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AREFIN_Pin;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AREFIN_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <HAL_ADC_MspInit+0xec>)
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	0010      	movs	r0, r2
 8002cb8:	f001 fbd8 	bl	800446c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b013      	add	sp, #76	@ 0x4c
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	50000400 	.word	0x50000400

08002cd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_CRC_MspInit+0x38>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10d      	bne.n	8002cfe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_CRC_MspInit+0x3c>)
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce6:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_CRC_MspInit+0x3c>)
 8002ce8:	2180      	movs	r1, #128	@ 0x80
 8002cea:	0149      	lsls	r1, r1, #5
 8002cec:	430a      	orrs	r2, r1
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_CRC_MspInit+0x3c>)
 8002cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	40023000 	.word	0x40023000
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b093      	sub	sp, #76	@ 0x4c
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	2334      	movs	r3, #52	@ 0x34
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	2314      	movs	r3, #20
 8002d20:	001a      	movs	r2, r3
 8002d22:	2100      	movs	r1, #0
 8002d24:	f003 fd08 	bl	8006738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d28:	2418      	movs	r4, #24
 8002d2a:	193b      	adds	r3, r7, r4
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	231c      	movs	r3, #28
 8002d30:	001a      	movs	r2, r3
 8002d32:	2100      	movs	r1, #0
 8002d34:	f003 fd00 	bl	8006738 <memset>
  if(huart->Instance==USART1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a46      	ldr	r2, [pc, #280]	@ (8002e58 <HAL_UART_MspInit+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d148      	bne.n	8002dd4 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	0018      	movs	r0, r3
 8002d52:	f002 fa13 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d5a:	f7ff ff17 	bl	8002b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d62:	4b3e      	ldr	r3, [pc, #248]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d64:	2180      	movs	r1, #128	@ 0x80
 8002d66:	01c9      	lsls	r1, r1, #7
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7a:	4b38      	ldr	r3, [pc, #224]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7e:	4b37      	ldr	r3, [pc, #220]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d80:	2101      	movs	r1, #1
 8002d82:	430a      	orrs	r2, r1
 8002d84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d86:	4b35      	ldr	r3, [pc, #212]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_Pin|U1RX_Pin;
 8002d92:	2134      	movs	r1, #52	@ 0x34
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	22c0      	movs	r2, #192	@ 0xc0
 8002d98:	00d2      	lsls	r2, r2, #3
 8002d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	2202      	movs	r2, #2
 8002da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2201      	movs	r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	187a      	adds	r2, r7, r1
 8002db6:	23a0      	movs	r3, #160	@ 0xa0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 fb55 	bl	800446c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	201b      	movs	r0, #27
 8002dc8:	f001 f976 	bl	80040b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dcc:	201b      	movs	r0, #27
 8002dce:	f001 f988 	bl	80040e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dd2:	e03d      	b.n	8002e50 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a21      	ldr	r2, [pc, #132]	@ (8002e60 <HAL_UART_MspInit+0x150>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d138      	bne.n	8002e50 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dde:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002de4:	2180      	movs	r1, #128	@ 0x80
 8002de6:	02c9      	lsls	r1, r1, #11
 8002de8:	430a      	orrs	r2, r1
 8002dea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dec:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002dee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	02db      	lsls	r3, r3, #11
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	4b18      	ldr	r3, [pc, #96]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002e00:	2102      	movs	r1, #2
 8002e02:	430a      	orrs	r2, r1
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <HAL_UART_MspInit+0x14c>)
 8002e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U3TX_Pin|U3RX_Pin;
 8002e12:	2134      	movs	r1, #52	@ 0x34
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	22c0      	movs	r2, #192	@ 0xc0
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2202      	movs	r2, #2
 8002e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2204      	movs	r2, #4
 8002e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_UART_MspInit+0x154>)
 8002e38:	0019      	movs	r1, r3
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	f001 fb16 	bl	800446c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2100      	movs	r1, #0
 8002e44:	201d      	movs	r0, #29
 8002e46:	f001 f937 	bl	80040b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002e4a:	201d      	movs	r0, #29
 8002e4c:	f001 f949 	bl	80040e2 <HAL_NVIC_EnableIRQ>
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b013      	add	sp, #76	@ 0x4c
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40004800 	.word	0x40004800
 8002e64:	50000400 	.word	0x50000400

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	e7fd      	b.n	8002e6c <NMI_Handler+0x4>

08002e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	e7fd      	b.n	8002e74 <HardFault_Handler+0x4>

08002e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e90:	f000 f8ec 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <USART1_IRQHandler+0x14>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f002 fb98 	bl	80055d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	20000118 	.word	0x20000118

08002eb4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002eb8:	4b03      	ldr	r3, [pc, #12]	@ (8002ec8 <USART3_4_IRQHandler+0x14>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f002 fb8c 	bl	80055d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	200001ac 	.word	0x200001ac

08002ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed4:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <_sbrk+0x5c>)
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <_sbrk+0x60>)
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee0:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <_sbrk+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <_sbrk+0x64>)
 8002eea:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <_sbrk+0x68>)
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eee:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <_sbrk+0x64>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	18d3      	adds	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d207      	bcs.n	8002f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002efc:	f003 fc24 	bl	8006748 <__errno>
 8002f00:	0003      	movs	r3, r0
 8002f02:	220c      	movs	r2, #12
 8002f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	425b      	negs	r3, r3
 8002f0a:	e009      	b.n	8002f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f0c:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <_sbrk+0x64>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	18d2      	adds	r2, r2, r3
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <_sbrk+0x64>)
 8002f1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b006      	add	sp, #24
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20009000 	.word	0x20009000
 8002f2c:	00000400 	.word	0x00000400
 8002f30:	20000370 	.word	0x20000370
 8002f34:	200004c0 	.word	0x200004c0

08002f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f44:	480d      	ldr	r0, [pc, #52]	@ (8002f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f48:	f7ff fff6 	bl	8002f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f4c:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f4e:	490d      	ldr	r1, [pc, #52]	@ (8002f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <LoopForever+0xe>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f54:	e002      	b.n	8002f5c <LoopCopyDataInit>

08002f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5a:	3304      	adds	r3, #4

08002f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f60:	d3f9      	bcc.n	8002f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f64:	4c0a      	ldr	r4, [pc, #40]	@ (8002f90 <LoopForever+0x16>)
  movs r3, #0
 8002f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f68:	e001      	b.n	8002f6e <LoopFillZerobss>

08002f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f6c:	3204      	adds	r2, #4

08002f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f70:	d3fb      	bcc.n	8002f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f72:	f003 fbef 	bl	8006754 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f76:	f7ff fb21 	bl	80025bc <main>

08002f7a <LoopForever>:

LoopForever:
  b LoopForever
 8002f7a:	e7fe      	b.n	8002f7a <LoopForever>
  ldr   r0, =_estack
 8002f7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f88:	08007578 	.word	0x08007578
  ldr r2, =_sbss
 8002f8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f90:	200004c0 	.word	0x200004c0

08002f94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC1_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_Init+0x3c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_Init+0x3c>)
 8002faa:	2180      	movs	r1, #128	@ 0x80
 8002fac:	0049      	lsls	r1, r1, #1
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	f000 f810 	bl	8002fd8 <HAL_InitTick>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e001      	b.n	8002fc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fde8 	bl	8002b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	781b      	ldrb	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40022000 	.word	0x40022000

08002fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_InitTick+0x88>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02b      	beq.n	8003048 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <HAL_InitTick+0x8c>)
 8002ff2:	681c      	ldr	r4, [r3, #0]
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <HAL_InitTick+0x88>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	23fa      	movs	r3, #250	@ 0xfa
 8002ffc:	0098      	lsls	r0, r3, #2
 8002ffe:	f7fd f889 	bl	8000114 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	0019      	movs	r1, r3
 8003006:	0020      	movs	r0, r4
 8003008:	f7fd f884 	bl	8000114 <__udivsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	0018      	movs	r0, r3
 8003010:	f001 f877 	bl	8004102 <HAL_SYSTICK_Config>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d112      	bne.n	800303e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d80a      	bhi.n	8003034 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	2301      	movs	r3, #1
 8003022:	425b      	negs	r3, r3
 8003024:	2200      	movs	r2, #0
 8003026:	0018      	movs	r0, r3
 8003028:	f001 f846 	bl	80040b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800302c:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_InitTick+0x90>)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00d      	b.n	8003050 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e008      	b.n	8003050 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800303e:	230f      	movs	r3, #15
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e003      	b.n	8003050 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003048:	230f      	movs	r3, #15
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2201      	movs	r2, #1
 800304e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003050:	230f      	movs	r3, #15
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	781b      	ldrb	r3, [r3, #0]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b005      	add	sp, #20
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	20000020 	.word	0x20000020
 8003064:	20000018 	.word	0x20000018
 8003068:	2000001c 	.word	0x2000001c

0800306c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_IncTick+0x1c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	001a      	movs	r2, r3
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_IncTick+0x20>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	18d2      	adds	r2, r2, r3
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <HAL_IncTick+0x20>)
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	20000020 	.word	0x20000020
 800308c:	20000374 	.word	0x20000374

08003090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  return uwTick;
 8003094:	4b02      	ldr	r3, [pc, #8]	@ (80030a0 <HAL_GetTick+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	20000374 	.word	0x20000374

080030a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff fff0 	bl	8003090 <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3301      	adds	r3, #1
 80030bc:	d005      	beq.n	80030ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_Delay+0x44>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	001a      	movs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	f7ff ffe0 	bl	8003090 <HAL_GetTick>
 80030d0:	0002      	movs	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d8f7      	bhi.n	80030cc <HAL_Delay+0x28>
  {
  }
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	20000020 	.word	0x20000020

080030ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80030fc:	401a      	ands	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b002      	add	sp, #8
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	fe3fffff 	.word	0xfe3fffff

08003114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	23e0      	movs	r3, #224	@ 0xe0
 8003122:	045b      	lsls	r3, r3, #17
 8003124:	4013      	ands	r3, r2
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b002      	add	sp, #8
 800312c:	bd80      	pop	{r7, pc}

0800312e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	2104      	movs	r1, #4
 8003142:	400a      	ands	r2, r1
 8003144:	2107      	movs	r1, #7
 8003146:	4091      	lsls	r1, r2
 8003148:	000a      	movs	r2, r1
 800314a:	43d2      	mvns	r2, r2
 800314c:	401a      	ands	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2104      	movs	r1, #4
 8003152:	400b      	ands	r3, r1
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4099      	lsls	r1, r3
 8003158:	000b      	movs	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}

08003168 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	2104      	movs	r1, #4
 800317a:	400a      	ands	r2, r1
 800317c:	2107      	movs	r1, #7
 800317e:	4091      	lsls	r1, r2
 8003180:	000a      	movs	r2, r1
 8003182:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2104      	movs	r1, #4
 8003188:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800318a:	40da      	lsrs	r2, r3
 800318c:	0013      	movs	r3, r2
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}

08003196 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	23c0      	movs	r3, #192	@ 0xc0
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4013      	ands	r3, r2
 80031a8:	d101      	bne.n	80031ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	211f      	movs	r1, #31
 80031cc:	400a      	ands	r2, r1
 80031ce:	210f      	movs	r1, #15
 80031d0:	4091      	lsls	r1, r2
 80031d2:	000a      	movs	r2, r1
 80031d4:	43d2      	mvns	r2, r2
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	210f      	movs	r1, #15
 80031de:	4019      	ands	r1, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	201f      	movs	r0, #31
 80031e4:	4003      	ands	r3, r0
 80031e6:	4099      	lsls	r1, r3
 80031e8:	000b      	movs	r3, r1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	035b      	lsls	r3, r3, #13
 800320a:	0b5b      	lsrs	r3, r3, #13
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}

0800321a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	0352      	lsls	r2, r2, #13
 800322c:	0b52      	lsrs	r2, r2, #13
 800322e:	43d2      	mvns	r2, r2
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	0212      	lsls	r2, r2, #8
 8003254:	43d2      	mvns	r2, r2
 8003256:	401a      	ands	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	400b      	ands	r3, r1
 8003260:	4904      	ldr	r1, [pc, #16]	@ (8003274 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003262:	400b      	ands	r3, r1
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b004      	add	sp, #16
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	07ffff00 	.word	0x07ffff00

08003278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a05      	ldr	r2, [pc, #20]	@ (800329c <LL_ADC_EnableInternalRegulator+0x24>)
 8003286:	4013      	ands	r3, r2
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	0552      	lsls	r2, r2, #21
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	6fffffe8 	.word	0x6fffffe8

080032a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	055b      	lsls	r3, r3, #21
 80032b0:	401a      	ands	r2, r3
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	055b      	lsls	r3, r3, #21
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d101      	bne.n	80032be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80032be:	2300      	movs	r3, #0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b002      	add	sp, #8
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <LL_ADC_Enable+0x20>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	2201      	movs	r2, #1
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	7fffffe8 	.word	0x7fffffe8

080032ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a04      	ldr	r2, [pc, #16]	@ (800330c <LL_ADC_Disable+0x20>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	2202      	movs	r2, #2
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}
 800330c:	7fffffe8 	.word	0x7fffffe8

08003310 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <LL_ADC_IsEnabled+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_ADC_IsEnabled+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}

08003332 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2202      	movs	r2, #2
 8003340:	4013      	ands	r3, r2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d101      	bne.n	800334a <LL_ADC_IsDisableOngoing+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsDisableOngoing+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <LL_ADC_REG_StartConversion+0x20>)
 8003362:	4013      	ands	r3, r2
 8003364:	2204      	movs	r2, #4
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	7fffffe8 	.word	0x7fffffe8

08003378 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <LL_ADC_REG_StopConversion+0x20>)
 8003386:	4013      	ands	r3, r2
 8003388:	2210      	movs	r2, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}
 8003398:	7fffffe8 	.word	0x7fffffe8

0800339c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2204      	movs	r2, #4
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d101      	bne.n	80033b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e17f      	b.n	80036e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fbf5 	bl	8002be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2254      	movs	r2, #84	@ 0x54
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0018      	movs	r0, r3
 800340a:	f7ff ff49 	bl	80032a0 <LL_ADC_IsInternalRegulatorEnabled>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d115      	bne.n	800343e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff ff2e 	bl	8003278 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800341c:	4bb4      	ldr	r3, [pc, #720]	@ (80036f0 <HAL_ADC_Init+0x330>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	49b4      	ldr	r1, [pc, #720]	@ (80036f4 <HAL_ADC_Init+0x334>)
 8003422:	0018      	movs	r0, r3
 8003424:	f7fc fe76 	bl	8000114 <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003430:	e002      	b.n	8003438 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f9      	bne.n	8003432 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff ff2c 	bl	80032a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d10f      	bne.n	800346c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	2210      	movs	r2, #16
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	2201      	movs	r2, #1
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003464:	231f      	movs	r3, #31
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff ff93 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	2210      	movs	r2, #16
 8003480:	4013      	ands	r3, r2
 8003482:	d000      	beq.n	8003486 <HAL_ADC_Init+0xc6>
 8003484:	e122      	b.n	80036cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d000      	beq.n	800348e <HAL_ADC_Init+0xce>
 800348c:	e11e      	b.n	80036cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a99      	ldr	r2, [pc, #612]	@ (80036f8 <HAL_ADC_Init+0x338>)
 8003494:	4013      	ands	r3, r2
 8003496:	2202      	movs	r2, #2
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff ff34 	bl	8003310 <LL_ADC_IsEnabled>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d000      	beq.n	80034ae <HAL_ADC_Init+0xee>
 80034ac:	e0ad      	b.n	800360a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7e1b      	ldrb	r3, [r3, #24]
 80034b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80034b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7e5b      	ldrb	r3, [r3, #25]
 80034be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7e9b      	ldrb	r3, [r3, #26]
 80034c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_ADC_Init+0x118>
 80034d2:	2380      	movs	r3, #128	@ 0x80
 80034d4:	015b      	lsls	r3, r3, #5
 80034d6:	e000      	b.n	80034da <HAL_ADC_Init+0x11a>
 80034d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da04      	bge.n	80034f4 <HAL_ADC_Init+0x134>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	e001      	b.n	80034f8 <HAL_ADC_Init+0x138>
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80034f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	212c      	movs	r1, #44	@ 0x2c
 80034fe:	5c5b      	ldrb	r3, [r3, r1]
 8003500:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003502:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	5c9b      	ldrb	r3, [r3, r2]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d115      	bne.n	8003540 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7e9b      	ldrb	r3, [r3, #26]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2280      	movs	r2, #128	@ 0x80
 8003520:	0252      	lsls	r2, r2, #9
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e00b      	b.n	8003540 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	2220      	movs	r2, #32
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	2201      	movs	r2, #1
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354c:	23e0      	movs	r3, #224	@ 0xe0
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003556:	4313      	orrs	r3, r2
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a65      	ldr	r2, [pc, #404]	@ (80036fc <HAL_ADC_Init+0x33c>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0f9b      	lsrs	r3, r3, #30
 800357a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003580:	4313      	orrs	r3, r2
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223c      	movs	r2, #60	@ 0x3c
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d111      	bne.n	80035b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	0f9b      	lsrs	r3, r3, #30
 8003598:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800359e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80035a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80035aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	2201      	movs	r2, #1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4a50      	ldr	r2, [pc, #320]	@ (8003700 <HAL_ADC_Init+0x340>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	23c0      	movs	r3, #192	@ 0xc0
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d018      	beq.n	800360a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	05db      	lsls	r3, r3, #23
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d012      	beq.n	800360a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d00c      	beq.n	800360a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80035f0:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <HAL_ADC_Init+0x344>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a44      	ldr	r2, [pc, #272]	@ (8003708 <HAL_ADC_Init+0x348>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	0019      	movs	r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	23f0      	movs	r3, #240	@ 0xf0
 8003600:	039b      	lsls	r3, r3, #14
 8003602:	401a      	ands	r2, r3
 8003604:	4b3f      	ldr	r3, [pc, #252]	@ (8003704 <HAL_ADC_Init+0x344>)
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	001a      	movs	r2, r3
 8003614:	2100      	movs	r1, #0
 8003616:	f7ff fd8a 	bl	800312e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	493a      	ldr	r1, [pc, #232]	@ (800370c <HAL_ADC_Init+0x34c>)
 8003624:	001a      	movs	r2, r3
 8003626:	f7ff fd82 	bl	800312e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2110      	movs	r1, #16
 800363e:	4249      	negs	r1, r1
 8003640:	430a      	orrs	r2, r1
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
 8003644:	e018      	b.n	8003678 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	039b      	lsls	r3, r3, #14
 800364e:	429a      	cmp	r2, r3
 8003650:	d112      	bne.n	8003678 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	3b01      	subs	r3, #1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	221c      	movs	r2, #28
 8003662:	4013      	ands	r3, r2
 8003664:	2210      	movs	r2, #16
 8003666:	4252      	negs	r2, r2
 8003668:	409a      	lsls	r2, r3
 800366a:	0011      	movs	r1, r2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2100      	movs	r1, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fd72 	bl	8003168 <LL_ADC_GetSamplingTimeCommonChannels>
 8003684:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800368a:	429a      	cmp	r2, r3
 800368c:	d10b      	bne.n	80036a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	2203      	movs	r2, #3
 800369a:	4393      	bics	r3, r2
 800369c:	2201      	movs	r2, #1
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036a4:	e01c      	b.n	80036e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	2212      	movs	r2, #18
 80036ac:	4393      	bics	r3, r2
 80036ae:	2210      	movs	r2, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	2201      	movs	r2, #1
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80036c2:	231f      	movs	r3, #31
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036ca:	e009      	b.n	80036e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d0:	2210      	movs	r2, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036d8:	231f      	movs	r3, #31
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80036e0:	231f      	movs	r3, #31
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b008      	add	sp, #32
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	20000018 	.word	0x20000018
 80036f4:	00030d40 	.word	0x00030d40
 80036f8:	fffffefd 	.word	0xfffffefd
 80036fc:	ffde0201 	.word	0xffde0201
 8003700:	1ffffc02 	.word	0x1ffffc02
 8003704:	40012708 	.word	0x40012708
 8003708:	ffc3ffff 	.word	0xffc3ffff
 800370c:	07ffff04 	.word	0x07ffff04

08003710 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0018      	movs	r0, r3
 800371e:	f7ff fe3d 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d135      	bne.n	8003792 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2254      	movs	r2, #84	@ 0x54
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_ADC_Start+0x24>
 8003730:	2302      	movs	r3, #2
 8003732:	e035      	b.n	80037a0 <HAL_ADC_Start+0x90>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2254      	movs	r2, #84	@ 0x54
 8003738:	2101      	movs	r1, #1
 800373a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800373c:	250f      	movs	r5, #15
 800373e:	197c      	adds	r4, r7, r5
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 fb28 	bl	8003d98 <ADC_Enable>
 8003748:	0003      	movs	r3, r0
 800374a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800374c:	197b      	adds	r3, r7, r5
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d119      	bne.n	8003788 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	4a13      	ldr	r2, [pc, #76]	@ (80037a8 <HAL_ADC_Start+0x98>)
 800375a:	4013      	ands	r3, r2
 800375c:	2280      	movs	r2, #128	@ 0x80
 800375e:	0052      	lsls	r2, r2, #1
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	221c      	movs	r2, #28
 8003772:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2254      	movs	r2, #84	@ 0x54
 8003778:	2100      	movs	r1, #0
 800377a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff fde7 	bl	8003354 <LL_ADC_REG_StartConversion>
 8003786:	e008      	b.n	800379a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2254      	movs	r2, #84	@ 0x54
 800378c:	2100      	movs	r1, #0
 800378e:	5499      	strb	r1, [r3, r2]
 8003790:	e003      	b.n	800379a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003792:	230f      	movs	r3, #15
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2202      	movs	r2, #2
 8003798:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800379a:	230f      	movs	r3, #15
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bdb0      	pop	{r4, r5, r7, pc}
 80037a8:	fffff0fe 	.word	0xfffff0fe

080037ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2254      	movs	r2, #84	@ 0x54
 80037b8:	5c9b      	ldrb	r3, [r3, r2]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_Stop+0x16>
 80037be:	2302      	movs	r3, #2
 80037c0:	e029      	b.n	8003816 <HAL_ADC_Stop+0x6a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2254      	movs	r2, #84	@ 0x54
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037ca:	250f      	movs	r5, #15
 80037cc:	197c      	adds	r4, r7, r5
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fa9f 	bl	8003d14 <ADC_ConversionStop>
 80037d6:	0003      	movs	r3, r0
 80037d8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037da:	197b      	adds	r3, r7, r5
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d112      	bne.n	8003808 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 fb5c 	bl	8003ea4 <ADC_Disable>
 80037ec:	0003      	movs	r3, r0
 80037ee:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037f0:	197b      	adds	r3, r7, r5
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_ADC_Stop+0x74>)
 80037fe:	4013      	ands	r3, r2
 8003800:	2201      	movs	r2, #1
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2254      	movs	r2, #84	@ 0x54
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	fffffefe 	.word	0xfffffefe

08003824 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d102      	bne.n	800383c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003836:	2308      	movs	r3, #8
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e00f      	b.n	800385c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	4013      	ands	r3, r2
 8003846:	d007      	beq.n	8003858 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	2220      	movs	r2, #32
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e072      	b.n	800393e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003858:	2304      	movs	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800385c:	f7ff fc18 	bl	8003090 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003864:	e01f      	b.n	80038a6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	d01c      	beq.n	80038a6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800386c:	f7ff fc10 	bl	8003090 <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <HAL_ADC_PollForConversion+0x5e>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d111      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	d10b      	bne.n	80038a6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	2204      	movs	r2, #4
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2254      	movs	r2, #84	@ 0x54
 800389e:	2100      	movs	r1, #0
 80038a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04b      	b.n	800393e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	d0d9      	beq.n	8003866 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b6:	2280      	movs	r2, #128	@ 0x80
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fc66 	bl	8003196 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d02e      	beq.n	800392c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7e9b      	ldrb	r3, [r3, #26]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d12a      	bne.n	800392c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	4013      	ands	r3, r2
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d123      	bne.n	800392c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7ff fd57 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d110      	bne.n	8003914 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	210c      	movs	r1, #12
 80038fe:	438a      	bics	r2, r1
 8003900:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	4a10      	ldr	r2, [pc, #64]	@ (8003948 <HAL_ADC_PollForConversion+0x124>)
 8003908:	4013      	ands	r3, r2
 800390a:	2201      	movs	r2, #1
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	659a      	str	r2, [r3, #88]	@ 0x58
 8003912:	e00b      	b.n	800392c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	2220      	movs	r2, #32
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	2201      	movs	r2, #1
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	7e1b      	ldrb	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	220c      	movs	r2, #12
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	fffffefe 	.word	0xfffffefe

0800394c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2317      	movs	r3, #23
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2254      	movs	r2, #84	@ 0x54
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x24>
 8003984:	2302      	movs	r3, #2
 8003986:	e1c0      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x3a6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2254      	movs	r2, #84	@ 0x54
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff fd01 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d000      	beq.n	80039a0 <HAL_ADC_ConfigChannel+0x3c>
 800399e:	e1a3      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d100      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x46>
 80039a8:	e143      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d004      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039ba:	4ac1      	ldr	r2, [pc, #772]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x35c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0019      	movs	r1, r3
 80039ca:	0010      	movs	r0, r2
 80039cc:	f7ff fc14 	bl	80031f8 <LL_ADC_REG_SetSequencerChAdd>
 80039d0:	e0c9      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	211f      	movs	r1, #31
 80039dc:	400b      	ands	r3, r1
 80039de:	210f      	movs	r1, #15
 80039e0:	4099      	lsls	r1, r3
 80039e2:	000b      	movs	r3, r1
 80039e4:	43db      	mvns	r3, r3
 80039e6:	4013      	ands	r3, r2
 80039e8:	0019      	movs	r1, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	035b      	lsls	r3, r3, #13
 80039f0:	0b5b      	lsrs	r3, r3, #13
 80039f2:	d105      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x9c>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	0e9b      	lsrs	r3, r3, #26
 80039fa:	221f      	movs	r2, #31
 80039fc:	4013      	ands	r3, r2
 80039fe:	e098      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	d000      	beq.n	8003a0c <HAL_ADC_ConfigChannel+0xa8>
 8003a0a:	e091      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x1cc>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2202      	movs	r2, #2
 8003a12:	4013      	ands	r3, r2
 8003a14:	d000      	beq.n	8003a18 <HAL_ADC_ConfigChannel+0xb4>
 8003a16:	e089      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x1c8>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d000      	beq.n	8003a24 <HAL_ADC_ConfigChannel+0xc0>
 8003a22:	e081      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1c4>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d000      	beq.n	8003a30 <HAL_ADC_ConfigChannel+0xcc>
 8003a2e:	e079      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x1c0>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2210      	movs	r2, #16
 8003a36:	4013      	ands	r3, r2
 8003a38:	d000      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0xd8>
 8003a3a:	e071      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x1bc>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	4013      	ands	r3, r2
 8003a44:	d000      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0xe4>
 8003a46:	e069      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1b8>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2240      	movs	r2, #64	@ 0x40
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d000      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0xf0>
 8003a52:	e061      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1b4>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2280      	movs	r2, #128	@ 0x80
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d000      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0xfc>
 8003a5e:	e059      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x1b0>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2380      	movs	r3, #128	@ 0x80
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d151      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1ac>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d149      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x1a8>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	d141      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x1a4>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d139      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x1a0>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d131      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x19c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d129      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x198>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	01db      	lsls	r3, r3, #7
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d121      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x194>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	4013      	ands	r3, r2
 8003abe:	d119      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x190>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	025b      	lsls	r3, r3, #9
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d111      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x18c>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	029b      	lsls	r3, r3, #10
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d109      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x188>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	02db      	lsls	r3, r3, #11
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d001      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x184>
 8003ae4:	2312      	movs	r3, #18
 8003ae6:	e024      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e022      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003aec:	2311      	movs	r3, #17
 8003aee:	e020      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003af0:	2310      	movs	r3, #16
 8003af2:	e01e      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003af4:	230f      	movs	r3, #15
 8003af6:	e01c      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003af8:	230e      	movs	r3, #14
 8003afa:	e01a      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003afc:	230d      	movs	r3, #13
 8003afe:	e018      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b00:	230c      	movs	r3, #12
 8003b02:	e016      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b04:	230b      	movs	r3, #11
 8003b06:	e014      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b08:	230a      	movs	r3, #10
 8003b0a:	e012      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b0c:	2309      	movs	r3, #9
 8003b0e:	e010      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b10:	2308      	movs	r3, #8
 8003b12:	e00e      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b14:	2307      	movs	r3, #7
 8003b16:	e00c      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b18:	2306      	movs	r3, #6
 8003b1a:	e00a      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b1c:	2305      	movs	r3, #5
 8003b1e:	e008      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b20:	2304      	movs	r3, #4
 8003b22:	e006      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b24:	2303      	movs	r3, #3
 8003b26:	e004      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e002      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1ce>
 8003b30:	2300      	movs	r3, #0
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	6852      	ldr	r2, [r2, #4]
 8003b36:	201f      	movs	r0, #31
 8003b38:	4002      	ands	r2, r0
 8003b3a:	4093      	lsls	r3, r2
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d808      	bhi.n	8003b66 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	001a      	movs	r2, r3
 8003b62:	f7ff fb29 	bl	80031b8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	001a      	movs	r2, r3
 8003b74:	f7ff fb64 	bl	8003240 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	db00      	blt.n	8003b82 <HAL_ADC_ConfigChannel+0x21e>
 8003b80:	e0bc      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b82:	4b50      	ldr	r3, [pc, #320]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fac5 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x364>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d122      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ba0:	d11d      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2280      	movs	r2, #128	@ 0x80
 8003ba6:	0412      	lsls	r2, r2, #16
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	4a46      	ldr	r2, [pc, #280]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003bac:	0019      	movs	r1, r3
 8003bae:	0010      	movs	r0, r2
 8003bb0:	f7ff fa9c 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bb4:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <HAL_ADC_ConfigChannel+0x368>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4945      	ldr	r1, [pc, #276]	@ (8003cd0 <HAL_ADC_ConfigChannel+0x36c>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc faaa 	bl	8000114 <__udivsi3>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	0013      	movs	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bce:	e002      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f9      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bdc:	e08e      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x370>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10e      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	045b      	lsls	r3, r3, #17
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d109      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2280      	movs	r2, #128	@ 0x80
 8003bf6:	0452      	lsls	r2, r2, #17
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	4a32      	ldr	r2, [pc, #200]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	0010      	movs	r0, r2
 8003c00:	f7ff fa74 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
 8003c04:	e07a      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a33      	ldr	r2, [pc, #204]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x374>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d000      	beq.n	8003c12 <HAL_ADC_ConfigChannel+0x2ae>
 8003c10:	e074      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	03db      	lsls	r3, r3, #15
 8003c18:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c1a:	d000      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0x2ba>
 8003c1c:	e06e      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	03d2      	lsls	r2, r2, #15
 8003c24:	4313      	orrs	r3, r2
 8003c26:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003c28:	0019      	movs	r1, r3
 8003c2a:	0010      	movs	r0, r2
 8003c2c:	f7ff fa5e 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
 8003c30:	e064      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x35c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d107      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0019      	movs	r1, r3
 8003c52:	0010      	movs	r0, r2
 8003c54:	f7ff fae1 	bl	800321a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da4d      	bge.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c60:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff fa56 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x364>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4a18      	ldr	r2, [pc, #96]	@ (8003cdc <HAL_ADC_ConfigChannel+0x378>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	4a11      	ldr	r2, [pc, #68]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003c7e:	0019      	movs	r1, r3
 8003c80:	0010      	movs	r0, r2
 8003c82:	f7ff fa33 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
 8003c86:	e039      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a11      	ldr	r2, [pc, #68]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x370>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x37c>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	0010      	movs	r0, r2
 8003c9e:	f7ff fa25 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
 8003ca2:	e02b      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x374>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d126      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x380>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	4a03      	ldr	r2, [pc, #12]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x360>)
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	0010      	movs	r0, r2
 8003cba:	f7ff fa17 	bl	80030ec <LL_ADC_SetCommonPathInternalCh>
 8003cbe:	e01d      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x398>
 8003cc0:	80000004 	.word	0x80000004
 8003cc4:	40012708 	.word	0x40012708
 8003cc8:	b0001000 	.word	0xb0001000
 8003ccc:	20000018 	.word	0x20000018
 8003cd0:	00030d40 	.word	0x00030d40
 8003cd4:	b8004000 	.word	0xb8004000
 8003cd8:	b4002000 	.word	0xb4002000
 8003cdc:	ff7fffff 	.word	0xff7fffff
 8003ce0:	feffffff 	.word	0xfeffffff
 8003ce4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	2220      	movs	r2, #32
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cf4:	2317      	movs	r3, #23
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2254      	movs	r2, #84	@ 0x54
 8003d00:	2100      	movs	r1, #0
 8003d02:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003d04:	2317      	movs	r3, #23
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)

08003d14 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff fb3b 	bl	800339c <LL_ADC_REG_IsConversionOngoing>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d031      	beq.n	8003d8e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff faff 	bl	8003332 <LL_ADC_IsDisableOngoing>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d104      	bne.n	8003d42 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f7ff fb1b 	bl	8003378 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d42:	f7ff f9a5 	bl	8003090 <HAL_GetTick>
 8003d46:	0003      	movs	r3, r0
 8003d48:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d4a:	e01a      	b.n	8003d82 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d4c:	f7ff f9a0 	bl	8003090 <HAL_GetTick>
 8003d50:	0002      	movs	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d913      	bls.n	8003d82 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2204      	movs	r2, #4
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00d      	beq.n	8003d82 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	2201      	movs	r2, #1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e006      	b.n	8003d90 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d1de      	bne.n	8003d4c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff fab1 	bl	8003310 <LL_ADC_IsEnabled>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d000      	beq.n	8003db4 <ADC_Enable+0x1c>
 8003db2:	e069      	b.n	8003e88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4a36      	ldr	r2, [pc, #216]	@ (8003e94 <ADC_Enable+0xfc>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d00d      	beq.n	8003ddc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e056      	b.n	8003e8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fa71 	bl	80032c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003de6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e98 <ADC_Enable+0x100>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7ff f993 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 8003dee:	0002      	movs	r2, r0
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	4013      	ands	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df8:	4b28      	ldr	r3, [pc, #160]	@ (8003e9c <ADC_Enable+0x104>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4928      	ldr	r1, [pc, #160]	@ (8003ea0 <ADC_Enable+0x108>)
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7fc f988 	bl	8000114 <__udivsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003e08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e0a:	e002      	b.n	8003e12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f9      	bne.n	8003e0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7e5b      	ldrb	r3, [r3, #25]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d033      	beq.n	8003e88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e20:	f7ff f936 	bl	8003090 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e28:	e027      	b.n	8003e7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fa6e 	bl	8003310 <LL_ADC_IsEnabled>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d104      	bne.n	8003e42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff fa43 	bl	80032c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e42:	f7ff f925 	bl	8003090 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d914      	bls.n	8003e7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d00d      	beq.n	8003e7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	2210      	movs	r2, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	2201      	movs	r2, #1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e007      	b.n	8003e8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1d0      	bne.n	8003e2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	80000017 	.word	0x80000017
 8003e98:	40012708 	.word	0x40012708
 8003e9c:	20000018 	.word	0x20000018
 8003ea0:	00030d40 	.word	0x00030d40

08003ea4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fa3e 	bl	8003332 <LL_ADC_IsDisableOngoing>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff fa26 	bl	8003310 <LL_ADC_IsEnabled>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d046      	beq.n	8003f56 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d143      	bne.n	8003f56 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2205      	movs	r2, #5
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fa03 	bl	80032ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2203      	movs	r2, #3
 8003eec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eee:	f7ff f8cf 	bl	8003090 <HAL_GetTick>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ef6:	e028      	b.n	8003f4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	2210      	movs	r2, #16
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e021      	b.n	8003f58 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f14:	f7ff f8bc 	bl	8003090 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d913      	bls.n	8003f4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f32:	2210      	movs	r2, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	2201      	movs	r2, #1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e006      	b.n	8003f58 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	d1de      	bne.n	8003f14 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	0002      	movs	r2, r0
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	1dfb      	adds	r3, r7, #7
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f72:	d809      	bhi.n	8003f88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f74:	1dfb      	adds	r3, r7, #7
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	001a      	movs	r2, r3
 8003f7a:	231f      	movs	r3, #31
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	4b04      	ldr	r3, [pc, #16]	@ (8003f90 <__NVIC_EnableIRQ+0x30>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	4091      	lsls	r1, r2
 8003f84:	000a      	movs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f88:	46c0      	nop			@ (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	1dfb      	adds	r3, r7, #7
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fa8:	d828      	bhi.n	8003ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003faa:	4a2f      	ldr	r2, [pc, #188]	@ (8004068 <__NVIC_SetPriority+0xd4>)
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	33c0      	adds	r3, #192	@ 0xc0
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	589b      	ldr	r3, [r3, r2]
 8003fba:	1dfa      	adds	r2, r7, #7
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	00d2      	lsls	r2, r2, #3
 8003fc6:	21ff      	movs	r1, #255	@ 0xff
 8003fc8:	4091      	lsls	r1, r2
 8003fca:	000a      	movs	r2, r1
 8003fcc:	43d2      	mvns	r2, r2
 8003fce:	401a      	ands	r2, r3
 8003fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	22ff      	movs	r2, #255	@ 0xff
 8003fd8:	401a      	ands	r2, r3
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	4003      	ands	r3, r0
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe8:	481f      	ldr	r0, [pc, #124]	@ (8004068 <__NVIC_SetPriority+0xd4>)
 8003fea:	1dfb      	adds	r3, r7, #7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	089b      	lsrs	r3, r3, #2
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	33c0      	adds	r3, #192	@ 0xc0
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ffa:	e031      	b.n	8004060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <__NVIC_SetPriority+0xd8>)
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	0019      	movs	r1, r3
 8004004:	230f      	movs	r3, #15
 8004006:	400b      	ands	r3, r1
 8004008:	3b08      	subs	r3, #8
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	3306      	adds	r3, #6
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	3304      	adds	r3, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1dfa      	adds	r2, r7, #7
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	0011      	movs	r1, r2
 800401c:	2203      	movs	r2, #3
 800401e:	400a      	ands	r2, r1
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	21ff      	movs	r1, #255	@ 0xff
 8004024:	4091      	lsls	r1, r2
 8004026:	000a      	movs	r2, r1
 8004028:	43d2      	mvns	r2, r2
 800402a:	401a      	ands	r2, r3
 800402c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	22ff      	movs	r2, #255	@ 0xff
 8004034:	401a      	ands	r2, r3
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	0018      	movs	r0, r3
 800403c:	2303      	movs	r3, #3
 800403e:	4003      	ands	r3, r0
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004044:	4809      	ldr	r0, [pc, #36]	@ (800406c <__NVIC_SetPriority+0xd8>)
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	001c      	movs	r4, r3
 800404c:	230f      	movs	r3, #15
 800404e:	4023      	ands	r3, r4
 8004050:	3b08      	subs	r3, #8
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	430a      	orrs	r2, r1
 8004056:	3306      	adds	r3, #6
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	18c3      	adds	r3, r0, r3
 800405c:	3304      	adds	r3, #4
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	46c0      	nop			@ (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b003      	add	sp, #12
 8004066:	bd90      	pop	{r4, r7, pc}
 8004068:	e000e100 	.word	0xe000e100
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	045b      	lsls	r3, r3, #17
 8004080:	429a      	cmp	r2, r3
 8004082:	d301      	bcc.n	8004088 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004084:	2301      	movs	r3, #1
 8004086:	e010      	b.n	80040aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004088:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <SysTick_Config+0x44>)
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	3a01      	subs	r2, #1
 800408e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004090:	2301      	movs	r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	2103      	movs	r1, #3
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff ff7c 	bl	8003f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <SysTick_Config+0x44>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <SysTick_Config+0x44>)
 80040a4:	2207      	movs	r2, #7
 80040a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b002      	add	sp, #8
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	e000e010 	.word	0xe000e010

080040b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	210f      	movs	r1, #15
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	1c02      	adds	r2, r0, #0
 80040c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff ff5d 	bl	8003f94 <__NVIC_SetPriority>
}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	0002      	movs	r2, r0
 80040ea:	1dfb      	adds	r3, r7, #7
 80040ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ee:	1dfb      	adds	r3, r7, #7
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff ff33 	bl	8003f60 <__NVIC_EnableIRQ>
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff ffaf 	bl	8004070 <SysTick_Config>
 8004112:	0003      	movs	r3, r0
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e056      	b.n	80041dc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	7f5b      	ldrb	r3, [r3, #29]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f7fe fdc5 	bl	8002cd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	791b      	ldrb	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10c      	bne.n	800416e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a22      	ldr	r2, [pc, #136]	@ (80041e4 <HAL_CRC_Init+0xc8>)
 800415a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2118      	movs	r1, #24
 8004168:	438a      	bics	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	e00b      	b.n	8004186 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f835 	bl	80041e8 <HAL_CRCEx_Polynomial_Set>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d001      	beq.n	8004186 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02a      	b.n	80041dc <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	795b      	ldrb	r3, [r3, #5]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	4252      	negs	r2, r2
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	e004      	b.n	80041a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6912      	ldr	r2, [r2, #16]
 80041a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2260      	movs	r2, #96	@ 0x60
 80041ac:	4393      	bics	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	4393      	bics	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	04c11db7 	.word	0x04c11db7

080041e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2117      	movs	r1, #23
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041fc:	231f      	movs	r3, #31
 80041fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2201      	movs	r2, #1
 8004204:	4013      	ands	r3, r2
 8004206:	d103      	bne.n	8004210 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8004208:	187b      	adds	r3, r7, r1
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e045      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	613a      	str	r2, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_CRCEx_Polynomial_Set+0x46>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	221f      	movs	r2, #31
 8004220:	4013      	ands	r3, r2
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	40da      	lsrs	r2, r3
 8004226:	0013      	movs	r3, r2
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d0f1      	beq.n	8004212 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b18      	cmp	r3, #24
 8004232:	d00f      	beq.n	8004254 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b18      	cmp	r3, #24
 8004238:	d824      	bhi.n	8004284 <HAL_CRCEx_Polynomial_Set+0x9c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d011      	beq.n	8004264 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d81e      	bhi.n	8004284 <HAL_CRCEx_Polynomial_Set+0x9c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_CRCEx_Polynomial_Set+0xa6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d010      	beq.n	8004274 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004252:	e017      	b.n	8004284 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d91b      	bls.n	8004292 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 800425a:	2317      	movs	r3, #23
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004262:	e016      	b.n	8004292 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b07      	cmp	r3, #7
 8004268:	d915      	bls.n	8004296 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 800426a:	2317      	movs	r3, #23
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004272:	e010      	b.n	8004296 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d90f      	bls.n	800429a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 800427a:	2317      	movs	r3, #23
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004282:	e00a      	b.n	800429a <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004284:	2317      	movs	r3, #23
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
        break;
 800428c:	e006      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	e004      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	e002      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	e000      	b.n	800429c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800429a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800429c:	2317      	movs	r3, #23
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10e      	bne.n	80042c4 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2218      	movs	r2, #24
 80042b6:	4393      	bics	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80042c4:	2317      	movs	r3, #23
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	781b      	ldrb	r3, [r3, #0]
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b006      	add	sp, #24
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e050      	b.n	8004388 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2225      	movs	r2, #37	@ 0x25
 80042ea:	5c9b      	ldrb	r3, [r3, r2]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d008      	beq.n	8004304 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	2100      	movs	r1, #0
 80042fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e041      	b.n	8004388 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	210e      	movs	r1, #14
 8004310:	438a      	bics	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	491c      	ldr	r1, [pc, #112]	@ (8004390 <HAL_DMA_Abort+0xbc>)
 8004320:	400a      	ands	r2, r1
 8004322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	438a      	bics	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004334:	4b17      	ldr	r3, [pc, #92]	@ (8004394 <HAL_DMA_Abort+0xc0>)
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	221c      	movs	r2, #28
 800433e:	4013      	ands	r3, r2
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <HAL_DMA_Abort+0xc0>)
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004352:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	490a      	ldr	r1, [pc, #40]	@ (8004390 <HAL_DMA_Abort+0xbc>)
 8004368:	400a      	ands	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004374:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2225      	movs	r2, #37	@ 0x25
 800437a:	2101      	movs	r1, #1
 800437c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2224      	movs	r2, #36	@ 0x24
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}
 8004390:	fffffeff 	.word	0xfffffeff
 8004394:	40020000 	.word	0x40020000

08004398 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	210f      	movs	r1, #15
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2225      	movs	r2, #37	@ 0x25
 80043ac:	5c9b      	ldrb	r3, [r3, r2]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d006      	beq.n	80043c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e049      	b.n	8004456 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	210e      	movs	r1, #14
 80043ce:	438a      	bics	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	438a      	bics	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	491d      	ldr	r1, [pc, #116]	@ (8004464 <HAL_DMA_Abort_IT+0xcc>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_DMA_Abort_IT+0xd0>)
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	221c      	movs	r2, #28
 80043fc:	4013      	ands	r3, r2
 80043fe:	2201      	movs	r2, #1
 8004400:	409a      	lsls	r2, r3
 8004402:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <HAL_DMA_Abort_IT+0xd0>)
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004410:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	490f      	ldr	r1, [pc, #60]	@ (8004464 <HAL_DMA_Abort_IT+0xcc>)
 8004426:	400a      	ands	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004432:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2225      	movs	r2, #37	@ 0x25
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	@ 0x24
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	0010      	movs	r0, r2
 8004454:	4798      	blx	r3
    }
  }
  return status;
 8004456:	230f      	movs	r3, #15
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	781b      	ldrb	r3, [r3, #0]
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	b004      	add	sp, #16
 8004462:	bd80      	pop	{r7, pc}
 8004464:	fffffeff 	.word	0xfffffeff
 8004468:	40020000 	.word	0x40020000

0800446c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800447a:	e147      	b.n	800470c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2101      	movs	r1, #1
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4091      	lsls	r1, r2
 8004486:	000a      	movs	r2, r1
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d100      	bne.n	8004494 <HAL_GPIO_Init+0x28>
 8004492:	e138      	b.n	8004706 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	2b01      	cmp	r3, #1
 800449e:	d005      	beq.n	80044ac <HAL_GPIO_Init+0x40>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d130      	bne.n	800450e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	409a      	lsls	r2, r3
 80044ba:	0013      	movs	r3, r2
 80044bc:	43da      	mvns	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	0013      	movs	r3, r2
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e2:	2201      	movs	r2, #1
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	43da      	mvns	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	2201      	movs	r2, #1
 80044fa:	401a      	ands	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2203      	movs	r2, #3
 8004514:	4013      	ands	r3, r2
 8004516:	2b03      	cmp	r3, #3
 8004518:	d017      	beq.n	800454a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	409a      	lsls	r2, r3
 8004528:	0013      	movs	r3, r2
 800452a:	43da      	mvns	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	0013      	movs	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2203      	movs	r2, #3
 8004550:	4013      	ands	r3, r2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d123      	bne.n	800459e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	08da      	lsrs	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3208      	adds	r2, #8
 800455e:	0092      	lsls	r2, r2, #2
 8004560:	58d3      	ldr	r3, [r2, r3]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2207      	movs	r2, #7
 8004568:	4013      	ands	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	220f      	movs	r2, #15
 800456e:	409a      	lsls	r2, r3
 8004570:	0013      	movs	r3, r2
 8004572:	43da      	mvns	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2107      	movs	r1, #7
 8004582:	400b      	ands	r3, r1
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	409a      	lsls	r2, r3
 8004588:	0013      	movs	r3, r2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	08da      	lsrs	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3208      	adds	r2, #8
 8004598:	0092      	lsls	r2, r2, #2
 800459a:	6939      	ldr	r1, [r7, #16]
 800459c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2203      	movs	r2, #3
 80045aa:	409a      	lsls	r2, r3
 80045ac:	0013      	movs	r3, r2
 80045ae:	43da      	mvns	r2, r3
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2203      	movs	r2, #3
 80045bc:	401a      	ands	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	409a      	lsls	r2, r3
 80045c4:	0013      	movs	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	23c0      	movs	r3, #192	@ 0xc0
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	4013      	ands	r3, r2
 80045dc:	d100      	bne.n	80045e0 <HAL_GPIO_Init+0x174>
 80045de:	e092      	b.n	8004706 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045e0:	4a50      	ldr	r2, [pc, #320]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	3318      	adds	r3, #24
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	589b      	ldr	r3, [r3, r2]
 80045ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2203      	movs	r2, #3
 80045f2:	4013      	ands	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	220f      	movs	r2, #15
 80045f8:	409a      	lsls	r2, r3
 80045fa:	0013      	movs	r3, r2
 80045fc:	43da      	mvns	r2, r3
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	23a0      	movs	r3, #160	@ 0xa0
 8004608:	05db      	lsls	r3, r3, #23
 800460a:	429a      	cmp	r2, r3
 800460c:	d013      	beq.n	8004636 <HAL_GPIO_Init+0x1ca>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a45      	ldr	r2, [pc, #276]	@ (8004728 <HAL_GPIO_Init+0x2bc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00d      	beq.n	8004632 <HAL_GPIO_Init+0x1c6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a44      	ldr	r2, [pc, #272]	@ (800472c <HAL_GPIO_Init+0x2c0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d007      	beq.n	800462e <HAL_GPIO_Init+0x1c2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a43      	ldr	r2, [pc, #268]	@ (8004730 <HAL_GPIO_Init+0x2c4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d101      	bne.n	800462a <HAL_GPIO_Init+0x1be>
 8004626:	2303      	movs	r3, #3
 8004628:	e006      	b.n	8004638 <HAL_GPIO_Init+0x1cc>
 800462a:	2305      	movs	r3, #5
 800462c:	e004      	b.n	8004638 <HAL_GPIO_Init+0x1cc>
 800462e:	2302      	movs	r3, #2
 8004630:	e002      	b.n	8004638 <HAL_GPIO_Init+0x1cc>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_GPIO_Init+0x1cc>
 8004636:	2300      	movs	r3, #0
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	2103      	movs	r1, #3
 800463c:	400a      	ands	r2, r1
 800463e:	00d2      	lsls	r2, r2, #3
 8004640:	4093      	lsls	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004648:	4936      	ldr	r1, [pc, #216]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3318      	adds	r3, #24
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004656:	4b33      	ldr	r3, [pc, #204]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43da      	mvns	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	035b      	lsls	r3, r3, #13
 800466e:	4013      	ands	r3, r2
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800467a:	4b2a      	ldr	r3, [pc, #168]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004680:	4b28      	ldr	r3, [pc, #160]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	43da      	mvns	r2, r3
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	2380      	movs	r3, #128	@ 0x80
 8004696:	039b      	lsls	r3, r3, #14
 8004698:	4013      	ands	r3, r2
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 80046ac:	2384      	movs	r3, #132	@ 0x84
 80046ae:	58d3      	ldr	r3, [r2, r3]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43da      	mvns	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	029b      	lsls	r3, r3, #10
 80046c4:	4013      	ands	r3, r2
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d0:	4914      	ldr	r1, [pc, #80]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 80046d2:	2284      	movs	r2, #132	@ 0x84
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80046d8:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	58d3      	ldr	r3, [r2, r3]
 80046de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	025b      	lsls	r3, r3, #9
 80046f2:	4013      	ands	r3, r2
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046fe:	4909      	ldr	r1, [pc, #36]	@ (8004724 <HAL_GPIO_Init+0x2b8>)
 8004700:	2280      	movs	r2, #128	@ 0x80
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	40da      	lsrs	r2, r3
 8004714:	1e13      	subs	r3, r2, #0
 8004716:	d000      	beq.n	800471a <HAL_GPIO_Init+0x2ae>
 8004718:	e6b0      	b.n	800447c <HAL_GPIO_Init+0x10>
  }
}
 800471a:	46c0      	nop			@ (mov r8, r8)
 800471c:	46c0      	nop			@ (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b006      	add	sp, #24
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021800 	.word	0x40021800
 8004728:	50000400 	.word	0x50000400
 800472c:	50000800 	.word	0x50000800
 8004730:	50000c00 	.word	0x50000c00

08004734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	0008      	movs	r0, r1
 800473e:	0011      	movs	r1, r2
 8004740:	1cbb      	adds	r3, r7, #2
 8004742:	1c02      	adds	r2, r0, #0
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	1c7b      	adds	r3, r7, #1
 8004748:	1c0a      	adds	r2, r1, #0
 800474a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800474c:	1c7b      	adds	r3, r7, #1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004754:	1cbb      	adds	r3, r7, #2
 8004756:	881a      	ldrh	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800475c:	e003      	b.n	8004766 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800475e:	1cbb      	adds	r3, r7, #2
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800477e:	4013      	ands	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	4b17      	ldr	r3, [pc, #92]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d11f      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004794:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	0013      	movs	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	189b      	adds	r3, r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4912      	ldr	r1, [pc, #72]	@ (80047ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80047a2:	0018      	movs	r0, r3
 80047a4:	f7fb fcb6 	bl	8000114 <__udivsi3>
 80047a8:	0003      	movs	r3, r0
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ae:	e008      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e001      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e009      	b.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	401a      	ands	r2, r3
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d0ed      	beq.n	80047b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b004      	add	sp, #16
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	40007000 	.word	0x40007000
 80047e4:	fffff9ff 	.word	0xfffff9ff
 80047e8:	20000018 	.word	0x20000018
 80047ec:	000f4240 	.word	0x000f4240

080047f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80047f4:	4b03      	ldr	r3, [pc, #12]	@ (8004804 <LL_RCC_GetAPB1Prescaler+0x14>)
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	23e0      	movs	r3, #224	@ 0xe0
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4013      	ands	r3, r2
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e2f3      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	4013      	ands	r3, r2
 8004822:	d100      	bne.n	8004826 <HAL_RCC_OscConfig+0x1e>
 8004824:	e07c      	b.n	8004920 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004826:	4bc3      	ldr	r3, [pc, #780]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2238      	movs	r2, #56	@ 0x38
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004830:	4bc0      	ldr	r3, [pc, #768]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2203      	movs	r2, #3
 8004836:	4013      	ands	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d102      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d002      	beq.n	800484c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4bb9      	ldr	r3, [pc, #740]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d062      	beq.n	800491e <HAL_RCC_OscConfig+0x116>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d15e      	bne.n	800491e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e2ce      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_OscConfig+0x78>
 8004870:	4bb0      	ldr	r3, [pc, #704]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4baf      	ldr	r3, [pc, #700]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004876:	2180      	movs	r1, #128	@ 0x80
 8004878:	0249      	lsls	r1, r1, #9
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e020      	b.n	80048c2 <HAL_RCC_OscConfig+0xba>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	23a0      	movs	r3, #160	@ 0xa0
 8004886:	02db      	lsls	r3, r3, #11
 8004888:	429a      	cmp	r2, r3
 800488a:	d10e      	bne.n	80048aa <HAL_RCC_OscConfig+0xa2>
 800488c:	4ba9      	ldr	r3, [pc, #676]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4ba8      	ldr	r3, [pc, #672]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004892:	2180      	movs	r1, #128	@ 0x80
 8004894:	02c9      	lsls	r1, r1, #11
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4ba5      	ldr	r3, [pc, #660]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048a0:	2180      	movs	r1, #128	@ 0x80
 80048a2:	0249      	lsls	r1, r1, #9
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0xba>
 80048aa:	4ba2      	ldr	r3, [pc, #648]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4ba1      	ldr	r3, [pc, #644]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048b0:	49a1      	ldr	r1, [pc, #644]	@ (8004b38 <HAL_RCC_OscConfig+0x330>)
 80048b2:	400a      	ands	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4b9f      	ldr	r3, [pc, #636]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b9e      	ldr	r3, [pc, #632]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048bc:	499f      	ldr	r1, [pc, #636]	@ (8004b3c <HAL_RCC_OscConfig+0x334>)
 80048be:	400a      	ands	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fe fbe1 	bl	8003090 <HAL_GetTick>
 80048ce:	0003      	movs	r3, r0
 80048d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d4:	f7fe fbdc 	bl	8003090 <HAL_GetTick>
 80048d8:	0002      	movs	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b64      	cmp	r3, #100	@ 0x64
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e28d      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e6:	4b93      	ldr	r3, [pc, #588]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	4013      	ands	r3, r2
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0xcc>
 80048f2:	e015      	b.n	8004920 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fe fbcc 	bl	8003090 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fe:	f7fe fbc7 	bl	8003090 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	@ 0x64
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e278      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004910:	4b88      	ldr	r3, [pc, #544]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	4013      	ands	r3, r2
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0xf6>
 800491c:	e000      	b.n	8004920 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2202      	movs	r2, #2
 8004926:	4013      	ands	r3, r2
 8004928:	d100      	bne.n	800492c <HAL_RCC_OscConfig+0x124>
 800492a:	e099      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492c:	4b81      	ldr	r3, [pc, #516]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2238      	movs	r2, #56	@ 0x38
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004936:	4b7f      	ldr	r3, [pc, #508]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2203      	movs	r2, #3
 800493c:	4013      	ands	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d102      	bne.n	800494c <HAL_RCC_OscConfig+0x144>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d002      	beq.n	8004952 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d135      	bne.n	80049be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004952:	4b78      	ldr	r3, [pc, #480]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4013      	ands	r3, r2
 800495c:	d005      	beq.n	800496a <HAL_RCC_OscConfig+0x162>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e24b      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496a:	4b72      	ldr	r3, [pc, #456]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4a74      	ldr	r2, [pc, #464]	@ (8004b40 <HAL_RCC_OscConfig+0x338>)
 8004970:	4013      	ands	r3, r2
 8004972:	0019      	movs	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	021a      	lsls	r2, r3, #8
 800497a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800497c:	430a      	orrs	r2, r1
 800497e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d112      	bne.n	80049ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004986:	4b6b      	ldr	r3, [pc, #428]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b44 <HAL_RCC_OscConfig+0x33c>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	4b67      	ldr	r3, [pc, #412]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800499a:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0adb      	lsrs	r3, r3, #11
 80049a0:	2207      	movs	r2, #7
 80049a2:	4013      	ands	r3, r2
 80049a4:	4a68      	ldr	r2, [pc, #416]	@ (8004b48 <HAL_RCC_OscConfig+0x340>)
 80049a6:	40da      	lsrs	r2, r3
 80049a8:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCC_OscConfig+0x344>)
 80049aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049ac:	4b68      	ldr	r3, [pc, #416]	@ (8004b50 <HAL_RCC_OscConfig+0x348>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fe fb11 	bl	8002fd8 <HAL_InitTick>
 80049b6:	1e03      	subs	r3, r0, #0
 80049b8:	d051      	beq.n	8004a5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e221      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d030      	beq.n	8004a28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004b44 <HAL_RCC_OscConfig+0x33c>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	4b57      	ldr	r3, [pc, #348]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b55      	ldr	r3, [pc, #340]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0049      	lsls	r1, r1, #1
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe fb52 	bl	8003090 <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f2:	f7fe fb4d 	bl	8003090 <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e1fe      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a04:	4b4b      	ldr	r3, [pc, #300]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a10:	4b48      	ldr	r3, [pc, #288]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a4a      	ldr	r2, [pc, #296]	@ (8004b40 <HAL_RCC_OscConfig+0x338>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	4b44      	ldr	r3, [pc, #272]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e01b      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a28:	4b42      	ldr	r3, [pc, #264]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a2e:	4949      	ldr	r1, [pc, #292]	@ (8004b54 <HAL_RCC_OscConfig+0x34c>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fe fb2c 	bl	8003090 <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fe fb27 	bl	8003090 <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1d8      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a50:	4b38      	ldr	r3, [pc, #224]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x236>
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	4013      	ands	r3, r2
 8004a68:	d047      	beq.n	8004afa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a6a:	4b32      	ldr	r3, [pc, #200]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2238      	movs	r2, #56	@ 0x38
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b18      	cmp	r3, #24
 8004a74:	d10a      	bne.n	8004a8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a76:	4b2f      	ldr	r3, [pc, #188]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d03c      	beq.n	8004afa <HAL_RCC_OscConfig+0x2f2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d138      	bne.n	8004afa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e1ba      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d019      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a94:	4b27      	ldr	r3, [pc, #156]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a98:	4b26      	ldr	r3, [pc, #152]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fe faf6 	bl	8003090 <HAL_GetTick>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fe faf1 	bl	8003090 <HAL_GetTick>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e1a2      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004abc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f1      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2a2>
 8004ac6:	e018      	b.n	8004afa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004aca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	2101      	movs	r1, #1
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe fadc 	bl	8003090 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fe fad7 	bl	8003090 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e188      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af0:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af4:	2202      	movs	r2, #2
 8004af6:	4013      	ands	r3, r2
 8004af8:	d1f1      	bne.n	8004ade <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2204      	movs	r2, #4
 8004b00:	4013      	ands	r3, r2
 8004b02:	d100      	bne.n	8004b06 <HAL_RCC_OscConfig+0x2fe>
 8004b04:	e0c6      	b.n	8004c94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	231f      	movs	r3, #31
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2238      	movs	r2, #56	@ 0x38
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d11e      	bne.n	8004b58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b1a:	4b06      	ldr	r3, [pc, #24]	@ (8004b34 <HAL_RCC_OscConfig+0x32c>)
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	2202      	movs	r2, #2
 8004b20:	4013      	ands	r3, r2
 8004b22:	d100      	bne.n	8004b26 <HAL_RCC_OscConfig+0x31e>
 8004b24:	e0b6      	b.n	8004c94 <HAL_RCC_OscConfig+0x48c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d000      	beq.n	8004b30 <HAL_RCC_OscConfig+0x328>
 8004b2e:	e0b1      	b.n	8004c94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e166      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
 8004b34:	40021000 	.word	0x40021000
 8004b38:	fffeffff 	.word	0xfffeffff
 8004b3c:	fffbffff 	.word	0xfffbffff
 8004b40:	ffff80ff 	.word	0xffff80ff
 8004b44:	ffffc7ff 	.word	0xffffc7ff
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	20000018 	.word	0x20000018
 8004b50:	2000001c 	.word	0x2000001c
 8004b54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b58:	4bac      	ldr	r3, [pc, #688]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	055b      	lsls	r3, r3, #21
 8004b60:	4013      	ands	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_OscConfig+0x360>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x362>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d011      	beq.n	8004b92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	4ba7      	ldr	r3, [pc, #668]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b72:	4ba6      	ldr	r3, [pc, #664]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004b74:	2180      	movs	r1, #128	@ 0x80
 8004b76:	0549      	lsls	r1, r1, #21
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b7c:	4ba3      	ldr	r3, [pc, #652]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	055b      	lsls	r3, r3, #21
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b8a:	231f      	movs	r3, #31
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b92:	4b9f      	ldr	r3, [pc, #636]	@ (8004e10 <HAL_RCC_OscConfig+0x608>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d11a      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e10 <HAL_RCC_OscConfig+0x608>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8004e10 <HAL_RCC_OscConfig+0x608>)
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	0049      	lsls	r1, r1, #1
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004bac:	f7fe fa70 	bl	8003090 <HAL_GetTick>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb6:	f7fe fa6b 	bl	8003090 <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e11c      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc8:	4b91      	ldr	r3, [pc, #580]	@ (8004e10 <HAL_RCC_OscConfig+0x608>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x3e2>
 8004bdc:	4b8b      	ldr	r3, [pc, #556]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004be0:	4b8a      	ldr	r3, [pc, #552]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	430a      	orrs	r2, r1
 8004be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004be8:	e01c      	b.n	8004c24 <HAL_RCC_OscConfig+0x41c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x404>
 8004bf2:	4b86      	ldr	r3, [pc, #536]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004bf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bf6:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bfe:	4b83      	ldr	r3, [pc, #524]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c02:	4b82      	ldr	r3, [pc, #520]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0x41c>
 8004c0c:	4b7f      	ldr	r3, [pc, #508]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c10:	4b7e      	ldr	r3, [pc, #504]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c12:	2101      	movs	r1, #1
 8004c14:	438a      	bics	r2, r1
 8004c16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c18:	4b7c      	ldr	r3, [pc, #496]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c1c:	4b7b      	ldr	r3, [pc, #492]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c1e:	2104      	movs	r1, #4
 8004c20:	438a      	bics	r2, r1
 8004c22:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d014      	beq.n	8004c56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fa30 	bl	8003090 <HAL_GetTick>
 8004c30:	0003      	movs	r3, r0
 8004c32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c34:	e009      	b.n	8004c4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fe fa2b 	bl	8003090 <HAL_GetTick>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	4a74      	ldr	r2, [pc, #464]	@ (8004e14 <HAL_RCC_OscConfig+0x60c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0db      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4a:	4b70      	ldr	r3, [pc, #448]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	2202      	movs	r2, #2
 8004c50:	4013      	ands	r3, r2
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x42e>
 8004c54:	e013      	b.n	8004c7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fe fa1b 	bl	8003090 <HAL_GetTick>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5e:	e009      	b.n	8004c74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fe fa16 	bl	8003090 <HAL_GetTick>
 8004c64:	0002      	movs	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e14 <HAL_RCC_OscConfig+0x60c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e0c6      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c74:	4b65      	ldr	r3, [pc, #404]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	2202      	movs	r2, #2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c7e:	231f      	movs	r3, #31
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d105      	bne.n	8004c94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c88:	4b60      	ldr	r3, [pc, #384]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004c8e:	4962      	ldr	r1, [pc, #392]	@ (8004e18 <HAL_RCC_OscConfig+0x610>)
 8004c90:	400a      	ands	r2, r1
 8004c92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <HAL_RCC_OscConfig+0x496>
 8004c9c:	e0b0      	b.n	8004e00 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2238      	movs	r2, #56	@ 0x38
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d100      	bne.n	8004cac <HAL_RCC_OscConfig+0x4a4>
 8004caa:	e078      	b.n	8004d9e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d153      	bne.n	8004d5c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b55      	ldr	r3, [pc, #340]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b54      	ldr	r3, [pc, #336]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004cba:	4958      	ldr	r1, [pc, #352]	@ (8004e1c <HAL_RCC_OscConfig+0x614>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fe f9e6 	bl	8003090 <HAL_GetTick>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fe f9e1 	bl	8003090 <HAL_GetTick>
 8004cce:	0002      	movs	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e092      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	049b      	lsls	r3, r3, #18
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b48      	ldr	r3, [pc, #288]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a4c      	ldr	r2, [pc, #304]	@ (8004e20 <HAL_RCC_OscConfig+0x618>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d16:	4b3d      	ldr	r3, [pc, #244]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	0449      	lsls	r1, r1, #17
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d24:	4b39      	ldr	r3, [pc, #228]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d2a:	2180      	movs	r1, #128	@ 0x80
 8004d2c:	0549      	lsls	r1, r1, #21
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe f9ad 	bl	8003090 <HAL_GetTick>
 8004d36:	0003      	movs	r3, r0
 8004d38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fe f9a8 	bl	8003090 <HAL_GetTick>
 8004d40:	0002      	movs	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e059      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	049b      	lsls	r3, r3, #18
 8004d56:	4013      	ands	r3, r2
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x534>
 8004d5a:	e051      	b.n	8004e00 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d62:	492e      	ldr	r1, [pc, #184]	@ (8004e1c <HAL_RCC_OscConfig+0x614>)
 8004d64:	400a      	ands	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe f992 	bl	8003090 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d72:	f7fe f98d 	bl	8003090 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e03e      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d84:	4b21      	ldr	r3, [pc, #132]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	049b      	lsls	r3, r3, #18
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004d90:	4b1e      	ldr	r3, [pc, #120]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004d96:	4923      	ldr	r1, [pc, #140]	@ (8004e24 <HAL_RCC_OscConfig+0x61c>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e030      	b.n	8004e00 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e02b      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004daa:	4b18      	ldr	r3, [pc, #96]	@ (8004e0c <HAL_RCC_OscConfig+0x604>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2203      	movs	r2, #3
 8004db4:	401a      	ands	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11e      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2270      	movs	r2, #112	@ 0x70
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d117      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	23fe      	movs	r3, #254	@ 0xfe
 8004dd0:	01db      	lsls	r3, r3, #7
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10e      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	23f8      	movs	r3, #248	@ 0xf8
 8004de2:	039b      	lsls	r3, r3, #14
 8004de4:	401a      	ands	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	0f5b      	lsrs	r3, r3, #29
 8004df2:	075a      	lsls	r2, r3, #29
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b008      	add	sp, #32
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40007000 	.word	0x40007000
 8004e14:	00001388 	.word	0x00001388
 8004e18:	efffffff 	.word	0xefffffff
 8004e1c:	feffffff 	.word	0xfeffffff
 8004e20:	1fc1808c 	.word	0x1fc1808c
 8004e24:	effefffc 	.word	0xeffefffc

08004e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0e9      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b76      	ldr	r3, [pc, #472]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2207      	movs	r2, #7
 8004e42:	4013      	ands	r3, r2
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d91e      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b73      	ldr	r3, [pc, #460]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2207      	movs	r2, #7
 8004e50:	4393      	bics	r3, r2
 8004e52:	0019      	movs	r1, r3
 8004e54:	4b70      	ldr	r3, [pc, #448]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e5c:	f7fe f918 	bl	8003090 <HAL_GetTick>
 8004e60:	0003      	movs	r3, r0
 8004e62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e64:	e009      	b.n	8004e7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7fe f913 	bl	8003090 <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	4a6a      	ldr	r2, [pc, #424]	@ (800501c <HAL_RCC_ClockConfig+0x1f4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0ca      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e7a:	4b67      	ldr	r3, [pc, #412]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2207      	movs	r2, #7
 8004e80:	4013      	ands	r3, r2
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d1ee      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d015      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2204      	movs	r2, #4
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d006      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e9c:	4b60      	ldr	r3, [pc, #384]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004ea2:	21e0      	movs	r1, #224	@ 0xe0
 8004ea4:	01c9      	lsls	r1, r1, #7
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4a5d      	ldr	r2, [pc, #372]	@ (8005024 <HAL_RCC_ClockConfig+0x1fc>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d057      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed0:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	@ 0x80
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d12b      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	049b      	lsls	r3, r3, #18
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d11f      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e08b      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f00:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d113      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e07f      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f18:	4b41      	ldr	r3, [pc, #260]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d108      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e074      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f26:	4b3e      	ldr	r3, [pc, #248]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e06d      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f34:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2207      	movs	r2, #7
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fe f8a2 	bl	8003090 <HAL_GetTick>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f50:	e009      	b.n	8004f66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f52:	f7fe f89d 	bl	8003090 <HAL_GetTick>
 8004f56:	0002      	movs	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800501c <HAL_RCC_ClockConfig+0x1f4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e054      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	4b2e      	ldr	r3, [pc, #184]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2238      	movs	r2, #56	@ 0x38
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1ec      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f78:	4b27      	ldr	r3, [pc, #156]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2207      	movs	r2, #7
 8004f7e:	4013      	ands	r3, r2
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d21e      	bcs.n	8004fc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2207      	movs	r2, #7
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	0019      	movs	r1, r3
 8004f90:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f98:	f7fe f87a 	bl	8003090 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fa0:	e009      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fe f875 	bl	8003090 <HAL_GetTick>
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_RCC_ClockConfig+0x1f4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e02c      	b.n	8005010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fb6:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2207      	movs	r2, #7
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1ee      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fce:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <HAL_RCC_ClockConfig+0x200>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004fe2:	f000 f829 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fe6:	0001      	movs	r1, r0
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <HAL_RCC_ClockConfig+0x1f8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	220f      	movs	r2, #15
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <HAL_RCC_ClockConfig+0x204>)
 8004ff4:	0092      	lsls	r2, r2, #2
 8004ff6:	58d3      	ldr	r3, [r2, r3]
 8004ff8:	221f      	movs	r2, #31
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	40da      	lsrs	r2, r3
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <HAL_RCC_ClockConfig+0x208>)
 8005002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCC_ClockConfig+0x20c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0018      	movs	r0, r3
 800500a:	f7fd ffe5 	bl	8002fd8 <HAL_InitTick>
 800500e:	0003      	movs	r3, r0
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b004      	add	sp, #16
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40022000 	.word	0x40022000
 800501c:	00001388 	.word	0x00001388
 8005020:	40021000 	.word	0x40021000
 8005024:	fffff0ff 	.word	0xfffff0ff
 8005028:	ffff8fff 	.word	0xffff8fff
 800502c:	080074b4 	.word	0x080074b4
 8005030:	20000018 	.word	0x20000018
 8005034:	2000001c 	.word	0x2000001c

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800503e:	4b3c      	ldr	r3, [pc, #240]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2238      	movs	r2, #56	@ 0x38
 8005044:	4013      	ands	r3, r2
 8005046:	d10f      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005048:	4b39      	ldr	r3, [pc, #228]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	0adb      	lsrs	r3, r3, #11
 800504e:	2207      	movs	r2, #7
 8005050:	4013      	ands	r3, r2
 8005052:	2201      	movs	r2, #1
 8005054:	409a      	lsls	r2, r3
 8005056:	0013      	movs	r3, r2
 8005058:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	4835      	ldr	r0, [pc, #212]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xfc>)
 800505e:	f7fb f859 	bl	8000114 <__udivsi3>
 8005062:	0003      	movs	r3, r0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e05d      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005068:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2238      	movs	r2, #56	@ 0x38
 800506e:	4013      	ands	r3, r2
 8005070:	2b08      	cmp	r3, #8
 8005072:	d102      	bne.n	800507a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005074:	4b30      	ldr	r3, [pc, #192]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x100>)
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e054      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507a:	4b2d      	ldr	r3, [pc, #180]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2238      	movs	r2, #56	@ 0x38
 8005080:	4013      	ands	r3, r2
 8005082:	2b10      	cmp	r3, #16
 8005084:	d138      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005086:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2203      	movs	r2, #3
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005090:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	2207      	movs	r2, #7
 8005098:	4013      	ands	r3, r2
 800509a:	3301      	adds	r3, #1
 800509c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4824      	ldr	r0, [pc, #144]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x100>)
 80050a8:	f7fb f834 	bl	8000114 <__udivsi3>
 80050ac:	0003      	movs	r3, r0
 80050ae:	0019      	movs	r1, r3
 80050b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	227f      	movs	r2, #127	@ 0x7f
 80050b8:	4013      	ands	r3, r2
 80050ba:	434b      	muls	r3, r1
 80050bc:	617b      	str	r3, [r7, #20]
        break;
 80050be:	e00d      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	481c      	ldr	r0, [pc, #112]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050c4:	f7fb f826 	bl	8000114 <__udivsi3>
 80050c8:	0003      	movs	r3, r0
 80050ca:	0019      	movs	r1, r3
 80050cc:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	227f      	movs	r2, #127	@ 0x7f
 80050d4:	4013      	ands	r3, r2
 80050d6:	434b      	muls	r3, r1
 80050d8:	617b      	str	r3, [r7, #20]
        break;
 80050da:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050dc:	4b14      	ldr	r3, [pc, #80]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0f5b      	lsrs	r3, r3, #29
 80050e2:	2207      	movs	r2, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	3301      	adds	r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7fb f811 	bl	8000114 <__udivsi3>
 80050f2:	0003      	movs	r3, r0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e015      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2238      	movs	r2, #56	@ 0x38
 80050fe:	4013      	ands	r3, r2
 8005100:	2b20      	cmp	r3, #32
 8005102:	d103      	bne.n	800510c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800510c:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2238      	movs	r2, #56	@ 0x38
 8005112:	4013      	ands	r3, r2
 8005114:	2b18      	cmp	r3, #24
 8005116:	d103      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005118:	23fa      	movs	r3, #250	@ 0xfa
 800511a:	01db      	lsls	r3, r3, #7
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	e001      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005124:	693b      	ldr	r3, [r7, #16]
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b006      	add	sp, #24
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	40021000 	.word	0x40021000
 8005134:	00f42400 	.word	0x00f42400
 8005138:	007a1200 	.word	0x007a1200

0800513c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b02      	ldr	r3, [pc, #8]	@ (800514c <HAL_RCC_GetHCLKFreq+0x10>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	20000018 	.word	0x20000018

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005154:	f7ff fff2 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005158:	0004      	movs	r4, r0
 800515a:	f7ff fb49 	bl	80047f0 <LL_RCC_GetAPB1Prescaler>
 800515e:	0003      	movs	r3, r0
 8005160:	0b1a      	lsrs	r2, r3, #12
 8005162:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	58d3      	ldr	r3, [r2, r3]
 8005168:	221f      	movs	r2, #31
 800516a:	4013      	ands	r3, r2
 800516c:	40dc      	lsrs	r4, r3
 800516e:	0023      	movs	r3, r4
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	bdb0      	pop	{r4, r5, r7, pc}
 8005176:	46c0      	nop			@ (mov r8, r8)
 8005178:	080074f4 	.word	0x080074f4

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005184:	2313      	movs	r3, #19
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800518c:	2312      	movs	r3, #18
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	4013      	ands	r3, r2
 800519e:	d100      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051a0:	e0a3      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a2:	2011      	movs	r0, #17
 80051a4:	183b      	adds	r3, r7, r0
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b86      	ldr	r3, [pc, #536]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ae:	2380      	movs	r3, #128	@ 0x80
 80051b0:	055b      	lsls	r3, r3, #21
 80051b2:	4013      	ands	r3, r2
 80051b4:	d110      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	4b83      	ldr	r3, [pc, #524]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ba:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051bc:	2180      	movs	r1, #128	@ 0x80
 80051be:	0549      	lsls	r1, r1, #21
 80051c0:	430a      	orrs	r2, r1
 80051c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051c4:	4b7f      	ldr	r3, [pc, #508]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	055b      	lsls	r3, r3, #21
 80051cc:	4013      	ands	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	183b      	adds	r3, r7, r0
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d8:	4b7b      	ldr	r3, [pc, #492]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b7a      	ldr	r3, [pc, #488]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051de:	2180      	movs	r1, #128	@ 0x80
 80051e0:	0049      	lsls	r1, r1, #1
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e6:	f7fd ff53 	bl	8003090 <HAL_GetTick>
 80051ea:	0003      	movs	r3, r0
 80051ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ee:	e00b      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f0:	f7fd ff4e 	bl	8003090 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d904      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051fe:	2313      	movs	r3, #19
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	2203      	movs	r2, #3
 8005204:	701a      	strb	r2, [r3, #0]
        break;
 8005206:	e005      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005208:	4b6f      	ldr	r3, [pc, #444]	@ (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d0ed      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005214:	2313      	movs	r3, #19
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d154      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800521e:	4b69      	ldr	r3, [pc, #420]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005220:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005222:	23c0      	movs	r3, #192	@ 0xc0
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4013      	ands	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d019      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	429a      	cmp	r2, r3
 8005238:	d014      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800523a:	4b62      	ldr	r3, [pc, #392]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800523c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523e:	4a63      	ldr	r2, [pc, #396]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005240:	4013      	ands	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005244:	4b5f      	ldr	r3, [pc, #380]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005248:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800524a:	2180      	movs	r1, #128	@ 0x80
 800524c:	0249      	lsls	r1, r1, #9
 800524e:	430a      	orrs	r2, r1
 8005250:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005252:	4b5c      	ldr	r3, [pc, #368]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005254:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005258:	495d      	ldr	r1, [pc, #372]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800525a:	400a      	ands	r2, r1
 800525c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800525e:	4b59      	ldr	r3, [pc, #356]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2201      	movs	r2, #1
 8005268:	4013      	ands	r3, r2
 800526a:	d016      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fd ff10 	bl	8003090 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005274:	e00c      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fd ff0b 	bl	8003090 <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	4a54      	ldr	r2, [pc, #336]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d904      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005286:	2313      	movs	r3, #19
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2203      	movs	r2, #3
 800528c:	701a      	strb	r2, [r3, #0]
            break;
 800528e:	e004      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005290:	4b4c      	ldr	r3, [pc, #304]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	2202      	movs	r2, #2
 8005296:	4013      	ands	r3, r2
 8005298:	d0ed      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800529a:	2313      	movs	r3, #19
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a4:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	4a48      	ldr	r2, [pc, #288]	@ (80053cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	0019      	movs	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	4b44      	ldr	r3, [pc, #272]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052b4:	430a      	orrs	r2, r1
 80052b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052b8:	e00c      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ba:	2312      	movs	r3, #18
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	2213      	movs	r2, #19
 80052c0:	18ba      	adds	r2, r7, r2
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	2312      	movs	r3, #18
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	2213      	movs	r2, #19
 80052ce:	18ba      	adds	r2, r7, r2
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d4:	2311      	movs	r3, #17
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d105      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052de:	4b39      	ldr	r3, [pc, #228]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e2:	4b38      	ldr	r3, [pc, #224]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e4:	493c      	ldr	r1, [pc, #240]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2201      	movs	r2, #1
 80052f0:	4013      	ands	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f4:	4b33      	ldr	r3, [pc, #204]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	2203      	movs	r2, #3
 80052fa:	4393      	bics	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4b30      	ldr	r3, [pc, #192]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005304:	430a      	orrs	r2, r1
 8005306:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2202      	movs	r2, #2
 800530e:	4013      	ands	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005312:	4b2c      	ldr	r3, [pc, #176]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	220c      	movs	r2, #12
 8005318:	4393      	bics	r3, r2
 800531a:	0019      	movs	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005322:	430a      	orrs	r2, r1
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2220      	movs	r2, #32
 800532c:	4013      	ands	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005330:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	4a29      	ldr	r2, [pc, #164]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	4013      	ands	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	4b21      	ldr	r3, [pc, #132]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005340:	430a      	orrs	r2, r1
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	4013      	ands	r3, r2
 800534e:	d015      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005350:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	0899      	lsrs	r1, r3, #2
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	4b19      	ldr	r3, [pc, #100]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800535e:	430a      	orrs	r2, r1
 8005360:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	2380      	movs	r3, #128	@ 0x80
 8005368:	05db      	lsls	r3, r3, #23
 800536a:	429a      	cmp	r2, r3
 800536c:	d106      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800536e:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005374:	2180      	movs	r1, #128	@ 0x80
 8005376:	0249      	lsls	r1, r1, #9
 8005378:	430a      	orrs	r2, r1
 800537a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4013      	ands	r3, r2
 8005386:	d016      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005388:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	4a14      	ldr	r2, [pc, #80]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005398:	430a      	orrs	r2, r1
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	01db      	lsls	r3, r3, #7
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d106      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	0249      	lsls	r1, r1, #9
 80053b2:	430a      	orrs	r2, r1
 80053b4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80053b6:	2312      	movs	r3, #18
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	781b      	ldrb	r3, [r3, #0]
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b006      	add	sp, #24
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	fffffcff 	.word	0xfffffcff
 80053d0:	fffeffff 	.word	0xfffeffff
 80053d4:	00001388 	.word	0x00001388
 80053d8:	efffffff 	.word	0xefffffff
 80053dc:	ffffcfff 	.word	0xffffcfff
 80053e0:	ffff3fff 	.word	0xffff3fff

080053e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e046      	b.n	8005484 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2288      	movs	r2, #136	@ 0x88
 80053fa:	589b      	ldr	r3, [r3, r2]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2284      	movs	r2, #132	@ 0x84
 8005404:	2100      	movs	r1, #0
 8005406:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0018      	movs	r0, r3
 800540c:	f7fd fc80 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2288      	movs	r2, #136	@ 0x88
 8005414:	2124      	movs	r1, #36	@ 0x24
 8005416:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2101      	movs	r1, #1
 8005424:	438a      	bics	r2, r1
 8005426:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0018      	movs	r0, r3
 8005434:	f000 fdb6 	bl	8005fa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fc0e 	bl	8005c5c <UART_SetConfig>
 8005440:	0003      	movs	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01c      	b.n	8005484 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	490d      	ldr	r1, [pc, #52]	@ (800548c <HAL_UART_Init+0xa8>)
 8005456:	400a      	ands	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	212a      	movs	r1, #42	@ 0x2a
 8005466:	438a      	bics	r2, r1
 8005468:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2101      	movs	r1, #1
 8005476:	430a      	orrs	r2, r1
 8005478:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fe45 	bl	800610c <UART_CheckIdleState>
 8005482:	0003      	movs	r3, r0
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}
 800548c:	ffffb7ff 	.word	0xffffb7ff

08005490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	@ 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	1dbb      	adds	r3, r7, #6
 800549e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2288      	movs	r2, #136	@ 0x88
 80054a4:	589b      	ldr	r3, [r3, r2]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d000      	beq.n	80054ac <HAL_UART_Transmit+0x1c>
 80054aa:	e090      	b.n	80055ce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_UART_Transmit+0x2a>
 80054b2:	1dbb      	adds	r3, r7, #6
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e088      	b.n	80055d0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	015b      	lsls	r3, r3, #5
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d109      	bne.n	80054de <HAL_UART_Transmit+0x4e>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2201      	movs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	d001      	beq.n	80054de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e078      	b.n	80055d0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2290      	movs	r2, #144	@ 0x90
 80054e2:	2100      	movs	r1, #0
 80054e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2288      	movs	r2, #136	@ 0x88
 80054ea:	2121      	movs	r1, #33	@ 0x21
 80054ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ee:	f7fd fdcf 	bl	8003090 <HAL_GetTick>
 80054f2:	0003      	movs	r3, r0
 80054f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1dba      	adds	r2, r7, #6
 80054fa:	2154      	movs	r1, #84	@ 0x54
 80054fc:	8812      	ldrh	r2, [r2, #0]
 80054fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1dba      	adds	r2, r7, #6
 8005504:	2156      	movs	r1, #86	@ 0x56
 8005506:	8812      	ldrh	r2, [r2, #0]
 8005508:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	015b      	lsls	r3, r3, #5
 8005512:	429a      	cmp	r2, r3
 8005514:	d108      	bne.n	8005528 <HAL_UART_Transmit+0x98>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e003      	b.n	8005530 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005530:	e030      	b.n	8005594 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	0013      	movs	r3, r2
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	@ 0x80
 8005540:	f000 fe8e 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2288      	movs	r2, #136	@ 0x88
 800554c:	2120      	movs	r1, #32
 800554e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e03d      	b.n	80055d0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	001a      	movs	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	05d2      	lsls	r2, r2, #23
 8005566:	0dd2      	lsrs	r2, r2, #23
 8005568:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3302      	adds	r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e007      	b.n	8005582 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2256      	movs	r2, #86	@ 0x56
 8005586:	5a9b      	ldrh	r3, [r3, r2]
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b299      	uxth	r1, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2256      	movs	r2, #86	@ 0x56
 8005592:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2256      	movs	r2, #86	@ 0x56
 8005598:	5a9b      	ldrh	r3, [r3, r2]
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1c8      	bne.n	8005532 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	0013      	movs	r3, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	2140      	movs	r1, #64	@ 0x40
 80055ae:	f000 fe57 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2288      	movs	r2, #136	@ 0x88
 80055ba:	2120      	movs	r1, #32
 80055bc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e006      	b.n	80055d0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2288      	movs	r2, #136	@ 0x88
 80055c6:	2120      	movs	r1, #32
 80055c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b008      	add	sp, #32
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b0aa      	sub	sp, #168	@ 0xa8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	22a4      	movs	r2, #164	@ 0xa4
 80055e8:	18b9      	adds	r1, r7, r2
 80055ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	20a0      	movs	r0, #160	@ 0xa0
 80055f4:	1839      	adds	r1, r7, r0
 80055f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	249c      	movs	r4, #156	@ 0x9c
 8005600:	1939      	adds	r1, r7, r4
 8005602:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005604:	0011      	movs	r1, r2
 8005606:	18bb      	adds	r3, r7, r2
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4aa2      	ldr	r2, [pc, #648]	@ (8005894 <HAL_UART_IRQHandler+0x2bc>)
 800560c:	4013      	ands	r3, r2
 800560e:	2298      	movs	r2, #152	@ 0x98
 8005610:	18bd      	adds	r5, r7, r2
 8005612:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005614:	18bb      	adds	r3, r7, r2
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11a      	bne.n	8005652 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800561c:	187b      	adds	r3, r7, r1
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2220      	movs	r2, #32
 8005622:	4013      	ands	r3, r2
 8005624:	d015      	beq.n	8005652 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005626:	183b      	adds	r3, r7, r0
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2220      	movs	r2, #32
 800562c:	4013      	ands	r3, r2
 800562e:	d105      	bne.n	800563c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005630:	193b      	adds	r3, r7, r4
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	2380      	movs	r3, #128	@ 0x80
 8005636:	055b      	lsls	r3, r3, #21
 8005638:	4013      	ands	r3, r2
 800563a:	d00a      	beq.n	8005652 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	2b00      	cmp	r3, #0
 8005642:	d100      	bne.n	8005646 <HAL_UART_IRQHandler+0x6e>
 8005644:	e2dc      	b.n	8005c00 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	0010      	movs	r0, r2
 800564e:	4798      	blx	r3
      }
      return;
 8005650:	e2d6      	b.n	8005c00 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005652:	2398      	movs	r3, #152	@ 0x98
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d100      	bne.n	800565e <HAL_UART_IRQHandler+0x86>
 800565c:	e122      	b.n	80058a4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800565e:	239c      	movs	r3, #156	@ 0x9c
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a8c      	ldr	r2, [pc, #560]	@ (8005898 <HAL_UART_IRQHandler+0x2c0>)
 8005666:	4013      	ands	r3, r2
 8005668:	d106      	bne.n	8005678 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800566a:	23a0      	movs	r3, #160	@ 0xa0
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8a      	ldr	r2, [pc, #552]	@ (800589c <HAL_UART_IRQHandler+0x2c4>)
 8005672:	4013      	ands	r3, r2
 8005674:	d100      	bne.n	8005678 <HAL_UART_IRQHandler+0xa0>
 8005676:	e115      	b.n	80058a4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005678:	23a4      	movs	r3, #164	@ 0xa4
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	4013      	ands	r3, r2
 8005682:	d012      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
 8005684:	23a0      	movs	r3, #160	@ 0xa0
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	2380      	movs	r3, #128	@ 0x80
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4013      	ands	r3, r2
 8005690:	d00b      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2290      	movs	r2, #144	@ 0x90
 800569e:	589b      	ldr	r3, [r3, r2]
 80056a0:	2201      	movs	r2, #1
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2190      	movs	r1, #144	@ 0x90
 80056a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056aa:	23a4      	movs	r3, #164	@ 0xa4
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2202      	movs	r2, #2
 80056b2:	4013      	ands	r3, r2
 80056b4:	d011      	beq.n	80056da <HAL_UART_IRQHandler+0x102>
 80056b6:	239c      	movs	r3, #156	@ 0x9c
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	4013      	ands	r3, r2
 80056c0:	d00b      	beq.n	80056da <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2202      	movs	r2, #2
 80056c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2290      	movs	r2, #144	@ 0x90
 80056ce:	589b      	ldr	r3, [r3, r2]
 80056d0:	2204      	movs	r2, #4
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2190      	movs	r1, #144	@ 0x90
 80056d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056da:	23a4      	movs	r3, #164	@ 0xa4
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2204      	movs	r2, #4
 80056e2:	4013      	ands	r3, r2
 80056e4:	d011      	beq.n	800570a <HAL_UART_IRQHandler+0x132>
 80056e6:	239c      	movs	r3, #156	@ 0x9c
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	4013      	ands	r3, r2
 80056f0:	d00b      	beq.n	800570a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2204      	movs	r2, #4
 80056f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2290      	movs	r2, #144	@ 0x90
 80056fe:	589b      	ldr	r3, [r3, r2]
 8005700:	2202      	movs	r2, #2
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2190      	movs	r1, #144	@ 0x90
 8005708:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800570a:	23a4      	movs	r3, #164	@ 0xa4
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2208      	movs	r2, #8
 8005712:	4013      	ands	r3, r2
 8005714:	d017      	beq.n	8005746 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005716:	23a0      	movs	r3, #160	@ 0xa0
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2220      	movs	r2, #32
 800571e:	4013      	ands	r3, r2
 8005720:	d105      	bne.n	800572e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005722:	239c      	movs	r3, #156	@ 0x9c
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a5b      	ldr	r2, [pc, #364]	@ (8005898 <HAL_UART_IRQHandler+0x2c0>)
 800572a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800572c:	d00b      	beq.n	8005746 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2208      	movs	r2, #8
 8005734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2290      	movs	r2, #144	@ 0x90
 800573a:	589b      	ldr	r3, [r3, r2]
 800573c:	2208      	movs	r2, #8
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2190      	movs	r1, #144	@ 0x90
 8005744:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005746:	23a4      	movs	r3, #164	@ 0xa4
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	4013      	ands	r3, r2
 8005752:	d013      	beq.n	800577c <HAL_UART_IRQHandler+0x1a4>
 8005754:	23a0      	movs	r3, #160	@ 0xa0
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	2380      	movs	r3, #128	@ 0x80
 800575c:	04db      	lsls	r3, r3, #19
 800575e:	4013      	ands	r3, r2
 8005760:	d00c      	beq.n	800577c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2280      	movs	r2, #128	@ 0x80
 8005768:	0112      	lsls	r2, r2, #4
 800576a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2290      	movs	r2, #144	@ 0x90
 8005770:	589b      	ldr	r3, [r3, r2]
 8005772:	2220      	movs	r2, #32
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2190      	movs	r1, #144	@ 0x90
 800577a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2290      	movs	r2, #144	@ 0x90
 8005780:	589b      	ldr	r3, [r3, r2]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d100      	bne.n	8005788 <HAL_UART_IRQHandler+0x1b0>
 8005786:	e23d      	b.n	8005c04 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005788:	23a4      	movs	r3, #164	@ 0xa4
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2220      	movs	r2, #32
 8005790:	4013      	ands	r3, r2
 8005792:	d015      	beq.n	80057c0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005794:	23a0      	movs	r3, #160	@ 0xa0
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2220      	movs	r2, #32
 800579c:	4013      	ands	r3, r2
 800579e:	d106      	bne.n	80057ae <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057a0:	239c      	movs	r3, #156	@ 0x9c
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	055b      	lsls	r3, r3, #21
 80057aa:	4013      	ands	r3, r2
 80057ac:	d008      	beq.n	80057c0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	0010      	movs	r0, r2
 80057be:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2290      	movs	r2, #144	@ 0x90
 80057c4:	589b      	ldr	r3, [r3, r2]
 80057c6:	2194      	movs	r1, #148	@ 0x94
 80057c8:	187a      	adds	r2, r7, r1
 80057ca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2240      	movs	r2, #64	@ 0x40
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d004      	beq.n	80057e4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057da:	187b      	adds	r3, r7, r1
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2228      	movs	r2, #40	@ 0x28
 80057e0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e2:	d04c      	beq.n	800587e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 fdaa 	bl	8006340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	d13c      	bne.n	8005874 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fa:	f3ef 8310 	mrs	r3, PRIMASK
 80057fe:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	2090      	movs	r0, #144	@ 0x90
 8005804:	183a      	adds	r2, r7, r0
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	2301      	movs	r3, #1
 800580a:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			@ (mov r8, r8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2140      	movs	r1, #64	@ 0x40
 8005820:	438a      	bics	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	183b      	adds	r3, r7, r0
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2280      	movs	r2, #128	@ 0x80
 8005836:	589b      	ldr	r3, [r3, r2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d016      	beq.n	800586a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2280      	movs	r2, #128	@ 0x80
 8005840:	589b      	ldr	r3, [r3, r2]
 8005842:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <HAL_UART_IRQHandler+0x2c8>)
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2280      	movs	r2, #128	@ 0x80
 800584a:	589b      	ldr	r3, [r3, r2]
 800584c:	0018      	movs	r0, r3
 800584e:	f7fe fda3 	bl	8004398 <HAL_DMA_Abort_IT>
 8005852:	1e03      	subs	r3, r0, #0
 8005854:	d01c      	beq.n	8005890 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2280      	movs	r2, #128	@ 0x80
 800585a:	589b      	ldr	r3, [r3, r2]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	2180      	movs	r1, #128	@ 0x80
 8005862:	5852      	ldr	r2, [r2, r1]
 8005864:	0010      	movs	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e012      	b.n	8005890 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0018      	movs	r0, r3
 800586e:	f000 f9e1 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005872:	e00d      	b.n	8005890 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f9dc 	bl	8005c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e008      	b.n	8005890 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 f9d7 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2290      	movs	r2, #144	@ 0x90
 800588a:	2100      	movs	r1, #0
 800588c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800588e:	e1b9      	b.n	8005c04 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	46c0      	nop			@ (mov r8, r8)
    return;
 8005892:	e1b7      	b.n	8005c04 <HAL_UART_IRQHandler+0x62c>
 8005894:	0000080f 	.word	0x0000080f
 8005898:	10000001 	.word	0x10000001
 800589c:	04000120 	.word	0x04000120
 80058a0:	0800640d 	.word	0x0800640d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d000      	beq.n	80058ae <HAL_UART_IRQHandler+0x2d6>
 80058ac:	e13e      	b.n	8005b2c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ae:	23a4      	movs	r3, #164	@ 0xa4
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2210      	movs	r2, #16
 80058b6:	4013      	ands	r3, r2
 80058b8:	d100      	bne.n	80058bc <HAL_UART_IRQHandler+0x2e4>
 80058ba:	e137      	b.n	8005b2c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058bc:	23a0      	movs	r3, #160	@ 0xa0
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2210      	movs	r2, #16
 80058c4:	4013      	ands	r3, r2
 80058c6:	d100      	bne.n	80058ca <HAL_UART_IRQHandler+0x2f2>
 80058c8:	e130      	b.n	8005b2c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2210      	movs	r2, #16
 80058d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2240      	movs	r2, #64	@ 0x40
 80058da:	4013      	ands	r3, r2
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d000      	beq.n	80058e2 <HAL_UART_IRQHandler+0x30a>
 80058e0:	e0a4      	b.n	8005a2c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2280      	movs	r2, #128	@ 0x80
 80058e6:	589b      	ldr	r3, [r3, r2]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	217e      	movs	r1, #126	@ 0x7e
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d100      	bne.n	80058fc <HAL_UART_IRQHandler+0x324>
 80058fa:	e185      	b.n	8005c08 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	225c      	movs	r2, #92	@ 0x5c
 8005900:	5a9b      	ldrh	r3, [r3, r2]
 8005902:	187a      	adds	r2, r7, r1
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d300      	bcc.n	800590c <HAL_UART_IRQHandler+0x334>
 800590a:	e17d      	b.n	8005c08 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	187a      	adds	r2, r7, r1
 8005910:	215e      	movs	r1, #94	@ 0x5e
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2280      	movs	r2, #128	@ 0x80
 800591a:	589b      	ldr	r3, [r3, r2]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2220      	movs	r2, #32
 8005922:	4013      	ands	r3, r2
 8005924:	d170      	bne.n	8005a08 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005930:	2301      	movs	r3, #1
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	49b4      	ldr	r1, [pc, #720]	@ (8005c18 <HAL_UART_IRQHandler+0x640>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005958:	f3ef 8310 	mrs	r3, PRIMASK
 800595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800595e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	677b      	str	r3, [r7, #116]	@ 0x74
 8005962:	2301      	movs	r3, #1
 8005964:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			@ (mov r8, r8)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	438a      	bics	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005980:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598a:	f3ef 8310 	mrs	r3, PRIMASK
 800598e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	673b      	str	r3, [r7, #112]	@ 0x70
 8005994:	2301      	movs	r3, #1
 8005996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2140      	movs	r1, #64	@ 0x40
 80059ac:	438a      	bics	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059b2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b6:	f383 8810 	msr	PRIMASK, r3
}
 80059ba:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	228c      	movs	r2, #140	@ 0x8c
 80059c0:	2120      	movs	r1, #32
 80059c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ca:	f3ef 8310 	mrs	r3, PRIMASK
 80059ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80059d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d4:	2301      	movs	r3, #1
 80059d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2110      	movs	r1, #16
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059f6:	f383 8810 	msr	PRIMASK, r3
}
 80059fa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2280      	movs	r2, #128	@ 0x80
 8005a00:	589b      	ldr	r3, [r3, r2]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7fe fc66 	bl	80042d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	225c      	movs	r2, #92	@ 0x5c
 8005a12:	5a9a      	ldrh	r2, [r3, r2]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	215e      	movs	r1, #94	@ 0x5e
 8005a18:	5a5b      	ldrh	r3, [r3, r1]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0011      	movs	r1, r2
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f90d 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a2a:	e0ed      	b.n	8005c08 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	225c      	movs	r2, #92	@ 0x5c
 8005a30:	5a99      	ldrh	r1, [r3, r2]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	225e      	movs	r2, #94	@ 0x5e
 8005a36:	5a9b      	ldrh	r3, [r3, r2]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	208e      	movs	r0, #142	@ 0x8e
 8005a3c:	183b      	adds	r3, r7, r0
 8005a3e:	1a8a      	subs	r2, r1, r2
 8005a40:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	225e      	movs	r2, #94	@ 0x5e
 8005a46:	5a9b      	ldrh	r3, [r3, r2]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d100      	bne.n	8005a50 <HAL_UART_IRQHandler+0x478>
 8005a4e:	e0dd      	b.n	8005c0c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005a50:	183b      	adds	r3, r7, r0
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d100      	bne.n	8005a5a <HAL_UART_IRQHandler+0x482>
 8005a58:	e0d8      	b.n	8005c0c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a62:	2488      	movs	r4, #136	@ 0x88
 8005a64:	193a      	adds	r2, r7, r4
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4967      	ldr	r1, [pc, #412]	@ (8005c1c <HAL_UART_IRQHandler+0x644>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	193b      	adds	r3, r7, r4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f383 8810 	msr	PRIMASK, r3
}
 8005a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a92:	f3ef 8310 	mrs	r3, PRIMASK
 8005a96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a98:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a9a:	2484      	movs	r4, #132	@ 0x84
 8005a9c:	193a      	adds	r2, r7, r4
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	495a      	ldr	r1, [pc, #360]	@ (8005c20 <HAL_UART_IRQHandler+0x648>)
 8005ab8:	400a      	ands	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	193b      	adds	r3, r7, r4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	228c      	movs	r2, #140	@ 0x8c
 8005ace:	2120      	movs	r1, #32
 8005ad0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ade:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae6:	2480      	movs	r4, #128	@ 0x80
 8005ae8:	193a      	adds	r2, r7, r4
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	2301      	movs	r3, #1
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	f383 8810 	msr	PRIMASK, r3
}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2110      	movs	r1, #16
 8005b04:	438a      	bics	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	193b      	adds	r3, r7, r4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	f383 8810 	msr	PRIMASK, r3
}
 8005b14:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b1c:	183b      	adds	r3, r7, r0
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0011      	movs	r1, r2
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f88d 	bl	8005c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b2a:	e06f      	b.n	8005c0c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b2c:	23a4      	movs	r3, #164	@ 0xa4
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	035b      	lsls	r3, r3, #13
 8005b36:	4013      	ands	r3, r2
 8005b38:	d010      	beq.n	8005b5c <HAL_UART_IRQHandler+0x584>
 8005b3a:	239c      	movs	r3, #156	@ 0x9c
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	03db      	lsls	r3, r3, #15
 8005b44:	4013      	ands	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2280      	movs	r2, #128	@ 0x80
 8005b4e:	0352      	lsls	r2, r2, #13
 8005b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	0018      	movs	r0, r3
 8005b56:	f000 fc9c 	bl	8006492 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b5a:	e05a      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b5c:	23a4      	movs	r3, #164	@ 0xa4
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2280      	movs	r2, #128	@ 0x80
 8005b64:	4013      	ands	r3, r2
 8005b66:	d016      	beq.n	8005b96 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b68:	23a0      	movs	r3, #160	@ 0xa0
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2280      	movs	r2, #128	@ 0x80
 8005b70:	4013      	ands	r3, r2
 8005b72:	d106      	bne.n	8005b82 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b74:	239c      	movs	r3, #156	@ 0x9c
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d042      	beq.n	8005c10 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	0010      	movs	r0, r2
 8005b92:	4798      	blx	r3
    }
    return;
 8005b94:	e03c      	b.n	8005c10 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b96:	23a4      	movs	r3, #164	@ 0xa4
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x5e0>
 8005ba2:	23a0      	movs	r3, #160	@ 0xa0
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2240      	movs	r2, #64	@ 0x40
 8005baa:	4013      	ands	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 fc42 	bl	800643a <UART_EndTransmit_IT>
    return;
 8005bb6:	e02c      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bb8:	23a4      	movs	r3, #164	@ 0xa4
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <HAL_UART_IRQHandler+0x606>
 8005bc6:	23a0      	movs	r3, #160	@ 0xa0
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f000 fc6b 	bl	80064b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bdc:	e019      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bde:	23a4      	movs	r3, #164	@ 0xa4
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	045b      	lsls	r3, r3, #17
 8005be8:	4013      	ands	r3, r2
 8005bea:	d012      	beq.n	8005c12 <HAL_UART_IRQHandler+0x63a>
 8005bec:	23a0      	movs	r3, #160	@ 0xa0
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	da0d      	bge.n	8005c12 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 fc52 	bl	80064a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bfe:	e008      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c00:	46c0      	nop			@ (mov r8, r8)
 8005c02:	e006      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c04:	46c0      	nop			@ (mov r8, r8)
 8005c06:	e004      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c08:	46c0      	nop			@ (mov r8, r8)
 8005c0a:	e002      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c0c:	46c0      	nop			@ (mov r8, r8)
 8005c0e:	e000      	b.n	8005c12 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c10:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b02a      	add	sp, #168	@ 0xa8
 8005c16:	bdb0      	pop	{r4, r5, r7, pc}
 8005c18:	fffffeff 	.word	0xfffffeff
 8005c1c:	fffffedf 	.word	0xfffffedf
 8005c20:	effffffe 	.word	0xeffffffe

08005c24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b002      	add	sp, #8
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c3c:	46c0      	nop			@ (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	000a      	movs	r2, r1
 8005c4e:	1cbb      	adds	r3, r7, #2
 8005c50:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c52:	46c0      	nop			@ (mov r8, r8)
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b002      	add	sp, #8
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c64:	231a      	movs	r3, #26
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4abc      	ldr	r2, [pc, #752]	@ (8005f7c <UART_SetConfig+0x320>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4ab7      	ldr	r2, [pc, #732]	@ (8005f80 <UART_SetConfig+0x324>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4aae      	ldr	r2, [pc, #696]	@ (8005f84 <UART_SetConfig+0x328>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	220f      	movs	r2, #15
 8005ce0:	4393      	bics	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4aa4      	ldr	r2, [pc, #656]	@ (8005f88 <UART_SetConfig+0x32c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d127      	bne.n	8005d4a <UART_SetConfig+0xee>
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	@ (8005f8c <UART_SetConfig+0x330>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	2203      	movs	r2, #3
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d017      	beq.n	8005d36 <UART_SetConfig+0xda>
 8005d06:	d81b      	bhi.n	8005d40 <UART_SetConfig+0xe4>
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d00a      	beq.n	8005d22 <UART_SetConfig+0xc6>
 8005d0c:	d818      	bhi.n	8005d40 <UART_SetConfig+0xe4>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <UART_SetConfig+0xbc>
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d00a      	beq.n	8005d2c <UART_SetConfig+0xd0>
 8005d16:	e013      	b.n	8005d40 <UART_SetConfig+0xe4>
 8005d18:	231b      	movs	r3, #27
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e058      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d22:	231b      	movs	r3, #27
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2202      	movs	r2, #2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e053      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d2c:	231b      	movs	r3, #27
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	2204      	movs	r2, #4
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	e04e      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d36:	231b      	movs	r3, #27
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e049      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d40:	231b      	movs	r3, #27
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	2210      	movs	r2, #16
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e044      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a90      	ldr	r2, [pc, #576]	@ (8005f90 <UART_SetConfig+0x334>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d127      	bne.n	8005da4 <UART_SetConfig+0x148>
 8005d54:	4b8d      	ldr	r3, [pc, #564]	@ (8005f8c <UART_SetConfig+0x330>)
 8005d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d58:	220c      	movs	r2, #12
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b0c      	cmp	r3, #12
 8005d5e:	d017      	beq.n	8005d90 <UART_SetConfig+0x134>
 8005d60:	d81b      	bhi.n	8005d9a <UART_SetConfig+0x13e>
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d00a      	beq.n	8005d7c <UART_SetConfig+0x120>
 8005d66:	d818      	bhi.n	8005d9a <UART_SetConfig+0x13e>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <UART_SetConfig+0x116>
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d00a      	beq.n	8005d86 <UART_SetConfig+0x12a>
 8005d70:	e013      	b.n	8005d9a <UART_SetConfig+0x13e>
 8005d72:	231b      	movs	r3, #27
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e02b      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d7c:	231b      	movs	r3, #27
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2202      	movs	r2, #2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e026      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d86:	231b      	movs	r3, #27
 8005d88:	18fb      	adds	r3, r7, r3
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e021      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d90:	231b      	movs	r3, #27
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	2208      	movs	r2, #8
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e01c      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005d9a:	231b      	movs	r3, #27
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	2210      	movs	r2, #16
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e017      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7a      	ldr	r2, [pc, #488]	@ (8005f94 <UART_SetConfig+0x338>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d104      	bne.n	8005db8 <UART_SetConfig+0x15c>
 8005dae:	231b      	movs	r3, #27
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e00d      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a76      	ldr	r2, [pc, #472]	@ (8005f98 <UART_SetConfig+0x33c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d104      	bne.n	8005dcc <UART_SetConfig+0x170>
 8005dc2:	231b      	movs	r3, #27
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e003      	b.n	8005dd4 <UART_SetConfig+0x178>
 8005dcc:	231b      	movs	r3, #27
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	2380      	movs	r3, #128	@ 0x80
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d000      	beq.n	8005de2 <UART_SetConfig+0x186>
 8005de0:	e065      	b.n	8005eae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005de2:	231b      	movs	r3, #27
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d015      	beq.n	8005e18 <UART_SetConfig+0x1bc>
 8005dec:	dc18      	bgt.n	8005e20 <UART_SetConfig+0x1c4>
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d00d      	beq.n	8005e0e <UART_SetConfig+0x1b2>
 8005df2:	dc15      	bgt.n	8005e20 <UART_SetConfig+0x1c4>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <UART_SetConfig+0x1a2>
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d005      	beq.n	8005e08 <UART_SetConfig+0x1ac>
 8005dfc:	e010      	b.n	8005e20 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dfe:	f7ff f9a7 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8005e02:	0003      	movs	r3, r0
 8005e04:	617b      	str	r3, [r7, #20]
        break;
 8005e06:	e012      	b.n	8005e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b64      	ldr	r3, [pc, #400]	@ (8005f9c <UART_SetConfig+0x340>)
 8005e0a:	617b      	str	r3, [r7, #20]
        break;
 8005e0c:	e00f      	b.n	8005e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7ff f913 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005e12:	0003      	movs	r3, r0
 8005e14:	617b      	str	r3, [r7, #20]
        break;
 8005e16:	e00a      	b.n	8005e2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	617b      	str	r3, [r7, #20]
        break;
 8005e1e:	e006      	b.n	8005e2e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e24:	231a      	movs	r3, #26
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
        break;
 8005e2c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d100      	bne.n	8005e36 <UART_SetConfig+0x1da>
 8005e34:	e08d      	b.n	8005f52 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e3a:	4b59      	ldr	r3, [pc, #356]	@ (8005fa0 <UART_SetConfig+0x344>)
 8005e3c:	0052      	lsls	r2, r2, #1
 8005e3e:	5ad3      	ldrh	r3, [r2, r3]
 8005e40:	0019      	movs	r1, r3
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7fa f966 	bl	8000114 <__udivsi3>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	005a      	lsls	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	18d2      	adds	r2, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	0019      	movs	r1, r3
 8005e5a:	0010      	movs	r0, r2
 8005e5c:	f7fa f95a 	bl	8000114 <__udivsi3>
 8005e60:	0003      	movs	r3, r0
 8005e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	d91c      	bls.n	8005ea4 <UART_SetConfig+0x248>
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	025b      	lsls	r3, r3, #9
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d217      	bcs.n	8005ea4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	200e      	movs	r0, #14
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	210f      	movs	r1, #15
 8005e7e:	438a      	bics	r2, r1
 8005e80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2207      	movs	r2, #7
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	b299      	uxth	r1, r3
 8005e8e:	183b      	adds	r3, r7, r0
 8005e90:	183a      	adds	r2, r7, r0
 8005e92:	8812      	ldrh	r2, [r2, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	183a      	adds	r2, r7, r0
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	e056      	b.n	8005f52 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea4:	231a      	movs	r3, #26
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	e051      	b.n	8005f52 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eae:	231b      	movs	r3, #27
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d015      	beq.n	8005ee4 <UART_SetConfig+0x288>
 8005eb8:	dc18      	bgt.n	8005eec <UART_SetConfig+0x290>
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d00d      	beq.n	8005eda <UART_SetConfig+0x27e>
 8005ebe:	dc15      	bgt.n	8005eec <UART_SetConfig+0x290>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <UART_SetConfig+0x26e>
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d005      	beq.n	8005ed4 <UART_SetConfig+0x278>
 8005ec8:	e010      	b.n	8005eec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eca:	f7ff f941 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	617b      	str	r3, [r7, #20]
        break;
 8005ed2:	e012      	b.n	8005efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <UART_SetConfig+0x340>)
 8005ed6:	617b      	str	r3, [r7, #20]
        break;
 8005ed8:	e00f      	b.n	8005efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7ff f8ad 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	617b      	str	r3, [r7, #20]
        break;
 8005ee2:	e00a      	b.n	8005efa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	617b      	str	r3, [r7, #20]
        break;
 8005eea:	e006      	b.n	8005efa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ef0:	231a      	movs	r3, #26
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]
        break;
 8005ef8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d028      	beq.n	8005f52 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f04:	4b26      	ldr	r3, [pc, #152]	@ (8005fa0 <UART_SetConfig+0x344>)
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	5ad3      	ldrh	r3, [r2, r3]
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	6978      	ldr	r0, [r7, #20]
 8005f0e:	f7fa f901 	bl	8000114 <__udivsi3>
 8005f12:	0003      	movs	r3, r0
 8005f14:	001a      	movs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	18d2      	adds	r2, r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	0019      	movs	r1, r3
 8005f24:	0010      	movs	r0, r2
 8005f26:	f7fa f8f5 	bl	8000114 <__udivsi3>
 8005f2a:	0003      	movs	r3, r0
 8005f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b0f      	cmp	r3, #15
 8005f32:	d90a      	bls.n	8005f4a <UART_SetConfig+0x2ee>
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	2380      	movs	r3, #128	@ 0x80
 8005f38:	025b      	lsls	r3, r3, #9
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d205      	bcs.n	8005f4a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	e003      	b.n	8005f52 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4a:	231a      	movs	r3, #26
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	2201      	movs	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	226a      	movs	r2, #106	@ 0x6a
 8005f56:	2101      	movs	r1, #1
 8005f58:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2268      	movs	r2, #104	@ 0x68
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f6e:	231a      	movs	r3, #26
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	781b      	ldrb	r3, [r3, #0]
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b008      	add	sp, #32
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	cfff69f3 	.word	0xcfff69f3
 8005f80:	ffffcfff 	.word	0xffffcfff
 8005f84:	11fff4ff 	.word	0x11fff4ff
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400
 8005f94:	40004800 	.word	0x40004800
 8005f98:	40004c00 	.word	0x40004c00
 8005f9c:	00f42400 	.word	0x00f42400
 8005fa0:	08007514 	.word	0x08007514

08005fa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4a4a      	ldr	r2, [pc, #296]	@ (80060e8 <UART_AdvFeatureConfig+0x144>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4a43      	ldr	r2, [pc, #268]	@ (80060ec <UART_AdvFeatureConfig+0x148>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	0019      	movs	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	4a3b      	ldr	r2, [pc, #236]	@ (80060f0 <UART_AdvFeatureConfig+0x14c>)
 8006002:	4013      	ands	r3, r2
 8006004:	0019      	movs	r1, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	2204      	movs	r2, #4
 8006018:	4013      	ands	r3, r2
 800601a:	d00b      	beq.n	8006034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4a34      	ldr	r2, [pc, #208]	@ (80060f4 <UART_AdvFeatureConfig+0x150>)
 8006024:	4013      	ands	r3, r2
 8006026:	0019      	movs	r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	2210      	movs	r2, #16
 800603a:	4013      	ands	r3, r2
 800603c:	d00b      	beq.n	8006056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4a2c      	ldr	r2, [pc, #176]	@ (80060f8 <UART_AdvFeatureConfig+0x154>)
 8006046:	4013      	ands	r3, r2
 8006048:	0019      	movs	r1, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605a:	2220      	movs	r2, #32
 800605c:	4013      	ands	r3, r2
 800605e:	d00b      	beq.n	8006078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	4a25      	ldr	r2, [pc, #148]	@ (80060fc <UART_AdvFeatureConfig+0x158>)
 8006068:	4013      	ands	r3, r2
 800606a:	0019      	movs	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	2240      	movs	r2, #64	@ 0x40
 800607e:	4013      	ands	r3, r2
 8006080:	d01d      	beq.n	80060be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <UART_AdvFeatureConfig+0x15c>)
 800608a:	4013      	ands	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800609e:	2380      	movs	r3, #128	@ 0x80
 80060a0:	035b      	lsls	r3, r3, #13
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d10b      	bne.n	80060be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <UART_AdvFeatureConfig+0x160>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	2280      	movs	r2, #128	@ 0x80
 80060c4:	4013      	ands	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006108 <UART_AdvFeatureConfig+0x164>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	0019      	movs	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b002      	add	sp, #8
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	ffff7fff 	.word	0xffff7fff
 80060ec:	fffdffff 	.word	0xfffdffff
 80060f0:	fffeffff 	.word	0xfffeffff
 80060f4:	fffbffff 	.word	0xfffbffff
 80060f8:	ffffefff 	.word	0xffffefff
 80060fc:	ffffdfff 	.word	0xffffdfff
 8006100:	ffefffff 	.word	0xffefffff
 8006104:	ff9fffff 	.word	0xff9fffff
 8006108:	fff7ffff 	.word	0xfff7ffff

0800610c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b092      	sub	sp, #72	@ 0x48
 8006110:	af02      	add	r7, sp, #8
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2290      	movs	r2, #144	@ 0x90
 8006118:	2100      	movs	r1, #0
 800611a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800611c:	f7fc ffb8 	bl	8003090 <HAL_GetTick>
 8006120:	0003      	movs	r3, r0
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2208      	movs	r2, #8
 800612c:	4013      	ands	r3, r2
 800612e:	2b08      	cmp	r3, #8
 8006130:	d12d      	bne.n	800618e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006134:	2280      	movs	r2, #128	@ 0x80
 8006136:	0391      	lsls	r1, r2, #14
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4a47      	ldr	r2, [pc, #284]	@ (8006258 <UART_CheckIdleState+0x14c>)
 800613c:	9200      	str	r2, [sp, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	f000 f88e 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 8006144:	1e03      	subs	r3, r0, #0
 8006146:	d022      	beq.n	800618e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006148:	f3ef 8310 	mrs	r3, PRIMASK
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006150:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006152:	2301      	movs	r3, #1
 8006154:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	f383 8810 	msr	PRIMASK, r3
}
 800615c:	46c0      	nop			@ (mov r8, r8)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2180      	movs	r1, #128	@ 0x80
 800616a:	438a      	bics	r2, r1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	f383 8810 	msr	PRIMASK, r3
}
 8006178:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2288      	movs	r2, #136	@ 0x88
 800617e:	2120      	movs	r1, #32
 8006180:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2284      	movs	r2, #132	@ 0x84
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e060      	b.n	8006250 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2204      	movs	r2, #4
 8006196:	4013      	ands	r3, r2
 8006198:	2b04      	cmp	r3, #4
 800619a:	d146      	bne.n	800622a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619e:	2280      	movs	r2, #128	@ 0x80
 80061a0:	03d1      	lsls	r1, r2, #15
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <UART_CheckIdleState+0x14c>)
 80061a6:	9200      	str	r2, [sp, #0]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f000 f859 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d03b      	beq.n	800622a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b2:	f3ef 8310 	mrs	r3, PRIMASK
 80061b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80061b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80061bc:	2301      	movs	r3, #1
 80061be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f383 8810 	msr	PRIMASK, r3
}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4922      	ldr	r1, [pc, #136]	@ (800625c <UART_CheckIdleState+0x150>)
 80061d4:	400a      	ands	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f383 8810 	msr	PRIMASK, r3
}
 80061e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e4:	f3ef 8310 	mrs	r3, PRIMASK
 80061e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80061ea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ee:	2301      	movs	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f383 8810 	msr	PRIMASK, r3
}
 80061f8:	46c0      	nop			@ (mov r8, r8)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2101      	movs	r1, #1
 8006206:	438a      	bics	r2, r1
 8006208:	609a      	str	r2, [r3, #8]
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	228c      	movs	r2, #140	@ 0x8c
 800621a:	2120      	movs	r1, #32
 800621c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2284      	movs	r2, #132	@ 0x84
 8006222:	2100      	movs	r1, #0
 8006224:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e012      	b.n	8006250 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2288      	movs	r2, #136	@ 0x88
 800622e:	2120      	movs	r1, #32
 8006230:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	228c      	movs	r2, #140	@ 0x8c
 8006236:	2120      	movs	r1, #32
 8006238:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2284      	movs	r2, #132	@ 0x84
 800624a:	2100      	movs	r1, #0
 800624c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b010      	add	sp, #64	@ 0x40
 8006256:	bd80      	pop	{r7, pc}
 8006258:	01ffffff 	.word	0x01ffffff
 800625c:	fffffedf 	.word	0xfffffedf

08006260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	1dfb      	adds	r3, r7, #7
 800626e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006270:	e051      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	3301      	adds	r3, #1
 8006276:	d04e      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006278:	f7fc ff0a 	bl	8003090 <HAL_GetTick>
 800627c:	0002      	movs	r2, r0
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	429a      	cmp	r2, r3
 8006286:	d302      	bcc.n	800628e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e051      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2204      	movs	r2, #4
 800629a:	4013      	ands	r3, r2
 800629c:	d03b      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b80      	cmp	r3, #128	@ 0x80
 80062a2:	d038      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b40      	cmp	r3, #64	@ 0x40
 80062a8:	d035      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	2208      	movs	r2, #8
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d111      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2208      	movs	r2, #8
 80062be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	0018      	movs	r0, r3
 80062c4:	f000 f83c 	bl	8006340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2290      	movs	r2, #144	@ 0x90
 80062cc:	2108      	movs	r1, #8
 80062ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2284      	movs	r2, #132	@ 0x84
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e02c      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	2380      	movs	r3, #128	@ 0x80
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	401a      	ands	r2, r3
 80062e8:	2380      	movs	r3, #128	@ 0x80
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d112      	bne.n	8006316 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2280      	movs	r2, #128	@ 0x80
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f000 f81f 	bl	8006340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2290      	movs	r2, #144	@ 0x90
 8006306:	2120      	movs	r1, #32
 8006308:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2284      	movs	r2, #132	@ 0x84
 800630e:	2100      	movs	r1, #0
 8006310:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00f      	b.n	8006336 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	425a      	negs	r2, r3
 8006326:	4153      	adcs	r3, r2
 8006328:	b2db      	uxtb	r3, r3
 800632a:	001a      	movs	r2, r3
 800632c:	1dfb      	adds	r3, r7, #7
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d09e      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b004      	add	sp, #16
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	@ 0x38
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006348:	f3ef 8310 	mrs	r3, PRIMASK
 800634c:	617b      	str	r3, [r7, #20]
  return(result);
 800634e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006350:	637b      	str	r3, [r7, #52]	@ 0x34
 8006352:	2301      	movs	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f383 8810 	msr	PRIMASK, r3
}
 800635c:	46c0      	nop			@ (mov r8, r8)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4926      	ldr	r1, [pc, #152]	@ (8006404 <UART_EndRxTransfer+0xc4>)
 800636a:	400a      	ands	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f383 8810 	msr	PRIMASK, r3
}
 8006378:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637a:	f3ef 8310 	mrs	r3, PRIMASK
 800637e:	623b      	str	r3, [r7, #32]
  return(result);
 8006380:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006382:	633b      	str	r3, [r7, #48]	@ 0x30
 8006384:	2301      	movs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	f383 8810 	msr	PRIMASK, r3
}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	491b      	ldr	r1, [pc, #108]	@ (8006408 <UART_EndRxTransfer+0xc8>)
 800639c:	400a      	ands	r2, r1
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	f383 8810 	msr	PRIMASK, r3
}
 80063aa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d118      	bne.n	80063e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b4:	f3ef 8310 	mrs	r3, PRIMASK
 80063b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063be:	2301      	movs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f383 8810 	msr	PRIMASK, r3
}
 80063c8:	46c0      	nop			@ (mov r8, r8)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2110      	movs	r1, #16
 80063d6:	438a      	bics	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f383 8810 	msr	PRIMASK, r3
}
 80063e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	228c      	movs	r2, #140	@ 0x8c
 80063ea:	2120      	movs	r1, #32
 80063ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063fa:	46c0      	nop			@ (mov r8, r8)
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b00e      	add	sp, #56	@ 0x38
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			@ (mov r8, r8)
 8006404:	fffffedf 	.word	0xfffffedf
 8006408:	effffffe 	.word	0xeffffffe

0800640c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	225e      	movs	r2, #94	@ 0x5e
 800641e:	2100      	movs	r1, #0
 8006420:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2256      	movs	r2, #86	@ 0x56
 8006426:	2100      	movs	r1, #0
 8006428:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0018      	movs	r0, r3
 800642e:	f7ff fc01 	bl	8005c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b004      	add	sp, #16
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006442:	f3ef 8310 	mrs	r3, PRIMASK
 8006446:	60bb      	str	r3, [r7, #8]
  return(result);
 8006448:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	2301      	movs	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2140      	movs	r1, #64	@ 0x40
 8006464:	438a      	bics	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f383 8810 	msr	PRIMASK, r3
}
 8006472:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2288      	movs	r2, #136	@ 0x88
 8006478:	2120      	movs	r1, #32
 800647a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f7ff fbcd 	bl	8005c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	46bd      	mov	sp, r7
 800648e:	b006      	add	sp, #24
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	46bd      	mov	sp, r7
 800649e:	b002      	add	sp, #8
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b002      	add	sp, #8
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064ba:	46c0      	nop			@ (mov r8, r8)
 80064bc:	46bd      	mov	sp, r7
 80064be:	b002      	add	sp, #8
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2284      	movs	r2, #132	@ 0x84
 80064d0:	5c9b      	ldrb	r3, [r3, r2]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_UARTEx_DisableFifoMode+0x16>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e027      	b.n	800652a <HAL_UARTEx_DisableFifoMode+0x66>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2284      	movs	r2, #132	@ 0x84
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2288      	movs	r2, #136	@ 0x88
 80064e6:	2124      	movs	r1, #36	@ 0x24
 80064e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2101      	movs	r1, #1
 80064fe:	438a      	bics	r2, r1
 8006500:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a0b      	ldr	r2, [pc, #44]	@ (8006534 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006506:	4013      	ands	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2288      	movs	r2, #136	@ 0x88
 800651c:	2120      	movs	r1, #32
 800651e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2284      	movs	r2, #132	@ 0x84
 8006524:	2100      	movs	r1, #0
 8006526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b004      	add	sp, #16
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	dfffffff 	.word	0xdfffffff

08006538 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2284      	movs	r2, #132	@ 0x84
 8006546:	5c9b      	ldrb	r3, [r3, r2]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e02e      	b.n	80065ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2284      	movs	r2, #132	@ 0x84
 8006554:	2101      	movs	r1, #1
 8006556:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2288      	movs	r2, #136	@ 0x88
 800655c:	2124      	movs	r1, #36	@ 0x24
 800655e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2101      	movs	r1, #1
 8006574:	438a      	bics	r2, r1
 8006576:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	08d9      	lsrs	r1, r3, #3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0018      	movs	r0, r3
 8006590:	f000 f854 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2288      	movs	r2, #136	@ 0x88
 80065a0:	2120      	movs	r1, #32
 80065a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2284      	movs	r2, #132	@ 0x84
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	0018      	movs	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b004      	add	sp, #16
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2284      	movs	r2, #132	@ 0x84
 80065c6:	5c9b      	ldrb	r3, [r3, r2]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e02f      	b.n	8006630 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2284      	movs	r2, #132	@ 0x84
 80065d4:	2101      	movs	r1, #1
 80065d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2288      	movs	r2, #136	@ 0x88
 80065dc:	2124      	movs	r1, #36	@ 0x24
 80065de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2101      	movs	r1, #1
 80065f4:	438a      	bics	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006638 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006600:	4013      	ands	r3, r2
 8006602:	0019      	movs	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	0018      	movs	r0, r3
 8006612:	f000 f813 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2288      	movs	r2, #136	@ 0x88
 8006622:	2120      	movs	r1, #32
 8006624:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2284      	movs	r2, #132	@ 0x84
 800662a:	2100      	movs	r1, #0
 800662c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b004      	add	sp, #16
 8006636:	bd80      	pop	{r7, pc}
 8006638:	f1ffffff 	.word	0xf1ffffff

0800663c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800663c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	226a      	movs	r2, #106	@ 0x6a
 8006650:	2101      	movs	r1, #1
 8006652:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2268      	movs	r2, #104	@ 0x68
 8006658:	2101      	movs	r1, #1
 800665a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800665c:	e043      	b.n	80066e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665e:	260f      	movs	r6, #15
 8006660:	19bb      	adds	r3, r7, r6
 8006662:	2208      	movs	r2, #8
 8006664:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006666:	200e      	movs	r0, #14
 8006668:	183b      	adds	r3, r7, r0
 800666a:	2208      	movs	r2, #8
 800666c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	0e5b      	lsrs	r3, r3, #25
 8006676:	b2da      	uxtb	r2, r3
 8006678:	240d      	movs	r4, #13
 800667a:	193b      	adds	r3, r7, r4
 800667c:	2107      	movs	r1, #7
 800667e:	400a      	ands	r2, r1
 8006680:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	0f5b      	lsrs	r3, r3, #29
 800668a:	b2da      	uxtb	r2, r3
 800668c:	250c      	movs	r5, #12
 800668e:	197b      	adds	r3, r7, r5
 8006690:	2107      	movs	r1, #7
 8006692:	400a      	ands	r2, r1
 8006694:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006696:	183b      	adds	r3, r7, r0
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	197a      	adds	r2, r7, r5
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	4914      	ldr	r1, [pc, #80]	@ (80066f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80066a0:	5c8a      	ldrb	r2, [r1, r2]
 80066a2:	435a      	muls	r2, r3
 80066a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80066a6:	197b      	adds	r3, r7, r5
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	4a12      	ldr	r2, [pc, #72]	@ (80066f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80066ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ae:	0019      	movs	r1, r3
 80066b0:	f7f9 fdba 	bl	8000228 <__divsi3>
 80066b4:	0003      	movs	r3, r0
 80066b6:	b299      	uxth	r1, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	226a      	movs	r2, #106	@ 0x6a
 80066bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066be:	19bb      	adds	r3, r7, r6
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	193a      	adds	r2, r7, r4
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	490a      	ldr	r1, [pc, #40]	@ (80066f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80066c8:	5c8a      	ldrb	r2, [r1, r2]
 80066ca:	435a      	muls	r2, r3
 80066cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80066ce:	193b      	adds	r3, r7, r4
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4a08      	ldr	r2, [pc, #32]	@ (80066f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80066d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066d6:	0019      	movs	r1, r3
 80066d8:	f7f9 fda6 	bl	8000228 <__divsi3>
 80066dc:	0003      	movs	r3, r0
 80066de:	b299      	uxth	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2268      	movs	r2, #104	@ 0x68
 80066e4:	5299      	strh	r1, [r3, r2]
}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b005      	add	sp, #20
 80066ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	0800752c 	.word	0x0800752c
 80066f4:	08007534 	.word	0x08007534

080066f8 <siprintf>:
 80066f8:	b40e      	push	{r1, r2, r3}
 80066fa:	b500      	push	{lr}
 80066fc:	490b      	ldr	r1, [pc, #44]	@ (800672c <siprintf+0x34>)
 80066fe:	b09c      	sub	sp, #112	@ 0x70
 8006700:	ab1d      	add	r3, sp, #116	@ 0x74
 8006702:	9002      	str	r0, [sp, #8]
 8006704:	9006      	str	r0, [sp, #24]
 8006706:	9107      	str	r1, [sp, #28]
 8006708:	9104      	str	r1, [sp, #16]
 800670a:	4809      	ldr	r0, [pc, #36]	@ (8006730 <siprintf+0x38>)
 800670c:	4909      	ldr	r1, [pc, #36]	@ (8006734 <siprintf+0x3c>)
 800670e:	cb04      	ldmia	r3!, {r2}
 8006710:	9105      	str	r1, [sp, #20]
 8006712:	6800      	ldr	r0, [r0, #0]
 8006714:	a902      	add	r1, sp, #8
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f000 f99e 	bl	8006a58 <_svfiprintf_r>
 800671c:	2200      	movs	r2, #0
 800671e:	9b02      	ldr	r3, [sp, #8]
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	b01c      	add	sp, #112	@ 0x70
 8006724:	bc08      	pop	{r3}
 8006726:	b003      	add	sp, #12
 8006728:	4718      	bx	r3
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	7fffffff 	.word	0x7fffffff
 8006730:	20000024 	.word	0x20000024
 8006734:	ffff0208 	.word	0xffff0208

08006738 <memset>:
 8006738:	0003      	movs	r3, r0
 800673a:	1882      	adds	r2, r0, r2
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	7019      	strb	r1, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <__errno>:
 8006748:	4b01      	ldr	r3, [pc, #4]	@ (8006750 <__errno+0x8>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	4770      	bx	lr
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	20000024 	.word	0x20000024

08006754 <__libc_init_array>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	2600      	movs	r6, #0
 8006758:	4c0c      	ldr	r4, [pc, #48]	@ (800678c <__libc_init_array+0x38>)
 800675a:	4d0d      	ldr	r5, [pc, #52]	@ (8006790 <__libc_init_array+0x3c>)
 800675c:	1b64      	subs	r4, r4, r5
 800675e:	10a4      	asrs	r4, r4, #2
 8006760:	42a6      	cmp	r6, r4
 8006762:	d109      	bne.n	8006778 <__libc_init_array+0x24>
 8006764:	2600      	movs	r6, #0
 8006766:	f000 fe53 	bl	8007410 <_init>
 800676a:	4c0a      	ldr	r4, [pc, #40]	@ (8006794 <__libc_init_array+0x40>)
 800676c:	4d0a      	ldr	r5, [pc, #40]	@ (8006798 <__libc_init_array+0x44>)
 800676e:	1b64      	subs	r4, r4, r5
 8006770:	10a4      	asrs	r4, r4, #2
 8006772:	42a6      	cmp	r6, r4
 8006774:	d105      	bne.n	8006782 <__libc_init_array+0x2e>
 8006776:	bd70      	pop	{r4, r5, r6, pc}
 8006778:	00b3      	lsls	r3, r6, #2
 800677a:	58eb      	ldr	r3, [r5, r3]
 800677c:	4798      	blx	r3
 800677e:	3601      	adds	r6, #1
 8006780:	e7ee      	b.n	8006760 <__libc_init_array+0xc>
 8006782:	00b3      	lsls	r3, r6, #2
 8006784:	58eb      	ldr	r3, [r5, r3]
 8006786:	4798      	blx	r3
 8006788:	3601      	adds	r6, #1
 800678a:	e7f2      	b.n	8006772 <__libc_init_array+0x1e>
 800678c:	08007570 	.word	0x08007570
 8006790:	08007570 	.word	0x08007570
 8006794:	08007574 	.word	0x08007574
 8006798:	08007570 	.word	0x08007570

0800679c <__retarget_lock_acquire_recursive>:
 800679c:	4770      	bx	lr

0800679e <__retarget_lock_release_recursive>:
 800679e:	4770      	bx	lr

080067a0 <_free_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	0005      	movs	r5, r0
 80067a4:	1e0c      	subs	r4, r1, #0
 80067a6:	d010      	beq.n	80067ca <_free_r+0x2a>
 80067a8:	3c04      	subs	r4, #4
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da00      	bge.n	80067b2 <_free_r+0x12>
 80067b0:	18e4      	adds	r4, r4, r3
 80067b2:	0028      	movs	r0, r5
 80067b4:	f000 f8e0 	bl	8006978 <__malloc_lock>
 80067b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <_free_r+0x90>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <_free_r+0x2c>
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6014      	str	r4, [r2, #0]
 80067c4:	0028      	movs	r0, r5
 80067c6:	f000 f8df 	bl	8006988 <__malloc_unlock>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	d1f3      	bne.n	80067c0 <_free_r+0x20>
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	1809      	adds	r1, r1, r0
 80067de:	6021      	str	r1, [r4, #0]
 80067e0:	e7ee      	b.n	80067c0 <_free_r+0x20>
 80067e2:	001a      	movs	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <_free_r+0x4e>
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	d9f9      	bls.n	80067e2 <_free_r+0x42>
 80067ee:	6811      	ldr	r1, [r2, #0]
 80067f0:	1850      	adds	r0, r2, r1
 80067f2:	42a0      	cmp	r0, r4
 80067f4:	d10b      	bne.n	800680e <_free_r+0x6e>
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1809      	adds	r1, r1, r0
 80067fa:	1850      	adds	r0, r2, r1
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	4283      	cmp	r3, r0
 8006800:	d1e0      	bne.n	80067c4 <_free_r+0x24>
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	1841      	adds	r1, r0, r1
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	6053      	str	r3, [r2, #4]
 800680c:	e7da      	b.n	80067c4 <_free_r+0x24>
 800680e:	42a0      	cmp	r0, r4
 8006810:	d902      	bls.n	8006818 <_free_r+0x78>
 8006812:	230c      	movs	r3, #12
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7d5      	b.n	80067c4 <_free_r+0x24>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	d103      	bne.n	8006828 <_free_r+0x88>
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	1809      	adds	r1, r1, r0
 8006826:	6021      	str	r1, [r4, #0]
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6054      	str	r4, [r2, #4]
 800682c:	e7ca      	b.n	80067c4 <_free_r+0x24>
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	200004bc 	.word	0x200004bc

08006834 <sbrk_aligned>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4e0f      	ldr	r6, [pc, #60]	@ (8006874 <sbrk_aligned+0x40>)
 8006838:	000d      	movs	r5, r1
 800683a:	6831      	ldr	r1, [r6, #0]
 800683c:	0004      	movs	r4, r0
 800683e:	2900      	cmp	r1, #0
 8006840:	d102      	bne.n	8006848 <sbrk_aligned+0x14>
 8006842:	f000 fb99 	bl	8006f78 <_sbrk_r>
 8006846:	6030      	str	r0, [r6, #0]
 8006848:	0029      	movs	r1, r5
 800684a:	0020      	movs	r0, r4
 800684c:	f000 fb94 	bl	8006f78 <_sbrk_r>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d103      	bne.n	800685c <sbrk_aligned+0x28>
 8006854:	2501      	movs	r5, #1
 8006856:	426d      	negs	r5, r5
 8006858:	0028      	movs	r0, r5
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	2303      	movs	r3, #3
 800685e:	1cc5      	adds	r5, r0, #3
 8006860:	439d      	bics	r5, r3
 8006862:	42a8      	cmp	r0, r5
 8006864:	d0f8      	beq.n	8006858 <sbrk_aligned+0x24>
 8006866:	1a29      	subs	r1, r5, r0
 8006868:	0020      	movs	r0, r4
 800686a:	f000 fb85 	bl	8006f78 <_sbrk_r>
 800686e:	3001      	adds	r0, #1
 8006870:	d1f2      	bne.n	8006858 <sbrk_aligned+0x24>
 8006872:	e7ef      	b.n	8006854 <sbrk_aligned+0x20>
 8006874:	200004b8 	.word	0x200004b8

08006878 <_malloc_r>:
 8006878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687a:	2203      	movs	r2, #3
 800687c:	1ccb      	adds	r3, r1, #3
 800687e:	4393      	bics	r3, r2
 8006880:	3308      	adds	r3, #8
 8006882:	0005      	movs	r5, r0
 8006884:	001f      	movs	r7, r3
 8006886:	2b0c      	cmp	r3, #12
 8006888:	d234      	bcs.n	80068f4 <_malloc_r+0x7c>
 800688a:	270c      	movs	r7, #12
 800688c:	42b9      	cmp	r1, r7
 800688e:	d833      	bhi.n	80068f8 <_malloc_r+0x80>
 8006890:	0028      	movs	r0, r5
 8006892:	f000 f871 	bl	8006978 <__malloc_lock>
 8006896:	4e37      	ldr	r6, [pc, #220]	@ (8006974 <_malloc_r+0xfc>)
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	001c      	movs	r4, r3
 800689c:	2c00      	cmp	r4, #0
 800689e:	d12f      	bne.n	8006900 <_malloc_r+0x88>
 80068a0:	0039      	movs	r1, r7
 80068a2:	0028      	movs	r0, r5
 80068a4:	f7ff ffc6 	bl	8006834 <sbrk_aligned>
 80068a8:	0004      	movs	r4, r0
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d15f      	bne.n	800696e <_malloc_r+0xf6>
 80068ae:	6834      	ldr	r4, [r6, #0]
 80068b0:	9400      	str	r4, [sp, #0]
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d14a      	bne.n	800694e <_malloc_r+0xd6>
 80068b8:	2c00      	cmp	r4, #0
 80068ba:	d052      	beq.n	8006962 <_malloc_r+0xea>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	0028      	movs	r0, r5
 80068c0:	18e3      	adds	r3, r4, r3
 80068c2:	9900      	ldr	r1, [sp, #0]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f000 fb57 	bl	8006f78 <_sbrk_r>
 80068ca:	9b01      	ldr	r3, [sp, #4]
 80068cc:	4283      	cmp	r3, r0
 80068ce:	d148      	bne.n	8006962 <_malloc_r+0xea>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	0028      	movs	r0, r5
 80068d4:	1aff      	subs	r7, r7, r3
 80068d6:	0039      	movs	r1, r7
 80068d8:	f7ff ffac 	bl	8006834 <sbrk_aligned>
 80068dc:	3001      	adds	r0, #1
 80068de:	d040      	beq.n	8006962 <_malloc_r+0xea>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	19db      	adds	r3, r3, r7
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	6833      	ldr	r3, [r6, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d133      	bne.n	8006956 <_malloc_r+0xde>
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	e019      	b.n	8006928 <_malloc_r+0xb0>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dac9      	bge.n	800688c <_malloc_r+0x14>
 80068f8:	230c      	movs	r3, #12
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	2000      	movs	r0, #0
 80068fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006900:	6821      	ldr	r1, [r4, #0]
 8006902:	1bc9      	subs	r1, r1, r7
 8006904:	d420      	bmi.n	8006948 <_malloc_r+0xd0>
 8006906:	290b      	cmp	r1, #11
 8006908:	d90a      	bls.n	8006920 <_malloc_r+0xa8>
 800690a:	19e2      	adds	r2, r4, r7
 800690c:	6027      	str	r7, [r4, #0]
 800690e:	42a3      	cmp	r3, r4
 8006910:	d104      	bne.n	800691c <_malloc_r+0xa4>
 8006912:	6032      	str	r2, [r6, #0]
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	6011      	str	r1, [r2, #0]
 8006918:	6053      	str	r3, [r2, #4]
 800691a:	e005      	b.n	8006928 <_malloc_r+0xb0>
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e7f9      	b.n	8006914 <_malloc_r+0x9c>
 8006920:	6862      	ldr	r2, [r4, #4]
 8006922:	42a3      	cmp	r3, r4
 8006924:	d10e      	bne.n	8006944 <_malloc_r+0xcc>
 8006926:	6032      	str	r2, [r6, #0]
 8006928:	0028      	movs	r0, r5
 800692a:	f000 f82d 	bl	8006988 <__malloc_unlock>
 800692e:	0020      	movs	r0, r4
 8006930:	2207      	movs	r2, #7
 8006932:	300b      	adds	r0, #11
 8006934:	1d23      	adds	r3, r4, #4
 8006936:	4390      	bics	r0, r2
 8006938:	1ac2      	subs	r2, r0, r3
 800693a:	4298      	cmp	r0, r3
 800693c:	d0df      	beq.n	80068fe <_malloc_r+0x86>
 800693e:	1a1b      	subs	r3, r3, r0
 8006940:	50a3      	str	r3, [r4, r2]
 8006942:	e7dc      	b.n	80068fe <_malloc_r+0x86>
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	e7ef      	b.n	8006928 <_malloc_r+0xb0>
 8006948:	0023      	movs	r3, r4
 800694a:	6864      	ldr	r4, [r4, #4]
 800694c:	e7a6      	b.n	800689c <_malloc_r+0x24>
 800694e:	9c00      	ldr	r4, [sp, #0]
 8006950:	6863      	ldr	r3, [r4, #4]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	e7ad      	b.n	80068b2 <_malloc_r+0x3a>
 8006956:	001a      	movs	r2, r3
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	42a3      	cmp	r3, r4
 800695c:	d1fb      	bne.n	8006956 <_malloc_r+0xde>
 800695e:	2300      	movs	r3, #0
 8006960:	e7da      	b.n	8006918 <_malloc_r+0xa0>
 8006962:	230c      	movs	r3, #12
 8006964:	0028      	movs	r0, r5
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f000 f80e 	bl	8006988 <__malloc_unlock>
 800696c:	e7c6      	b.n	80068fc <_malloc_r+0x84>
 800696e:	6007      	str	r7, [r0, #0]
 8006970:	e7da      	b.n	8006928 <_malloc_r+0xb0>
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	200004bc 	.word	0x200004bc

08006978 <__malloc_lock>:
 8006978:	b510      	push	{r4, lr}
 800697a:	4802      	ldr	r0, [pc, #8]	@ (8006984 <__malloc_lock+0xc>)
 800697c:	f7ff ff0e 	bl	800679c <__retarget_lock_acquire_recursive>
 8006980:	bd10      	pop	{r4, pc}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	200004b4 	.word	0x200004b4

08006988 <__malloc_unlock>:
 8006988:	b510      	push	{r4, lr}
 800698a:	4802      	ldr	r0, [pc, #8]	@ (8006994 <__malloc_unlock+0xc>)
 800698c:	f7ff ff07 	bl	800679e <__retarget_lock_release_recursive>
 8006990:	bd10      	pop	{r4, pc}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	200004b4 	.word	0x200004b4

08006998 <__ssputs_r>:
 8006998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699a:	688e      	ldr	r6, [r1, #8]
 800699c:	b085      	sub	sp, #20
 800699e:	001f      	movs	r7, r3
 80069a0:	000c      	movs	r4, r1
 80069a2:	680b      	ldr	r3, [r1, #0]
 80069a4:	9002      	str	r0, [sp, #8]
 80069a6:	9203      	str	r2, [sp, #12]
 80069a8:	42be      	cmp	r6, r7
 80069aa:	d830      	bhi.n	8006a0e <__ssputs_r+0x76>
 80069ac:	210c      	movs	r1, #12
 80069ae:	5e62      	ldrsh	r2, [r4, r1]
 80069b0:	2190      	movs	r1, #144	@ 0x90
 80069b2:	00c9      	lsls	r1, r1, #3
 80069b4:	420a      	tst	r2, r1
 80069b6:	d028      	beq.n	8006a0a <__ssputs_r+0x72>
 80069b8:	2003      	movs	r0, #3
 80069ba:	6921      	ldr	r1, [r4, #16]
 80069bc:	1a5b      	subs	r3, r3, r1
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	6963      	ldr	r3, [r4, #20]
 80069c2:	4343      	muls	r3, r0
 80069c4:	9801      	ldr	r0, [sp, #4]
 80069c6:	0fdd      	lsrs	r5, r3, #31
 80069c8:	18ed      	adds	r5, r5, r3
 80069ca:	1c7b      	adds	r3, r7, #1
 80069cc:	181b      	adds	r3, r3, r0
 80069ce:	106d      	asrs	r5, r5, #1
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	d900      	bls.n	80069d6 <__ssputs_r+0x3e>
 80069d4:	001d      	movs	r5, r3
 80069d6:	0552      	lsls	r2, r2, #21
 80069d8:	d528      	bpl.n	8006a2c <__ssputs_r+0x94>
 80069da:	0029      	movs	r1, r5
 80069dc:	9802      	ldr	r0, [sp, #8]
 80069de:	f7ff ff4b 	bl	8006878 <_malloc_r>
 80069e2:	1e06      	subs	r6, r0, #0
 80069e4:	d02c      	beq.n	8006a40 <__ssputs_r+0xa8>
 80069e6:	9a01      	ldr	r2, [sp, #4]
 80069e8:	6921      	ldr	r1, [r4, #16]
 80069ea:	f000 fae2 	bl	8006fb2 <memcpy>
 80069ee:	89a2      	ldrh	r2, [r4, #12]
 80069f0:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <__ssputs_r+0xbc>)
 80069f2:	401a      	ands	r2, r3
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	4313      	orrs	r3, r2
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	9b01      	ldr	r3, [sp, #4]
 80069fc:	6126      	str	r6, [r4, #16]
 80069fe:	18f6      	adds	r6, r6, r3
 8006a00:	6026      	str	r6, [r4, #0]
 8006a02:	003e      	movs	r6, r7
 8006a04:	6165      	str	r5, [r4, #20]
 8006a06:	1aed      	subs	r5, r5, r3
 8006a08:	60a5      	str	r5, [r4, #8]
 8006a0a:	42be      	cmp	r6, r7
 8006a0c:	d900      	bls.n	8006a10 <__ssputs_r+0x78>
 8006a0e:	003e      	movs	r6, r7
 8006a10:	0032      	movs	r2, r6
 8006a12:	9903      	ldr	r1, [sp, #12]
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	f000 fa9b 	bl	8006f50 <memmove>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	68a3      	ldr	r3, [r4, #8]
 8006a1e:	1b9b      	subs	r3, r3, r6
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	199b      	adds	r3, r3, r6
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	b005      	add	sp, #20
 8006a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2c:	002a      	movs	r2, r5
 8006a2e:	9802      	ldr	r0, [sp, #8]
 8006a30:	f000 fac8 	bl	8006fc4 <_realloc_r>
 8006a34:	1e06      	subs	r6, r0, #0
 8006a36:	d1e0      	bne.n	80069fa <__ssputs_r+0x62>
 8006a38:	6921      	ldr	r1, [r4, #16]
 8006a3a:	9802      	ldr	r0, [sp, #8]
 8006a3c:	f7ff feb0 	bl	80067a0 <_free_r>
 8006a40:	230c      	movs	r3, #12
 8006a42:	2001      	movs	r0, #1
 8006a44:	9a02      	ldr	r2, [sp, #8]
 8006a46:	4240      	negs	r0, r0
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	89a2      	ldrh	r2, [r4, #12]
 8006a4c:	3334      	adds	r3, #52	@ 0x34
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	81a3      	strh	r3, [r4, #12]
 8006a52:	e7e9      	b.n	8006a28 <__ssputs_r+0x90>
 8006a54:	fffffb7f 	.word	0xfffffb7f

08006a58 <_svfiprintf_r>:
 8006a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5a:	b0a1      	sub	sp, #132	@ 0x84
 8006a5c:	9003      	str	r0, [sp, #12]
 8006a5e:	001d      	movs	r5, r3
 8006a60:	898b      	ldrh	r3, [r1, #12]
 8006a62:	000f      	movs	r7, r1
 8006a64:	0016      	movs	r6, r2
 8006a66:	061b      	lsls	r3, r3, #24
 8006a68:	d511      	bpl.n	8006a8e <_svfiprintf_r+0x36>
 8006a6a:	690b      	ldr	r3, [r1, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10e      	bne.n	8006a8e <_svfiprintf_r+0x36>
 8006a70:	2140      	movs	r1, #64	@ 0x40
 8006a72:	f7ff ff01 	bl	8006878 <_malloc_r>
 8006a76:	6038      	str	r0, [r7, #0]
 8006a78:	6138      	str	r0, [r7, #16]
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d105      	bne.n	8006a8a <_svfiprintf_r+0x32>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	9a03      	ldr	r2, [sp, #12]
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	2001      	movs	r0, #1
 8006a86:	4240      	negs	r0, r0
 8006a88:	e0cf      	b.n	8006c2a <_svfiprintf_r+0x1d2>
 8006a8a:	2340      	movs	r3, #64	@ 0x40
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	ac08      	add	r4, sp, #32
 8006a92:	6163      	str	r3, [r4, #20]
 8006a94:	3320      	adds	r3, #32
 8006a96:	7663      	strb	r3, [r4, #25]
 8006a98:	3310      	adds	r3, #16
 8006a9a:	76a3      	strb	r3, [r4, #26]
 8006a9c:	9507      	str	r5, [sp, #28]
 8006a9e:	0035      	movs	r5, r6
 8006aa0:	782b      	ldrb	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <_svfiprintf_r+0x52>
 8006aa6:	2b25      	cmp	r3, #37	@ 0x25
 8006aa8:	d148      	bne.n	8006b3c <_svfiprintf_r+0xe4>
 8006aaa:	1bab      	subs	r3, r5, r6
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	42b5      	cmp	r5, r6
 8006ab0:	d00b      	beq.n	8006aca <_svfiprintf_r+0x72>
 8006ab2:	0032      	movs	r2, r6
 8006ab4:	0039      	movs	r1, r7
 8006ab6:	9803      	ldr	r0, [sp, #12]
 8006ab8:	f7ff ff6e 	bl	8006998 <__ssputs_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d100      	bne.n	8006ac2 <_svfiprintf_r+0x6a>
 8006ac0:	e0ae      	b.n	8006c20 <_svfiprintf_r+0x1c8>
 8006ac2:	6963      	ldr	r3, [r4, #20]
 8006ac4:	9a05      	ldr	r2, [sp, #20]
 8006ac6:	189b      	adds	r3, r3, r2
 8006ac8:	6163      	str	r3, [r4, #20]
 8006aca:	782b      	ldrb	r3, [r5, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d100      	bne.n	8006ad2 <_svfiprintf_r+0x7a>
 8006ad0:	e0a6      	b.n	8006c20 <_svfiprintf_r+0x1c8>
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4252      	negs	r2, r2
 8006ad8:	6062      	str	r2, [r4, #4]
 8006ada:	a904      	add	r1, sp, #16
 8006adc:	3254      	adds	r2, #84	@ 0x54
 8006ade:	1852      	adds	r2, r2, r1
 8006ae0:	1c6e      	adds	r6, r5, #1
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	60e3      	str	r3, [r4, #12]
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006aec:	4b54      	ldr	r3, [pc, #336]	@ (8006c40 <_svfiprintf_r+0x1e8>)
 8006aee:	2205      	movs	r2, #5
 8006af0:	0018      	movs	r0, r3
 8006af2:	7831      	ldrb	r1, [r6, #0]
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	f000 fa51 	bl	8006f9c <memchr>
 8006afa:	1c75      	adds	r5, r6, #1
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d11f      	bne.n	8006b40 <_svfiprintf_r+0xe8>
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	06d3      	lsls	r3, r2, #27
 8006b04:	d504      	bpl.n	8006b10 <_svfiprintf_r+0xb8>
 8006b06:	2353      	movs	r3, #83	@ 0x53
 8006b08:	a904      	add	r1, sp, #16
 8006b0a:	185b      	adds	r3, r3, r1
 8006b0c:	2120      	movs	r1, #32
 8006b0e:	7019      	strb	r1, [r3, #0]
 8006b10:	0713      	lsls	r3, r2, #28
 8006b12:	d504      	bpl.n	8006b1e <_svfiprintf_r+0xc6>
 8006b14:	2353      	movs	r3, #83	@ 0x53
 8006b16:	a904      	add	r1, sp, #16
 8006b18:	185b      	adds	r3, r3, r1
 8006b1a:	212b      	movs	r1, #43	@ 0x2b
 8006b1c:	7019      	strb	r1, [r3, #0]
 8006b1e:	7833      	ldrb	r3, [r6, #0]
 8006b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b22:	d016      	beq.n	8006b52 <_svfiprintf_r+0xfa>
 8006b24:	0035      	movs	r5, r6
 8006b26:	2100      	movs	r1, #0
 8006b28:	200a      	movs	r0, #10
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	782a      	ldrb	r2, [r5, #0]
 8006b2e:	1c6e      	adds	r6, r5, #1
 8006b30:	3a30      	subs	r2, #48	@ 0x30
 8006b32:	2a09      	cmp	r2, #9
 8006b34:	d950      	bls.n	8006bd8 <_svfiprintf_r+0x180>
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d111      	bne.n	8006b5e <_svfiprintf_r+0x106>
 8006b3a:	e017      	b.n	8006b6c <_svfiprintf_r+0x114>
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	e7af      	b.n	8006aa0 <_svfiprintf_r+0x48>
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	1ac0      	subs	r0, r0, r3
 8006b46:	2301      	movs	r3, #1
 8006b48:	4083      	lsls	r3, r0
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	002e      	movs	r6, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	e7cc      	b.n	8006aec <_svfiprintf_r+0x94>
 8006b52:	9b07      	ldr	r3, [sp, #28]
 8006b54:	1d19      	adds	r1, r3, #4
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	9107      	str	r1, [sp, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	db01      	blt.n	8006b62 <_svfiprintf_r+0x10a>
 8006b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b60:	e004      	b.n	8006b6c <_svfiprintf_r+0x114>
 8006b62:	425b      	negs	r3, r3
 8006b64:	60e3      	str	r3, [r4, #12]
 8006b66:	2302      	movs	r3, #2
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	782b      	ldrb	r3, [r5, #0]
 8006b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b70:	d10c      	bne.n	8006b8c <_svfiprintf_r+0x134>
 8006b72:	786b      	ldrb	r3, [r5, #1]
 8006b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b76:	d134      	bne.n	8006be2 <_svfiprintf_r+0x18a>
 8006b78:	9b07      	ldr	r3, [sp, #28]
 8006b7a:	3502      	adds	r5, #2
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	9207      	str	r2, [sp, #28]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da01      	bge.n	8006b8a <_svfiprintf_r+0x132>
 8006b86:	2301      	movs	r3, #1
 8006b88:	425b      	negs	r3, r3
 8006b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b8c:	4e2d      	ldr	r6, [pc, #180]	@ (8006c44 <_svfiprintf_r+0x1ec>)
 8006b8e:	2203      	movs	r2, #3
 8006b90:	0030      	movs	r0, r6
 8006b92:	7829      	ldrb	r1, [r5, #0]
 8006b94:	f000 fa02 	bl	8006f9c <memchr>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d006      	beq.n	8006baa <_svfiprintf_r+0x152>
 8006b9c:	2340      	movs	r3, #64	@ 0x40
 8006b9e:	1b80      	subs	r0, r0, r6
 8006ba0:	4083      	lsls	r3, r0
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	7829      	ldrb	r1, [r5, #0]
 8006bac:	2206      	movs	r2, #6
 8006bae:	4826      	ldr	r0, [pc, #152]	@ (8006c48 <_svfiprintf_r+0x1f0>)
 8006bb0:	1c6e      	adds	r6, r5, #1
 8006bb2:	7621      	strb	r1, [r4, #24]
 8006bb4:	f000 f9f2 	bl	8006f9c <memchr>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d038      	beq.n	8006c2e <_svfiprintf_r+0x1d6>
 8006bbc:	4b23      	ldr	r3, [pc, #140]	@ (8006c4c <_svfiprintf_r+0x1f4>)
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d122      	bne.n	8006c08 <_svfiprintf_r+0x1b0>
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	3307      	adds	r3, #7
 8006bc8:	4393      	bics	r3, r2
 8006bca:	3308      	adds	r3, #8
 8006bcc:	9307      	str	r3, [sp, #28]
 8006bce:	6963      	ldr	r3, [r4, #20]
 8006bd0:	9a04      	ldr	r2, [sp, #16]
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	6163      	str	r3, [r4, #20]
 8006bd6:	e762      	b.n	8006a9e <_svfiprintf_r+0x46>
 8006bd8:	4343      	muls	r3, r0
 8006bda:	0035      	movs	r5, r6
 8006bdc:	2101      	movs	r1, #1
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	e7a4      	b.n	8006b2c <_svfiprintf_r+0xd4>
 8006be2:	2300      	movs	r3, #0
 8006be4:	200a      	movs	r0, #10
 8006be6:	0019      	movs	r1, r3
 8006be8:	3501      	adds	r5, #1
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	782a      	ldrb	r2, [r5, #0]
 8006bee:	1c6e      	adds	r6, r5, #1
 8006bf0:	3a30      	subs	r2, #48	@ 0x30
 8006bf2:	2a09      	cmp	r2, #9
 8006bf4:	d903      	bls.n	8006bfe <_svfiprintf_r+0x1a6>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0c8      	beq.n	8006b8c <_svfiprintf_r+0x134>
 8006bfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bfc:	e7c6      	b.n	8006b8c <_svfiprintf_r+0x134>
 8006bfe:	4341      	muls	r1, r0
 8006c00:	0035      	movs	r5, r6
 8006c02:	2301      	movs	r3, #1
 8006c04:	1889      	adds	r1, r1, r2
 8006c06:	e7f1      	b.n	8006bec <_svfiprintf_r+0x194>
 8006c08:	aa07      	add	r2, sp, #28
 8006c0a:	9200      	str	r2, [sp, #0]
 8006c0c:	0021      	movs	r1, r4
 8006c0e:	003a      	movs	r2, r7
 8006c10:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <_svfiprintf_r+0x1f8>)
 8006c12:	9803      	ldr	r0, [sp, #12]
 8006c14:	e000      	b.n	8006c18 <_svfiprintf_r+0x1c0>
 8006c16:	bf00      	nop
 8006c18:	9004      	str	r0, [sp, #16]
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	d1d6      	bne.n	8006bce <_svfiprintf_r+0x176>
 8006c20:	89bb      	ldrh	r3, [r7, #12]
 8006c22:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c24:	065b      	lsls	r3, r3, #25
 8006c26:	d500      	bpl.n	8006c2a <_svfiprintf_r+0x1d2>
 8006c28:	e72c      	b.n	8006a84 <_svfiprintf_r+0x2c>
 8006c2a:	b021      	add	sp, #132	@ 0x84
 8006c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2e:	aa07      	add	r2, sp, #28
 8006c30:	9200      	str	r2, [sp, #0]
 8006c32:	0021      	movs	r1, r4
 8006c34:	003a      	movs	r2, r7
 8006c36:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <_svfiprintf_r+0x1f8>)
 8006c38:	9803      	ldr	r0, [sp, #12]
 8006c3a:	f000 f87b 	bl	8006d34 <_printf_i>
 8006c3e:	e7eb      	b.n	8006c18 <_svfiprintf_r+0x1c0>
 8006c40:	0800753c 	.word	0x0800753c
 8006c44:	08007542 	.word	0x08007542
 8006c48:	08007546 	.word	0x08007546
 8006c4c:	00000000 	.word	0x00000000
 8006c50:	08006999 	.word	0x08006999

08006c54 <_printf_common>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	0016      	movs	r6, r2
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	688a      	ldr	r2, [r1, #8]
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	000c      	movs	r4, r1
 8006c60:	9000      	str	r0, [sp, #0]
 8006c62:	4293      	cmp	r3, r2
 8006c64:	da00      	bge.n	8006c68 <_printf_common+0x14>
 8006c66:	0013      	movs	r3, r2
 8006c68:	0022      	movs	r2, r4
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	3243      	adds	r2, #67	@ 0x43
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d001      	beq.n	8006c78 <_printf_common+0x24>
 8006c74:	3301      	adds	r3, #1
 8006c76:	6033      	str	r3, [r6, #0]
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	069b      	lsls	r3, r3, #26
 8006c7c:	d502      	bpl.n	8006c84 <_printf_common+0x30>
 8006c7e:	6833      	ldr	r3, [r6, #0]
 8006c80:	3302      	adds	r3, #2
 8006c82:	6033      	str	r3, [r6, #0]
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	2306      	movs	r3, #6
 8006c88:	0015      	movs	r5, r2
 8006c8a:	401d      	ands	r5, r3
 8006c8c:	421a      	tst	r2, r3
 8006c8e:	d027      	beq.n	8006ce0 <_printf_common+0x8c>
 8006c90:	0023      	movs	r3, r4
 8006c92:	3343      	adds	r3, #67	@ 0x43
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	1e5a      	subs	r2, r3, #1
 8006c98:	4193      	sbcs	r3, r2
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	0692      	lsls	r2, r2, #26
 8006c9e:	d430      	bmi.n	8006d02 <_printf_common+0xae>
 8006ca0:	0022      	movs	r2, r4
 8006ca2:	9901      	ldr	r1, [sp, #4]
 8006ca4:	9800      	ldr	r0, [sp, #0]
 8006ca6:	9d08      	ldr	r5, [sp, #32]
 8006ca8:	3243      	adds	r2, #67	@ 0x43
 8006caa:	47a8      	blx	r5
 8006cac:	3001      	adds	r0, #1
 8006cae:	d025      	beq.n	8006cfc <_printf_common+0xa8>
 8006cb0:	2206      	movs	r2, #6
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d105      	bne.n	8006cc8 <_printf_common+0x74>
 8006cbc:	6833      	ldr	r3, [r6, #0]
 8006cbe:	68e5      	ldr	r5, [r4, #12]
 8006cc0:	1aed      	subs	r5, r5, r3
 8006cc2:	43eb      	mvns	r3, r5
 8006cc4:	17db      	asrs	r3, r3, #31
 8006cc6:	401d      	ands	r5, r3
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	6922      	ldr	r2, [r4, #16]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	dd01      	ble.n	8006cd4 <_printf_common+0x80>
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	18ed      	adds	r5, r5, r3
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42b5      	cmp	r5, r6
 8006cd8:	d120      	bne.n	8006d1c <_printf_common+0xc8>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e010      	b.n	8006d00 <_printf_common+0xac>
 8006cde:	3501      	adds	r5, #1
 8006ce0:	68e3      	ldr	r3, [r4, #12]
 8006ce2:	6832      	ldr	r2, [r6, #0]
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	42ab      	cmp	r3, r5
 8006ce8:	ddd2      	ble.n	8006c90 <_printf_common+0x3c>
 8006cea:	0022      	movs	r2, r4
 8006cec:	2301      	movs	r3, #1
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	9800      	ldr	r0, [sp, #0]
 8006cf2:	9f08      	ldr	r7, [sp, #32]
 8006cf4:	3219      	adds	r2, #25
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d1f0      	bne.n	8006cde <_printf_common+0x8a>
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	4240      	negs	r0, r0
 8006d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d02:	2030      	movs	r0, #48	@ 0x30
 8006d04:	18e1      	adds	r1, r4, r3
 8006d06:	3143      	adds	r1, #67	@ 0x43
 8006d08:	7008      	strb	r0, [r1, #0]
 8006d0a:	0021      	movs	r1, r4
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	3145      	adds	r1, #69	@ 0x45
 8006d10:	7809      	ldrb	r1, [r1, #0]
 8006d12:	18a2      	adds	r2, r4, r2
 8006d14:	3243      	adds	r2, #67	@ 0x43
 8006d16:	3302      	adds	r3, #2
 8006d18:	7011      	strb	r1, [r2, #0]
 8006d1a:	e7c1      	b.n	8006ca0 <_printf_common+0x4c>
 8006d1c:	0022      	movs	r2, r4
 8006d1e:	2301      	movs	r3, #1
 8006d20:	9901      	ldr	r1, [sp, #4]
 8006d22:	9800      	ldr	r0, [sp, #0]
 8006d24:	9f08      	ldr	r7, [sp, #32]
 8006d26:	321a      	adds	r2, #26
 8006d28:	47b8      	blx	r7
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d0e6      	beq.n	8006cfc <_printf_common+0xa8>
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7d1      	b.n	8006cd6 <_printf_common+0x82>
	...

08006d34 <_printf_i>:
 8006d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d36:	b08b      	sub	sp, #44	@ 0x2c
 8006d38:	9206      	str	r2, [sp, #24]
 8006d3a:	000a      	movs	r2, r1
 8006d3c:	3243      	adds	r2, #67	@ 0x43
 8006d3e:	9307      	str	r3, [sp, #28]
 8006d40:	9005      	str	r0, [sp, #20]
 8006d42:	9203      	str	r2, [sp, #12]
 8006d44:	7e0a      	ldrb	r2, [r1, #24]
 8006d46:	000c      	movs	r4, r1
 8006d48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d4a:	2a78      	cmp	r2, #120	@ 0x78
 8006d4c:	d809      	bhi.n	8006d62 <_printf_i+0x2e>
 8006d4e:	2a62      	cmp	r2, #98	@ 0x62
 8006d50:	d80b      	bhi.n	8006d6a <_printf_i+0x36>
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	d100      	bne.n	8006d58 <_printf_i+0x24>
 8006d56:	e0bc      	b.n	8006ed2 <_printf_i+0x19e>
 8006d58:	497b      	ldr	r1, [pc, #492]	@ (8006f48 <_printf_i+0x214>)
 8006d5a:	9104      	str	r1, [sp, #16]
 8006d5c:	2a58      	cmp	r2, #88	@ 0x58
 8006d5e:	d100      	bne.n	8006d62 <_printf_i+0x2e>
 8006d60:	e090      	b.n	8006e84 <_printf_i+0x150>
 8006d62:	0025      	movs	r5, r4
 8006d64:	3542      	adds	r5, #66	@ 0x42
 8006d66:	702a      	strb	r2, [r5, #0]
 8006d68:	e022      	b.n	8006db0 <_printf_i+0x7c>
 8006d6a:	0010      	movs	r0, r2
 8006d6c:	3863      	subs	r0, #99	@ 0x63
 8006d6e:	2815      	cmp	r0, #21
 8006d70:	d8f7      	bhi.n	8006d62 <_printf_i+0x2e>
 8006d72:	f7f9 f9c5 	bl	8000100 <__gnu_thumb1_case_shi>
 8006d76:	0016      	.short	0x0016
 8006d78:	fff6001f 	.word	0xfff6001f
 8006d7c:	fff6fff6 	.word	0xfff6fff6
 8006d80:	001ffff6 	.word	0x001ffff6
 8006d84:	fff6fff6 	.word	0xfff6fff6
 8006d88:	fff6fff6 	.word	0xfff6fff6
 8006d8c:	003600a1 	.word	0x003600a1
 8006d90:	fff60080 	.word	0xfff60080
 8006d94:	00b2fff6 	.word	0x00b2fff6
 8006d98:	0036fff6 	.word	0x0036fff6
 8006d9c:	fff6fff6 	.word	0xfff6fff6
 8006da0:	0084      	.short	0x0084
 8006da2:	0025      	movs	r5, r4
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	3542      	adds	r5, #66	@ 0x42
 8006da8:	1d11      	adds	r1, r2, #4
 8006daa:	6019      	str	r1, [r3, #0]
 8006dac:	6813      	ldr	r3, [r2, #0]
 8006dae:	702b      	strb	r3, [r5, #0]
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0a0      	b.n	8006ef6 <_printf_i+0x1c2>
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	6809      	ldr	r1, [r1, #0]
 8006db8:	1d02      	adds	r2, r0, #4
 8006dba:	060d      	lsls	r5, r1, #24
 8006dbc:	d50b      	bpl.n	8006dd6 <_printf_i+0xa2>
 8006dbe:	6806      	ldr	r6, [r0, #0]
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	2e00      	cmp	r6, #0
 8006dc4:	da03      	bge.n	8006dce <_printf_i+0x9a>
 8006dc6:	232d      	movs	r3, #45	@ 0x2d
 8006dc8:	9a03      	ldr	r2, [sp, #12]
 8006dca:	4276      	negs	r6, r6
 8006dcc:	7013      	strb	r3, [r2, #0]
 8006dce:	4b5e      	ldr	r3, [pc, #376]	@ (8006f48 <_printf_i+0x214>)
 8006dd0:	270a      	movs	r7, #10
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	e018      	b.n	8006e08 <_printf_i+0xd4>
 8006dd6:	6806      	ldr	r6, [r0, #0]
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	0649      	lsls	r1, r1, #25
 8006ddc:	d5f1      	bpl.n	8006dc2 <_printf_i+0x8e>
 8006dde:	b236      	sxth	r6, r6
 8006de0:	e7ef      	b.n	8006dc2 <_printf_i+0x8e>
 8006de2:	6808      	ldr	r0, [r1, #0]
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	c940      	ldmia	r1!, {r6}
 8006de8:	0605      	lsls	r5, r0, #24
 8006dea:	d402      	bmi.n	8006df2 <_printf_i+0xbe>
 8006dec:	0640      	lsls	r0, r0, #25
 8006dee:	d500      	bpl.n	8006df2 <_printf_i+0xbe>
 8006df0:	b2b6      	uxth	r6, r6
 8006df2:	6019      	str	r1, [r3, #0]
 8006df4:	4b54      	ldr	r3, [pc, #336]	@ (8006f48 <_printf_i+0x214>)
 8006df6:	270a      	movs	r7, #10
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	2a6f      	cmp	r2, #111	@ 0x6f
 8006dfc:	d100      	bne.n	8006e00 <_printf_i+0xcc>
 8006dfe:	3f02      	subs	r7, #2
 8006e00:	0023      	movs	r3, r4
 8006e02:	2200      	movs	r2, #0
 8006e04:	3343      	adds	r3, #67	@ 0x43
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	60a3      	str	r3, [r4, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	db03      	blt.n	8006e18 <_printf_i+0xe4>
 8006e10:	2104      	movs	r1, #4
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	438a      	bics	r2, r1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	2e00      	cmp	r6, #0
 8006e1a:	d102      	bne.n	8006e22 <_printf_i+0xee>
 8006e1c:	9d03      	ldr	r5, [sp, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <_printf_i+0x108>
 8006e22:	9d03      	ldr	r5, [sp, #12]
 8006e24:	0030      	movs	r0, r6
 8006e26:	0039      	movs	r1, r7
 8006e28:	f7f9 f9fa 	bl	8000220 <__aeabi_uidivmod>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	3d01      	subs	r5, #1
 8006e30:	5c5b      	ldrb	r3, [r3, r1]
 8006e32:	702b      	strb	r3, [r5, #0]
 8006e34:	0033      	movs	r3, r6
 8006e36:	0006      	movs	r6, r0
 8006e38:	429f      	cmp	r7, r3
 8006e3a:	d9f3      	bls.n	8006e24 <_printf_i+0xf0>
 8006e3c:	2f08      	cmp	r7, #8
 8006e3e:	d109      	bne.n	8006e54 <_printf_i+0x120>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	07db      	lsls	r3, r3, #31
 8006e44:	d506      	bpl.n	8006e54 <_printf_i+0x120>
 8006e46:	6862      	ldr	r2, [r4, #4]
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	dc02      	bgt.n	8006e54 <_printf_i+0x120>
 8006e4e:	2330      	movs	r3, #48	@ 0x30
 8006e50:	3d01      	subs	r5, #1
 8006e52:	702b      	strb	r3, [r5, #0]
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	1b5b      	subs	r3, r3, r5
 8006e58:	6123      	str	r3, [r4, #16]
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	0021      	movs	r1, r4
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	9805      	ldr	r0, [sp, #20]
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	aa09      	add	r2, sp, #36	@ 0x24
 8006e66:	f7ff fef5 	bl	8006c54 <_printf_common>
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d148      	bne.n	8006f00 <_printf_i+0x1cc>
 8006e6e:	2001      	movs	r0, #1
 8006e70:	4240      	negs	r0, r0
 8006e72:	b00b      	add	sp, #44	@ 0x2c
 8006e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e76:	2220      	movs	r2, #32
 8006e78:	6809      	ldr	r1, [r1, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	6022      	str	r2, [r4, #0]
 8006e7e:	2278      	movs	r2, #120	@ 0x78
 8006e80:	4932      	ldr	r1, [pc, #200]	@ (8006f4c <_printf_i+0x218>)
 8006e82:	9104      	str	r1, [sp, #16]
 8006e84:	0021      	movs	r1, r4
 8006e86:	3145      	adds	r1, #69	@ 0x45
 8006e88:	700a      	strb	r2, [r1, #0]
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	c940      	ldmia	r1!, {r6}
 8006e90:	0610      	lsls	r0, r2, #24
 8006e92:	d402      	bmi.n	8006e9a <_printf_i+0x166>
 8006e94:	0650      	lsls	r0, r2, #25
 8006e96:	d500      	bpl.n	8006e9a <_printf_i+0x166>
 8006e98:	b2b6      	uxth	r6, r6
 8006e9a:	6019      	str	r1, [r3, #0]
 8006e9c:	07d3      	lsls	r3, r2, #31
 8006e9e:	d502      	bpl.n	8006ea6 <_printf_i+0x172>
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	d001      	beq.n	8006eae <_printf_i+0x17a>
 8006eaa:	2710      	movs	r7, #16
 8006eac:	e7a8      	b.n	8006e00 <_printf_i+0xcc>
 8006eae:	2220      	movs	r2, #32
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	4393      	bics	r3, r2
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	e7f8      	b.n	8006eaa <_printf_i+0x176>
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	680d      	ldr	r5, [r1, #0]
 8006ebc:	1d10      	adds	r0, r2, #4
 8006ebe:	6949      	ldr	r1, [r1, #20]
 8006ec0:	6018      	str	r0, [r3, #0]
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	062e      	lsls	r6, r5, #24
 8006ec6:	d501      	bpl.n	8006ecc <_printf_i+0x198>
 8006ec8:	6019      	str	r1, [r3, #0]
 8006eca:	e002      	b.n	8006ed2 <_printf_i+0x19e>
 8006ecc:	066d      	lsls	r5, r5, #25
 8006ece:	d5fb      	bpl.n	8006ec8 <_printf_i+0x194>
 8006ed0:	8019      	strh	r1, [r3, #0]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9d03      	ldr	r5, [sp, #12]
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	e7bf      	b.n	8006e5a <_printf_i+0x126>
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	1d11      	adds	r1, r2, #4
 8006ede:	6019      	str	r1, [r3, #0]
 8006ee0:	6815      	ldr	r5, [r2, #0]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	0028      	movs	r0, r5
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	f000 f858 	bl	8006f9c <memchr>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d001      	beq.n	8006ef4 <_printf_i+0x1c0>
 8006ef0:	1b40      	subs	r0, r0, r5
 8006ef2:	6060      	str	r0, [r4, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9a03      	ldr	r2, [sp, #12]
 8006efc:	7013      	strb	r3, [r2, #0]
 8006efe:	e7ac      	b.n	8006e5a <_printf_i+0x126>
 8006f00:	002a      	movs	r2, r5
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	9906      	ldr	r1, [sp, #24]
 8006f06:	9805      	ldr	r0, [sp, #20]
 8006f08:	9d07      	ldr	r5, [sp, #28]
 8006f0a:	47a8      	blx	r5
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d0ae      	beq.n	8006e6e <_printf_i+0x13a>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	079b      	lsls	r3, r3, #30
 8006f14:	d415      	bmi.n	8006f42 <_printf_i+0x20e>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	68e0      	ldr	r0, [r4, #12]
 8006f1a:	4298      	cmp	r0, r3
 8006f1c:	daa9      	bge.n	8006e72 <_printf_i+0x13e>
 8006f1e:	0018      	movs	r0, r3
 8006f20:	e7a7      	b.n	8006e72 <_printf_i+0x13e>
 8006f22:	0022      	movs	r2, r4
 8006f24:	2301      	movs	r3, #1
 8006f26:	9906      	ldr	r1, [sp, #24]
 8006f28:	9805      	ldr	r0, [sp, #20]
 8006f2a:	9e07      	ldr	r6, [sp, #28]
 8006f2c:	3219      	adds	r2, #25
 8006f2e:	47b0      	blx	r6
 8006f30:	3001      	adds	r0, #1
 8006f32:	d09c      	beq.n	8006e6e <_printf_i+0x13a>
 8006f34:	3501      	adds	r5, #1
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dcf0      	bgt.n	8006f22 <_printf_i+0x1ee>
 8006f40:	e7e9      	b.n	8006f16 <_printf_i+0x1e2>
 8006f42:	2500      	movs	r5, #0
 8006f44:	e7f7      	b.n	8006f36 <_printf_i+0x202>
 8006f46:	46c0      	nop			@ (mov r8, r8)
 8006f48:	0800754d 	.word	0x0800754d
 8006f4c:	0800755e 	.word	0x0800755e

08006f50 <memmove>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	4288      	cmp	r0, r1
 8006f54:	d806      	bhi.n	8006f64 <memmove+0x14>
 8006f56:	2300      	movs	r3, #0
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d008      	beq.n	8006f6e <memmove+0x1e>
 8006f5c:	5ccc      	ldrb	r4, [r1, r3]
 8006f5e:	54c4      	strb	r4, [r0, r3]
 8006f60:	3301      	adds	r3, #1
 8006f62:	e7f9      	b.n	8006f58 <memmove+0x8>
 8006f64:	188b      	adds	r3, r1, r2
 8006f66:	4298      	cmp	r0, r3
 8006f68:	d2f5      	bcs.n	8006f56 <memmove+0x6>
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	d200      	bcs.n	8006f70 <memmove+0x20>
 8006f6e:	bd10      	pop	{r4, pc}
 8006f70:	5c8b      	ldrb	r3, [r1, r2]
 8006f72:	5483      	strb	r3, [r0, r2]
 8006f74:	e7f9      	b.n	8006f6a <memmove+0x1a>
	...

08006f78 <_sbrk_r>:
 8006f78:	2300      	movs	r3, #0
 8006f7a:	b570      	push	{r4, r5, r6, lr}
 8006f7c:	4d06      	ldr	r5, [pc, #24]	@ (8006f98 <_sbrk_r+0x20>)
 8006f7e:	0004      	movs	r4, r0
 8006f80:	0008      	movs	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb ffa2 	bl	8002ecc <_sbrk>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d103      	bne.n	8006f94 <_sbrk_r+0x1c>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d000      	beq.n	8006f94 <_sbrk_r+0x1c>
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	200004b0 	.word	0x200004b0

08006f9c <memchr>:
 8006f9c:	b2c9      	uxtb	r1, r1
 8006f9e:	1882      	adds	r2, r0, r2
 8006fa0:	4290      	cmp	r0, r2
 8006fa2:	d101      	bne.n	8006fa8 <memchr+0xc>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4770      	bx	lr
 8006fa8:	7803      	ldrb	r3, [r0, #0]
 8006faa:	428b      	cmp	r3, r1
 8006fac:	d0fb      	beq.n	8006fa6 <memchr+0xa>
 8006fae:	3001      	adds	r0, #1
 8006fb0:	e7f6      	b.n	8006fa0 <memchr+0x4>

08006fb2 <memcpy>:
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d100      	bne.n	8006fbc <memcpy+0xa>
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	5ccc      	ldrb	r4, [r1, r3]
 8006fbe:	54c4      	strb	r4, [r0, r3]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	e7f8      	b.n	8006fb6 <memcpy+0x4>

08006fc4 <_realloc_r>:
 8006fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc6:	0006      	movs	r6, r0
 8006fc8:	000c      	movs	r4, r1
 8006fca:	0015      	movs	r5, r2
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d105      	bne.n	8006fdc <_realloc_r+0x18>
 8006fd0:	0011      	movs	r1, r2
 8006fd2:	f7ff fc51 	bl	8006878 <_malloc_r>
 8006fd6:	0004      	movs	r4, r0
 8006fd8:	0020      	movs	r0, r4
 8006fda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d103      	bne.n	8006fe8 <_realloc_r+0x24>
 8006fe0:	f7ff fbde 	bl	80067a0 <_free_r>
 8006fe4:	2400      	movs	r4, #0
 8006fe6:	e7f7      	b.n	8006fd8 <_realloc_r+0x14>
 8006fe8:	f000 f81b 	bl	8007022 <_malloc_usable_size_r>
 8006fec:	0007      	movs	r7, r0
 8006fee:	4285      	cmp	r5, r0
 8006ff0:	d802      	bhi.n	8006ff8 <_realloc_r+0x34>
 8006ff2:	0843      	lsrs	r3, r0, #1
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	d3ef      	bcc.n	8006fd8 <_realloc_r+0x14>
 8006ff8:	0029      	movs	r1, r5
 8006ffa:	0030      	movs	r0, r6
 8006ffc:	f7ff fc3c 	bl	8006878 <_malloc_r>
 8007000:	9001      	str	r0, [sp, #4]
 8007002:	2800      	cmp	r0, #0
 8007004:	d0ee      	beq.n	8006fe4 <_realloc_r+0x20>
 8007006:	002a      	movs	r2, r5
 8007008:	42bd      	cmp	r5, r7
 800700a:	d900      	bls.n	800700e <_realloc_r+0x4a>
 800700c:	003a      	movs	r2, r7
 800700e:	0021      	movs	r1, r4
 8007010:	9801      	ldr	r0, [sp, #4]
 8007012:	f7ff ffce 	bl	8006fb2 <memcpy>
 8007016:	0021      	movs	r1, r4
 8007018:	0030      	movs	r0, r6
 800701a:	f7ff fbc1 	bl	80067a0 <_free_r>
 800701e:	9c01      	ldr	r4, [sp, #4]
 8007020:	e7da      	b.n	8006fd8 <_realloc_r+0x14>

08007022 <_malloc_usable_size_r>:
 8007022:	1f0b      	subs	r3, r1, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	1f18      	subs	r0, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	da01      	bge.n	8007030 <_malloc_usable_size_r+0xe>
 800702c:	580b      	ldr	r3, [r1, r0]
 800702e:	18c0      	adds	r0, r0, r3
 8007030:	4770      	bx	lr
	...

08007034 <log>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	0004      	movs	r4, r0
 8007038:	000d      	movs	r5, r1
 800703a:	f000 f837 	bl	80070ac <__ieee754_log>
 800703e:	0022      	movs	r2, r4
 8007040:	0006      	movs	r6, r0
 8007042:	000f      	movs	r7, r1
 8007044:	002b      	movs	r3, r5
 8007046:	0020      	movs	r0, r4
 8007048:	0029      	movs	r1, r5
 800704a:	f7fb f841 	bl	80020d0 <__aeabi_dcmpun>
 800704e:	2800      	cmp	r0, #0
 8007050:	d115      	bne.n	800707e <log+0x4a>
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
 8007056:	0020      	movs	r0, r4
 8007058:	0029      	movs	r1, r5
 800705a:	f7f9 f9fb 	bl	8000454 <__aeabi_dcmpgt>
 800705e:	2800      	cmp	r0, #0
 8007060:	d10d      	bne.n	800707e <log+0x4a>
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	0020      	movs	r0, r4
 8007068:	0029      	movs	r1, r5
 800706a:	f7f9 f9d9 	bl	8000420 <__aeabi_dcmpeq>
 800706e:	2800      	cmp	r0, #0
 8007070:	d008      	beq.n	8007084 <log+0x50>
 8007072:	f7ff fb69 	bl	8006748 <__errno>
 8007076:	2322      	movs	r3, #34	@ 0x22
 8007078:	2600      	movs	r6, #0
 800707a:	4f07      	ldr	r7, [pc, #28]	@ (8007098 <log+0x64>)
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	0030      	movs	r0, r6
 8007080:	0039      	movs	r1, r7
 8007082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007084:	f7ff fb60 	bl	8006748 <__errno>
 8007088:	2321      	movs	r3, #33	@ 0x21
 800708a:	6003      	str	r3, [r0, #0]
 800708c:	4803      	ldr	r0, [pc, #12]	@ (800709c <log+0x68>)
 800708e:	f000 f807 	bl	80070a0 <nan>
 8007092:	0006      	movs	r6, r0
 8007094:	000f      	movs	r7, r1
 8007096:	e7f2      	b.n	800707e <log+0x4a>
 8007098:	fff00000 	.word	0xfff00000
 800709c:	08007541 	.word	0x08007541

080070a0 <nan>:
 80070a0:	2000      	movs	r0, #0
 80070a2:	4901      	ldr	r1, [pc, #4]	@ (80070a8 <nan+0x8>)
 80070a4:	4770      	bx	lr
 80070a6:	46c0      	nop			@ (mov r8, r8)
 80070a8:	7ff80000 	.word	0x7ff80000

080070ac <__ieee754_log>:
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b0:	035b      	lsls	r3, r3, #13
 80070b2:	000e      	movs	r6, r1
 80070b4:	b08d      	sub	sp, #52	@ 0x34
 80070b6:	4299      	cmp	r1, r3
 80070b8:	da23      	bge.n	8007102 <__ieee754_log+0x56>
 80070ba:	004b      	lsls	r3, r1, #1
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	4303      	orrs	r3, r0
 80070c0:	d107      	bne.n	80070d2 <__ieee754_log+0x26>
 80070c2:	2200      	movs	r2, #0
 80070c4:	2300      	movs	r3, #0
 80070c6:	2000      	movs	r0, #0
 80070c8:	49b4      	ldr	r1, [pc, #720]	@ (800739c <__ieee754_log+0x2f0>)
 80070ca:	f7f9 fd59 	bl	8000b80 <__aeabi_ddiv>
 80070ce:	b00d      	add	sp, #52	@ 0x34
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d2:	2900      	cmp	r1, #0
 80070d4:	da06      	bge.n	80070e4 <__ieee754_log+0x38>
 80070d6:	0002      	movs	r2, r0
 80070d8:	000b      	movs	r3, r1
 80070da:	f7fa fc5d 	bl	8001998 <__aeabi_dsub>
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	e7f2      	b.n	80070ca <__ieee754_log+0x1e>
 80070e4:	4bae      	ldr	r3, [pc, #696]	@ (80073a0 <__ieee754_log+0x2f4>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	f7fa f98e 	bl	8001408 <__aeabi_dmul>
 80070ec:	2336      	movs	r3, #54	@ 0x36
 80070ee:	000e      	movs	r6, r1
 80070f0:	425b      	negs	r3, r3
 80070f2:	4aac      	ldr	r2, [pc, #688]	@ (80073a4 <__ieee754_log+0x2f8>)
 80070f4:	4296      	cmp	r6, r2
 80070f6:	dd06      	ble.n	8007106 <__ieee754_log+0x5a>
 80070f8:	0002      	movs	r2, r0
 80070fa:	000b      	movs	r3, r1
 80070fc:	f7f9 f9dc 	bl	80004b8 <__aeabi_dadd>
 8007100:	e7e5      	b.n	80070ce <__ieee754_log+0x22>
 8007102:	2300      	movs	r3, #0
 8007104:	e7f5      	b.n	80070f2 <__ieee754_log+0x46>
 8007106:	4ca8      	ldr	r4, [pc, #672]	@ (80073a8 <__ieee754_log+0x2fc>)
 8007108:	1532      	asrs	r2, r6, #20
 800710a:	1912      	adds	r2, r2, r4
 800710c:	0336      	lsls	r6, r6, #12
 800710e:	4ca7      	ldr	r4, [pc, #668]	@ (80073ac <__ieee754_log+0x300>)
 8007110:	18d2      	adds	r2, r2, r3
 8007112:	0b33      	lsrs	r3, r6, #12
 8007114:	9302      	str	r3, [sp, #8]
 8007116:	191b      	adds	r3, r3, r4
 8007118:	2480      	movs	r4, #128	@ 0x80
 800711a:	0364      	lsls	r4, r4, #13
 800711c:	4023      	ands	r3, r4
 800711e:	4ca4      	ldr	r4, [pc, #656]	@ (80073b0 <__ieee754_log+0x304>)
 8007120:	9d02      	ldr	r5, [sp, #8]
 8007122:	405c      	eors	r4, r3
 8007124:	151b      	asrs	r3, r3, #20
 8007126:	189b      	adds	r3, r3, r2
 8007128:	4325      	orrs	r5, r4
 800712a:	2200      	movs	r2, #0
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	0029      	movs	r1, r5
 8007130:	4b9f      	ldr	r3, [pc, #636]	@ (80073b0 <__ieee754_log+0x304>)
 8007132:	f7fa fc31 	bl	8001998 <__aeabi_dsub>
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	0006      	movs	r6, r0
 800713a:	3302      	adds	r3, #2
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	000f      	movs	r7, r1
 8007140:	2200      	movs	r2, #0
 8007142:	0b1b      	lsrs	r3, r3, #12
 8007144:	2b02      	cmp	r3, #2
 8007146:	dc64      	bgt.n	8007212 <__ieee754_log+0x166>
 8007148:	2300      	movs	r3, #0
 800714a:	f7f9 f969 	bl	8000420 <__aeabi_dcmpeq>
 800714e:	2800      	cmp	r0, #0
 8007150:	d019      	beq.n	8007186 <__ieee754_log+0xda>
 8007152:	9b00      	ldr	r3, [sp, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d100      	bne.n	800715a <__ieee754_log+0xae>
 8007158:	e11c      	b.n	8007394 <__ieee754_log+0x2e8>
 800715a:	0018      	movs	r0, r3
 800715c:	f7fb f816 	bl	800218c <__aeabi_i2d>
 8007160:	4a94      	ldr	r2, [pc, #592]	@ (80073b4 <__ieee754_log+0x308>)
 8007162:	4b95      	ldr	r3, [pc, #596]	@ (80073b8 <__ieee754_log+0x30c>)
 8007164:	0004      	movs	r4, r0
 8007166:	000d      	movs	r5, r1
 8007168:	f7fa f94e 	bl	8001408 <__aeabi_dmul>
 800716c:	4a93      	ldr	r2, [pc, #588]	@ (80073bc <__ieee754_log+0x310>)
 800716e:	0006      	movs	r6, r0
 8007170:	000f      	movs	r7, r1
 8007172:	4b93      	ldr	r3, [pc, #588]	@ (80073c0 <__ieee754_log+0x314>)
 8007174:	0020      	movs	r0, r4
 8007176:	0029      	movs	r1, r5
 8007178:	f7fa f946 	bl	8001408 <__aeabi_dmul>
 800717c:	0002      	movs	r2, r0
 800717e:	000b      	movs	r3, r1
 8007180:	0030      	movs	r0, r6
 8007182:	0039      	movs	r1, r7
 8007184:	e7ba      	b.n	80070fc <__ieee754_log+0x50>
 8007186:	4a8f      	ldr	r2, [pc, #572]	@ (80073c4 <__ieee754_log+0x318>)
 8007188:	4b8f      	ldr	r3, [pc, #572]	@ (80073c8 <__ieee754_log+0x31c>)
 800718a:	0030      	movs	r0, r6
 800718c:	0039      	movs	r1, r7
 800718e:	f7fa f93b 	bl	8001408 <__aeabi_dmul>
 8007192:	0002      	movs	r2, r0
 8007194:	000b      	movs	r3, r1
 8007196:	2000      	movs	r0, #0
 8007198:	498c      	ldr	r1, [pc, #560]	@ (80073cc <__ieee754_log+0x320>)
 800719a:	f7fa fbfd 	bl	8001998 <__aeabi_dsub>
 800719e:	0032      	movs	r2, r6
 80071a0:	0004      	movs	r4, r0
 80071a2:	000d      	movs	r5, r1
 80071a4:	003b      	movs	r3, r7
 80071a6:	0030      	movs	r0, r6
 80071a8:	0039      	movs	r1, r7
 80071aa:	f7fa f92d 	bl	8001408 <__aeabi_dmul>
 80071ae:	000b      	movs	r3, r1
 80071b0:	0002      	movs	r2, r0
 80071b2:	0029      	movs	r1, r5
 80071b4:	0020      	movs	r0, r4
 80071b6:	f7fa f927 	bl	8001408 <__aeabi_dmul>
 80071ba:	9b00      	ldr	r3, [sp, #0]
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <__ieee754_log+0x126>
 80071c4:	0002      	movs	r2, r0
 80071c6:	000b      	movs	r3, r1
 80071c8:	0030      	movs	r0, r6
 80071ca:	0039      	movs	r1, r7
 80071cc:	f7fa fbe4 	bl	8001998 <__aeabi_dsub>
 80071d0:	e77d      	b.n	80070ce <__ieee754_log+0x22>
 80071d2:	9800      	ldr	r0, [sp, #0]
 80071d4:	f7fa ffda 	bl	800218c <__aeabi_i2d>
 80071d8:	4a76      	ldr	r2, [pc, #472]	@ (80073b4 <__ieee754_log+0x308>)
 80071da:	4b77      	ldr	r3, [pc, #476]	@ (80073b8 <__ieee754_log+0x30c>)
 80071dc:	0004      	movs	r4, r0
 80071de:	000d      	movs	r5, r1
 80071e0:	f7fa f912 	bl	8001408 <__aeabi_dmul>
 80071e4:	4a75      	ldr	r2, [pc, #468]	@ (80073bc <__ieee754_log+0x310>)
 80071e6:	9000      	str	r0, [sp, #0]
 80071e8:	9101      	str	r1, [sp, #4]
 80071ea:	4b75      	ldr	r3, [pc, #468]	@ (80073c0 <__ieee754_log+0x314>)
 80071ec:	0020      	movs	r0, r4
 80071ee:	0029      	movs	r1, r5
 80071f0:	f7fa f90a 	bl	8001408 <__aeabi_dmul>
 80071f4:	0002      	movs	r2, r0
 80071f6:	000b      	movs	r3, r1
 80071f8:	9802      	ldr	r0, [sp, #8]
 80071fa:	9903      	ldr	r1, [sp, #12]
 80071fc:	f7fa fbcc 	bl	8001998 <__aeabi_dsub>
 8007200:	0032      	movs	r2, r6
 8007202:	003b      	movs	r3, r7
 8007204:	f7fa fbc8 	bl	8001998 <__aeabi_dsub>
 8007208:	0002      	movs	r2, r0
 800720a:	000b      	movs	r3, r1
 800720c:	9800      	ldr	r0, [sp, #0]
 800720e:	9901      	ldr	r1, [sp, #4]
 8007210:	e7dc      	b.n	80071cc <__ieee754_log+0x120>
 8007212:	2380      	movs	r3, #128	@ 0x80
 8007214:	05db      	lsls	r3, r3, #23
 8007216:	f7f9 f94f 	bl	80004b8 <__aeabi_dadd>
 800721a:	0002      	movs	r2, r0
 800721c:	000b      	movs	r3, r1
 800721e:	0030      	movs	r0, r6
 8007220:	0039      	movs	r1, r7
 8007222:	f7f9 fcad 	bl	8000b80 <__aeabi_ddiv>
 8007226:	9004      	str	r0, [sp, #16]
 8007228:	9105      	str	r1, [sp, #20]
 800722a:	9800      	ldr	r0, [sp, #0]
 800722c:	f7fa ffae 	bl	800218c <__aeabi_i2d>
 8007230:	9a04      	ldr	r2, [sp, #16]
 8007232:	9b05      	ldr	r3, [sp, #20]
 8007234:	9006      	str	r0, [sp, #24]
 8007236:	9107      	str	r1, [sp, #28]
 8007238:	0010      	movs	r0, r2
 800723a:	0019      	movs	r1, r3
 800723c:	f7fa f8e4 	bl	8001408 <__aeabi_dmul>
 8007240:	4a63      	ldr	r2, [pc, #396]	@ (80073d0 <__ieee754_log+0x324>)
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	4694      	mov	ip, r2
 8007246:	4463      	add	r3, ip
 8007248:	0002      	movs	r2, r0
 800724a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724c:	000b      	movs	r3, r1
 800724e:	9008      	str	r0, [sp, #32]
 8007250:	9109      	str	r1, [sp, #36]	@ 0x24
 8007252:	f7fa f8d9 	bl	8001408 <__aeabi_dmul>
 8007256:	0004      	movs	r4, r0
 8007258:	000d      	movs	r5, r1
 800725a:	4a5e      	ldr	r2, [pc, #376]	@ (80073d4 <__ieee754_log+0x328>)
 800725c:	4b5e      	ldr	r3, [pc, #376]	@ (80073d8 <__ieee754_log+0x32c>)
 800725e:	f7fa f8d3 	bl	8001408 <__aeabi_dmul>
 8007262:	4a5e      	ldr	r2, [pc, #376]	@ (80073dc <__ieee754_log+0x330>)
 8007264:	4b5e      	ldr	r3, [pc, #376]	@ (80073e0 <__ieee754_log+0x334>)
 8007266:	f7f9 f927 	bl	80004b8 <__aeabi_dadd>
 800726a:	0022      	movs	r2, r4
 800726c:	002b      	movs	r3, r5
 800726e:	f7fa f8cb 	bl	8001408 <__aeabi_dmul>
 8007272:	4a5c      	ldr	r2, [pc, #368]	@ (80073e4 <__ieee754_log+0x338>)
 8007274:	4b5c      	ldr	r3, [pc, #368]	@ (80073e8 <__ieee754_log+0x33c>)
 8007276:	f7f9 f91f 	bl	80004b8 <__aeabi_dadd>
 800727a:	0022      	movs	r2, r4
 800727c:	002b      	movs	r3, r5
 800727e:	f7fa f8c3 	bl	8001408 <__aeabi_dmul>
 8007282:	4a5a      	ldr	r2, [pc, #360]	@ (80073ec <__ieee754_log+0x340>)
 8007284:	4b5a      	ldr	r3, [pc, #360]	@ (80073f0 <__ieee754_log+0x344>)
 8007286:	f7f9 f917 	bl	80004b8 <__aeabi_dadd>
 800728a:	9a08      	ldr	r2, [sp, #32]
 800728c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728e:	f7fa f8bb 	bl	8001408 <__aeabi_dmul>
 8007292:	4a58      	ldr	r2, [pc, #352]	@ (80073f4 <__ieee754_log+0x348>)
 8007294:	9008      	str	r0, [sp, #32]
 8007296:	9109      	str	r1, [sp, #36]	@ 0x24
 8007298:	4b57      	ldr	r3, [pc, #348]	@ (80073f8 <__ieee754_log+0x34c>)
 800729a:	0020      	movs	r0, r4
 800729c:	0029      	movs	r1, r5
 800729e:	f7fa f8b3 	bl	8001408 <__aeabi_dmul>
 80072a2:	4a56      	ldr	r2, [pc, #344]	@ (80073fc <__ieee754_log+0x350>)
 80072a4:	4b56      	ldr	r3, [pc, #344]	@ (8007400 <__ieee754_log+0x354>)
 80072a6:	f7f9 f907 	bl	80004b8 <__aeabi_dadd>
 80072aa:	0022      	movs	r2, r4
 80072ac:	002b      	movs	r3, r5
 80072ae:	f7fa f8ab 	bl	8001408 <__aeabi_dmul>
 80072b2:	4a54      	ldr	r2, [pc, #336]	@ (8007404 <__ieee754_log+0x358>)
 80072b4:	4b54      	ldr	r3, [pc, #336]	@ (8007408 <__ieee754_log+0x35c>)
 80072b6:	f7f9 f8ff 	bl	80004b8 <__aeabi_dadd>
 80072ba:	0022      	movs	r2, r4
 80072bc:	002b      	movs	r3, r5
 80072be:	f7fa f8a3 	bl	8001408 <__aeabi_dmul>
 80072c2:	0002      	movs	r2, r0
 80072c4:	000b      	movs	r3, r1
 80072c6:	9808      	ldr	r0, [sp, #32]
 80072c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072ca:	f7f9 f8f5 	bl	80004b8 <__aeabi_dadd>
 80072ce:	9a02      	ldr	r2, [sp, #8]
 80072d0:	4b4e      	ldr	r3, [pc, #312]	@ (800740c <__ieee754_log+0x360>)
 80072d2:	0004      	movs	r4, r0
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072d8:	000d      	movs	r5, r1
 80072da:	4313      	orrs	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dd34      	ble.n	800734a <__ieee754_log+0x29e>
 80072e0:	2200      	movs	r2, #0
 80072e2:	4b3a      	ldr	r3, [pc, #232]	@ (80073cc <__ieee754_log+0x320>)
 80072e4:	0030      	movs	r0, r6
 80072e6:	0039      	movs	r1, r7
 80072e8:	f7fa f88e 	bl	8001408 <__aeabi_dmul>
 80072ec:	0032      	movs	r2, r6
 80072ee:	003b      	movs	r3, r7
 80072f0:	f7fa f88a 	bl	8001408 <__aeabi_dmul>
 80072f4:	0002      	movs	r2, r0
 80072f6:	000b      	movs	r3, r1
 80072f8:	9002      	str	r0, [sp, #8]
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	0020      	movs	r0, r4
 80072fe:	0029      	movs	r1, r5
 8007300:	f7f9 f8da 	bl	80004b8 <__aeabi_dadd>
 8007304:	9a04      	ldr	r2, [sp, #16]
 8007306:	9b05      	ldr	r3, [sp, #20]
 8007308:	f7fa f87e 	bl	8001408 <__aeabi_dmul>
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	0004      	movs	r4, r0
 8007310:	000d      	movs	r5, r1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <__ieee754_log+0x278>
 8007316:	0002      	movs	r2, r0
 8007318:	000b      	movs	r3, r1
 800731a:	9802      	ldr	r0, [sp, #8]
 800731c:	9903      	ldr	r1, [sp, #12]
 800731e:	f7fa fb3b 	bl	8001998 <__aeabi_dsub>
 8007322:	e74f      	b.n	80071c4 <__ieee754_log+0x118>
 8007324:	4a23      	ldr	r2, [pc, #140]	@ (80073b4 <__ieee754_log+0x308>)
 8007326:	4b24      	ldr	r3, [pc, #144]	@ (80073b8 <__ieee754_log+0x30c>)
 8007328:	9806      	ldr	r0, [sp, #24]
 800732a:	9907      	ldr	r1, [sp, #28]
 800732c:	f7fa f86c 	bl	8001408 <__aeabi_dmul>
 8007330:	4a22      	ldr	r2, [pc, #136]	@ (80073bc <__ieee754_log+0x310>)
 8007332:	9000      	str	r0, [sp, #0]
 8007334:	9101      	str	r1, [sp, #4]
 8007336:	9806      	ldr	r0, [sp, #24]
 8007338:	9907      	ldr	r1, [sp, #28]
 800733a:	4b21      	ldr	r3, [pc, #132]	@ (80073c0 <__ieee754_log+0x314>)
 800733c:	f7fa f864 	bl	8001408 <__aeabi_dmul>
 8007340:	0022      	movs	r2, r4
 8007342:	002b      	movs	r3, r5
 8007344:	f7f9 f8b8 	bl	80004b8 <__aeabi_dadd>
 8007348:	e754      	b.n	80071f4 <__ieee754_log+0x148>
 800734a:	0002      	movs	r2, r0
 800734c:	000b      	movs	r3, r1
 800734e:	0030      	movs	r0, r6
 8007350:	0039      	movs	r1, r7
 8007352:	f7fa fb21 	bl	8001998 <__aeabi_dsub>
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	9b05      	ldr	r3, [sp, #20]
 800735a:	f7fa f855 	bl	8001408 <__aeabi_dmul>
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	0004      	movs	r4, r0
 8007362:	000d      	movs	r5, r1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <__ieee754_log+0x2c2>
 8007368:	0002      	movs	r2, r0
 800736a:	000b      	movs	r3, r1
 800736c:	e72c      	b.n	80071c8 <__ieee754_log+0x11c>
 800736e:	4a11      	ldr	r2, [pc, #68]	@ (80073b4 <__ieee754_log+0x308>)
 8007370:	4b11      	ldr	r3, [pc, #68]	@ (80073b8 <__ieee754_log+0x30c>)
 8007372:	9806      	ldr	r0, [sp, #24]
 8007374:	9907      	ldr	r1, [sp, #28]
 8007376:	f7fa f847 	bl	8001408 <__aeabi_dmul>
 800737a:	4a10      	ldr	r2, [pc, #64]	@ (80073bc <__ieee754_log+0x310>)
 800737c:	9000      	str	r0, [sp, #0]
 800737e:	9101      	str	r1, [sp, #4]
 8007380:	9806      	ldr	r0, [sp, #24]
 8007382:	9907      	ldr	r1, [sp, #28]
 8007384:	4b0e      	ldr	r3, [pc, #56]	@ (80073c0 <__ieee754_log+0x314>)
 8007386:	f7fa f83f 	bl	8001408 <__aeabi_dmul>
 800738a:	0002      	movs	r2, r0
 800738c:	000b      	movs	r3, r1
 800738e:	0020      	movs	r0, r4
 8007390:	0029      	movs	r1, r5
 8007392:	e733      	b.n	80071fc <__ieee754_log+0x150>
 8007394:	2000      	movs	r0, #0
 8007396:	2100      	movs	r1, #0
 8007398:	e699      	b.n	80070ce <__ieee754_log+0x22>
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	c3500000 	.word	0xc3500000
 80073a0:	43500000 	.word	0x43500000
 80073a4:	7fefffff 	.word	0x7fefffff
 80073a8:	fffffc01 	.word	0xfffffc01
 80073ac:	00095f64 	.word	0x00095f64
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	fee00000 	.word	0xfee00000
 80073b8:	3fe62e42 	.word	0x3fe62e42
 80073bc:	35793c76 	.word	0x35793c76
 80073c0:	3dea39ef 	.word	0x3dea39ef
 80073c4:	55555555 	.word	0x55555555
 80073c8:	3fd55555 	.word	0x3fd55555
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	fff9eb86 	.word	0xfff9eb86
 80073d4:	df3e5244 	.word	0xdf3e5244
 80073d8:	3fc2f112 	.word	0x3fc2f112
 80073dc:	96cb03de 	.word	0x96cb03de
 80073e0:	3fc74664 	.word	0x3fc74664
 80073e4:	94229359 	.word	0x94229359
 80073e8:	3fd24924 	.word	0x3fd24924
 80073ec:	55555593 	.word	0x55555593
 80073f0:	3fe55555 	.word	0x3fe55555
 80073f4:	d078c69f 	.word	0xd078c69f
 80073f8:	3fc39a09 	.word	0x3fc39a09
 80073fc:	1d8e78af 	.word	0x1d8e78af
 8007400:	3fcc71c5 	.word	0x3fcc71c5
 8007404:	9997fa04 	.word	0x9997fa04
 8007408:	3fd99999 	.word	0x3fd99999
 800740c:	0006b851 	.word	0x0006b851

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	46c0      	nop			@ (mov r8, r8)
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	46c0      	nop			@ (mov r8, r8)
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
