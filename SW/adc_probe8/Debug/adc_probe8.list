
adc_probe8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006e14  08006e14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e14  08006e14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000074  08006e90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08006e90  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df7b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b6  00000000  00000000  0002e05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a1  00000000  00000000  00030f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016be0  00000000  00000000  000317e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2a5  00000000  00000000  000483c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f09d  00000000  00000000  00056666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b28  00000000  00000000  000e5704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006b10 	.word	0x08006b10

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	08006b10 	.word	0x08006b10

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff47 	bl	8001290 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe97 	bl	8001140 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 ff39 	bl	8001290 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff2f 	bl	8001290 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 febf 	bl	80011c4 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 feb5 	bl	80011c4 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_d2uiz>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2200      	movs	r2, #0
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <__aeabi_d2uiz+0x38>)
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	f7ff ffef 	bl	8000454 <__aeabi_dcmpge>
 8000476:	2800      	cmp	r0, #0
 8000478:	d104      	bne.n	8000484 <__aeabi_d2uiz+0x1c>
 800047a:	0020      	movs	r0, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f001 fdcd 	bl	800201c <__aeabi_d2iz>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__aeabi_d2uiz+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	0020      	movs	r0, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f001 fa26 	bl	80018dc <__aeabi_dsub>
 8000490:	f001 fdc4 	bl	800201c <__aeabi_d2iz>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	061b      	lsls	r3, r3, #24
 8000498:	469c      	mov	ip, r3
 800049a:	4460      	add	r0, ip
 800049c:	e7f1      	b.n	8000482 <__aeabi_d2uiz+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	41e00000 	.word	0x41e00000

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	0004      	movs	r4, r0
 80004ae:	b5c0      	push	{r6, r7, lr}
 80004b0:	001f      	movs	r7, r3
 80004b2:	030b      	lsls	r3, r1, #12
 80004b4:	0010      	movs	r0, r2
 80004b6:	004e      	lsls	r6, r1, #1
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	0fcd      	lsrs	r5, r1, #31
 80004bc:	0f61      	lsrs	r1, r4, #29
 80004be:	007a      	lsls	r2, r7, #1
 80004c0:	4319      	orrs	r1, r3
 80004c2:	00e3      	lsls	r3, r4, #3
 80004c4:	033c      	lsls	r4, r7, #12
 80004c6:	0fff      	lsrs	r7, r7, #31
 80004c8:	46bc      	mov	ip, r7
 80004ca:	0a64      	lsrs	r4, r4, #9
 80004cc:	0f47      	lsrs	r7, r0, #29
 80004ce:	4327      	orrs	r7, r4
 80004d0:	0d76      	lsrs	r6, r6, #21
 80004d2:	0d52      	lsrs	r2, r2, #21
 80004d4:	00c0      	lsls	r0, r0, #3
 80004d6:	46b9      	mov	r9, r7
 80004d8:	4680      	mov	r8, r0
 80004da:	1ab7      	subs	r7, r6, r2
 80004dc:	4565      	cmp	r5, ip
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x3e>
 80004e0:	e09b      	b.n	800061a <__aeabi_dadd+0x176>
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	dc00      	bgt.n	80004e8 <__aeabi_dadd+0x44>
 80004e6:	e084      	b.n	80005f2 <__aeabi_dadd+0x14e>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x4a>
 80004ec:	e0be      	b.n	800066c <__aeabi_dadd+0x1c8>
 80004ee:	4ac8      	ldr	r2, [pc, #800]	; (8000810 <__aeabi_dadd+0x36c>)
 80004f0:	4296      	cmp	r6, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x52>
 80004f4:	e124      	b.n	8000740 <__aeabi_dadd+0x29c>
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	464c      	mov	r4, r9
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4314      	orrs	r4, r2
 80004fe:	46a1      	mov	r9, r4
 8000500:	2f38      	cmp	r7, #56	; 0x38
 8000502:	dd00      	ble.n	8000506 <__aeabi_dadd+0x62>
 8000504:	e167      	b.n	80007d6 <__aeabi_dadd+0x332>
 8000506:	2f1f      	cmp	r7, #31
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x68>
 800050a:	e1d6      	b.n	80008ba <__aeabi_dadd+0x416>
 800050c:	2220      	movs	r2, #32
 800050e:	464c      	mov	r4, r9
 8000510:	1bd2      	subs	r2, r2, r7
 8000512:	4094      	lsls	r4, r2
 8000514:	46a2      	mov	sl, r4
 8000516:	4644      	mov	r4, r8
 8000518:	40fc      	lsrs	r4, r7
 800051a:	0020      	movs	r0, r4
 800051c:	4654      	mov	r4, sl
 800051e:	4304      	orrs	r4, r0
 8000520:	4640      	mov	r0, r8
 8000522:	4090      	lsls	r0, r2
 8000524:	1e42      	subs	r2, r0, #1
 8000526:	4190      	sbcs	r0, r2
 8000528:	464a      	mov	r2, r9
 800052a:	40fa      	lsrs	r2, r7
 800052c:	4304      	orrs	r4, r0
 800052e:	1a89      	subs	r1, r1, r2
 8000530:	1b1c      	subs	r4, r3, r4
 8000532:	42a3      	cmp	r3, r4
 8000534:	4192      	sbcs	r2, r2
 8000536:	4252      	negs	r2, r2
 8000538:	1a8b      	subs	r3, r1, r2
 800053a:	469a      	mov	sl, r3
 800053c:	4653      	mov	r3, sl
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0xa0>
 8000542:	e0d4      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000544:	4653      	mov	r3, sl
 8000546:	025a      	lsls	r2, r3, #9
 8000548:	0a53      	lsrs	r3, r2, #9
 800054a:	469a      	mov	sl, r3
 800054c:	4653      	mov	r3, sl
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_dadd+0xb0>
 8000552:	e104      	b.n	800075e <__aeabi_dadd+0x2ba>
 8000554:	4650      	mov	r0, sl
 8000556:	f001 fdc7 	bl	80020e8 <__clzsi2>
 800055a:	0003      	movs	r3, r0
 800055c:	3b08      	subs	r3, #8
 800055e:	2220      	movs	r2, #32
 8000560:	0020      	movs	r0, r4
 8000562:	1ad2      	subs	r2, r2, r3
 8000564:	4651      	mov	r1, sl
 8000566:	40d0      	lsrs	r0, r2
 8000568:	4099      	lsls	r1, r3
 800056a:	0002      	movs	r2, r0
 800056c:	409c      	lsls	r4, r3
 800056e:	430a      	orrs	r2, r1
 8000570:	42b3      	cmp	r3, r6
 8000572:	da00      	bge.n	8000576 <__aeabi_dadd+0xd2>
 8000574:	e102      	b.n	800077c <__aeabi_dadd+0x2d8>
 8000576:	1b9b      	subs	r3, r3, r6
 8000578:	1c59      	adds	r1, r3, #1
 800057a:	291f      	cmp	r1, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xdc>
 800057e:	e0a7      	b.n	80006d0 <__aeabi_dadd+0x22c>
 8000580:	2320      	movs	r3, #32
 8000582:	0010      	movs	r0, r2
 8000584:	0026      	movs	r6, r4
 8000586:	1a5b      	subs	r3, r3, r1
 8000588:	409c      	lsls	r4, r3
 800058a:	4098      	lsls	r0, r3
 800058c:	40ce      	lsrs	r6, r1
 800058e:	40ca      	lsrs	r2, r1
 8000590:	1e63      	subs	r3, r4, #1
 8000592:	419c      	sbcs	r4, r3
 8000594:	4330      	orrs	r0, r6
 8000596:	4692      	mov	sl, r2
 8000598:	2600      	movs	r6, #0
 800059a:	4304      	orrs	r4, r0
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x110>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x110>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	44a2      	add	sl, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x118>
 80005ba:	e09b      	b.n	80006f4 <__aeabi_dadd+0x250>
 80005bc:	4b94      	ldr	r3, [pc, #592]	; (8000810 <__aeabi_dadd+0x36c>)
 80005be:	3601      	adds	r6, #1
 80005c0:	429e      	cmp	r6, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x122>
 80005c4:	e0b8      	b.n	8000738 <__aeabi_dadd+0x294>
 80005c6:	4653      	mov	r3, sl
 80005c8:	4992      	ldr	r1, [pc, #584]	; (8000814 <__aeabi_dadd+0x370>)
 80005ca:	08e4      	lsrs	r4, r4, #3
 80005cc:	400b      	ands	r3, r1
 80005ce:	0019      	movs	r1, r3
 80005d0:	075b      	lsls	r3, r3, #29
 80005d2:	4323      	orrs	r3, r4
 80005d4:	0572      	lsls	r2, r6, #21
 80005d6:	024c      	lsls	r4, r1, #9
 80005d8:	0b24      	lsrs	r4, r4, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	07ed      	lsls	r5, r5, #31
 80005e0:	4322      	orrs	r2, r4
 80005e2:	432a      	orrs	r2, r5
 80005e4:	0018      	movs	r0, r3
 80005e6:	0011      	movs	r1, r2
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2f00      	cmp	r7, #0
 80005f4:	d048      	beq.n	8000688 <__aeabi_dadd+0x1e4>
 80005f6:	1b97      	subs	r7, r2, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x15a>
 80005fc:	e10e      	b.n	800081c <__aeabi_dadd+0x378>
 80005fe:	000c      	movs	r4, r1
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x162>
 8000604:	e1b7      	b.n	8000976 <__aeabi_dadd+0x4d2>
 8000606:	1e7c      	subs	r4, r7, #1
 8000608:	2f01      	cmp	r7, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x16a>
 800060c:	e226      	b.n	8000a5c <__aeabi_dadd+0x5b8>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x36c>)
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x172>
 8000614:	e1d5      	b.n	80009c2 <__aeabi_dadd+0x51e>
 8000616:	0027      	movs	r7, r4
 8000618:	e107      	b.n	800082a <__aeabi_dadd+0x386>
 800061a:	2f00      	cmp	r7, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x17c>
 800061e:	e0b2      	b.n	8000786 <__aeabi_dadd+0x2e2>
 8000620:	2a00      	cmp	r2, #0
 8000622:	d047      	beq.n	80006b4 <__aeabi_dadd+0x210>
 8000624:	4a7a      	ldr	r2, [pc, #488]	; (8000810 <__aeabi_dadd+0x36c>)
 8000626:	4296      	cmp	r6, r2
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x188>
 800062a:	e089      	b.n	8000740 <__aeabi_dadd+0x29c>
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	464c      	mov	r4, r9
 8000630:	0412      	lsls	r2, r2, #16
 8000632:	4314      	orrs	r4, r2
 8000634:	46a1      	mov	r9, r4
 8000636:	2f38      	cmp	r7, #56	; 0x38
 8000638:	dc6b      	bgt.n	8000712 <__aeabi_dadd+0x26e>
 800063a:	2f1f      	cmp	r7, #31
 800063c:	dc00      	bgt.n	8000640 <__aeabi_dadd+0x19c>
 800063e:	e16e      	b.n	800091e <__aeabi_dadd+0x47a>
 8000640:	003a      	movs	r2, r7
 8000642:	4648      	mov	r0, r9
 8000644:	3a20      	subs	r2, #32
 8000646:	40d0      	lsrs	r0, r2
 8000648:	4684      	mov	ip, r0
 800064a:	2f20      	cmp	r7, #32
 800064c:	d007      	beq.n	800065e <__aeabi_dadd+0x1ba>
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	4648      	mov	r0, r9
 8000652:	1bd2      	subs	r2, r2, r7
 8000654:	4090      	lsls	r0, r2
 8000656:	0002      	movs	r2, r0
 8000658:	4640      	mov	r0, r8
 800065a:	4310      	orrs	r0, r2
 800065c:	4680      	mov	r8, r0
 800065e:	4640      	mov	r0, r8
 8000660:	1e42      	subs	r2, r0, #1
 8000662:	4190      	sbcs	r0, r2
 8000664:	4662      	mov	r2, ip
 8000666:	0004      	movs	r4, r0
 8000668:	4314      	orrs	r4, r2
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x278>
 800066c:	464a      	mov	r2, r9
 800066e:	4302      	orrs	r2, r0
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1d0>
 8000672:	e103      	b.n	800087c <__aeabi_dadd+0x3d8>
 8000674:	1e7a      	subs	r2, r7, #1
 8000676:	2f01      	cmp	r7, #1
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x1d8>
 800067a:	e193      	b.n	80009a4 <__aeabi_dadd+0x500>
 800067c:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x36c>)
 800067e:	42a7      	cmp	r7, r4
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x1e0>
 8000682:	e18a      	b.n	800099a <__aeabi_dadd+0x4f6>
 8000684:	0017      	movs	r7, r2
 8000686:	e73b      	b.n	8000500 <__aeabi_dadd+0x5c>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x374>)
 800068a:	1c72      	adds	r2, r6, #1
 800068c:	4222      	tst	r2, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ee>
 8000690:	e0e0      	b.n	8000854 <__aeabi_dadd+0x3b0>
 8000692:	000a      	movs	r2, r1
 8000694:	431a      	orrs	r2, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f8>
 800069a:	e174      	b.n	8000986 <__aeabi_dadd+0x4e2>
 800069c:	2a00      	cmp	r2, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fe>
 80006a0:	e1d0      	b.n	8000a44 <__aeabi_dadd+0x5a0>
 80006a2:	464a      	mov	r2, r9
 80006a4:	4302      	orrs	r2, r0
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x206>
 80006a8:	e1e3      	b.n	8000a72 <__aeabi_dadd+0x5ce>
 80006aa:	074a      	lsls	r2, r1, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c9      	lsrs	r1, r1, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x264>
 80006b4:	464a      	mov	r2, r9
 80006b6:	4302      	orrs	r2, r0
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x218>
 80006ba:	e17d      	b.n	80009b8 <__aeabi_dadd+0x514>
 80006bc:	1e7a      	subs	r2, r7, #1
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x220>
 80006c2:	e0e0      	b.n	8000886 <__aeabi_dadd+0x3e2>
 80006c4:	4c52      	ldr	r4, [pc, #328]	; (8000810 <__aeabi_dadd+0x36c>)
 80006c6:	42a7      	cmp	r7, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x228>
 80006ca:	e166      	b.n	800099a <__aeabi_dadd+0x4f6>
 80006cc:	0017      	movs	r7, r2
 80006ce:	e7b2      	b.n	8000636 <__aeabi_dadd+0x192>
 80006d0:	0010      	movs	r0, r2
 80006d2:	3b1f      	subs	r3, #31
 80006d4:	40d8      	lsrs	r0, r3
 80006d6:	2920      	cmp	r1, #32
 80006d8:	d003      	beq.n	80006e2 <__aeabi_dadd+0x23e>
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	409a      	lsls	r2, r3
 80006e0:	4314      	orrs	r4, r2
 80006e2:	1e63      	subs	r3, r4, #1
 80006e4:	419c      	sbcs	r4, r3
 80006e6:	2300      	movs	r3, #0
 80006e8:	2600      	movs	r6, #0
 80006ea:	469a      	mov	sl, r3
 80006ec:	4304      	orrs	r4, r0
 80006ee:	0763      	lsls	r3, r4, #29
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x250>
 80006f2:	e755      	b.n	80005a0 <__aeabi_dadd+0xfc>
 80006f4:	4652      	mov	r2, sl
 80006f6:	08e3      	lsrs	r3, r4, #3
 80006f8:	0752      	lsls	r2, r2, #29
 80006fa:	4313      	orrs	r3, r2
 80006fc:	4652      	mov	r2, sl
 80006fe:	0037      	movs	r7, r6
 8000700:	08d1      	lsrs	r1, r2, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x36c>)
 8000704:	4297      	cmp	r7, r2
 8000706:	d01f      	beq.n	8000748 <__aeabi_dadd+0x2a4>
 8000708:	0309      	lsls	r1, r1, #12
 800070a:	057a      	lsls	r2, r7, #21
 800070c:	0b0c      	lsrs	r4, r1, #12
 800070e:	0d52      	lsrs	r2, r2, #21
 8000710:	e764      	b.n	80005dc <__aeabi_dadd+0x138>
 8000712:	4642      	mov	r2, r8
 8000714:	464c      	mov	r4, r9
 8000716:	4314      	orrs	r4, r2
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	4192      	sbcs	r2, r2
 8000722:	4252      	negs	r2, r2
 8000724:	4692      	mov	sl, r2
 8000726:	448a      	add	sl, r1
 8000728:	4653      	mov	r3, sl
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	d5df      	bpl.n	80006ee <__aeabi_dadd+0x24a>
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <__aeabi_dadd+0x36c>)
 8000730:	3601      	adds	r6, #1
 8000732:	429e      	cmp	r6, r3
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x294>
 8000736:	e0b3      	b.n	80008a0 <__aeabi_dadd+0x3fc>
 8000738:	0032      	movs	r2, r6
 800073a:	2400      	movs	r4, #0
 800073c:	2300      	movs	r3, #0
 800073e:	e74d      	b.n	80005dc <__aeabi_dadd+0x138>
 8000740:	074a      	lsls	r2, r1, #29
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	4313      	orrs	r3, r2
 8000746:	08c9      	lsrs	r1, r1, #3
 8000748:	001a      	movs	r2, r3
 800074a:	430a      	orrs	r2, r1
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x2ac>
 800074e:	e200      	b.n	8000b52 <__aeabi_dadd+0x6ae>
 8000750:	2480      	movs	r4, #128	; 0x80
 8000752:	0324      	lsls	r4, r4, #12
 8000754:	430c      	orrs	r4, r1
 8000756:	0324      	lsls	r4, r4, #12
 8000758:	4a2d      	ldr	r2, [pc, #180]	; (8000810 <__aeabi_dadd+0x36c>)
 800075a:	0b24      	lsrs	r4, r4, #12
 800075c:	e73e      	b.n	80005dc <__aeabi_dadd+0x138>
 800075e:	0020      	movs	r0, r4
 8000760:	f001 fcc2 	bl	80020e8 <__clzsi2>
 8000764:	0003      	movs	r3, r0
 8000766:	3318      	adds	r3, #24
 8000768:	2b1f      	cmp	r3, #31
 800076a:	dc00      	bgt.n	800076e <__aeabi_dadd+0x2ca>
 800076c:	e6f7      	b.n	800055e <__aeabi_dadd+0xba>
 800076e:	0022      	movs	r2, r4
 8000770:	3808      	subs	r0, #8
 8000772:	4082      	lsls	r2, r0
 8000774:	2400      	movs	r4, #0
 8000776:	42b3      	cmp	r3, r6
 8000778:	db00      	blt.n	800077c <__aeabi_dadd+0x2d8>
 800077a:	e6fc      	b.n	8000576 <__aeabi_dadd+0xd2>
 800077c:	1af6      	subs	r6, r6, r3
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <__aeabi_dadd+0x370>)
 8000780:	401a      	ands	r2, r3
 8000782:	4692      	mov	sl, r2
 8000784:	e70a      	b.n	800059c <__aeabi_dadd+0xf8>
 8000786:	2f00      	cmp	r7, #0
 8000788:	d02b      	beq.n	80007e2 <__aeabi_dadd+0x33e>
 800078a:	1b97      	subs	r7, r2, r6
 800078c:	2e00      	cmp	r6, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x2ee>
 8000790:	e0b8      	b.n	8000904 <__aeabi_dadd+0x460>
 8000792:	4c1f      	ldr	r4, [pc, #124]	; (8000810 <__aeabi_dadd+0x36c>)
 8000794:	42a2      	cmp	r2, r4
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x2f6>
 8000798:	e11c      	b.n	80009d4 <__aeabi_dadd+0x530>
 800079a:	2480      	movs	r4, #128	; 0x80
 800079c:	0424      	lsls	r4, r4, #16
 800079e:	4321      	orrs	r1, r4
 80007a0:	2f38      	cmp	r7, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x302>
 80007a4:	e11e      	b.n	80009e4 <__aeabi_dadd+0x540>
 80007a6:	2f1f      	cmp	r7, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x308>
 80007aa:	e19e      	b.n	8000aea <__aeabi_dadd+0x646>
 80007ac:	2620      	movs	r6, #32
 80007ae:	000c      	movs	r4, r1
 80007b0:	1bf6      	subs	r6, r6, r7
 80007b2:	0018      	movs	r0, r3
 80007b4:	40b3      	lsls	r3, r6
 80007b6:	40b4      	lsls	r4, r6
 80007b8:	40f8      	lsrs	r0, r7
 80007ba:	1e5e      	subs	r6, r3, #1
 80007bc:	41b3      	sbcs	r3, r6
 80007be:	40f9      	lsrs	r1, r7
 80007c0:	4304      	orrs	r4, r0
 80007c2:	431c      	orrs	r4, r3
 80007c4:	4489      	add	r9, r1
 80007c6:	4444      	add	r4, r8
 80007c8:	4544      	cmp	r4, r8
 80007ca:	419b      	sbcs	r3, r3
 80007cc:	425b      	negs	r3, r3
 80007ce:	444b      	add	r3, r9
 80007d0:	469a      	mov	sl, r3
 80007d2:	0016      	movs	r6, r2
 80007d4:	e7a8      	b.n	8000728 <__aeabi_dadd+0x284>
 80007d6:	4642      	mov	r2, r8
 80007d8:	464c      	mov	r4, r9
 80007da:	4314      	orrs	r4, r2
 80007dc:	1e62      	subs	r2, r4, #1
 80007de:	4194      	sbcs	r4, r2
 80007e0:	e6a6      	b.n	8000530 <__aeabi_dadd+0x8c>
 80007e2:	4c0d      	ldr	r4, [pc, #52]	; (8000818 <__aeabi_dadd+0x374>)
 80007e4:	1c72      	adds	r2, r6, #1
 80007e6:	4222      	tst	r2, r4
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x348>
 80007ea:	e0a8      	b.n	800093e <__aeabi_dadd+0x49a>
 80007ec:	000a      	movs	r2, r1
 80007ee:	431a      	orrs	r2, r3
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_dadd+0x352>
 80007f4:	e10a      	b.n	8000a0c <__aeabi_dadd+0x568>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x358>
 80007fa:	e15e      	b.n	8000aba <__aeabi_dadd+0x616>
 80007fc:	464a      	mov	r2, r9
 80007fe:	4302      	orrs	r2, r0
 8000800:	d000      	beq.n	8000804 <__aeabi_dadd+0x360>
 8000802:	e161      	b.n	8000ac8 <__aeabi_dadd+0x624>
 8000804:	074a      	lsls	r2, r1, #29
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	4313      	orrs	r3, r2
 800080a:	08c9      	lsrs	r1, r1, #3
 800080c:	e77c      	b.n	8000708 <__aeabi_dadd+0x264>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4ccf      	ldr	r4, [pc, #828]	; (8000b5c <__aeabi_dadd+0x6b8>)
 800081e:	42a2      	cmp	r2, r4
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x380>
 8000822:	e0ce      	b.n	80009c2 <__aeabi_dadd+0x51e>
 8000824:	2480      	movs	r4, #128	; 0x80
 8000826:	0424      	lsls	r4, r4, #16
 8000828:	4321      	orrs	r1, r4
 800082a:	2f38      	cmp	r7, #56	; 0x38
 800082c:	dc5b      	bgt.n	80008e6 <__aeabi_dadd+0x442>
 800082e:	2f1f      	cmp	r7, #31
 8000830:	dd00      	ble.n	8000834 <__aeabi_dadd+0x390>
 8000832:	e0dc      	b.n	80009ee <__aeabi_dadd+0x54a>
 8000834:	2520      	movs	r5, #32
 8000836:	000c      	movs	r4, r1
 8000838:	1bed      	subs	r5, r5, r7
 800083a:	001e      	movs	r6, r3
 800083c:	40ab      	lsls	r3, r5
 800083e:	40ac      	lsls	r4, r5
 8000840:	40fe      	lsrs	r6, r7
 8000842:	1e5d      	subs	r5, r3, #1
 8000844:	41ab      	sbcs	r3, r5
 8000846:	4334      	orrs	r4, r6
 8000848:	40f9      	lsrs	r1, r7
 800084a:	431c      	orrs	r4, r3
 800084c:	464b      	mov	r3, r9
 800084e:	1a5b      	subs	r3, r3, r1
 8000850:	4699      	mov	r9, r3
 8000852:	e04c      	b.n	80008ee <__aeabi_dadd+0x44a>
 8000854:	464a      	mov	r2, r9
 8000856:	1a1c      	subs	r4, r3, r0
 8000858:	1a88      	subs	r0, r1, r2
 800085a:	42a3      	cmp	r3, r4
 800085c:	4192      	sbcs	r2, r2
 800085e:	4252      	negs	r2, r2
 8000860:	4692      	mov	sl, r2
 8000862:	0002      	movs	r2, r0
 8000864:	4650      	mov	r0, sl
 8000866:	1a12      	subs	r2, r2, r0
 8000868:	4692      	mov	sl, r2
 800086a:	0212      	lsls	r2, r2, #8
 800086c:	d478      	bmi.n	8000960 <__aeabi_dadd+0x4bc>
 800086e:	4653      	mov	r3, sl
 8000870:	4323      	orrs	r3, r4
 8000872:	d000      	beq.n	8000876 <__aeabi_dadd+0x3d2>
 8000874:	e66a      	b.n	800054c <__aeabi_dadd+0xa8>
 8000876:	2100      	movs	r1, #0
 8000878:	2500      	movs	r5, #0
 800087a:	e745      	b.n	8000708 <__aeabi_dadd+0x264>
 800087c:	074a      	lsls	r2, r1, #29
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	4313      	orrs	r3, r2
 8000882:	08c9      	lsrs	r1, r1, #3
 8000884:	e73d      	b.n	8000702 <__aeabi_dadd+0x25e>
 8000886:	181c      	adds	r4, r3, r0
 8000888:	429c      	cmp	r4, r3
 800088a:	419b      	sbcs	r3, r3
 800088c:	4449      	add	r1, r9
 800088e:	468a      	mov	sl, r1
 8000890:	425b      	negs	r3, r3
 8000892:	449a      	add	sl, r3
 8000894:	4653      	mov	r3, sl
 8000896:	2601      	movs	r6, #1
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3fa>
 800089c:	e727      	b.n	80006ee <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4652      	mov	r2, sl
 80008a2:	4baf      	ldr	r3, [pc, #700]	; (8000b60 <__aeabi_dadd+0x6bc>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	401a      	ands	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	4021      	ands	r1, r4
 80008ac:	0862      	lsrs	r2, r4, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	07dc      	lsls	r4, r3, #31
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	469a      	mov	sl, r3
 80008b6:	4314      	orrs	r4, r2
 80008b8:	e670      	b.n	800059c <__aeabi_dadd+0xf8>
 80008ba:	003a      	movs	r2, r7
 80008bc:	464c      	mov	r4, r9
 80008be:	3a20      	subs	r2, #32
 80008c0:	40d4      	lsrs	r4, r2
 80008c2:	46a4      	mov	ip, r4
 80008c4:	2f20      	cmp	r7, #32
 80008c6:	d007      	beq.n	80008d8 <__aeabi_dadd+0x434>
 80008c8:	2240      	movs	r2, #64	; 0x40
 80008ca:	4648      	mov	r0, r9
 80008cc:	1bd2      	subs	r2, r2, r7
 80008ce:	4090      	lsls	r0, r2
 80008d0:	0002      	movs	r2, r0
 80008d2:	4640      	mov	r0, r8
 80008d4:	4310      	orrs	r0, r2
 80008d6:	4680      	mov	r8, r0
 80008d8:	4640      	mov	r0, r8
 80008da:	1e42      	subs	r2, r0, #1
 80008dc:	4190      	sbcs	r0, r2
 80008de:	4662      	mov	r2, ip
 80008e0:	0004      	movs	r4, r0
 80008e2:	4314      	orrs	r4, r2
 80008e4:	e624      	b.n	8000530 <__aeabi_dadd+0x8c>
 80008e6:	4319      	orrs	r1, r3
 80008e8:	000c      	movs	r4, r1
 80008ea:	1e63      	subs	r3, r4, #1
 80008ec:	419c      	sbcs	r4, r3
 80008ee:	4643      	mov	r3, r8
 80008f0:	1b1c      	subs	r4, r3, r4
 80008f2:	45a0      	cmp	r8, r4
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	4649      	mov	r1, r9
 80008f8:	425b      	negs	r3, r3
 80008fa:	1acb      	subs	r3, r1, r3
 80008fc:	469a      	mov	sl, r3
 80008fe:	4665      	mov	r5, ip
 8000900:	0016      	movs	r6, r2
 8000902:	e61b      	b.n	800053c <__aeabi_dadd+0x98>
 8000904:	000c      	movs	r4, r1
 8000906:	431c      	orrs	r4, r3
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x468>
 800090a:	e0c7      	b.n	8000a9c <__aeabi_dadd+0x5f8>
 800090c:	1e7c      	subs	r4, r7, #1
 800090e:	2f01      	cmp	r7, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x470>
 8000912:	e0f9      	b.n	8000b08 <__aeabi_dadd+0x664>
 8000914:	4e91      	ldr	r6, [pc, #580]	; (8000b5c <__aeabi_dadd+0x6b8>)
 8000916:	42b7      	cmp	r7, r6
 8000918:	d05c      	beq.n	80009d4 <__aeabi_dadd+0x530>
 800091a:	0027      	movs	r7, r4
 800091c:	e740      	b.n	80007a0 <__aeabi_dadd+0x2fc>
 800091e:	2220      	movs	r2, #32
 8000920:	464c      	mov	r4, r9
 8000922:	4640      	mov	r0, r8
 8000924:	1bd2      	subs	r2, r2, r7
 8000926:	4094      	lsls	r4, r2
 8000928:	40f8      	lsrs	r0, r7
 800092a:	4304      	orrs	r4, r0
 800092c:	4640      	mov	r0, r8
 800092e:	4090      	lsls	r0, r2
 8000930:	1e42      	subs	r2, r0, #1
 8000932:	4190      	sbcs	r0, r2
 8000934:	464a      	mov	r2, r9
 8000936:	40fa      	lsrs	r2, r7
 8000938:	4304      	orrs	r4, r0
 800093a:	1889      	adds	r1, r1, r2
 800093c:	e6ee      	b.n	800071c <__aeabi_dadd+0x278>
 800093e:	4c87      	ldr	r4, [pc, #540]	; (8000b5c <__aeabi_dadd+0x6b8>)
 8000940:	42a2      	cmp	r2, r4
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x4a2>
 8000944:	e6f9      	b.n	800073a <__aeabi_dadd+0x296>
 8000946:	1818      	adds	r0, r3, r0
 8000948:	4298      	cmp	r0, r3
 800094a:	419b      	sbcs	r3, r3
 800094c:	4449      	add	r1, r9
 800094e:	425b      	negs	r3, r3
 8000950:	18cb      	adds	r3, r1, r3
 8000952:	07dc      	lsls	r4, r3, #31
 8000954:	0840      	lsrs	r0, r0, #1
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	469a      	mov	sl, r3
 800095a:	0016      	movs	r6, r2
 800095c:	4304      	orrs	r4, r0
 800095e:	e6c6      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000960:	4642      	mov	r2, r8
 8000962:	1ad4      	subs	r4, r2, r3
 8000964:	45a0      	cmp	r8, r4
 8000966:	4180      	sbcs	r0, r0
 8000968:	464b      	mov	r3, r9
 800096a:	4240      	negs	r0, r0
 800096c:	1a59      	subs	r1, r3, r1
 800096e:	1a0b      	subs	r3, r1, r0
 8000970:	469a      	mov	sl, r3
 8000972:	4665      	mov	r5, ip
 8000974:	e5ea      	b.n	800054c <__aeabi_dadd+0xa8>
 8000976:	464b      	mov	r3, r9
 8000978:	464a      	mov	r2, r9
 800097a:	08c0      	lsrs	r0, r0, #3
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	4665      	mov	r5, ip
 8000980:	4303      	orrs	r3, r0
 8000982:	08d1      	lsrs	r1, r2, #3
 8000984:	e6bd      	b.n	8000702 <__aeabi_dadd+0x25e>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d000      	beq.n	800098c <__aeabi_dadd+0x4e8>
 800098a:	e08e      	b.n	8000aaa <__aeabi_dadd+0x606>
 800098c:	464b      	mov	r3, r9
 800098e:	4303      	orrs	r3, r0
 8000990:	d117      	bne.n	80009c2 <__aeabi_dadd+0x51e>
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	2500      	movs	r5, #0
 8000996:	0309      	lsls	r1, r1, #12
 8000998:	e6da      	b.n	8000750 <__aeabi_dadd+0x2ac>
 800099a:	074a      	lsls	r2, r1, #29
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	4313      	orrs	r3, r2
 80009a0:	08c9      	lsrs	r1, r1, #3
 80009a2:	e6d1      	b.n	8000748 <__aeabi_dadd+0x2a4>
 80009a4:	1a1c      	subs	r4, r3, r0
 80009a6:	464a      	mov	r2, r9
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	419b      	sbcs	r3, r3
 80009ac:	1a89      	subs	r1, r1, r2
 80009ae:	425b      	negs	r3, r3
 80009b0:	1acb      	subs	r3, r1, r3
 80009b2:	469a      	mov	sl, r3
 80009b4:	2601      	movs	r6, #1
 80009b6:	e5c1      	b.n	800053c <__aeabi_dadd+0x98>
 80009b8:	074a      	lsls	r2, r1, #29
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	4313      	orrs	r3, r2
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	e69f      	b.n	8000702 <__aeabi_dadd+0x25e>
 80009c2:	4643      	mov	r3, r8
 80009c4:	08d8      	lsrs	r0, r3, #3
 80009c6:	464b      	mov	r3, r9
 80009c8:	464a      	mov	r2, r9
 80009ca:	075b      	lsls	r3, r3, #29
 80009cc:	4665      	mov	r5, ip
 80009ce:	4303      	orrs	r3, r0
 80009d0:	08d1      	lsrs	r1, r2, #3
 80009d2:	e6b9      	b.n	8000748 <__aeabi_dadd+0x2a4>
 80009d4:	4643      	mov	r3, r8
 80009d6:	08d8      	lsrs	r0, r3, #3
 80009d8:	464b      	mov	r3, r9
 80009da:	464a      	mov	r2, r9
 80009dc:	075b      	lsls	r3, r3, #29
 80009de:	4303      	orrs	r3, r0
 80009e0:	08d1      	lsrs	r1, r2, #3
 80009e2:	e6b1      	b.n	8000748 <__aeabi_dadd+0x2a4>
 80009e4:	4319      	orrs	r1, r3
 80009e6:	000c      	movs	r4, r1
 80009e8:	1e63      	subs	r3, r4, #1
 80009ea:	419c      	sbcs	r4, r3
 80009ec:	e6eb      	b.n	80007c6 <__aeabi_dadd+0x322>
 80009ee:	003c      	movs	r4, r7
 80009f0:	000d      	movs	r5, r1
 80009f2:	3c20      	subs	r4, #32
 80009f4:	40e5      	lsrs	r5, r4
 80009f6:	2f20      	cmp	r7, #32
 80009f8:	d003      	beq.n	8000a02 <__aeabi_dadd+0x55e>
 80009fa:	2440      	movs	r4, #64	; 0x40
 80009fc:	1be4      	subs	r4, r4, r7
 80009fe:	40a1      	lsls	r1, r4
 8000a00:	430b      	orrs	r3, r1
 8000a02:	001c      	movs	r4, r3
 8000a04:	1e63      	subs	r3, r4, #1
 8000a06:	419c      	sbcs	r4, r3
 8000a08:	432c      	orrs	r4, r5
 8000a0a:	e770      	b.n	80008ee <__aeabi_dadd+0x44a>
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d0e1      	beq.n	80009d4 <__aeabi_dadd+0x530>
 8000a10:	464a      	mov	r2, r9
 8000a12:	4302      	orrs	r2, r0
 8000a14:	d0c1      	beq.n	800099a <__aeabi_dadd+0x4f6>
 8000a16:	074a      	lsls	r2, r1, #29
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	08c9      	lsrs	r1, r1, #3
 8000a20:	0312      	lsls	r2, r2, #12
 8000a22:	4211      	tst	r1, r2
 8000a24:	d008      	beq.n	8000a38 <__aeabi_dadd+0x594>
 8000a26:	4648      	mov	r0, r9
 8000a28:	08c4      	lsrs	r4, r0, #3
 8000a2a:	4214      	tst	r4, r2
 8000a2c:	d104      	bne.n	8000a38 <__aeabi_dadd+0x594>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	0021      	movs	r1, r4
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	0742      	lsls	r2, r0, #29
 8000a36:	4313      	orrs	r3, r2
 8000a38:	0f5a      	lsrs	r2, r3, #29
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	0752      	lsls	r2, r2, #29
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	e681      	b.n	8000748 <__aeabi_dadd+0x2a4>
 8000a44:	464b      	mov	r3, r9
 8000a46:	4303      	orrs	r3, r0
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x5a8>
 8000a4a:	e714      	b.n	8000876 <__aeabi_dadd+0x3d2>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	464a      	mov	r2, r9
 8000a50:	08c0      	lsrs	r0, r0, #3
 8000a52:	075b      	lsls	r3, r3, #29
 8000a54:	4665      	mov	r5, ip
 8000a56:	4303      	orrs	r3, r0
 8000a58:	08d1      	lsrs	r1, r2, #3
 8000a5a:	e655      	b.n	8000708 <__aeabi_dadd+0x264>
 8000a5c:	1ac4      	subs	r4, r0, r3
 8000a5e:	45a0      	cmp	r8, r4
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	464b      	mov	r3, r9
 8000a64:	4240      	negs	r0, r0
 8000a66:	1a59      	subs	r1, r3, r1
 8000a68:	1a0b      	subs	r3, r1, r0
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	4665      	mov	r5, ip
 8000a6e:	2601      	movs	r6, #1
 8000a70:	e564      	b.n	800053c <__aeabi_dadd+0x98>
 8000a72:	1a1c      	subs	r4, r3, r0
 8000a74:	464a      	mov	r2, r9
 8000a76:	42a3      	cmp	r3, r4
 8000a78:	4180      	sbcs	r0, r0
 8000a7a:	1a8a      	subs	r2, r1, r2
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	1a12      	subs	r2, r2, r0
 8000a80:	4692      	mov	sl, r2
 8000a82:	0212      	lsls	r2, r2, #8
 8000a84:	d549      	bpl.n	8000b1a <__aeabi_dadd+0x676>
 8000a86:	4642      	mov	r2, r8
 8000a88:	1ad4      	subs	r4, r2, r3
 8000a8a:	45a0      	cmp	r8, r4
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	464b      	mov	r3, r9
 8000a90:	4240      	negs	r0, r0
 8000a92:	1a59      	subs	r1, r3, r1
 8000a94:	1a0b      	subs	r3, r1, r0
 8000a96:	469a      	mov	sl, r3
 8000a98:	4665      	mov	r5, ip
 8000a9a:	e57f      	b.n	800059c <__aeabi_dadd+0xf8>
 8000a9c:	464b      	mov	r3, r9
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	08c0      	lsrs	r0, r0, #3
 8000aa2:	075b      	lsls	r3, r3, #29
 8000aa4:	4303      	orrs	r3, r0
 8000aa6:	08d1      	lsrs	r1, r2, #3
 8000aa8:	e62b      	b.n	8000702 <__aeabi_dadd+0x25e>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	4302      	orrs	r2, r0
 8000ab0:	d138      	bne.n	8000b24 <__aeabi_dadd+0x680>
 8000ab2:	074a      	lsls	r2, r1, #29
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	e646      	b.n	8000748 <__aeabi_dadd+0x2a4>
 8000aba:	464b      	mov	r3, r9
 8000abc:	464a      	mov	r2, r9
 8000abe:	08c0      	lsrs	r0, r0, #3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e61f      	b.n	8000708 <__aeabi_dadd+0x264>
 8000ac8:	181c      	adds	r4, r3, r0
 8000aca:	429c      	cmp	r4, r3
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4449      	add	r1, r9
 8000ad0:	468a      	mov	sl, r1
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	449a      	add	sl, r3
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	d400      	bmi.n	8000ade <__aeabi_dadd+0x63a>
 8000adc:	e607      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000ade:	4652      	mov	r2, sl
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <__aeabi_dadd+0x6bc>)
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	4692      	mov	sl, r2
 8000ae8:	e601      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aea:	003c      	movs	r4, r7
 8000aec:	000e      	movs	r6, r1
 8000aee:	3c20      	subs	r4, #32
 8000af0:	40e6      	lsrs	r6, r4
 8000af2:	2f20      	cmp	r7, #32
 8000af4:	d003      	beq.n	8000afe <__aeabi_dadd+0x65a>
 8000af6:	2440      	movs	r4, #64	; 0x40
 8000af8:	1be4      	subs	r4, r4, r7
 8000afa:	40a1      	lsls	r1, r4
 8000afc:	430b      	orrs	r3, r1
 8000afe:	001c      	movs	r4, r3
 8000b00:	1e63      	subs	r3, r4, #1
 8000b02:	419c      	sbcs	r4, r3
 8000b04:	4334      	orrs	r4, r6
 8000b06:	e65e      	b.n	80007c6 <__aeabi_dadd+0x322>
 8000b08:	4443      	add	r3, r8
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	4180      	sbcs	r0, r0
 8000b0e:	4449      	add	r1, r9
 8000b10:	468a      	mov	sl, r1
 8000b12:	4240      	negs	r0, r0
 8000b14:	001c      	movs	r4, r3
 8000b16:	4482      	add	sl, r0
 8000b18:	e6bc      	b.n	8000894 <__aeabi_dadd+0x3f0>
 8000b1a:	4653      	mov	r3, sl
 8000b1c:	4323      	orrs	r3, r4
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x67e>
 8000b20:	e6a9      	b.n	8000876 <__aeabi_dadd+0x3d2>
 8000b22:	e5e4      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000b24:	074a      	lsls	r2, r1, #29
 8000b26:	4313      	orrs	r3, r2
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	08c9      	lsrs	r1, r1, #3
 8000b2c:	0312      	lsls	r2, r2, #12
 8000b2e:	4211      	tst	r1, r2
 8000b30:	d009      	beq.n	8000b46 <__aeabi_dadd+0x6a2>
 8000b32:	4648      	mov	r0, r9
 8000b34:	08c4      	lsrs	r4, r0, #3
 8000b36:	4214      	tst	r4, r2
 8000b38:	d105      	bne.n	8000b46 <__aeabi_dadd+0x6a2>
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	4665      	mov	r5, ip
 8000b3e:	0021      	movs	r1, r4
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	0742      	lsls	r2, r0, #29
 8000b44:	4313      	orrs	r3, r2
 8000b46:	0f5a      	lsrs	r2, r3, #29
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	08db      	lsrs	r3, r3, #3
 8000b4c:	0752      	lsls	r2, r2, #29
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	e5fa      	b.n	8000748 <__aeabi_dadd+0x2a4>
 8000b52:	2300      	movs	r3, #0
 8000b54:	4a01      	ldr	r2, [pc, #4]	; (8000b5c <__aeabi_dadd+0x6b8>)
 8000b56:	001c      	movs	r4, r3
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x138>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	000007ff 	.word	0x000007ff
 8000b60:	ff7fffff 	.word	0xff7fffff

08000b64 <__aeabi_ddiv>:
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b66:	4657      	mov	r7, sl
 8000b68:	464e      	mov	r6, r9
 8000b6a:	4645      	mov	r5, r8
 8000b6c:	46de      	mov	lr, fp
 8000b6e:	b5e0      	push	{r5, r6, r7, lr}
 8000b70:	030c      	lsls	r4, r1, #12
 8000b72:	001f      	movs	r7, r3
 8000b74:	004b      	lsls	r3, r1, #1
 8000b76:	4681      	mov	r9, r0
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0005      	movs	r5, r0
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	0b24      	lsrs	r4, r4, #12
 8000b80:	0d5b      	lsrs	r3, r3, #21
 8000b82:	0fce      	lsrs	r6, r1, #31
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d100      	bne.n	8000b8a <__aeabi_ddiv+0x26>
 8000b88:	e152      	b.n	8000e30 <__aeabi_ddiv+0x2cc>
 8000b8a:	4ad2      	ldr	r2, [pc, #840]	; (8000ed4 <__aeabi_ddiv+0x370>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x2e>
 8000b90:	e16e      	b.n	8000e70 <__aeabi_ddiv+0x30c>
 8000b92:	0f42      	lsrs	r2, r0, #29
 8000b94:	00e4      	lsls	r4, r4, #3
 8000b96:	4314      	orrs	r4, r2
 8000b98:	2280      	movs	r2, #128	; 0x80
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	4322      	orrs	r2, r4
 8000b9e:	4690      	mov	r8, r2
 8000ba0:	4acd      	ldr	r2, [pc, #820]	; (8000ed8 <__aeabi_ddiv+0x374>)
 8000ba2:	00c5      	lsls	r5, r0, #3
 8000ba4:	4693      	mov	fp, r2
 8000ba6:	449b      	add	fp, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	4699      	mov	r9, r3
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	033c      	lsls	r4, r7, #12
 8000bb0:	007b      	lsls	r3, r7, #1
 8000bb2:	4650      	mov	r0, sl
 8000bb4:	0b24      	lsrs	r4, r4, #12
 8000bb6:	0d5b      	lsrs	r3, r3, #21
 8000bb8:	0fff      	lsrs	r7, r7, #31
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_ddiv+0x5c>
 8000bbe:	e11a      	b.n	8000df6 <__aeabi_ddiv+0x292>
 8000bc0:	4ac4      	ldr	r2, [pc, #784]	; (8000ed4 <__aeabi_ddiv+0x370>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_ddiv+0x64>
 8000bc6:	e15e      	b.n	8000e86 <__aeabi_ddiv+0x322>
 8000bc8:	0f42      	lsrs	r2, r0, #29
 8000bca:	00e4      	lsls	r4, r4, #3
 8000bcc:	4322      	orrs	r2, r4
 8000bce:	2480      	movs	r4, #128	; 0x80
 8000bd0:	0424      	lsls	r4, r4, #16
 8000bd2:	4314      	orrs	r4, r2
 8000bd4:	4ac0      	ldr	r2, [pc, #768]	; (8000ed8 <__aeabi_ddiv+0x374>)
 8000bd6:	00c1      	lsls	r1, r0, #3
 8000bd8:	4694      	mov	ip, r2
 8000bda:	465a      	mov	r2, fp
 8000bdc:	4463      	add	r3, ip
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	469b      	mov	fp, r3
 8000be2:	2000      	movs	r0, #0
 8000be4:	0033      	movs	r3, r6
 8000be6:	407b      	eors	r3, r7
 8000be8:	469a      	mov	sl, r3
 8000bea:	464b      	mov	r3, r9
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d827      	bhi.n	8000c40 <__aeabi_ddiv+0xdc>
 8000bf0:	4aba      	ldr	r2, [pc, #744]	; (8000edc <__aeabi_ddiv+0x378>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	58d3      	ldr	r3, [r2, r3]
 8000bf6:	469f      	mov	pc, r3
 8000bf8:	46b2      	mov	sl, r6
 8000bfa:	9b00      	ldr	r3, [sp, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d016      	beq.n	8000c2e <__aeabi_ddiv+0xca>
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xa2>
 8000c04:	e287      	b.n	8001116 <__aeabi_ddiv+0x5b2>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d000      	beq.n	8000c0c <__aeabi_ddiv+0xa8>
 8000c0a:	e0d5      	b.n	8000db8 <__aeabi_ddiv+0x254>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2500      	movs	r5, #0
 8000c12:	051b      	lsls	r3, r3, #20
 8000c14:	4313      	orrs	r3, r2
 8000c16:	4652      	mov	r2, sl
 8000c18:	07d2      	lsls	r2, r2, #31
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	0028      	movs	r0, r5
 8000c1e:	0019      	movs	r1, r3
 8000c20:	b005      	add	sp, #20
 8000c22:	bcf0      	pop	{r4, r5, r6, r7}
 8000c24:	46bb      	mov	fp, r7
 8000c26:	46b2      	mov	sl, r6
 8000c28:	46a9      	mov	r9, r5
 8000c2a:	46a0      	mov	r8, r4
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2500      	movs	r5, #0
 8000c32:	4ba8      	ldr	r3, [pc, #672]	; (8000ed4 <__aeabi_ddiv+0x370>)
 8000c34:	e7ed      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000c36:	46ba      	mov	sl, r7
 8000c38:	46a0      	mov	r8, r4
 8000c3a:	000d      	movs	r5, r1
 8000c3c:	9000      	str	r0, [sp, #0]
 8000c3e:	e7dc      	b.n	8000bfa <__aeabi_ddiv+0x96>
 8000c40:	4544      	cmp	r4, r8
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_ddiv+0xe2>
 8000c44:	e1c4      	b.n	8000fd0 <__aeabi_ddiv+0x46c>
 8000c46:	d100      	bne.n	8000c4a <__aeabi_ddiv+0xe6>
 8000c48:	e1bf      	b.n	8000fca <__aeabi_ddiv+0x466>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	425b      	negs	r3, r3
 8000c4e:	469c      	mov	ip, r3
 8000c50:	002e      	movs	r6, r5
 8000c52:	4640      	mov	r0, r8
 8000c54:	2500      	movs	r5, #0
 8000c56:	44e3      	add	fp, ip
 8000c58:	0223      	lsls	r3, r4, #8
 8000c5a:	0e0c      	lsrs	r4, r1, #24
 8000c5c:	431c      	orrs	r4, r3
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	4699      	mov	r9, r3
 8000c62:	0423      	lsls	r3, r4, #16
 8000c64:	020a      	lsls	r2, r1, #8
 8000c66:	0c1f      	lsrs	r7, r3, #16
 8000c68:	4649      	mov	r1, r9
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	9701      	str	r7, [sp, #4]
 8000c6e:	f7ff facd 	bl	800020c <__aeabi_uidivmod>
 8000c72:	0002      	movs	r2, r0
 8000c74:	437a      	muls	r2, r7
 8000c76:	040b      	lsls	r3, r1, #16
 8000c78:	0c31      	lsrs	r1, r6, #16
 8000c7a:	4680      	mov	r8, r0
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	428a      	cmp	r2, r1
 8000c80:	d907      	bls.n	8000c92 <__aeabi_ddiv+0x12e>
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	469c      	mov	ip, r3
 8000c88:	1909      	adds	r1, r1, r4
 8000c8a:	44e0      	add	r8, ip
 8000c8c:	428c      	cmp	r4, r1
 8000c8e:	d800      	bhi.n	8000c92 <__aeabi_ddiv+0x12e>
 8000c90:	e201      	b.n	8001096 <__aeabi_ddiv+0x532>
 8000c92:	1a88      	subs	r0, r1, r2
 8000c94:	4649      	mov	r1, r9
 8000c96:	f7ff fab9 	bl	800020c <__aeabi_uidivmod>
 8000c9a:	9a01      	ldr	r2, [sp, #4]
 8000c9c:	0436      	lsls	r6, r6, #16
 8000c9e:	4342      	muls	r2, r0
 8000ca0:	0409      	lsls	r1, r1, #16
 8000ca2:	0c36      	lsrs	r6, r6, #16
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	430e      	orrs	r6, r1
 8000ca8:	42b2      	cmp	r2, r6
 8000caa:	d904      	bls.n	8000cb6 <__aeabi_ddiv+0x152>
 8000cac:	1936      	adds	r6, r6, r4
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	42b4      	cmp	r4, r6
 8000cb2:	d800      	bhi.n	8000cb6 <__aeabi_ddiv+0x152>
 8000cb4:	e1e9      	b.n	800108a <__aeabi_ddiv+0x526>
 8000cb6:	1ab0      	subs	r0, r6, r2
 8000cb8:	4642      	mov	r2, r8
 8000cba:	9e00      	ldr	r6, [sp, #0]
 8000cbc:	0412      	lsls	r2, r2, #16
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	0c33      	lsrs	r3, r6, #16
 8000cc2:	001f      	movs	r7, r3
 8000cc4:	0c11      	lsrs	r1, r2, #16
 8000cc6:	4690      	mov	r8, r2
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	0413      	lsls	r3, r2, #16
 8000ccc:	0432      	lsls	r2, r6, #16
 8000cce:	0c16      	lsrs	r6, r2, #16
 8000cd0:	0032      	movs	r2, r6
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	435a      	muls	r2, r3
 8000cd6:	9603      	str	r6, [sp, #12]
 8000cd8:	437b      	muls	r3, r7
 8000cda:	434e      	muls	r6, r1
 8000cdc:	4379      	muls	r1, r7
 8000cde:	0c17      	lsrs	r7, r2, #16
 8000ce0:	46bc      	mov	ip, r7
 8000ce2:	199b      	adds	r3, r3, r6
 8000ce4:	4463      	add	r3, ip
 8000ce6:	429e      	cmp	r6, r3
 8000ce8:	d903      	bls.n	8000cf2 <__aeabi_ddiv+0x18e>
 8000cea:	2680      	movs	r6, #128	; 0x80
 8000cec:	0276      	lsls	r6, r6, #9
 8000cee:	46b4      	mov	ip, r6
 8000cf0:	4461      	add	r1, ip
 8000cf2:	0c1e      	lsrs	r6, r3, #16
 8000cf4:	1871      	adds	r1, r6, r1
 8000cf6:	0416      	lsls	r6, r2, #16
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	0c36      	lsrs	r6, r6, #16
 8000cfc:	199e      	adds	r6, r3, r6
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d302      	bcc.n	8000d08 <__aeabi_ddiv+0x1a4>
 8000d02:	d112      	bne.n	8000d2a <__aeabi_ddiv+0x1c6>
 8000d04:	42b5      	cmp	r5, r6
 8000d06:	d210      	bcs.n	8000d2a <__aeabi_ddiv+0x1c6>
 8000d08:	4643      	mov	r3, r8
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	469c      	mov	ip, r3
 8000d10:	4465      	add	r5, ip
 8000d12:	001f      	movs	r7, r3
 8000d14:	429d      	cmp	r5, r3
 8000d16:	419b      	sbcs	r3, r3
 8000d18:	425b      	negs	r3, r3
 8000d1a:	191b      	adds	r3, r3, r4
 8000d1c:	18c0      	adds	r0, r0, r3
 8000d1e:	4284      	cmp	r4, r0
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x1c0>
 8000d22:	e19e      	b.n	8001062 <__aeabi_ddiv+0x4fe>
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x1c4>
 8000d26:	e199      	b.n	800105c <__aeabi_ddiv+0x4f8>
 8000d28:	4690      	mov	r8, r2
 8000d2a:	1bae      	subs	r6, r5, r6
 8000d2c:	42b5      	cmp	r5, r6
 8000d2e:	41ad      	sbcs	r5, r5
 8000d30:	1a40      	subs	r0, r0, r1
 8000d32:	426d      	negs	r5, r5
 8000d34:	1b40      	subs	r0, r0, r5
 8000d36:	4284      	cmp	r4, r0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x1d8>
 8000d3a:	e1d2      	b.n	80010e2 <__aeabi_ddiv+0x57e>
 8000d3c:	4649      	mov	r1, r9
 8000d3e:	f7ff fa65 	bl	800020c <__aeabi_uidivmod>
 8000d42:	9a01      	ldr	r2, [sp, #4]
 8000d44:	040b      	lsls	r3, r1, #16
 8000d46:	4342      	muls	r2, r0
 8000d48:	0c31      	lsrs	r1, r6, #16
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	428a      	cmp	r2, r1
 8000d50:	d900      	bls.n	8000d54 <__aeabi_ddiv+0x1f0>
 8000d52:	e16c      	b.n	800102e <__aeabi_ddiv+0x4ca>
 8000d54:	1a88      	subs	r0, r1, r2
 8000d56:	4649      	mov	r1, r9
 8000d58:	f7ff fa58 	bl	800020c <__aeabi_uidivmod>
 8000d5c:	9a01      	ldr	r2, [sp, #4]
 8000d5e:	0436      	lsls	r6, r6, #16
 8000d60:	4342      	muls	r2, r0
 8000d62:	0409      	lsls	r1, r1, #16
 8000d64:	0c36      	lsrs	r6, r6, #16
 8000d66:	0003      	movs	r3, r0
 8000d68:	430e      	orrs	r6, r1
 8000d6a:	42b2      	cmp	r2, r6
 8000d6c:	d900      	bls.n	8000d70 <__aeabi_ddiv+0x20c>
 8000d6e:	e153      	b.n	8001018 <__aeabi_ddiv+0x4b4>
 8000d70:	9803      	ldr	r0, [sp, #12]
 8000d72:	1ab6      	subs	r6, r6, r2
 8000d74:	0002      	movs	r2, r0
 8000d76:	042d      	lsls	r5, r5, #16
 8000d78:	431d      	orrs	r5, r3
 8000d7a:	9f02      	ldr	r7, [sp, #8]
 8000d7c:	042b      	lsls	r3, r5, #16
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	435a      	muls	r2, r3
 8000d82:	437b      	muls	r3, r7
 8000d84:	469c      	mov	ip, r3
 8000d86:	0c29      	lsrs	r1, r5, #16
 8000d88:	4348      	muls	r0, r1
 8000d8a:	0c13      	lsrs	r3, r2, #16
 8000d8c:	4484      	add	ip, r0
 8000d8e:	4463      	add	r3, ip
 8000d90:	4379      	muls	r1, r7
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d903      	bls.n	8000d9e <__aeabi_ddiv+0x23a>
 8000d96:	2080      	movs	r0, #128	; 0x80
 8000d98:	0240      	lsls	r0, r0, #9
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	4461      	add	r1, ip
 8000d9e:	0c18      	lsrs	r0, r3, #16
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	0c12      	lsrs	r2, r2, #16
 8000da6:	1840      	adds	r0, r0, r1
 8000da8:	189b      	adds	r3, r3, r2
 8000daa:	4286      	cmp	r6, r0
 8000dac:	d200      	bcs.n	8000db0 <__aeabi_ddiv+0x24c>
 8000dae:	e100      	b.n	8000fb2 <__aeabi_ddiv+0x44e>
 8000db0:	d100      	bne.n	8000db4 <__aeabi_ddiv+0x250>
 8000db2:	e0fb      	b.n	8000fac <__aeabi_ddiv+0x448>
 8000db4:	2301      	movs	r3, #1
 8000db6:	431d      	orrs	r5, r3
 8000db8:	4b49      	ldr	r3, [pc, #292]	; (8000ee0 <__aeabi_ddiv+0x37c>)
 8000dba:	445b      	add	r3, fp
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dc00      	bgt.n	8000dc2 <__aeabi_ddiv+0x25e>
 8000dc0:	e0aa      	b.n	8000f18 <__aeabi_ddiv+0x3b4>
 8000dc2:	076a      	lsls	r2, r5, #29
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_ddiv+0x264>
 8000dc6:	e13d      	b.n	8001044 <__aeabi_ddiv+0x4e0>
 8000dc8:	08e9      	lsrs	r1, r5, #3
 8000dca:	4642      	mov	r2, r8
 8000dcc:	01d2      	lsls	r2, r2, #7
 8000dce:	d506      	bpl.n	8000dde <__aeabi_ddiv+0x27a>
 8000dd0:	4642      	mov	r2, r8
 8000dd2:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <__aeabi_ddiv+0x380>)
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	4690      	mov	r8, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	445b      	add	r3, fp
 8000dde:	4a42      	ldr	r2, [pc, #264]	; (8000ee8 <__aeabi_ddiv+0x384>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_ddiv+0x282>
 8000de4:	e723      	b.n	8000c2e <__aeabi_ddiv+0xca>
 8000de6:	4642      	mov	r2, r8
 8000de8:	055b      	lsls	r3, r3, #21
 8000dea:	0755      	lsls	r5, r2, #29
 8000dec:	0252      	lsls	r2, r2, #9
 8000dee:	430d      	orrs	r5, r1
 8000df0:	0b12      	lsrs	r2, r2, #12
 8000df2:	0d5b      	lsrs	r3, r3, #21
 8000df4:	e70d      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000df6:	4651      	mov	r1, sl
 8000df8:	4321      	orrs	r1, r4
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x29a>
 8000dfc:	e07c      	b.n	8000ef8 <__aeabi_ddiv+0x394>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x2a0>
 8000e02:	e0fb      	b.n	8000ffc <__aeabi_ddiv+0x498>
 8000e04:	0020      	movs	r0, r4
 8000e06:	f001 f96f 	bl	80020e8 <__clzsi2>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	3a0b      	subs	r2, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	4652      	mov	r2, sl
 8000e14:	0001      	movs	r1, r0
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	4653      	mov	r3, sl
 8000e1a:	3908      	subs	r1, #8
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	408c      	lsls	r4, r1
 8000e20:	0019      	movs	r1, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <__aeabi_ddiv+0x388>)
 8000e26:	4458      	add	r0, fp
 8000e28:	469b      	mov	fp, r3
 8000e2a:	4483      	add	fp, r0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e6d9      	b.n	8000be4 <__aeabi_ddiv+0x80>
 8000e30:	0003      	movs	r3, r0
 8000e32:	4323      	orrs	r3, r4
 8000e34:	4698      	mov	r8, r3
 8000e36:	d044      	beq.n	8000ec2 <__aeabi_ddiv+0x35e>
 8000e38:	2c00      	cmp	r4, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_ddiv+0x2da>
 8000e3c:	e0cf      	b.n	8000fde <__aeabi_ddiv+0x47a>
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f001 f952 	bl	80020e8 <__clzsi2>
 8000e44:	0001      	movs	r1, r0
 8000e46:	0002      	movs	r2, r0
 8000e48:	390b      	subs	r1, #11
 8000e4a:	231d      	movs	r3, #29
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	4649      	mov	r1, r9
 8000e50:	0010      	movs	r0, r2
 8000e52:	40d9      	lsrs	r1, r3
 8000e54:	3808      	subs	r0, #8
 8000e56:	4084      	lsls	r4, r0
 8000e58:	000b      	movs	r3, r1
 8000e5a:	464d      	mov	r5, r9
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	4698      	mov	r8, r3
 8000e60:	4085      	lsls	r5, r0
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <__aeabi_ddiv+0x38c>)
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	469b      	mov	fp, r3
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	e69e      	b.n	8000bae <__aeabi_ddiv+0x4a>
 8000e70:	0002      	movs	r2, r0
 8000e72:	4322      	orrs	r2, r4
 8000e74:	4690      	mov	r8, r2
 8000e76:	d11d      	bne.n	8000eb4 <__aeabi_ddiv+0x350>
 8000e78:	2208      	movs	r2, #8
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4691      	mov	r9, r2
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e693      	b.n	8000bae <__aeabi_ddiv+0x4a>
 8000e86:	4651      	mov	r1, sl
 8000e88:	4321      	orrs	r1, r4
 8000e8a:	d109      	bne.n	8000ea0 <__aeabi_ddiv+0x33c>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	464a      	mov	r2, r9
 8000e90:	431a      	orrs	r2, r3
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <__aeabi_ddiv+0x390>)
 8000e94:	4691      	mov	r9, r2
 8000e96:	469c      	mov	ip, r3
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	44e3      	add	fp, ip
 8000e9e:	e6a1      	b.n	8000be4 <__aeabi_ddiv+0x80>
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	464a      	mov	r2, r9
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <__aeabi_ddiv+0x390>)
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	469c      	mov	ip, r3
 8000eac:	4651      	mov	r1, sl
 8000eae:	2003      	movs	r0, #3
 8000eb0:	44e3      	add	fp, ip
 8000eb2:	e697      	b.n	8000be4 <__aeabi_ddiv+0x80>
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	469b      	mov	fp, r3
 8000eb8:	2303      	movs	r3, #3
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	4691      	mov	r9, r2
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	e675      	b.n	8000bae <__aeabi_ddiv+0x4a>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	469b      	mov	fp, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	2500      	movs	r5, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	e66d      	b.n	8000bae <__aeabi_ddiv+0x4a>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	fffffc01 	.word	0xfffffc01
 8000edc:	08006b28 	.word	0x08006b28
 8000ee0:	000003ff 	.word	0x000003ff
 8000ee4:	feffffff 	.word	0xfeffffff
 8000ee8:	000007fe 	.word	0x000007fe
 8000eec:	000003f3 	.word	0x000003f3
 8000ef0:	fffffc0d 	.word	0xfffffc0d
 8000ef4:	fffff801 	.word	0xfffff801
 8000ef8:	464a      	mov	r2, r9
 8000efa:	2301      	movs	r3, #1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	4691      	mov	r9, r2
 8000f00:	2400      	movs	r4, #0
 8000f02:	2001      	movs	r0, #1
 8000f04:	e66e      	b.n	8000be4 <__aeabi_ddiv+0x80>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	4b88      	ldr	r3, [pc, #544]	; (8001130 <__aeabi_ddiv+0x5cc>)
 8000f10:	0312      	lsls	r2, r2, #12
 8000f12:	e67e      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000f14:	2501      	movs	r5, #1
 8000f16:	426d      	negs	r5, r5
 8000f18:	2201      	movs	r2, #1
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	2a38      	cmp	r2, #56	; 0x38
 8000f1e:	dd00      	ble.n	8000f22 <__aeabi_ddiv+0x3be>
 8000f20:	e674      	b.n	8000c0c <__aeabi_ddiv+0xa8>
 8000f22:	2a1f      	cmp	r2, #31
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_ddiv+0x3c4>
 8000f26:	e0bd      	b.n	80010a4 <__aeabi_ddiv+0x540>
 8000f28:	211f      	movs	r1, #31
 8000f2a:	4249      	negs	r1, r1
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	4641      	mov	r1, r8
 8000f30:	40d9      	lsrs	r1, r3
 8000f32:	000b      	movs	r3, r1
 8000f34:	2a20      	cmp	r2, #32
 8000f36:	d004      	beq.n	8000f42 <__aeabi_ddiv+0x3de>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	4a7e      	ldr	r2, [pc, #504]	; (8001134 <__aeabi_ddiv+0x5d0>)
 8000f3c:	445a      	add	r2, fp
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	430d      	orrs	r5, r1
 8000f42:	0029      	movs	r1, r5
 8000f44:	1e4a      	subs	r2, r1, #1
 8000f46:	4191      	sbcs	r1, r2
 8000f48:	4319      	orrs	r1, r3
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	001d      	movs	r5, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	400d      	ands	r5, r1
 8000f52:	420b      	tst	r3, r1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_ddiv+0x3f4>
 8000f56:	e0d0      	b.n	80010fa <__aeabi_ddiv+0x596>
 8000f58:	220f      	movs	r2, #15
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	2a04      	cmp	r2, #4
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x400>
 8000f62:	e0c7      	b.n	80010f4 <__aeabi_ddiv+0x590>
 8000f64:	1d0a      	adds	r2, r1, #4
 8000f66:	428a      	cmp	r2, r1
 8000f68:	4189      	sbcs	r1, r1
 8000f6a:	4249      	negs	r1, r1
 8000f6c:	185b      	adds	r3, r3, r1
 8000f6e:	0011      	movs	r1, r2
 8000f70:	021a      	lsls	r2, r3, #8
 8000f72:	d400      	bmi.n	8000f76 <__aeabi_ddiv+0x412>
 8000f74:	e0be      	b.n	80010f4 <__aeabi_ddiv+0x590>
 8000f76:	2301      	movs	r3, #1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e649      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	4643      	mov	r3, r8
 8000f82:	0312      	lsls	r2, r2, #12
 8000f84:	4213      	tst	r3, r2
 8000f86:	d008      	beq.n	8000f9a <__aeabi_ddiv+0x436>
 8000f88:	4214      	tst	r4, r2
 8000f8a:	d106      	bne.n	8000f9a <__aeabi_ddiv+0x436>
 8000f8c:	4322      	orrs	r2, r4
 8000f8e:	0312      	lsls	r2, r2, #12
 8000f90:	46ba      	mov	sl, r7
 8000f92:	000d      	movs	r5, r1
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <__aeabi_ddiv+0x5cc>)
 8000f96:	0b12      	lsrs	r2, r2, #12
 8000f98:	e63b      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	0312      	lsls	r2, r2, #12
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	46b2      	mov	sl, r6
 8000fa6:	4b62      	ldr	r3, [pc, #392]	; (8001130 <__aeabi_ddiv+0x5cc>)
 8000fa8:	0b12      	lsrs	r2, r2, #12
 8000faa:	e632      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_ddiv+0x44e>
 8000fb0:	e702      	b.n	8000db8 <__aeabi_ddiv+0x254>
 8000fb2:	19a6      	adds	r6, r4, r6
 8000fb4:	1e6a      	subs	r2, r5, #1
 8000fb6:	42a6      	cmp	r6, r4
 8000fb8:	d200      	bcs.n	8000fbc <__aeabi_ddiv+0x458>
 8000fba:	e089      	b.n	80010d0 <__aeabi_ddiv+0x56c>
 8000fbc:	4286      	cmp	r6, r0
 8000fbe:	d200      	bcs.n	8000fc2 <__aeabi_ddiv+0x45e>
 8000fc0:	e09f      	b.n	8001102 <__aeabi_ddiv+0x59e>
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x462>
 8000fc4:	e0af      	b.n	8001126 <__aeabi_ddiv+0x5c2>
 8000fc6:	0015      	movs	r5, r2
 8000fc8:	e6f4      	b.n	8000db4 <__aeabi_ddiv+0x250>
 8000fca:	42a9      	cmp	r1, r5
 8000fcc:	d900      	bls.n	8000fd0 <__aeabi_ddiv+0x46c>
 8000fce:	e63c      	b.n	8000c4a <__aeabi_ddiv+0xe6>
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	07de      	lsls	r6, r3, #31
 8000fd4:	0858      	lsrs	r0, r3, #1
 8000fd6:	086b      	lsrs	r3, r5, #1
 8000fd8:	431e      	orrs	r6, r3
 8000fda:	07ed      	lsls	r5, r5, #31
 8000fdc:	e63c      	b.n	8000c58 <__aeabi_ddiv+0xf4>
 8000fde:	f001 f883 	bl	80020e8 <__clzsi2>
 8000fe2:	0001      	movs	r1, r0
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	3115      	adds	r1, #21
 8000fe8:	3220      	adds	r2, #32
 8000fea:	291c      	cmp	r1, #28
 8000fec:	dc00      	bgt.n	8000ff0 <__aeabi_ddiv+0x48c>
 8000fee:	e72c      	b.n	8000e4a <__aeabi_ddiv+0x2e6>
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	3808      	subs	r0, #8
 8000ff4:	4083      	lsls	r3, r0
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	e732      	b.n	8000e62 <__aeabi_ddiv+0x2fe>
 8000ffc:	f001 f874 	bl	80020e8 <__clzsi2>
 8001000:	0003      	movs	r3, r0
 8001002:	001a      	movs	r2, r3
 8001004:	3215      	adds	r2, #21
 8001006:	3020      	adds	r0, #32
 8001008:	2a1c      	cmp	r2, #28
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x4aa>
 800100c:	e6ff      	b.n	8000e0e <__aeabi_ddiv+0x2aa>
 800100e:	4654      	mov	r4, sl
 8001010:	3b08      	subs	r3, #8
 8001012:	2100      	movs	r1, #0
 8001014:	409c      	lsls	r4, r3
 8001016:	e705      	b.n	8000e24 <__aeabi_ddiv+0x2c0>
 8001018:	1936      	adds	r6, r6, r4
 800101a:	3b01      	subs	r3, #1
 800101c:	42b4      	cmp	r4, r6
 800101e:	d900      	bls.n	8001022 <__aeabi_ddiv+0x4be>
 8001020:	e6a6      	b.n	8000d70 <__aeabi_ddiv+0x20c>
 8001022:	42b2      	cmp	r2, r6
 8001024:	d800      	bhi.n	8001028 <__aeabi_ddiv+0x4c4>
 8001026:	e6a3      	b.n	8000d70 <__aeabi_ddiv+0x20c>
 8001028:	1e83      	subs	r3, r0, #2
 800102a:	1936      	adds	r6, r6, r4
 800102c:	e6a0      	b.n	8000d70 <__aeabi_ddiv+0x20c>
 800102e:	1909      	adds	r1, r1, r4
 8001030:	3d01      	subs	r5, #1
 8001032:	428c      	cmp	r4, r1
 8001034:	d900      	bls.n	8001038 <__aeabi_ddiv+0x4d4>
 8001036:	e68d      	b.n	8000d54 <__aeabi_ddiv+0x1f0>
 8001038:	428a      	cmp	r2, r1
 800103a:	d800      	bhi.n	800103e <__aeabi_ddiv+0x4da>
 800103c:	e68a      	b.n	8000d54 <__aeabi_ddiv+0x1f0>
 800103e:	1e85      	subs	r5, r0, #2
 8001040:	1909      	adds	r1, r1, r4
 8001042:	e687      	b.n	8000d54 <__aeabi_ddiv+0x1f0>
 8001044:	220f      	movs	r2, #15
 8001046:	402a      	ands	r2, r5
 8001048:	2a04      	cmp	r2, #4
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0x4ea>
 800104c:	e6bc      	b.n	8000dc8 <__aeabi_ddiv+0x264>
 800104e:	1d29      	adds	r1, r5, #4
 8001050:	42a9      	cmp	r1, r5
 8001052:	41ad      	sbcs	r5, r5
 8001054:	426d      	negs	r5, r5
 8001056:	08c9      	lsrs	r1, r1, #3
 8001058:	44a8      	add	r8, r5
 800105a:	e6b6      	b.n	8000dca <__aeabi_ddiv+0x266>
 800105c:	42af      	cmp	r7, r5
 800105e:	d900      	bls.n	8001062 <__aeabi_ddiv+0x4fe>
 8001060:	e662      	b.n	8000d28 <__aeabi_ddiv+0x1c4>
 8001062:	4281      	cmp	r1, r0
 8001064:	d804      	bhi.n	8001070 <__aeabi_ddiv+0x50c>
 8001066:	d000      	beq.n	800106a <__aeabi_ddiv+0x506>
 8001068:	e65e      	b.n	8000d28 <__aeabi_ddiv+0x1c4>
 800106a:	42ae      	cmp	r6, r5
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x50c>
 800106e:	e65b      	b.n	8000d28 <__aeabi_ddiv+0x1c4>
 8001070:	2302      	movs	r3, #2
 8001072:	425b      	negs	r3, r3
 8001074:	469c      	mov	ip, r3
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	44e0      	add	r8, ip
 800107a:	469c      	mov	ip, r3
 800107c:	4465      	add	r5, ip
 800107e:	429d      	cmp	r5, r3
 8001080:	419b      	sbcs	r3, r3
 8001082:	425b      	negs	r3, r3
 8001084:	191b      	adds	r3, r3, r4
 8001086:	18c0      	adds	r0, r0, r3
 8001088:	e64f      	b.n	8000d2a <__aeabi_ddiv+0x1c6>
 800108a:	42b2      	cmp	r2, r6
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x52c>
 800108e:	e612      	b.n	8000cb6 <__aeabi_ddiv+0x152>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1936      	adds	r6, r6, r4
 8001094:	e60f      	b.n	8000cb6 <__aeabi_ddiv+0x152>
 8001096:	428a      	cmp	r2, r1
 8001098:	d800      	bhi.n	800109c <__aeabi_ddiv+0x538>
 800109a:	e5fa      	b.n	8000c92 <__aeabi_ddiv+0x12e>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	4698      	mov	r8, r3
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	e5f6      	b.n	8000c92 <__aeabi_ddiv+0x12e>
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <__aeabi_ddiv+0x5d4>)
 80010a6:	0028      	movs	r0, r5
 80010a8:	445b      	add	r3, fp
 80010aa:	4641      	mov	r1, r8
 80010ac:	409d      	lsls	r5, r3
 80010ae:	4099      	lsls	r1, r3
 80010b0:	40d0      	lsrs	r0, r2
 80010b2:	1e6b      	subs	r3, r5, #1
 80010b4:	419d      	sbcs	r5, r3
 80010b6:	4643      	mov	r3, r8
 80010b8:	4301      	orrs	r1, r0
 80010ba:	4329      	orrs	r1, r5
 80010bc:	40d3      	lsrs	r3, r2
 80010be:	074a      	lsls	r2, r1, #29
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x560>
 80010c2:	e755      	b.n	8000f70 <__aeabi_ddiv+0x40c>
 80010c4:	220f      	movs	r2, #15
 80010c6:	400a      	ands	r2, r1
 80010c8:	2a04      	cmp	r2, #4
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x56a>
 80010cc:	e74a      	b.n	8000f64 <__aeabi_ddiv+0x400>
 80010ce:	e74f      	b.n	8000f70 <__aeabi_ddiv+0x40c>
 80010d0:	0015      	movs	r5, r2
 80010d2:	4286      	cmp	r6, r0
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x574>
 80010d6:	e66d      	b.n	8000db4 <__aeabi_ddiv+0x250>
 80010d8:	9a00      	ldr	r2, [sp, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x57c>
 80010de:	e669      	b.n	8000db4 <__aeabi_ddiv+0x250>
 80010e0:	e66a      	b.n	8000db8 <__aeabi_ddiv+0x254>
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <__aeabi_ddiv+0x5d8>)
 80010e4:	445b      	add	r3, fp
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc00      	bgt.n	80010ec <__aeabi_ddiv+0x588>
 80010ea:	e713      	b.n	8000f14 <__aeabi_ddiv+0x3b0>
 80010ec:	2501      	movs	r5, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	44a8      	add	r8, r5
 80010f2:	e66a      	b.n	8000dca <__aeabi_ddiv+0x266>
 80010f4:	075d      	lsls	r5, r3, #29
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	0b1a      	lsrs	r2, r3, #12
 80010fa:	08c9      	lsrs	r1, r1, #3
 80010fc:	2300      	movs	r3, #0
 80010fe:	430d      	orrs	r5, r1
 8001100:	e587      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8001102:	9900      	ldr	r1, [sp, #0]
 8001104:	3d02      	subs	r5, #2
 8001106:	004a      	lsls	r2, r1, #1
 8001108:	428a      	cmp	r2, r1
 800110a:	41bf      	sbcs	r7, r7
 800110c:	427f      	negs	r7, r7
 800110e:	193f      	adds	r7, r7, r4
 8001110:	19f6      	adds	r6, r6, r7
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	e7dd      	b.n	80010d2 <__aeabi_ddiv+0x56e>
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	4643      	mov	r3, r8
 800111a:	0312      	lsls	r2, r2, #12
 800111c:	431a      	orrs	r2, r3
 800111e:	0312      	lsls	r2, r2, #12
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <__aeabi_ddiv+0x5cc>)
 8001122:	0b12      	lsrs	r2, r2, #12
 8001124:	e575      	b.n	8000c12 <__aeabi_ddiv+0xae>
 8001126:	9900      	ldr	r1, [sp, #0]
 8001128:	4299      	cmp	r1, r3
 800112a:	d3ea      	bcc.n	8001102 <__aeabi_ddiv+0x59e>
 800112c:	0015      	movs	r5, r2
 800112e:	e7d3      	b.n	80010d8 <__aeabi_ddiv+0x574>
 8001130:	000007ff 	.word	0x000007ff
 8001134:	0000043e 	.word	0x0000043e
 8001138:	0000041e 	.word	0x0000041e
 800113c:	000003ff 	.word	0x000003ff

08001140 <__eqdf2>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	464e      	mov	r6, r9
 8001144:	4645      	mov	r5, r8
 8001146:	46de      	mov	lr, fp
 8001148:	4657      	mov	r7, sl
 800114a:	4690      	mov	r8, r2
 800114c:	b5e0      	push	{r5, r6, r7, lr}
 800114e:	0017      	movs	r7, r2
 8001150:	031a      	lsls	r2, r3, #12
 8001152:	0b12      	lsrs	r2, r2, #12
 8001154:	0005      	movs	r5, r0
 8001156:	4684      	mov	ip, r0
 8001158:	4819      	ldr	r0, [pc, #100]	; (80011c0 <__eqdf2+0x80>)
 800115a:	030e      	lsls	r6, r1, #12
 800115c:	004c      	lsls	r4, r1, #1
 800115e:	4691      	mov	r9, r2
 8001160:	005a      	lsls	r2, r3, #1
 8001162:	0fdb      	lsrs	r3, r3, #31
 8001164:	469b      	mov	fp, r3
 8001166:	0b36      	lsrs	r6, r6, #12
 8001168:	0d64      	lsrs	r4, r4, #21
 800116a:	0fc9      	lsrs	r1, r1, #31
 800116c:	0d52      	lsrs	r2, r2, #21
 800116e:	4284      	cmp	r4, r0
 8001170:	d019      	beq.n	80011a6 <__eqdf2+0x66>
 8001172:	4282      	cmp	r2, r0
 8001174:	d010      	beq.n	8001198 <__eqdf2+0x58>
 8001176:	2001      	movs	r0, #1
 8001178:	4294      	cmp	r4, r2
 800117a:	d10e      	bne.n	800119a <__eqdf2+0x5a>
 800117c:	454e      	cmp	r6, r9
 800117e:	d10c      	bne.n	800119a <__eqdf2+0x5a>
 8001180:	2001      	movs	r0, #1
 8001182:	45c4      	cmp	ip, r8
 8001184:	d109      	bne.n	800119a <__eqdf2+0x5a>
 8001186:	4559      	cmp	r1, fp
 8001188:	d017      	beq.n	80011ba <__eqdf2+0x7a>
 800118a:	2c00      	cmp	r4, #0
 800118c:	d105      	bne.n	800119a <__eqdf2+0x5a>
 800118e:	0030      	movs	r0, r6
 8001190:	4328      	orrs	r0, r5
 8001192:	1e43      	subs	r3, r0, #1
 8001194:	4198      	sbcs	r0, r3
 8001196:	e000      	b.n	800119a <__eqdf2+0x5a>
 8001198:	2001      	movs	r0, #1
 800119a:	bcf0      	pop	{r4, r5, r6, r7}
 800119c:	46bb      	mov	fp, r7
 800119e:	46b2      	mov	sl, r6
 80011a0:	46a9      	mov	r9, r5
 80011a2:	46a0      	mov	r8, r4
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	0033      	movs	r3, r6
 80011a8:	2001      	movs	r0, #1
 80011aa:	432b      	orrs	r3, r5
 80011ac:	d1f5      	bne.n	800119a <__eqdf2+0x5a>
 80011ae:	42a2      	cmp	r2, r4
 80011b0:	d1f3      	bne.n	800119a <__eqdf2+0x5a>
 80011b2:	464b      	mov	r3, r9
 80011b4:	433b      	orrs	r3, r7
 80011b6:	d1f0      	bne.n	800119a <__eqdf2+0x5a>
 80011b8:	e7e2      	b.n	8001180 <__eqdf2+0x40>
 80011ba:	2000      	movs	r0, #0
 80011bc:	e7ed      	b.n	800119a <__eqdf2+0x5a>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	4647      	mov	r7, r8
 80011c8:	46ce      	mov	lr, r9
 80011ca:	0004      	movs	r4, r0
 80011cc:	0018      	movs	r0, r3
 80011ce:	0016      	movs	r6, r2
 80011d0:	031b      	lsls	r3, r3, #12
 80011d2:	0b1b      	lsrs	r3, r3, #12
 80011d4:	4d2d      	ldr	r5, [pc, #180]	; (800128c <__gedf2+0xc8>)
 80011d6:	004a      	lsls	r2, r1, #1
 80011d8:	4699      	mov	r9, r3
 80011da:	b580      	push	{r7, lr}
 80011dc:	0043      	lsls	r3, r0, #1
 80011de:	030f      	lsls	r7, r1, #12
 80011e0:	46a4      	mov	ip, r4
 80011e2:	46b0      	mov	r8, r6
 80011e4:	0b3f      	lsrs	r7, r7, #12
 80011e6:	0d52      	lsrs	r2, r2, #21
 80011e8:	0fc9      	lsrs	r1, r1, #31
 80011ea:	0d5b      	lsrs	r3, r3, #21
 80011ec:	0fc0      	lsrs	r0, r0, #31
 80011ee:	42aa      	cmp	r2, r5
 80011f0:	d021      	beq.n	8001236 <__gedf2+0x72>
 80011f2:	42ab      	cmp	r3, r5
 80011f4:	d013      	beq.n	800121e <__gedf2+0x5a>
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d122      	bne.n	8001240 <__gedf2+0x7c>
 80011fa:	433c      	orrs	r4, r7
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <__gedf2+0x42>
 8001200:	464d      	mov	r5, r9
 8001202:	432e      	orrs	r6, r5
 8001204:	d022      	beq.n	800124c <__gedf2+0x88>
 8001206:	2c00      	cmp	r4, #0
 8001208:	d010      	beq.n	800122c <__gedf2+0x68>
 800120a:	4281      	cmp	r1, r0
 800120c:	d022      	beq.n	8001254 <__gedf2+0x90>
 800120e:	2002      	movs	r0, #2
 8001210:	3901      	subs	r1, #1
 8001212:	4008      	ands	r0, r1
 8001214:	3801      	subs	r0, #1
 8001216:	bcc0      	pop	{r6, r7}
 8001218:	46b9      	mov	r9, r7
 800121a:	46b0      	mov	r8, r6
 800121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121e:	464d      	mov	r5, r9
 8001220:	432e      	orrs	r6, r5
 8001222:	d129      	bne.n	8001278 <__gedf2+0xb4>
 8001224:	2a00      	cmp	r2, #0
 8001226:	d1f0      	bne.n	800120a <__gedf2+0x46>
 8001228:	433c      	orrs	r4, r7
 800122a:	d1ee      	bne.n	800120a <__gedf2+0x46>
 800122c:	2800      	cmp	r0, #0
 800122e:	d1f2      	bne.n	8001216 <__gedf2+0x52>
 8001230:	2001      	movs	r0, #1
 8001232:	4240      	negs	r0, r0
 8001234:	e7ef      	b.n	8001216 <__gedf2+0x52>
 8001236:	003d      	movs	r5, r7
 8001238:	4325      	orrs	r5, r4
 800123a:	d11d      	bne.n	8001278 <__gedf2+0xb4>
 800123c:	4293      	cmp	r3, r2
 800123e:	d0ee      	beq.n	800121e <__gedf2+0x5a>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e2      	bne.n	800120a <__gedf2+0x46>
 8001244:	464c      	mov	r4, r9
 8001246:	4326      	orrs	r6, r4
 8001248:	d1df      	bne.n	800120a <__gedf2+0x46>
 800124a:	e7e0      	b.n	800120e <__gedf2+0x4a>
 800124c:	2000      	movs	r0, #0
 800124e:	2c00      	cmp	r4, #0
 8001250:	d0e1      	beq.n	8001216 <__gedf2+0x52>
 8001252:	e7dc      	b.n	800120e <__gedf2+0x4a>
 8001254:	429a      	cmp	r2, r3
 8001256:	dc0a      	bgt.n	800126e <__gedf2+0xaa>
 8001258:	dbe8      	blt.n	800122c <__gedf2+0x68>
 800125a:	454f      	cmp	r7, r9
 800125c:	d8d7      	bhi.n	800120e <__gedf2+0x4a>
 800125e:	d00e      	beq.n	800127e <__gedf2+0xba>
 8001260:	2000      	movs	r0, #0
 8001262:	454f      	cmp	r7, r9
 8001264:	d2d7      	bcs.n	8001216 <__gedf2+0x52>
 8001266:	2900      	cmp	r1, #0
 8001268:	d0e2      	beq.n	8001230 <__gedf2+0x6c>
 800126a:	0008      	movs	r0, r1
 800126c:	e7d3      	b.n	8001216 <__gedf2+0x52>
 800126e:	4243      	negs	r3, r0
 8001270:	4158      	adcs	r0, r3
 8001272:	0040      	lsls	r0, r0, #1
 8001274:	3801      	subs	r0, #1
 8001276:	e7ce      	b.n	8001216 <__gedf2+0x52>
 8001278:	2002      	movs	r0, #2
 800127a:	4240      	negs	r0, r0
 800127c:	e7cb      	b.n	8001216 <__gedf2+0x52>
 800127e:	45c4      	cmp	ip, r8
 8001280:	d8c5      	bhi.n	800120e <__gedf2+0x4a>
 8001282:	2000      	movs	r0, #0
 8001284:	45c4      	cmp	ip, r8
 8001286:	d2c6      	bcs.n	8001216 <__gedf2+0x52>
 8001288:	e7ed      	b.n	8001266 <__gedf2+0xa2>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	000007ff 	.word	0x000007ff

08001290 <__ledf2>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	4647      	mov	r7, r8
 8001294:	46ce      	mov	lr, r9
 8001296:	0004      	movs	r4, r0
 8001298:	0018      	movs	r0, r3
 800129a:	0016      	movs	r6, r2
 800129c:	031b      	lsls	r3, r3, #12
 800129e:	0b1b      	lsrs	r3, r3, #12
 80012a0:	4d2c      	ldr	r5, [pc, #176]	; (8001354 <__ledf2+0xc4>)
 80012a2:	004a      	lsls	r2, r1, #1
 80012a4:	4699      	mov	r9, r3
 80012a6:	b580      	push	{r7, lr}
 80012a8:	0043      	lsls	r3, r0, #1
 80012aa:	030f      	lsls	r7, r1, #12
 80012ac:	46a4      	mov	ip, r4
 80012ae:	46b0      	mov	r8, r6
 80012b0:	0b3f      	lsrs	r7, r7, #12
 80012b2:	0d52      	lsrs	r2, r2, #21
 80012b4:	0fc9      	lsrs	r1, r1, #31
 80012b6:	0d5b      	lsrs	r3, r3, #21
 80012b8:	0fc0      	lsrs	r0, r0, #31
 80012ba:	42aa      	cmp	r2, r5
 80012bc:	d00d      	beq.n	80012da <__ledf2+0x4a>
 80012be:	42ab      	cmp	r3, r5
 80012c0:	d010      	beq.n	80012e4 <__ledf2+0x54>
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d127      	bne.n	8001316 <__ledf2+0x86>
 80012c6:	433c      	orrs	r4, r7
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d111      	bne.n	80012f0 <__ledf2+0x60>
 80012cc:	464d      	mov	r5, r9
 80012ce:	432e      	orrs	r6, r5
 80012d0:	d10e      	bne.n	80012f0 <__ledf2+0x60>
 80012d2:	2000      	movs	r0, #0
 80012d4:	2c00      	cmp	r4, #0
 80012d6:	d015      	beq.n	8001304 <__ledf2+0x74>
 80012d8:	e00e      	b.n	80012f8 <__ledf2+0x68>
 80012da:	003d      	movs	r5, r7
 80012dc:	4325      	orrs	r5, r4
 80012de:	d110      	bne.n	8001302 <__ledf2+0x72>
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d118      	bne.n	8001316 <__ledf2+0x86>
 80012e4:	464d      	mov	r5, r9
 80012e6:	432e      	orrs	r6, r5
 80012e8:	d10b      	bne.n	8001302 <__ledf2+0x72>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d102      	bne.n	80012f4 <__ledf2+0x64>
 80012ee:	433c      	orrs	r4, r7
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d00b      	beq.n	800130c <__ledf2+0x7c>
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d014      	beq.n	8001322 <__ledf2+0x92>
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	e000      	b.n	8001304 <__ledf2+0x74>
 8001302:	2002      	movs	r0, #2
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	2800      	cmp	r0, #0
 800130e:	d1f9      	bne.n	8001304 <__ledf2+0x74>
 8001310:	2001      	movs	r0, #1
 8001312:	4240      	negs	r0, r0
 8001314:	e7f6      	b.n	8001304 <__ledf2+0x74>
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ec      	bne.n	80012f4 <__ledf2+0x64>
 800131a:	464c      	mov	r4, r9
 800131c:	4326      	orrs	r6, r4
 800131e:	d1e9      	bne.n	80012f4 <__ledf2+0x64>
 8001320:	e7ea      	b.n	80012f8 <__ledf2+0x68>
 8001322:	429a      	cmp	r2, r3
 8001324:	dd04      	ble.n	8001330 <__ledf2+0xa0>
 8001326:	4243      	negs	r3, r0
 8001328:	4158      	adcs	r0, r3
 800132a:	0040      	lsls	r0, r0, #1
 800132c:	3801      	subs	r0, #1
 800132e:	e7e9      	b.n	8001304 <__ledf2+0x74>
 8001330:	429a      	cmp	r2, r3
 8001332:	dbeb      	blt.n	800130c <__ledf2+0x7c>
 8001334:	454f      	cmp	r7, r9
 8001336:	d8df      	bhi.n	80012f8 <__ledf2+0x68>
 8001338:	d006      	beq.n	8001348 <__ledf2+0xb8>
 800133a:	2000      	movs	r0, #0
 800133c:	454f      	cmp	r7, r9
 800133e:	d2e1      	bcs.n	8001304 <__ledf2+0x74>
 8001340:	2900      	cmp	r1, #0
 8001342:	d0e5      	beq.n	8001310 <__ledf2+0x80>
 8001344:	0008      	movs	r0, r1
 8001346:	e7dd      	b.n	8001304 <__ledf2+0x74>
 8001348:	45c4      	cmp	ip, r8
 800134a:	d8d5      	bhi.n	80012f8 <__ledf2+0x68>
 800134c:	2000      	movs	r0, #0
 800134e:	45c4      	cmp	ip, r8
 8001350:	d2d8      	bcs.n	8001304 <__ledf2+0x74>
 8001352:	e7f5      	b.n	8001340 <__ledf2+0xb0>
 8001354:	000007ff 	.word	0x000007ff

08001358 <__aeabi_dmul>:
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	4645      	mov	r5, r8
 800135c:	46de      	mov	lr, fp
 800135e:	4657      	mov	r7, sl
 8001360:	464e      	mov	r6, r9
 8001362:	b5e0      	push	{r5, r6, r7, lr}
 8001364:	001f      	movs	r7, r3
 8001366:	030b      	lsls	r3, r1, #12
 8001368:	0b1b      	lsrs	r3, r3, #12
 800136a:	469b      	mov	fp, r3
 800136c:	004d      	lsls	r5, r1, #1
 800136e:	0fcb      	lsrs	r3, r1, #31
 8001370:	0004      	movs	r4, r0
 8001372:	4691      	mov	r9, r2
 8001374:	4698      	mov	r8, r3
 8001376:	b087      	sub	sp, #28
 8001378:	0d6d      	lsrs	r5, r5, #21
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x26>
 800137c:	e1cd      	b.n	800171a <__aeabi_dmul+0x3c2>
 800137e:	4bce      	ldr	r3, [pc, #824]	; (80016b8 <__aeabi_dmul+0x360>)
 8001380:	429d      	cmp	r5, r3
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x2e>
 8001384:	e1e9      	b.n	800175a <__aeabi_dmul+0x402>
 8001386:	465a      	mov	r2, fp
 8001388:	0f43      	lsrs	r3, r0, #29
 800138a:	00d2      	lsls	r2, r2, #3
 800138c:	4313      	orrs	r3, r2
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	0412      	lsls	r2, r2, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	00c3      	lsls	r3, r0, #3
 8001396:	469a      	mov	sl, r3
 8001398:	4bc8      	ldr	r3, [pc, #800]	; (80016bc <__aeabi_dmul+0x364>)
 800139a:	4693      	mov	fp, r2
 800139c:	469c      	mov	ip, r3
 800139e:	2300      	movs	r3, #0
 80013a0:	2600      	movs	r6, #0
 80013a2:	4465      	add	r5, ip
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	033c      	lsls	r4, r7, #12
 80013a8:	007b      	lsls	r3, r7, #1
 80013aa:	4648      	mov	r0, r9
 80013ac:	0b24      	lsrs	r4, r4, #12
 80013ae:	0d5b      	lsrs	r3, r3, #21
 80013b0:	0fff      	lsrs	r7, r7, #31
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dmul+0x60>
 80013b6:	e189      	b.n	80016cc <__aeabi_dmul+0x374>
 80013b8:	4abf      	ldr	r2, [pc, #764]	; (80016b8 <__aeabi_dmul+0x360>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <__aeabi_dmul+0x9a>
 80013be:	0f42      	lsrs	r2, r0, #29
 80013c0:	00e4      	lsls	r4, r4, #3
 80013c2:	4322      	orrs	r2, r4
 80013c4:	2480      	movs	r4, #128	; 0x80
 80013c6:	0424      	lsls	r4, r4, #16
 80013c8:	4314      	orrs	r4, r2
 80013ca:	4abc      	ldr	r2, [pc, #752]	; (80016bc <__aeabi_dmul+0x364>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4694      	mov	ip, r2
 80013d0:	4642      	mov	r2, r8
 80013d2:	4463      	add	r3, ip
 80013d4:	195b      	adds	r3, r3, r5
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	9b01      	ldr	r3, [sp, #4]
 80013da:	407a      	eors	r2, r7
 80013dc:	3301      	adds	r3, #1
 80013de:	00c0      	lsls	r0, r0, #3
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2e0a      	cmp	r6, #10
 80013e6:	dd1c      	ble.n	8001422 <__aeabi_dmul+0xca>
 80013e8:	003a      	movs	r2, r7
 80013ea:	2e0b      	cmp	r6, #11
 80013ec:	d05e      	beq.n	80014ac <__aeabi_dmul+0x154>
 80013ee:	4647      	mov	r7, r8
 80013f0:	e056      	b.n	80014a0 <__aeabi_dmul+0x148>
 80013f2:	4649      	mov	r1, r9
 80013f4:	4bb0      	ldr	r3, [pc, #704]	; (80016b8 <__aeabi_dmul+0x360>)
 80013f6:	4321      	orrs	r1, r4
 80013f8:	18eb      	adds	r3, r5, r3
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2900      	cmp	r1, #0
 80013fe:	d12a      	bne.n	8001456 <__aeabi_dmul+0xfe>
 8001400:	2080      	movs	r0, #128	; 0x80
 8001402:	2202      	movs	r2, #2
 8001404:	0100      	lsls	r0, r0, #4
 8001406:	002b      	movs	r3, r5
 8001408:	4684      	mov	ip, r0
 800140a:	4316      	orrs	r6, r2
 800140c:	4642      	mov	r2, r8
 800140e:	4463      	add	r3, ip
 8001410:	407a      	eors	r2, r7
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2e0a      	cmp	r6, #10
 8001418:	dd00      	ble.n	800141c <__aeabi_dmul+0xc4>
 800141a:	e231      	b.n	8001880 <__aeabi_dmul+0x528>
 800141c:	2000      	movs	r0, #0
 800141e:	2400      	movs	r4, #0
 8001420:	2102      	movs	r1, #2
 8001422:	2e02      	cmp	r6, #2
 8001424:	dc26      	bgt.n	8001474 <__aeabi_dmul+0x11c>
 8001426:	3e01      	subs	r6, #1
 8001428:	2e01      	cmp	r6, #1
 800142a:	d852      	bhi.n	80014d2 <__aeabi_dmul+0x17a>
 800142c:	2902      	cmp	r1, #2
 800142e:	d04c      	beq.n	80014ca <__aeabi_dmul+0x172>
 8001430:	2901      	cmp	r1, #1
 8001432:	d000      	beq.n	8001436 <__aeabi_dmul+0xde>
 8001434:	e118      	b.n	8001668 <__aeabi_dmul+0x310>
 8001436:	2300      	movs	r3, #0
 8001438:	2400      	movs	r4, #0
 800143a:	2500      	movs	r5, #0
 800143c:	051b      	lsls	r3, r3, #20
 800143e:	4323      	orrs	r3, r4
 8001440:	07d2      	lsls	r2, r2, #31
 8001442:	4313      	orrs	r3, r2
 8001444:	0028      	movs	r0, r5
 8001446:	0019      	movs	r1, r3
 8001448:	b007      	add	sp, #28
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	2203      	movs	r2, #3
 800145a:	0109      	lsls	r1, r1, #4
 800145c:	002b      	movs	r3, r5
 800145e:	468c      	mov	ip, r1
 8001460:	4316      	orrs	r6, r2
 8001462:	4642      	mov	r2, r8
 8001464:	4463      	add	r3, ip
 8001466:	407a      	eors	r2, r7
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2e0a      	cmp	r6, #10
 800146e:	dd00      	ble.n	8001472 <__aeabi_dmul+0x11a>
 8001470:	e228      	b.n	80018c4 <__aeabi_dmul+0x56c>
 8001472:	2103      	movs	r1, #3
 8001474:	2501      	movs	r5, #1
 8001476:	40b5      	lsls	r5, r6
 8001478:	46ac      	mov	ip, r5
 800147a:	26a6      	movs	r6, #166	; 0xa6
 800147c:	4663      	mov	r3, ip
 800147e:	00f6      	lsls	r6, r6, #3
 8001480:	4035      	ands	r5, r6
 8001482:	4233      	tst	r3, r6
 8001484:	d10b      	bne.n	800149e <__aeabi_dmul+0x146>
 8001486:	2690      	movs	r6, #144	; 0x90
 8001488:	00b6      	lsls	r6, r6, #2
 800148a:	4233      	tst	r3, r6
 800148c:	d118      	bne.n	80014c0 <__aeabi_dmul+0x168>
 800148e:	3eb9      	subs	r6, #185	; 0xb9
 8001490:	3eff      	subs	r6, #255	; 0xff
 8001492:	421e      	tst	r6, r3
 8001494:	d01d      	beq.n	80014d2 <__aeabi_dmul+0x17a>
 8001496:	46a3      	mov	fp, r4
 8001498:	4682      	mov	sl, r0
 800149a:	9100      	str	r1, [sp, #0]
 800149c:	e000      	b.n	80014a0 <__aeabi_dmul+0x148>
 800149e:	0017      	movs	r7, r2
 80014a0:	9900      	ldr	r1, [sp, #0]
 80014a2:	003a      	movs	r2, r7
 80014a4:	2902      	cmp	r1, #2
 80014a6:	d010      	beq.n	80014ca <__aeabi_dmul+0x172>
 80014a8:	465c      	mov	r4, fp
 80014aa:	4650      	mov	r0, sl
 80014ac:	2903      	cmp	r1, #3
 80014ae:	d1bf      	bne.n	8001430 <__aeabi_dmul+0xd8>
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	031b      	lsls	r3, r3, #12
 80014b4:	431c      	orrs	r4, r3
 80014b6:	0324      	lsls	r4, r4, #12
 80014b8:	0005      	movs	r5, r0
 80014ba:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <__aeabi_dmul+0x360>)
 80014bc:	0b24      	lsrs	r4, r4, #12
 80014be:	e7bd      	b.n	800143c <__aeabi_dmul+0xe4>
 80014c0:	2480      	movs	r4, #128	; 0x80
 80014c2:	2200      	movs	r2, #0
 80014c4:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <__aeabi_dmul+0x360>)
 80014c6:	0324      	lsls	r4, r4, #12
 80014c8:	e7b8      	b.n	800143c <__aeabi_dmul+0xe4>
 80014ca:	2400      	movs	r4, #0
 80014cc:	2500      	movs	r5, #0
 80014ce:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <__aeabi_dmul+0x360>)
 80014d0:	e7b4      	b.n	800143c <__aeabi_dmul+0xe4>
 80014d2:	4653      	mov	r3, sl
 80014d4:	041e      	lsls	r6, r3, #16
 80014d6:	0c36      	lsrs	r6, r6, #16
 80014d8:	0c1f      	lsrs	r7, r3, #16
 80014da:	0033      	movs	r3, r6
 80014dc:	0c01      	lsrs	r1, r0, #16
 80014de:	0400      	lsls	r0, r0, #16
 80014e0:	0c00      	lsrs	r0, r0, #16
 80014e2:	4343      	muls	r3, r0
 80014e4:	4698      	mov	r8, r3
 80014e6:	0003      	movs	r3, r0
 80014e8:	437b      	muls	r3, r7
 80014ea:	4699      	mov	r9, r3
 80014ec:	0033      	movs	r3, r6
 80014ee:	434b      	muls	r3, r1
 80014f0:	469c      	mov	ip, r3
 80014f2:	4643      	mov	r3, r8
 80014f4:	000d      	movs	r5, r1
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	469a      	mov	sl, r3
 80014fa:	437d      	muls	r5, r7
 80014fc:	44cc      	add	ip, r9
 80014fe:	44d4      	add	ip, sl
 8001500:	9500      	str	r5, [sp, #0]
 8001502:	45e1      	cmp	r9, ip
 8001504:	d904      	bls.n	8001510 <__aeabi_dmul+0x1b8>
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	4699      	mov	r9, r3
 800150c:	444d      	add	r5, r9
 800150e:	9500      	str	r5, [sp, #0]
 8001510:	4663      	mov	r3, ip
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	001d      	movs	r5, r3
 8001516:	4663      	mov	r3, ip
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	469c      	mov	ip, r3
 800151c:	4643      	mov	r3, r8
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	4698      	mov	r8, r3
 8001524:	4663      	mov	r3, ip
 8001526:	4443      	add	r3, r8
 8001528:	9303      	str	r3, [sp, #12]
 800152a:	0c23      	lsrs	r3, r4, #16
 800152c:	4698      	mov	r8, r3
 800152e:	0033      	movs	r3, r6
 8001530:	0424      	lsls	r4, r4, #16
 8001532:	0c24      	lsrs	r4, r4, #16
 8001534:	4363      	muls	r3, r4
 8001536:	469c      	mov	ip, r3
 8001538:	0023      	movs	r3, r4
 800153a:	437b      	muls	r3, r7
 800153c:	4699      	mov	r9, r3
 800153e:	4643      	mov	r3, r8
 8001540:	435e      	muls	r6, r3
 8001542:	435f      	muls	r7, r3
 8001544:	444e      	add	r6, r9
 8001546:	4663      	mov	r3, ip
 8001548:	46b2      	mov	sl, r6
 800154a:	0c1e      	lsrs	r6, r3, #16
 800154c:	4456      	add	r6, sl
 800154e:	45b1      	cmp	r9, r6
 8001550:	d903      	bls.n	800155a <__aeabi_dmul+0x202>
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	444f      	add	r7, r9
 800155a:	0c33      	lsrs	r3, r6, #16
 800155c:	4699      	mov	r9, r3
 800155e:	003b      	movs	r3, r7
 8001560:	444b      	add	r3, r9
 8001562:	9305      	str	r3, [sp, #20]
 8001564:	4663      	mov	r3, ip
 8001566:	46ac      	mov	ip, r5
 8001568:	041f      	lsls	r7, r3, #16
 800156a:	0c3f      	lsrs	r7, r7, #16
 800156c:	0436      	lsls	r6, r6, #16
 800156e:	19f6      	adds	r6, r6, r7
 8001570:	44b4      	add	ip, r6
 8001572:	4663      	mov	r3, ip
 8001574:	9304      	str	r3, [sp, #16]
 8001576:	465b      	mov	r3, fp
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	469c      	mov	ip, r3
 800157c:	465b      	mov	r3, fp
 800157e:	041f      	lsls	r7, r3, #16
 8001580:	0c3f      	lsrs	r7, r7, #16
 8001582:	003b      	movs	r3, r7
 8001584:	4343      	muls	r3, r0
 8001586:	4699      	mov	r9, r3
 8001588:	4663      	mov	r3, ip
 800158a:	4343      	muls	r3, r0
 800158c:	469a      	mov	sl, r3
 800158e:	464b      	mov	r3, r9
 8001590:	4660      	mov	r0, ip
 8001592:	0c1b      	lsrs	r3, r3, #16
 8001594:	469b      	mov	fp, r3
 8001596:	4348      	muls	r0, r1
 8001598:	4379      	muls	r1, r7
 800159a:	4451      	add	r1, sl
 800159c:	4459      	add	r1, fp
 800159e:	458a      	cmp	sl, r1
 80015a0:	d903      	bls.n	80015aa <__aeabi_dmul+0x252>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	469a      	mov	sl, r3
 80015a8:	4450      	add	r0, sl
 80015aa:	0c0b      	lsrs	r3, r1, #16
 80015ac:	469a      	mov	sl, r3
 80015ae:	464b      	mov	r3, r9
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	0c1b      	lsrs	r3, r3, #16
 80015b4:	4699      	mov	r9, r3
 80015b6:	003b      	movs	r3, r7
 80015b8:	4363      	muls	r3, r4
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	4645      	mov	r5, r8
 80015be:	4449      	add	r1, r9
 80015c0:	4699      	mov	r9, r3
 80015c2:	4663      	mov	r3, ip
 80015c4:	435c      	muls	r4, r3
 80015c6:	436b      	muls	r3, r5
 80015c8:	469c      	mov	ip, r3
 80015ca:	464b      	mov	r3, r9
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	4698      	mov	r8, r3
 80015d0:	436f      	muls	r7, r5
 80015d2:	193f      	adds	r7, r7, r4
 80015d4:	4447      	add	r7, r8
 80015d6:	4450      	add	r0, sl
 80015d8:	42bc      	cmp	r4, r7
 80015da:	d903      	bls.n	80015e4 <__aeabi_dmul+0x28c>
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	4698      	mov	r8, r3
 80015e2:	44c4      	add	ip, r8
 80015e4:	9b04      	ldr	r3, [sp, #16]
 80015e6:	9d00      	ldr	r5, [sp, #0]
 80015e8:	4698      	mov	r8, r3
 80015ea:	4445      	add	r5, r8
 80015ec:	42b5      	cmp	r5, r6
 80015ee:	41b6      	sbcs	r6, r6
 80015f0:	4273      	negs	r3, r6
 80015f2:	4698      	mov	r8, r3
 80015f4:	464b      	mov	r3, r9
 80015f6:	041e      	lsls	r6, r3, #16
 80015f8:	9b05      	ldr	r3, [sp, #20]
 80015fa:	043c      	lsls	r4, r7, #16
 80015fc:	4699      	mov	r9, r3
 80015fe:	0c36      	lsrs	r6, r6, #16
 8001600:	19a4      	adds	r4, r4, r6
 8001602:	444c      	add	r4, r9
 8001604:	46a1      	mov	r9, r4
 8001606:	4683      	mov	fp, r0
 8001608:	186e      	adds	r6, r5, r1
 800160a:	44c1      	add	r9, r8
 800160c:	428e      	cmp	r6, r1
 800160e:	4189      	sbcs	r1, r1
 8001610:	44cb      	add	fp, r9
 8001612:	465d      	mov	r5, fp
 8001614:	4249      	negs	r1, r1
 8001616:	186d      	adds	r5, r5, r1
 8001618:	429c      	cmp	r4, r3
 800161a:	41a4      	sbcs	r4, r4
 800161c:	45c1      	cmp	r9, r8
 800161e:	419b      	sbcs	r3, r3
 8001620:	4583      	cmp	fp, r0
 8001622:	4180      	sbcs	r0, r0
 8001624:	428d      	cmp	r5, r1
 8001626:	4189      	sbcs	r1, r1
 8001628:	425b      	negs	r3, r3
 800162a:	4264      	negs	r4, r4
 800162c:	431c      	orrs	r4, r3
 800162e:	4240      	negs	r0, r0
 8001630:	9b03      	ldr	r3, [sp, #12]
 8001632:	4249      	negs	r1, r1
 8001634:	4301      	orrs	r1, r0
 8001636:	0270      	lsls	r0, r6, #9
 8001638:	0c3f      	lsrs	r7, r7, #16
 800163a:	4318      	orrs	r0, r3
 800163c:	19e4      	adds	r4, r4, r7
 800163e:	1e47      	subs	r7, r0, #1
 8001640:	41b8      	sbcs	r0, r7
 8001642:	1864      	adds	r4, r4, r1
 8001644:	4464      	add	r4, ip
 8001646:	0df6      	lsrs	r6, r6, #23
 8001648:	0261      	lsls	r1, r4, #9
 800164a:	4330      	orrs	r0, r6
 800164c:	0dec      	lsrs	r4, r5, #23
 800164e:	026e      	lsls	r6, r5, #9
 8001650:	430c      	orrs	r4, r1
 8001652:	4330      	orrs	r0, r6
 8001654:	01c9      	lsls	r1, r1, #7
 8001656:	d400      	bmi.n	800165a <__aeabi_dmul+0x302>
 8001658:	e0f1      	b.n	800183e <__aeabi_dmul+0x4e6>
 800165a:	2101      	movs	r1, #1
 800165c:	0843      	lsrs	r3, r0, #1
 800165e:	4001      	ands	r1, r0
 8001660:	430b      	orrs	r3, r1
 8001662:	07e0      	lsls	r0, r4, #31
 8001664:	4318      	orrs	r0, r3
 8001666:	0864      	lsrs	r4, r4, #1
 8001668:	4915      	ldr	r1, [pc, #84]	; (80016c0 <__aeabi_dmul+0x368>)
 800166a:	9b02      	ldr	r3, [sp, #8]
 800166c:	468c      	mov	ip, r1
 800166e:	4463      	add	r3, ip
 8001670:	2b00      	cmp	r3, #0
 8001672:	dc00      	bgt.n	8001676 <__aeabi_dmul+0x31e>
 8001674:	e097      	b.n	80017a6 <__aeabi_dmul+0x44e>
 8001676:	0741      	lsls	r1, r0, #29
 8001678:	d009      	beq.n	800168e <__aeabi_dmul+0x336>
 800167a:	210f      	movs	r1, #15
 800167c:	4001      	ands	r1, r0
 800167e:	2904      	cmp	r1, #4
 8001680:	d005      	beq.n	800168e <__aeabi_dmul+0x336>
 8001682:	1d01      	adds	r1, r0, #4
 8001684:	4281      	cmp	r1, r0
 8001686:	4180      	sbcs	r0, r0
 8001688:	4240      	negs	r0, r0
 800168a:	1824      	adds	r4, r4, r0
 800168c:	0008      	movs	r0, r1
 800168e:	01e1      	lsls	r1, r4, #7
 8001690:	d506      	bpl.n	80016a0 <__aeabi_dmul+0x348>
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	00c9      	lsls	r1, r1, #3
 8001696:	468c      	mov	ip, r1
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <__aeabi_dmul+0x36c>)
 800169a:	401c      	ands	r4, r3
 800169c:	9b02      	ldr	r3, [sp, #8]
 800169e:	4463      	add	r3, ip
 80016a0:	4909      	ldr	r1, [pc, #36]	; (80016c8 <__aeabi_dmul+0x370>)
 80016a2:	428b      	cmp	r3, r1
 80016a4:	dd00      	ble.n	80016a8 <__aeabi_dmul+0x350>
 80016a6:	e710      	b.n	80014ca <__aeabi_dmul+0x172>
 80016a8:	0761      	lsls	r1, r4, #29
 80016aa:	08c5      	lsrs	r5, r0, #3
 80016ac:	0264      	lsls	r4, r4, #9
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	430d      	orrs	r5, r1
 80016b2:	0b24      	lsrs	r4, r4, #12
 80016b4:	0d5b      	lsrs	r3, r3, #21
 80016b6:	e6c1      	b.n	800143c <__aeabi_dmul+0xe4>
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	fffffc01 	.word	0xfffffc01
 80016c0:	000003ff 	.word	0x000003ff
 80016c4:	feffffff 	.word	0xfeffffff
 80016c8:	000007fe 	.word	0x000007fe
 80016cc:	464b      	mov	r3, r9
 80016ce:	4323      	orrs	r3, r4
 80016d0:	d059      	beq.n	8001786 <__aeabi_dmul+0x42e>
 80016d2:	2c00      	cmp	r4, #0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0x380>
 80016d6:	e0a3      	b.n	8001820 <__aeabi_dmul+0x4c8>
 80016d8:	0020      	movs	r0, r4
 80016da:	f000 fd05 	bl	80020e8 <__clzsi2>
 80016de:	0001      	movs	r1, r0
 80016e0:	0003      	movs	r3, r0
 80016e2:	390b      	subs	r1, #11
 80016e4:	221d      	movs	r2, #29
 80016e6:	1a52      	subs	r2, r2, r1
 80016e8:	4649      	mov	r1, r9
 80016ea:	0018      	movs	r0, r3
 80016ec:	40d1      	lsrs	r1, r2
 80016ee:	464a      	mov	r2, r9
 80016f0:	3808      	subs	r0, #8
 80016f2:	4082      	lsls	r2, r0
 80016f4:	4084      	lsls	r4, r0
 80016f6:	0010      	movs	r0, r2
 80016f8:	430c      	orrs	r4, r1
 80016fa:	4a74      	ldr	r2, [pc, #464]	; (80018cc <__aeabi_dmul+0x574>)
 80016fc:	1aeb      	subs	r3, r5, r3
 80016fe:	4694      	mov	ip, r2
 8001700:	4642      	mov	r2, r8
 8001702:	4463      	add	r3, ip
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	9b01      	ldr	r3, [sp, #4]
 8001708:	407a      	eors	r2, r7
 800170a:	3301      	adds	r3, #1
 800170c:	2100      	movs	r1, #0
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2e0a      	cmp	r6, #10
 8001714:	dd00      	ble.n	8001718 <__aeabi_dmul+0x3c0>
 8001716:	e667      	b.n	80013e8 <__aeabi_dmul+0x90>
 8001718:	e683      	b.n	8001422 <__aeabi_dmul+0xca>
 800171a:	465b      	mov	r3, fp
 800171c:	4303      	orrs	r3, r0
 800171e:	469a      	mov	sl, r3
 8001720:	d02a      	beq.n	8001778 <__aeabi_dmul+0x420>
 8001722:	465b      	mov	r3, fp
 8001724:	2b00      	cmp	r3, #0
 8001726:	d06d      	beq.n	8001804 <__aeabi_dmul+0x4ac>
 8001728:	4658      	mov	r0, fp
 800172a:	f000 fcdd 	bl	80020e8 <__clzsi2>
 800172e:	0001      	movs	r1, r0
 8001730:	0003      	movs	r3, r0
 8001732:	390b      	subs	r1, #11
 8001734:	221d      	movs	r2, #29
 8001736:	1a52      	subs	r2, r2, r1
 8001738:	0021      	movs	r1, r4
 800173a:	0018      	movs	r0, r3
 800173c:	465d      	mov	r5, fp
 800173e:	40d1      	lsrs	r1, r2
 8001740:	3808      	subs	r0, #8
 8001742:	4085      	lsls	r5, r0
 8001744:	000a      	movs	r2, r1
 8001746:	4084      	lsls	r4, r0
 8001748:	432a      	orrs	r2, r5
 800174a:	4693      	mov	fp, r2
 800174c:	46a2      	mov	sl, r4
 800174e:	4d5f      	ldr	r5, [pc, #380]	; (80018cc <__aeabi_dmul+0x574>)
 8001750:	2600      	movs	r6, #0
 8001752:	1aed      	subs	r5, r5, r3
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	e625      	b.n	80013a6 <__aeabi_dmul+0x4e>
 800175a:	465b      	mov	r3, fp
 800175c:	4303      	orrs	r3, r0
 800175e:	469a      	mov	sl, r3
 8001760:	d105      	bne.n	800176e <__aeabi_dmul+0x416>
 8001762:	2300      	movs	r3, #0
 8001764:	469b      	mov	fp, r3
 8001766:	3302      	adds	r3, #2
 8001768:	2608      	movs	r6, #8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	e61b      	b.n	80013a6 <__aeabi_dmul+0x4e>
 800176e:	2303      	movs	r3, #3
 8001770:	4682      	mov	sl, r0
 8001772:	260c      	movs	r6, #12
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	e616      	b.n	80013a6 <__aeabi_dmul+0x4e>
 8001778:	2300      	movs	r3, #0
 800177a:	469b      	mov	fp, r3
 800177c:	3301      	adds	r3, #1
 800177e:	2604      	movs	r6, #4
 8001780:	2500      	movs	r5, #0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	e60f      	b.n	80013a6 <__aeabi_dmul+0x4e>
 8001786:	4642      	mov	r2, r8
 8001788:	3301      	adds	r3, #1
 800178a:	9501      	str	r5, [sp, #4]
 800178c:	431e      	orrs	r6, r3
 800178e:	9b01      	ldr	r3, [sp, #4]
 8001790:	407a      	eors	r2, r7
 8001792:	3301      	adds	r3, #1
 8001794:	2400      	movs	r4, #0
 8001796:	2000      	movs	r0, #0
 8001798:	2101      	movs	r1, #1
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	2e0a      	cmp	r6, #10
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dmul+0x44c>
 80017a2:	e621      	b.n	80013e8 <__aeabi_dmul+0x90>
 80017a4:	e63d      	b.n	8001422 <__aeabi_dmul+0xca>
 80017a6:	2101      	movs	r1, #1
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	2938      	cmp	r1, #56	; 0x38
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dmul+0x458>
 80017ae:	e642      	b.n	8001436 <__aeabi_dmul+0xde>
 80017b0:	291f      	cmp	r1, #31
 80017b2:	dd47      	ble.n	8001844 <__aeabi_dmul+0x4ec>
 80017b4:	261f      	movs	r6, #31
 80017b6:	0025      	movs	r5, r4
 80017b8:	4276      	negs	r6, r6
 80017ba:	1af3      	subs	r3, r6, r3
 80017bc:	40dd      	lsrs	r5, r3
 80017be:	002b      	movs	r3, r5
 80017c0:	2920      	cmp	r1, #32
 80017c2:	d005      	beq.n	80017d0 <__aeabi_dmul+0x478>
 80017c4:	4942      	ldr	r1, [pc, #264]	; (80018d0 <__aeabi_dmul+0x578>)
 80017c6:	9d02      	ldr	r5, [sp, #8]
 80017c8:	468c      	mov	ip, r1
 80017ca:	4465      	add	r5, ip
 80017cc:	40ac      	lsls	r4, r5
 80017ce:	4320      	orrs	r0, r4
 80017d0:	1e41      	subs	r1, r0, #1
 80017d2:	4188      	sbcs	r0, r1
 80017d4:	4318      	orrs	r0, r3
 80017d6:	2307      	movs	r3, #7
 80017d8:	001d      	movs	r5, r3
 80017da:	2400      	movs	r4, #0
 80017dc:	4005      	ands	r5, r0
 80017de:	4203      	tst	r3, r0
 80017e0:	d04a      	beq.n	8001878 <__aeabi_dmul+0x520>
 80017e2:	230f      	movs	r3, #15
 80017e4:	2400      	movs	r4, #0
 80017e6:	4003      	ands	r3, r0
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d042      	beq.n	8001872 <__aeabi_dmul+0x51a>
 80017ec:	1d03      	adds	r3, r0, #4
 80017ee:	4283      	cmp	r3, r0
 80017f0:	4180      	sbcs	r0, r0
 80017f2:	4240      	negs	r0, r0
 80017f4:	1824      	adds	r4, r4, r0
 80017f6:	0018      	movs	r0, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d53a      	bpl.n	8001872 <__aeabi_dmul+0x51a>
 80017fc:	2301      	movs	r3, #1
 80017fe:	2400      	movs	r4, #0
 8001800:	2500      	movs	r5, #0
 8001802:	e61b      	b.n	800143c <__aeabi_dmul+0xe4>
 8001804:	f000 fc70 	bl	80020e8 <__clzsi2>
 8001808:	0001      	movs	r1, r0
 800180a:	0003      	movs	r3, r0
 800180c:	3115      	adds	r1, #21
 800180e:	3320      	adds	r3, #32
 8001810:	291c      	cmp	r1, #28
 8001812:	dd8f      	ble.n	8001734 <__aeabi_dmul+0x3dc>
 8001814:	3808      	subs	r0, #8
 8001816:	2200      	movs	r2, #0
 8001818:	4084      	lsls	r4, r0
 800181a:	4692      	mov	sl, r2
 800181c:	46a3      	mov	fp, r4
 800181e:	e796      	b.n	800174e <__aeabi_dmul+0x3f6>
 8001820:	f000 fc62 	bl	80020e8 <__clzsi2>
 8001824:	0001      	movs	r1, r0
 8001826:	0003      	movs	r3, r0
 8001828:	3115      	adds	r1, #21
 800182a:	3320      	adds	r3, #32
 800182c:	291c      	cmp	r1, #28
 800182e:	dc00      	bgt.n	8001832 <__aeabi_dmul+0x4da>
 8001830:	e758      	b.n	80016e4 <__aeabi_dmul+0x38c>
 8001832:	0002      	movs	r2, r0
 8001834:	464c      	mov	r4, r9
 8001836:	3a08      	subs	r2, #8
 8001838:	2000      	movs	r0, #0
 800183a:	4094      	lsls	r4, r2
 800183c:	e75d      	b.n	80016fa <__aeabi_dmul+0x3a2>
 800183e:	9b01      	ldr	r3, [sp, #4]
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	e711      	b.n	8001668 <__aeabi_dmul+0x310>
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <__aeabi_dmul+0x57c>)
 8001846:	0026      	movs	r6, r4
 8001848:	469c      	mov	ip, r3
 800184a:	0003      	movs	r3, r0
 800184c:	9d02      	ldr	r5, [sp, #8]
 800184e:	40cb      	lsrs	r3, r1
 8001850:	4465      	add	r5, ip
 8001852:	40ae      	lsls	r6, r5
 8001854:	431e      	orrs	r6, r3
 8001856:	0003      	movs	r3, r0
 8001858:	40ab      	lsls	r3, r5
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	4183      	sbcs	r3, r0
 800185e:	0030      	movs	r0, r6
 8001860:	4318      	orrs	r0, r3
 8001862:	40cc      	lsrs	r4, r1
 8001864:	0743      	lsls	r3, r0, #29
 8001866:	d0c7      	beq.n	80017f8 <__aeabi_dmul+0x4a0>
 8001868:	230f      	movs	r3, #15
 800186a:	4003      	ands	r3, r0
 800186c:	2b04      	cmp	r3, #4
 800186e:	d1bd      	bne.n	80017ec <__aeabi_dmul+0x494>
 8001870:	e7c2      	b.n	80017f8 <__aeabi_dmul+0x4a0>
 8001872:	0765      	lsls	r5, r4, #29
 8001874:	0264      	lsls	r4, r4, #9
 8001876:	0b24      	lsrs	r4, r4, #12
 8001878:	08c0      	lsrs	r0, r0, #3
 800187a:	2300      	movs	r3, #0
 800187c:	4305      	orrs	r5, r0
 800187e:	e5dd      	b.n	800143c <__aeabi_dmul+0xe4>
 8001880:	2500      	movs	r5, #0
 8001882:	2302      	movs	r3, #2
 8001884:	2e0f      	cmp	r6, #15
 8001886:	d10c      	bne.n	80018a2 <__aeabi_dmul+0x54a>
 8001888:	2480      	movs	r4, #128	; 0x80
 800188a:	465b      	mov	r3, fp
 800188c:	0324      	lsls	r4, r4, #12
 800188e:	4223      	tst	r3, r4
 8001890:	d00e      	beq.n	80018b0 <__aeabi_dmul+0x558>
 8001892:	4221      	tst	r1, r4
 8001894:	d10c      	bne.n	80018b0 <__aeabi_dmul+0x558>
 8001896:	430c      	orrs	r4, r1
 8001898:	0324      	lsls	r4, r4, #12
 800189a:	003a      	movs	r2, r7
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <__aeabi_dmul+0x580>)
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	e5cc      	b.n	800143c <__aeabi_dmul+0xe4>
 80018a2:	2e0b      	cmp	r6, #11
 80018a4:	d000      	beq.n	80018a8 <__aeabi_dmul+0x550>
 80018a6:	e5a2      	b.n	80013ee <__aeabi_dmul+0x96>
 80018a8:	468b      	mov	fp, r1
 80018aa:	46aa      	mov	sl, r5
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	e5f7      	b.n	80014a0 <__aeabi_dmul+0x148>
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	465b      	mov	r3, fp
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	431c      	orrs	r4, r3
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	4642      	mov	r2, r8
 80018bc:	4655      	mov	r5, sl
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <__aeabi_dmul+0x580>)
 80018c0:	0b24      	lsrs	r4, r4, #12
 80018c2:	e5bb      	b.n	800143c <__aeabi_dmul+0xe4>
 80018c4:	464d      	mov	r5, r9
 80018c6:	0021      	movs	r1, r4
 80018c8:	2303      	movs	r3, #3
 80018ca:	e7db      	b.n	8001884 <__aeabi_dmul+0x52c>
 80018cc:	fffffc0d 	.word	0xfffffc0d
 80018d0:	0000043e 	.word	0x0000043e
 80018d4:	0000041e 	.word	0x0000041e
 80018d8:	000007ff 	.word	0x000007ff

080018dc <__aeabi_dsub>:
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	4657      	mov	r7, sl
 80018e0:	464e      	mov	r6, r9
 80018e2:	4645      	mov	r5, r8
 80018e4:	46de      	mov	lr, fp
 80018e6:	b5e0      	push	{r5, r6, r7, lr}
 80018e8:	000d      	movs	r5, r1
 80018ea:	0004      	movs	r4, r0
 80018ec:	0019      	movs	r1, r3
 80018ee:	0010      	movs	r0, r2
 80018f0:	032b      	lsls	r3, r5, #12
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	0f62      	lsrs	r2, r4, #29
 80018f6:	431a      	orrs	r2, r3
 80018f8:	00e3      	lsls	r3, r4, #3
 80018fa:	030c      	lsls	r4, r1, #12
 80018fc:	0a64      	lsrs	r4, r4, #9
 80018fe:	0f47      	lsrs	r7, r0, #29
 8001900:	4327      	orrs	r7, r4
 8001902:	4cd0      	ldr	r4, [pc, #832]	; (8001c44 <__aeabi_dsub+0x368>)
 8001904:	006e      	lsls	r6, r5, #1
 8001906:	4691      	mov	r9, r2
 8001908:	b083      	sub	sp, #12
 800190a:	004a      	lsls	r2, r1, #1
 800190c:	00c0      	lsls	r0, r0, #3
 800190e:	4698      	mov	r8, r3
 8001910:	46a2      	mov	sl, r4
 8001912:	0d76      	lsrs	r6, r6, #21
 8001914:	0fed      	lsrs	r5, r5, #31
 8001916:	0d52      	lsrs	r2, r2, #21
 8001918:	0fc9      	lsrs	r1, r1, #31
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	42a2      	cmp	r2, r4
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0x46>
 8001920:	e0b9      	b.n	8001a96 <__aeabi_dsub+0x1ba>
 8001922:	2401      	movs	r4, #1
 8001924:	4061      	eors	r1, r4
 8001926:	468b      	mov	fp, r1
 8001928:	428d      	cmp	r5, r1
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x52>
 800192c:	e08d      	b.n	8001a4a <__aeabi_dsub+0x16e>
 800192e:	1ab4      	subs	r4, r6, r2
 8001930:	46a4      	mov	ip, r4
 8001932:	2c00      	cmp	r4, #0
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dsub+0x5c>
 8001936:	e0b7      	b.n	8001aa8 <__aeabi_dsub+0x1cc>
 8001938:	2a00      	cmp	r2, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dsub+0x62>
 800193c:	e0cb      	b.n	8001ad6 <__aeabi_dsub+0x1fa>
 800193e:	4ac1      	ldr	r2, [pc, #772]	; (8001c44 <__aeabi_dsub+0x368>)
 8001940:	4296      	cmp	r6, r2
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x6a>
 8001944:	e186      	b.n	8001c54 <__aeabi_dsub+0x378>
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	0412      	lsls	r2, r2, #16
 800194a:	4317      	orrs	r7, r2
 800194c:	4662      	mov	r2, ip
 800194e:	2a38      	cmp	r2, #56	; 0x38
 8001950:	dd00      	ble.n	8001954 <__aeabi_dsub+0x78>
 8001952:	e1a4      	b.n	8001c9e <__aeabi_dsub+0x3c2>
 8001954:	2a1f      	cmp	r2, #31
 8001956:	dd00      	ble.n	800195a <__aeabi_dsub+0x7e>
 8001958:	e21d      	b.n	8001d96 <__aeabi_dsub+0x4ba>
 800195a:	4661      	mov	r1, ip
 800195c:	2220      	movs	r2, #32
 800195e:	003c      	movs	r4, r7
 8001960:	1a52      	subs	r2, r2, r1
 8001962:	0001      	movs	r1, r0
 8001964:	4090      	lsls	r0, r2
 8001966:	4094      	lsls	r4, r2
 8001968:	1e42      	subs	r2, r0, #1
 800196a:	4190      	sbcs	r0, r2
 800196c:	4662      	mov	r2, ip
 800196e:	46a0      	mov	r8, r4
 8001970:	4664      	mov	r4, ip
 8001972:	40d7      	lsrs	r7, r2
 8001974:	464a      	mov	r2, r9
 8001976:	40e1      	lsrs	r1, r4
 8001978:	4644      	mov	r4, r8
 800197a:	1bd2      	subs	r2, r2, r7
 800197c:	4691      	mov	r9, r2
 800197e:	430c      	orrs	r4, r1
 8001980:	4304      	orrs	r4, r0
 8001982:	1b1c      	subs	r4, r3, r4
 8001984:	42a3      	cmp	r3, r4
 8001986:	4192      	sbcs	r2, r2
 8001988:	464b      	mov	r3, r9
 800198a:	4252      	negs	r2, r2
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	469a      	mov	sl, r3
 8001990:	4653      	mov	r3, sl
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	d400      	bmi.n	8001998 <__aeabi_dsub+0xbc>
 8001996:	e12b      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001998:	4653      	mov	r3, sl
 800199a:	025a      	lsls	r2, r3, #9
 800199c:	0a53      	lsrs	r3, r2, #9
 800199e:	469a      	mov	sl, r3
 80019a0:	4653      	mov	r3, sl
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dsub+0xcc>
 80019a6:	e166      	b.n	8001c76 <__aeabi_dsub+0x39a>
 80019a8:	4650      	mov	r0, sl
 80019aa:	f000 fb9d 	bl	80020e8 <__clzsi2>
 80019ae:	0003      	movs	r3, r0
 80019b0:	3b08      	subs	r3, #8
 80019b2:	2220      	movs	r2, #32
 80019b4:	0020      	movs	r0, r4
 80019b6:	1ad2      	subs	r2, r2, r3
 80019b8:	4651      	mov	r1, sl
 80019ba:	40d0      	lsrs	r0, r2
 80019bc:	4099      	lsls	r1, r3
 80019be:	0002      	movs	r2, r0
 80019c0:	409c      	lsls	r4, r3
 80019c2:	430a      	orrs	r2, r1
 80019c4:	429e      	cmp	r6, r3
 80019c6:	dd00      	ble.n	80019ca <__aeabi_dsub+0xee>
 80019c8:	e164      	b.n	8001c94 <__aeabi_dsub+0x3b8>
 80019ca:	1b9b      	subs	r3, r3, r6
 80019cc:	1c59      	adds	r1, r3, #1
 80019ce:	291f      	cmp	r1, #31
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_dsub+0xf8>
 80019d2:	e0fe      	b.n	8001bd2 <__aeabi_dsub+0x2f6>
 80019d4:	2320      	movs	r3, #32
 80019d6:	0010      	movs	r0, r2
 80019d8:	0026      	movs	r6, r4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	409c      	lsls	r4, r3
 80019de:	4098      	lsls	r0, r3
 80019e0:	40ce      	lsrs	r6, r1
 80019e2:	40ca      	lsrs	r2, r1
 80019e4:	1e63      	subs	r3, r4, #1
 80019e6:	419c      	sbcs	r4, r3
 80019e8:	4330      	orrs	r0, r6
 80019ea:	4692      	mov	sl, r2
 80019ec:	2600      	movs	r6, #0
 80019ee:	4304      	orrs	r4, r0
 80019f0:	0763      	lsls	r3, r4, #29
 80019f2:	d009      	beq.n	8001a08 <__aeabi_dsub+0x12c>
 80019f4:	230f      	movs	r3, #15
 80019f6:	4023      	ands	r3, r4
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d005      	beq.n	8001a08 <__aeabi_dsub+0x12c>
 80019fc:	1d23      	adds	r3, r4, #4
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	41a4      	sbcs	r4, r4
 8001a02:	4264      	negs	r4, r4
 8001a04:	44a2      	add	sl, r4
 8001a06:	001c      	movs	r4, r3
 8001a08:	4653      	mov	r3, sl
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	d400      	bmi.n	8001a10 <__aeabi_dsub+0x134>
 8001a0e:	e0f2      	b.n	8001bf6 <__aeabi_dsub+0x31a>
 8001a10:	4b8c      	ldr	r3, [pc, #560]	; (8001c44 <__aeabi_dsub+0x368>)
 8001a12:	3601      	adds	r6, #1
 8001a14:	429e      	cmp	r6, r3
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x13e>
 8001a18:	e10f      	b.n	8001c3a <__aeabi_dsub+0x35e>
 8001a1a:	4653      	mov	r3, sl
 8001a1c:	498a      	ldr	r1, [pc, #552]	; (8001c48 <__aeabi_dsub+0x36c>)
 8001a1e:	08e4      	lsrs	r4, r4, #3
 8001a20:	400b      	ands	r3, r1
 8001a22:	0019      	movs	r1, r3
 8001a24:	075b      	lsls	r3, r3, #29
 8001a26:	4323      	orrs	r3, r4
 8001a28:	0572      	lsls	r2, r6, #21
 8001a2a:	024c      	lsls	r4, r1, #9
 8001a2c:	0b24      	lsrs	r4, r4, #12
 8001a2e:	0d52      	lsrs	r2, r2, #21
 8001a30:	0512      	lsls	r2, r2, #20
 8001a32:	4322      	orrs	r2, r4
 8001a34:	07ed      	lsls	r5, r5, #31
 8001a36:	432a      	orrs	r2, r5
 8001a38:	0018      	movs	r0, r3
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	b003      	add	sp, #12
 8001a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a40:	46bb      	mov	fp, r7
 8001a42:	46b2      	mov	sl, r6
 8001a44:	46a9      	mov	r9, r5
 8001a46:	46a0      	mov	r8, r4
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	1ab4      	subs	r4, r6, r2
 8001a4c:	46a4      	mov	ip, r4
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	dd59      	ble.n	8001b06 <__aeabi_dsub+0x22a>
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x17c>
 8001a56:	e0b0      	b.n	8001bba <__aeabi_dsub+0x2de>
 8001a58:	4556      	cmp	r6, sl
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x182>
 8001a5c:	e0fa      	b.n	8001c54 <__aeabi_dsub+0x378>
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	0412      	lsls	r2, r2, #16
 8001a62:	4317      	orrs	r7, r2
 8001a64:	4662      	mov	r2, ip
 8001a66:	2a38      	cmp	r2, #56	; 0x38
 8001a68:	dd00      	ble.n	8001a6c <__aeabi_dsub+0x190>
 8001a6a:	e0d4      	b.n	8001c16 <__aeabi_dsub+0x33a>
 8001a6c:	2a1f      	cmp	r2, #31
 8001a6e:	dc00      	bgt.n	8001a72 <__aeabi_dsub+0x196>
 8001a70:	e1c0      	b.n	8001df4 <__aeabi_dsub+0x518>
 8001a72:	0039      	movs	r1, r7
 8001a74:	3a20      	subs	r2, #32
 8001a76:	40d1      	lsrs	r1, r2
 8001a78:	4662      	mov	r2, ip
 8001a7a:	2a20      	cmp	r2, #32
 8001a7c:	d006      	beq.n	8001a8c <__aeabi_dsub+0x1b0>
 8001a7e:	4664      	mov	r4, ip
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	1b12      	subs	r2, r2, r4
 8001a84:	003c      	movs	r4, r7
 8001a86:	4094      	lsls	r4, r2
 8001a88:	4304      	orrs	r4, r0
 8001a8a:	9401      	str	r4, [sp, #4]
 8001a8c:	9c01      	ldr	r4, [sp, #4]
 8001a8e:	1e62      	subs	r2, r4, #1
 8001a90:	4194      	sbcs	r4, r2
 8001a92:	430c      	orrs	r4, r1
 8001a94:	e0c3      	b.n	8001c1e <__aeabi_dsub+0x342>
 8001a96:	003c      	movs	r4, r7
 8001a98:	4304      	orrs	r4, r0
 8001a9a:	d02b      	beq.n	8001af4 <__aeabi_dsub+0x218>
 8001a9c:	468b      	mov	fp, r1
 8001a9e:	428d      	cmp	r5, r1
 8001aa0:	d02e      	beq.n	8001b00 <__aeabi_dsub+0x224>
 8001aa2:	4c6a      	ldr	r4, [pc, #424]	; (8001c4c <__aeabi_dsub+0x370>)
 8001aa4:	46a4      	mov	ip, r4
 8001aa6:	44b4      	add	ip, r6
 8001aa8:	4664      	mov	r4, ip
 8001aaa:	2c00      	cmp	r4, #0
 8001aac:	d05f      	beq.n	8001b6e <__aeabi_dsub+0x292>
 8001aae:	1b94      	subs	r4, r2, r6
 8001ab0:	46a4      	mov	ip, r4
 8001ab2:	2e00      	cmp	r6, #0
 8001ab4:	d000      	beq.n	8001ab8 <__aeabi_dsub+0x1dc>
 8001ab6:	e120      	b.n	8001cfa <__aeabi_dsub+0x41e>
 8001ab8:	464c      	mov	r4, r9
 8001aba:	431c      	orrs	r4, r3
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_dsub+0x1e4>
 8001abe:	e1c7      	b.n	8001e50 <__aeabi_dsub+0x574>
 8001ac0:	4661      	mov	r1, ip
 8001ac2:	1e4c      	subs	r4, r1, #1
 8001ac4:	2901      	cmp	r1, #1
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0x1ee>
 8001ac8:	e223      	b.n	8001f12 <__aeabi_dsub+0x636>
 8001aca:	4d5e      	ldr	r5, [pc, #376]	; (8001c44 <__aeabi_dsub+0x368>)
 8001acc:	45ac      	cmp	ip, r5
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x1f6>
 8001ad0:	e1d8      	b.n	8001e84 <__aeabi_dsub+0x5a8>
 8001ad2:	46a4      	mov	ip, r4
 8001ad4:	e11a      	b.n	8001d0c <__aeabi_dsub+0x430>
 8001ad6:	003a      	movs	r2, r7
 8001ad8:	4302      	orrs	r2, r0
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x202>
 8001adc:	e0e4      	b.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001ade:	0022      	movs	r2, r4
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	2c01      	cmp	r4, #1
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x20c>
 8001ae6:	e1c3      	b.n	8001e70 <__aeabi_dsub+0x594>
 8001ae8:	4956      	ldr	r1, [pc, #344]	; (8001c44 <__aeabi_dsub+0x368>)
 8001aea:	428c      	cmp	r4, r1
 8001aec:	d100      	bne.n	8001af0 <__aeabi_dsub+0x214>
 8001aee:	e0b1      	b.n	8001c54 <__aeabi_dsub+0x378>
 8001af0:	4694      	mov	ip, r2
 8001af2:	e72b      	b.n	800194c <__aeabi_dsub+0x70>
 8001af4:	2401      	movs	r4, #1
 8001af6:	4061      	eors	r1, r4
 8001af8:	468b      	mov	fp, r1
 8001afa:	428d      	cmp	r5, r1
 8001afc:	d000      	beq.n	8001b00 <__aeabi_dsub+0x224>
 8001afe:	e716      	b.n	800192e <__aeabi_dsub+0x52>
 8001b00:	4952      	ldr	r1, [pc, #328]	; (8001c4c <__aeabi_dsub+0x370>)
 8001b02:	468c      	mov	ip, r1
 8001b04:	44b4      	add	ip, r6
 8001b06:	4664      	mov	r4, ip
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x232>
 8001b0c:	e0d3      	b.n	8001cb6 <__aeabi_dsub+0x3da>
 8001b0e:	1b91      	subs	r1, r2, r6
 8001b10:	468c      	mov	ip, r1
 8001b12:	2e00      	cmp	r6, #0
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x23c>
 8001b16:	e15e      	b.n	8001dd6 <__aeabi_dsub+0x4fa>
 8001b18:	494a      	ldr	r1, [pc, #296]	; (8001c44 <__aeabi_dsub+0x368>)
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x244>
 8001b1e:	e1be      	b.n	8001e9e <__aeabi_dsub+0x5c2>
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	464c      	mov	r4, r9
 8001b24:	0409      	lsls	r1, r1, #16
 8001b26:	430c      	orrs	r4, r1
 8001b28:	46a1      	mov	r9, r4
 8001b2a:	4661      	mov	r1, ip
 8001b2c:	2938      	cmp	r1, #56	; 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x256>
 8001b30:	e1ba      	b.n	8001ea8 <__aeabi_dsub+0x5cc>
 8001b32:	291f      	cmp	r1, #31
 8001b34:	dd00      	ble.n	8001b38 <__aeabi_dsub+0x25c>
 8001b36:	e227      	b.n	8001f88 <__aeabi_dsub+0x6ac>
 8001b38:	2420      	movs	r4, #32
 8001b3a:	1a64      	subs	r4, r4, r1
 8001b3c:	4649      	mov	r1, r9
 8001b3e:	40a1      	lsls	r1, r4
 8001b40:	001e      	movs	r6, r3
 8001b42:	4688      	mov	r8, r1
 8001b44:	4661      	mov	r1, ip
 8001b46:	40a3      	lsls	r3, r4
 8001b48:	40ce      	lsrs	r6, r1
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	1e5c      	subs	r4, r3, #1
 8001b4e:	41a3      	sbcs	r3, r4
 8001b50:	4331      	orrs	r1, r6
 8001b52:	4319      	orrs	r1, r3
 8001b54:	000c      	movs	r4, r1
 8001b56:	4663      	mov	r3, ip
 8001b58:	4649      	mov	r1, r9
 8001b5a:	40d9      	lsrs	r1, r3
 8001b5c:	187f      	adds	r7, r7, r1
 8001b5e:	1824      	adds	r4, r4, r0
 8001b60:	4284      	cmp	r4, r0
 8001b62:	419b      	sbcs	r3, r3
 8001b64:	425b      	negs	r3, r3
 8001b66:	469a      	mov	sl, r3
 8001b68:	0016      	movs	r6, r2
 8001b6a:	44ba      	add	sl, r7
 8001b6c:	e05d      	b.n	8001c2a <__aeabi_dsub+0x34e>
 8001b6e:	4c38      	ldr	r4, [pc, #224]	; (8001c50 <__aeabi_dsub+0x374>)
 8001b70:	1c72      	adds	r2, r6, #1
 8001b72:	4222      	tst	r2, r4
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dsub+0x29c>
 8001b76:	e0df      	b.n	8001d38 <__aeabi_dsub+0x45c>
 8001b78:	464a      	mov	r2, r9
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	2e00      	cmp	r6, #0
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x2a6>
 8001b80:	e15c      	b.n	8001e3c <__aeabi_dsub+0x560>
 8001b82:	2a00      	cmp	r2, #0
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dsub+0x2ac>
 8001b86:	e1cf      	b.n	8001f28 <__aeabi_dsub+0x64c>
 8001b88:	003a      	movs	r2, r7
 8001b8a:	4302      	orrs	r2, r0
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_dsub+0x2b4>
 8001b8e:	e17f      	b.n	8001e90 <__aeabi_dsub+0x5b4>
 8001b90:	1a1c      	subs	r4, r3, r0
 8001b92:	464a      	mov	r2, r9
 8001b94:	42a3      	cmp	r3, r4
 8001b96:	4189      	sbcs	r1, r1
 8001b98:	1bd2      	subs	r2, r2, r7
 8001b9a:	4249      	negs	r1, r1
 8001b9c:	1a52      	subs	r2, r2, r1
 8001b9e:	4692      	mov	sl, r2
 8001ba0:	0212      	lsls	r2, r2, #8
 8001ba2:	d400      	bmi.n	8001ba6 <__aeabi_dsub+0x2ca>
 8001ba4:	e20a      	b.n	8001fbc <__aeabi_dsub+0x6e0>
 8001ba6:	1ac4      	subs	r4, r0, r3
 8001ba8:	42a0      	cmp	r0, r4
 8001baa:	4180      	sbcs	r0, r0
 8001bac:	464b      	mov	r3, r9
 8001bae:	4240      	negs	r0, r0
 8001bb0:	1aff      	subs	r7, r7, r3
 8001bb2:	1a3b      	subs	r3, r7, r0
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	465d      	mov	r5, fp
 8001bb8:	e71a      	b.n	80019f0 <__aeabi_dsub+0x114>
 8001bba:	003a      	movs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d073      	beq.n	8001ca8 <__aeabi_dsub+0x3cc>
 8001bc0:	0022      	movs	r2, r4
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	2c01      	cmp	r4, #1
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x2ee>
 8001bc8:	e0cb      	b.n	8001d62 <__aeabi_dsub+0x486>
 8001bca:	4554      	cmp	r4, sl
 8001bcc:	d042      	beq.n	8001c54 <__aeabi_dsub+0x378>
 8001bce:	4694      	mov	ip, r2
 8001bd0:	e748      	b.n	8001a64 <__aeabi_dsub+0x188>
 8001bd2:	0010      	movs	r0, r2
 8001bd4:	3b1f      	subs	r3, #31
 8001bd6:	40d8      	lsrs	r0, r3
 8001bd8:	2920      	cmp	r1, #32
 8001bda:	d003      	beq.n	8001be4 <__aeabi_dsub+0x308>
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	1a5b      	subs	r3, r3, r1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	4314      	orrs	r4, r2
 8001be4:	1e63      	subs	r3, r4, #1
 8001be6:	419c      	sbcs	r4, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	2600      	movs	r6, #0
 8001bec:	469a      	mov	sl, r3
 8001bee:	4304      	orrs	r4, r0
 8001bf0:	0763      	lsls	r3, r4, #29
 8001bf2:	d000      	beq.n	8001bf6 <__aeabi_dsub+0x31a>
 8001bf4:	e6fe      	b.n	80019f4 <__aeabi_dsub+0x118>
 8001bf6:	4652      	mov	r2, sl
 8001bf8:	08e3      	lsrs	r3, r4, #3
 8001bfa:	0752      	lsls	r2, r2, #29
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4652      	mov	r2, sl
 8001c00:	46b4      	mov	ip, r6
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	490f      	ldr	r1, [pc, #60]	; (8001c44 <__aeabi_dsub+0x368>)
 8001c06:	458c      	cmp	ip, r1
 8001c08:	d02a      	beq.n	8001c60 <__aeabi_dsub+0x384>
 8001c0a:	0312      	lsls	r2, r2, #12
 8001c0c:	0b14      	lsrs	r4, r2, #12
 8001c0e:	4662      	mov	r2, ip
 8001c10:	0552      	lsls	r2, r2, #21
 8001c12:	0d52      	lsrs	r2, r2, #21
 8001c14:	e70c      	b.n	8001a30 <__aeabi_dsub+0x154>
 8001c16:	003c      	movs	r4, r7
 8001c18:	4304      	orrs	r4, r0
 8001c1a:	1e62      	subs	r2, r4, #1
 8001c1c:	4194      	sbcs	r4, r2
 8001c1e:	18e4      	adds	r4, r4, r3
 8001c20:	429c      	cmp	r4, r3
 8001c22:	4192      	sbcs	r2, r2
 8001c24:	4252      	negs	r2, r2
 8001c26:	444a      	add	r2, r9
 8001c28:	4692      	mov	sl, r2
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	d5df      	bpl.n	8001bf0 <__aeabi_dsub+0x314>
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__aeabi_dsub+0x368>)
 8001c32:	3601      	adds	r6, #1
 8001c34:	429e      	cmp	r6, r3
 8001c36:	d000      	beq.n	8001c3a <__aeabi_dsub+0x35e>
 8001c38:	e0a0      	b.n	8001d7c <__aeabi_dsub+0x4a0>
 8001c3a:	0032      	movs	r2, r6
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e6f6      	b.n	8001a30 <__aeabi_dsub+0x154>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	000007ff 	.word	0x000007ff
 8001c48:	ff7fffff 	.word	0xff7fffff
 8001c4c:	fffff801 	.word	0xfffff801
 8001c50:	000007fe 	.word	0x000007fe
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	464a      	mov	r2, r9
 8001c58:	0752      	lsls	r2, r2, #29
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	08d2      	lsrs	r2, r2, #3
 8001c60:	0019      	movs	r1, r3
 8001c62:	4311      	orrs	r1, r2
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x38c>
 8001c66:	e1b5      	b.n	8001fd4 <__aeabi_dsub+0x6f8>
 8001c68:	2480      	movs	r4, #128	; 0x80
 8001c6a:	0324      	lsls	r4, r4, #12
 8001c6c:	4314      	orrs	r4, r2
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4ad5      	ldr	r2, [pc, #852]	; (8001fc8 <__aeabi_dsub+0x6ec>)
 8001c72:	0b24      	lsrs	r4, r4, #12
 8001c74:	e6dc      	b.n	8001a30 <__aeabi_dsub+0x154>
 8001c76:	0020      	movs	r0, r4
 8001c78:	f000 fa36 	bl	80020e8 <__clzsi2>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	3318      	adds	r3, #24
 8001c80:	2b1f      	cmp	r3, #31
 8001c82:	dc00      	bgt.n	8001c86 <__aeabi_dsub+0x3aa>
 8001c84:	e695      	b.n	80019b2 <__aeabi_dsub+0xd6>
 8001c86:	0022      	movs	r2, r4
 8001c88:	3808      	subs	r0, #8
 8001c8a:	4082      	lsls	r2, r0
 8001c8c:	2400      	movs	r4, #0
 8001c8e:	429e      	cmp	r6, r3
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_dsub+0x3b8>
 8001c92:	e69a      	b.n	80019ca <__aeabi_dsub+0xee>
 8001c94:	1af6      	subs	r6, r6, r3
 8001c96:	4bcd      	ldr	r3, [pc, #820]	; (8001fcc <__aeabi_dsub+0x6f0>)
 8001c98:	401a      	ands	r2, r3
 8001c9a:	4692      	mov	sl, r2
 8001c9c:	e6a8      	b.n	80019f0 <__aeabi_dsub+0x114>
 8001c9e:	003c      	movs	r4, r7
 8001ca0:	4304      	orrs	r4, r0
 8001ca2:	1e62      	subs	r2, r4, #1
 8001ca4:	4194      	sbcs	r4, r2
 8001ca6:	e66c      	b.n	8001982 <__aeabi_dsub+0xa6>
 8001ca8:	464a      	mov	r2, r9
 8001caa:	08db      	lsrs	r3, r3, #3
 8001cac:	0752      	lsls	r2, r2, #29
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	08d2      	lsrs	r2, r2, #3
 8001cb4:	e7a6      	b.n	8001c04 <__aeabi_dsub+0x328>
 8001cb6:	4cc6      	ldr	r4, [pc, #792]	; (8001fd0 <__aeabi_dsub+0x6f4>)
 8001cb8:	1c72      	adds	r2, r6, #1
 8001cba:	4222      	tst	r2, r4
 8001cbc:	d000      	beq.n	8001cc0 <__aeabi_dsub+0x3e4>
 8001cbe:	e0ac      	b.n	8001e1a <__aeabi_dsub+0x53e>
 8001cc0:	464a      	mov	r2, r9
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	2e00      	cmp	r6, #0
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dsub+0x3ee>
 8001cc8:	e105      	b.n	8001ed6 <__aeabi_dsub+0x5fa>
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x3f4>
 8001cce:	e156      	b.n	8001f7e <__aeabi_dsub+0x6a2>
 8001cd0:	003a      	movs	r2, r7
 8001cd2:	4302      	orrs	r2, r0
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x3fc>
 8001cd6:	e0db      	b.n	8001e90 <__aeabi_dsub+0x5b4>
 8001cd8:	181c      	adds	r4, r3, r0
 8001cda:	429c      	cmp	r4, r3
 8001cdc:	419b      	sbcs	r3, r3
 8001cde:	444f      	add	r7, r9
 8001ce0:	46ba      	mov	sl, r7
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	449a      	add	sl, r3
 8001ce6:	4653      	mov	r3, sl
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	d400      	bmi.n	8001cee <__aeabi_dsub+0x412>
 8001cec:	e780      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001cee:	4652      	mov	r2, sl
 8001cf0:	4bb6      	ldr	r3, [pc, #728]	; (8001fcc <__aeabi_dsub+0x6f0>)
 8001cf2:	2601      	movs	r6, #1
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	e77a      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001cfa:	4cb3      	ldr	r4, [pc, #716]	; (8001fc8 <__aeabi_dsub+0x6ec>)
 8001cfc:	42a2      	cmp	r2, r4
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x426>
 8001d00:	e0c0      	b.n	8001e84 <__aeabi_dsub+0x5a8>
 8001d02:	2480      	movs	r4, #128	; 0x80
 8001d04:	464d      	mov	r5, r9
 8001d06:	0424      	lsls	r4, r4, #16
 8001d08:	4325      	orrs	r5, r4
 8001d0a:	46a9      	mov	r9, r5
 8001d0c:	4664      	mov	r4, ip
 8001d0e:	2c38      	cmp	r4, #56	; 0x38
 8001d10:	dc53      	bgt.n	8001dba <__aeabi_dsub+0x4de>
 8001d12:	4661      	mov	r1, ip
 8001d14:	2c1f      	cmp	r4, #31
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_dsub+0x43e>
 8001d18:	e0cd      	b.n	8001eb6 <__aeabi_dsub+0x5da>
 8001d1a:	2520      	movs	r5, #32
 8001d1c:	001e      	movs	r6, r3
 8001d1e:	1b2d      	subs	r5, r5, r4
 8001d20:	464c      	mov	r4, r9
 8001d22:	40ab      	lsls	r3, r5
 8001d24:	40ac      	lsls	r4, r5
 8001d26:	40ce      	lsrs	r6, r1
 8001d28:	1e5d      	subs	r5, r3, #1
 8001d2a:	41ab      	sbcs	r3, r5
 8001d2c:	4334      	orrs	r4, r6
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	464c      	mov	r4, r9
 8001d32:	40cc      	lsrs	r4, r1
 8001d34:	1b3f      	subs	r7, r7, r4
 8001d36:	e045      	b.n	8001dc4 <__aeabi_dsub+0x4e8>
 8001d38:	464a      	mov	r2, r9
 8001d3a:	1a1c      	subs	r4, r3, r0
 8001d3c:	1bd1      	subs	r1, r2, r7
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	4192      	sbcs	r2, r2
 8001d42:	4252      	negs	r2, r2
 8001d44:	4692      	mov	sl, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	4651      	mov	r1, sl
 8001d4a:	1a52      	subs	r2, r2, r1
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	0212      	lsls	r2, r2, #8
 8001d50:	d500      	bpl.n	8001d54 <__aeabi_dsub+0x478>
 8001d52:	e083      	b.n	8001e5c <__aeabi_dsub+0x580>
 8001d54:	4653      	mov	r3, sl
 8001d56:	4323      	orrs	r3, r4
 8001d58:	d000      	beq.n	8001d5c <__aeabi_dsub+0x480>
 8001d5a:	e621      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2500      	movs	r5, #0
 8001d60:	e753      	b.n	8001c0a <__aeabi_dsub+0x32e>
 8001d62:	181c      	adds	r4, r3, r0
 8001d64:	429c      	cmp	r4, r3
 8001d66:	419b      	sbcs	r3, r3
 8001d68:	444f      	add	r7, r9
 8001d6a:	46ba      	mov	sl, r7
 8001d6c:	425b      	negs	r3, r3
 8001d6e:	449a      	add	sl, r3
 8001d70:	4653      	mov	r3, sl
 8001d72:	2601      	movs	r6, #1
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	d400      	bmi.n	8001d7a <__aeabi_dsub+0x49e>
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001d7a:	2602      	movs	r6, #2
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <__aeabi_dsub+0x6f0>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	401a      	ands	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	4021      	ands	r1, r4
 8001d88:	0862      	lsrs	r2, r4, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	07dc      	lsls	r4, r3, #31
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	469a      	mov	sl, r3
 8001d92:	4314      	orrs	r4, r2
 8001d94:	e62c      	b.n	80019f0 <__aeabi_dsub+0x114>
 8001d96:	0039      	movs	r1, r7
 8001d98:	3a20      	subs	r2, #32
 8001d9a:	40d1      	lsrs	r1, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	2a20      	cmp	r2, #32
 8001da0:	d006      	beq.n	8001db0 <__aeabi_dsub+0x4d4>
 8001da2:	4664      	mov	r4, ip
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	1b12      	subs	r2, r2, r4
 8001da8:	003c      	movs	r4, r7
 8001daa:	4094      	lsls	r4, r2
 8001dac:	4304      	orrs	r4, r0
 8001dae:	9401      	str	r4, [sp, #4]
 8001db0:	9c01      	ldr	r4, [sp, #4]
 8001db2:	1e62      	subs	r2, r4, #1
 8001db4:	4194      	sbcs	r4, r2
 8001db6:	430c      	orrs	r4, r1
 8001db8:	e5e3      	b.n	8001982 <__aeabi_dsub+0xa6>
 8001dba:	4649      	mov	r1, r9
 8001dbc:	4319      	orrs	r1, r3
 8001dbe:	000b      	movs	r3, r1
 8001dc0:	1e5c      	subs	r4, r3, #1
 8001dc2:	41a3      	sbcs	r3, r4
 8001dc4:	1ac4      	subs	r4, r0, r3
 8001dc6:	42a0      	cmp	r0, r4
 8001dc8:	419b      	sbcs	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	1afb      	subs	r3, r7, r3
 8001dce:	469a      	mov	sl, r3
 8001dd0:	465d      	mov	r5, fp
 8001dd2:	0016      	movs	r6, r2
 8001dd4:	e5dc      	b.n	8001990 <__aeabi_dsub+0xb4>
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	4319      	orrs	r1, r3
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x502>
 8001ddc:	e0ae      	b.n	8001f3c <__aeabi_dsub+0x660>
 8001dde:	4661      	mov	r1, ip
 8001de0:	4664      	mov	r4, ip
 8001de2:	3901      	subs	r1, #1
 8001de4:	2c01      	cmp	r4, #1
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x50e>
 8001de8:	e0e0      	b.n	8001fac <__aeabi_dsub+0x6d0>
 8001dea:	4c77      	ldr	r4, [pc, #476]	; (8001fc8 <__aeabi_dsub+0x6ec>)
 8001dec:	45a4      	cmp	ip, r4
 8001dee:	d056      	beq.n	8001e9e <__aeabi_dsub+0x5c2>
 8001df0:	468c      	mov	ip, r1
 8001df2:	e69a      	b.n	8001b2a <__aeabi_dsub+0x24e>
 8001df4:	4661      	mov	r1, ip
 8001df6:	2220      	movs	r2, #32
 8001df8:	003c      	movs	r4, r7
 8001dfa:	1a52      	subs	r2, r2, r1
 8001dfc:	4094      	lsls	r4, r2
 8001dfe:	0001      	movs	r1, r0
 8001e00:	4090      	lsls	r0, r2
 8001e02:	46a0      	mov	r8, r4
 8001e04:	4664      	mov	r4, ip
 8001e06:	1e42      	subs	r2, r0, #1
 8001e08:	4190      	sbcs	r0, r2
 8001e0a:	4662      	mov	r2, ip
 8001e0c:	40e1      	lsrs	r1, r4
 8001e0e:	4644      	mov	r4, r8
 8001e10:	40d7      	lsrs	r7, r2
 8001e12:	430c      	orrs	r4, r1
 8001e14:	4304      	orrs	r4, r0
 8001e16:	44b9      	add	r9, r7
 8001e18:	e701      	b.n	8001c1e <__aeabi_dsub+0x342>
 8001e1a:	496b      	ldr	r1, [pc, #428]	; (8001fc8 <__aeabi_dsub+0x6ec>)
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x546>
 8001e20:	e70c      	b.n	8001c3c <__aeabi_dsub+0x360>
 8001e22:	1818      	adds	r0, r3, r0
 8001e24:	4298      	cmp	r0, r3
 8001e26:	419b      	sbcs	r3, r3
 8001e28:	444f      	add	r7, r9
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	07dc      	lsls	r4, r3, #31
 8001e30:	0840      	lsrs	r0, r0, #1
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	469a      	mov	sl, r3
 8001e36:	0016      	movs	r6, r2
 8001e38:	4304      	orrs	r4, r0
 8001e3a:	e6d9      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x566>
 8001e40:	e081      	b.n	8001f46 <__aeabi_dsub+0x66a>
 8001e42:	003b      	movs	r3, r7
 8001e44:	4303      	orrs	r3, r0
 8001e46:	d11d      	bne.n	8001e84 <__aeabi_dsub+0x5a8>
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	0312      	lsls	r2, r2, #12
 8001e4e:	e70b      	b.n	8001c68 <__aeabi_dsub+0x38c>
 8001e50:	08c0      	lsrs	r0, r0, #3
 8001e52:	077b      	lsls	r3, r7, #29
 8001e54:	465d      	mov	r5, fp
 8001e56:	4303      	orrs	r3, r0
 8001e58:	08fa      	lsrs	r2, r7, #3
 8001e5a:	e6d3      	b.n	8001c04 <__aeabi_dsub+0x328>
 8001e5c:	1ac4      	subs	r4, r0, r3
 8001e5e:	42a0      	cmp	r0, r4
 8001e60:	4180      	sbcs	r0, r0
 8001e62:	464b      	mov	r3, r9
 8001e64:	4240      	negs	r0, r0
 8001e66:	1aff      	subs	r7, r7, r3
 8001e68:	1a3b      	subs	r3, r7, r0
 8001e6a:	469a      	mov	sl, r3
 8001e6c:	465d      	mov	r5, fp
 8001e6e:	e597      	b.n	80019a0 <__aeabi_dsub+0xc4>
 8001e70:	1a1c      	subs	r4, r3, r0
 8001e72:	464a      	mov	r2, r9
 8001e74:	42a3      	cmp	r3, r4
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	1bd7      	subs	r7, r2, r7
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	1afb      	subs	r3, r7, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	2601      	movs	r6, #1
 8001e82:	e585      	b.n	8001990 <__aeabi_dsub+0xb4>
 8001e84:	08c0      	lsrs	r0, r0, #3
 8001e86:	077b      	lsls	r3, r7, #29
 8001e88:	465d      	mov	r5, fp
 8001e8a:	4303      	orrs	r3, r0
 8001e8c:	08fa      	lsrs	r2, r7, #3
 8001e8e:	e6e7      	b.n	8001c60 <__aeabi_dsub+0x384>
 8001e90:	464a      	mov	r2, r9
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	0752      	lsls	r2, r2, #29
 8001e96:	4313      	orrs	r3, r2
 8001e98:	464a      	mov	r2, r9
 8001e9a:	08d2      	lsrs	r2, r2, #3
 8001e9c:	e6b5      	b.n	8001c0a <__aeabi_dsub+0x32e>
 8001e9e:	08c0      	lsrs	r0, r0, #3
 8001ea0:	077b      	lsls	r3, r7, #29
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	08fa      	lsrs	r2, r7, #3
 8001ea6:	e6db      	b.n	8001c60 <__aeabi_dsub+0x384>
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	4319      	orrs	r1, r3
 8001eac:	000b      	movs	r3, r1
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	418b      	sbcs	r3, r1
 8001eb2:	001c      	movs	r4, r3
 8001eb4:	e653      	b.n	8001b5e <__aeabi_dsub+0x282>
 8001eb6:	464d      	mov	r5, r9
 8001eb8:	3c20      	subs	r4, #32
 8001eba:	40e5      	lsrs	r5, r4
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d005      	beq.n	8001ecc <__aeabi_dsub+0x5f0>
 8001ec0:	2440      	movs	r4, #64	; 0x40
 8001ec2:	1a64      	subs	r4, r4, r1
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	40a1      	lsls	r1, r4
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	4698      	mov	r8, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	1e5c      	subs	r4, r3, #1
 8001ed0:	41a3      	sbcs	r3, r4
 8001ed2:	432b      	orrs	r3, r5
 8001ed4:	e776      	b.n	8001dc4 <__aeabi_dsub+0x4e8>
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	d0e1      	beq.n	8001e9e <__aeabi_dsub+0x5c2>
 8001eda:	003a      	movs	r2, r7
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	4302      	orrs	r2, r0
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x608>
 8001ee2:	e6b8      	b.n	8001c56 <__aeabi_dsub+0x37a>
 8001ee4:	464a      	mov	r2, r9
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	2480      	movs	r4, #128	; 0x80
 8001eea:	4313      	orrs	r3, r2
 8001eec:	464a      	mov	r2, r9
 8001eee:	0324      	lsls	r4, r4, #12
 8001ef0:	08d2      	lsrs	r2, r2, #3
 8001ef2:	4222      	tst	r2, r4
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x62a>
 8001ef6:	08fe      	lsrs	r6, r7, #3
 8001ef8:	4226      	tst	r6, r4
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x62a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0032      	movs	r2, r6
 8001f00:	08c3      	lsrs	r3, r0, #3
 8001f02:	077f      	lsls	r7, r7, #29
 8001f04:	433b      	orrs	r3, r7
 8001f06:	0f59      	lsrs	r1, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0749      	lsls	r1, r1, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	e6a6      	b.n	8001c60 <__aeabi_dsub+0x384>
 8001f12:	1ac4      	subs	r4, r0, r3
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	4180      	sbcs	r0, r0
 8001f18:	464b      	mov	r3, r9
 8001f1a:	4240      	negs	r0, r0
 8001f1c:	1aff      	subs	r7, r7, r3
 8001f1e:	1a3b      	subs	r3, r7, r0
 8001f20:	469a      	mov	sl, r3
 8001f22:	465d      	mov	r5, fp
 8001f24:	2601      	movs	r6, #1
 8001f26:	e533      	b.n	8001990 <__aeabi_dsub+0xb4>
 8001f28:	003b      	movs	r3, r7
 8001f2a:	4303      	orrs	r3, r0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x654>
 8001f2e:	e715      	b.n	8001d5c <__aeabi_dsub+0x480>
 8001f30:	08c0      	lsrs	r0, r0, #3
 8001f32:	077b      	lsls	r3, r7, #29
 8001f34:	465d      	mov	r5, fp
 8001f36:	4303      	orrs	r3, r0
 8001f38:	08fa      	lsrs	r2, r7, #3
 8001f3a:	e666      	b.n	8001c0a <__aeabi_dsub+0x32e>
 8001f3c:	08c0      	lsrs	r0, r0, #3
 8001f3e:	077b      	lsls	r3, r7, #29
 8001f40:	4303      	orrs	r3, r0
 8001f42:	08fa      	lsrs	r2, r7, #3
 8001f44:	e65e      	b.n	8001c04 <__aeabi_dsub+0x328>
 8001f46:	003a      	movs	r2, r7
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	4302      	orrs	r2, r0
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x674>
 8001f4e:	e682      	b.n	8001c56 <__aeabi_dsub+0x37a>
 8001f50:	464a      	mov	r2, r9
 8001f52:	0752      	lsls	r2, r2, #29
 8001f54:	2480      	movs	r4, #128	; 0x80
 8001f56:	4313      	orrs	r3, r2
 8001f58:	464a      	mov	r2, r9
 8001f5a:	0324      	lsls	r4, r4, #12
 8001f5c:	08d2      	lsrs	r2, r2, #3
 8001f5e:	4222      	tst	r2, r4
 8001f60:	d007      	beq.n	8001f72 <__aeabi_dsub+0x696>
 8001f62:	08fe      	lsrs	r6, r7, #3
 8001f64:	4226      	tst	r6, r4
 8001f66:	d104      	bne.n	8001f72 <__aeabi_dsub+0x696>
 8001f68:	465d      	mov	r5, fp
 8001f6a:	0032      	movs	r2, r6
 8001f6c:	08c3      	lsrs	r3, r0, #3
 8001f6e:	077f      	lsls	r7, r7, #29
 8001f70:	433b      	orrs	r3, r7
 8001f72:	0f59      	lsrs	r1, r3, #29
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0749      	lsls	r1, r1, #29
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	e670      	b.n	8001c60 <__aeabi_dsub+0x384>
 8001f7e:	08c0      	lsrs	r0, r0, #3
 8001f80:	077b      	lsls	r3, r7, #29
 8001f82:	4303      	orrs	r3, r0
 8001f84:	08fa      	lsrs	r2, r7, #3
 8001f86:	e640      	b.n	8001c0a <__aeabi_dsub+0x32e>
 8001f88:	464c      	mov	r4, r9
 8001f8a:	3920      	subs	r1, #32
 8001f8c:	40cc      	lsrs	r4, r1
 8001f8e:	4661      	mov	r1, ip
 8001f90:	2920      	cmp	r1, #32
 8001f92:	d006      	beq.n	8001fa2 <__aeabi_dsub+0x6c6>
 8001f94:	4666      	mov	r6, ip
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	1b89      	subs	r1, r1, r6
 8001f9a:	464e      	mov	r6, r9
 8001f9c:	408e      	lsls	r6, r1
 8001f9e:	4333      	orrs	r3, r6
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	1e59      	subs	r1, r3, #1
 8001fa6:	418b      	sbcs	r3, r1
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	e5d8      	b.n	8001b5e <__aeabi_dsub+0x282>
 8001fac:	181c      	adds	r4, r3, r0
 8001fae:	4284      	cmp	r4, r0
 8001fb0:	4180      	sbcs	r0, r0
 8001fb2:	444f      	add	r7, r9
 8001fb4:	46ba      	mov	sl, r7
 8001fb6:	4240      	negs	r0, r0
 8001fb8:	4482      	add	sl, r0
 8001fba:	e6d9      	b.n	8001d70 <__aeabi_dsub+0x494>
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x6e8>
 8001fc2:	e6cb      	b.n	8001d5c <__aeabi_dsub+0x480>
 8001fc4:	e614      	b.n	8001bf0 <__aeabi_dsub+0x314>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff
 8001fcc:	ff7fffff 	.word	0xff7fffff
 8001fd0:	000007fe 	.word	0x000007fe
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4a01      	ldr	r2, [pc, #4]	; (8001fdc <__aeabi_dsub+0x700>)
 8001fd8:	001c      	movs	r4, r3
 8001fda:	e529      	b.n	8001a30 <__aeabi_dsub+0x154>
 8001fdc:	000007ff 	.word	0x000007ff

08001fe0 <__aeabi_dcmpun>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	0005      	movs	r5, r0
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <__aeabi_dcmpun+0x38>)
 8001fe6:	031c      	lsls	r4, r3, #12
 8001fe8:	0016      	movs	r6, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	030a      	lsls	r2, r1, #12
 8001fee:	0049      	lsls	r1, r1, #1
 8001ff0:	0b12      	lsrs	r2, r2, #12
 8001ff2:	0d49      	lsrs	r1, r1, #21
 8001ff4:	0b24      	lsrs	r4, r4, #12
 8001ff6:	0d5b      	lsrs	r3, r3, #21
 8001ff8:	4281      	cmp	r1, r0
 8001ffa:	d008      	beq.n	800200e <__aeabi_dcmpun+0x2e>
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <__aeabi_dcmpun+0x38>)
 8001ffe:	2000      	movs	r0, #0
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <__aeabi_dcmpun+0x2c>
 8002004:	0020      	movs	r0, r4
 8002006:	4330      	orrs	r0, r6
 8002008:	1e43      	subs	r3, r0, #1
 800200a:	4198      	sbcs	r0, r3
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	2001      	movs	r0, #1
 8002010:	432a      	orrs	r2, r5
 8002012:	d1fb      	bne.n	800200c <__aeabi_dcmpun+0x2c>
 8002014:	e7f2      	b.n	8001ffc <__aeabi_dcmpun+0x1c>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	000007ff 	.word	0x000007ff

0800201c <__aeabi_d2iz>:
 800201c:	000a      	movs	r2, r1
 800201e:	b530      	push	{r4, r5, lr}
 8002020:	4c13      	ldr	r4, [pc, #76]	; (8002070 <__aeabi_d2iz+0x54>)
 8002022:	0053      	lsls	r3, r2, #1
 8002024:	0309      	lsls	r1, r1, #12
 8002026:	0005      	movs	r5, r0
 8002028:	0b09      	lsrs	r1, r1, #12
 800202a:	2000      	movs	r0, #0
 800202c:	0d5b      	lsrs	r3, r3, #21
 800202e:	0fd2      	lsrs	r2, r2, #31
 8002030:	42a3      	cmp	r3, r4
 8002032:	dd04      	ble.n	800203e <__aeabi_d2iz+0x22>
 8002034:	480f      	ldr	r0, [pc, #60]	; (8002074 <__aeabi_d2iz+0x58>)
 8002036:	4283      	cmp	r3, r0
 8002038:	dd02      	ble.n	8002040 <__aeabi_d2iz+0x24>
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <__aeabi_d2iz+0x5c>)
 800203c:	18d0      	adds	r0, r2, r3
 800203e:	bd30      	pop	{r4, r5, pc}
 8002040:	2080      	movs	r0, #128	; 0x80
 8002042:	0340      	lsls	r0, r0, #13
 8002044:	4301      	orrs	r1, r0
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <__aeabi_d2iz+0x60>)
 8002048:	1ac0      	subs	r0, r0, r3
 800204a:	281f      	cmp	r0, #31
 800204c:	dd08      	ble.n	8002060 <__aeabi_d2iz+0x44>
 800204e:	480c      	ldr	r0, [pc, #48]	; (8002080 <__aeabi_d2iz+0x64>)
 8002050:	1ac3      	subs	r3, r0, r3
 8002052:	40d9      	lsrs	r1, r3
 8002054:	000b      	movs	r3, r1
 8002056:	4258      	negs	r0, r3
 8002058:	2a00      	cmp	r2, #0
 800205a:	d1f0      	bne.n	800203e <__aeabi_d2iz+0x22>
 800205c:	0018      	movs	r0, r3
 800205e:	e7ee      	b.n	800203e <__aeabi_d2iz+0x22>
 8002060:	4c08      	ldr	r4, [pc, #32]	; (8002084 <__aeabi_d2iz+0x68>)
 8002062:	40c5      	lsrs	r5, r0
 8002064:	46a4      	mov	ip, r4
 8002066:	4463      	add	r3, ip
 8002068:	4099      	lsls	r1, r3
 800206a:	000b      	movs	r3, r1
 800206c:	432b      	orrs	r3, r5
 800206e:	e7f2      	b.n	8002056 <__aeabi_d2iz+0x3a>
 8002070:	000003fe 	.word	0x000003fe
 8002074:	0000041d 	.word	0x0000041d
 8002078:	7fffffff 	.word	0x7fffffff
 800207c:	00000433 	.word	0x00000433
 8002080:	00000413 	.word	0x00000413
 8002084:	fffffbed 	.word	0xfffffbed

08002088 <__aeabi_i2d>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2800      	cmp	r0, #0
 800208c:	d016      	beq.n	80020bc <__aeabi_i2d+0x34>
 800208e:	17c3      	asrs	r3, r0, #31
 8002090:	18c5      	adds	r5, r0, r3
 8002092:	405d      	eors	r5, r3
 8002094:	0fc4      	lsrs	r4, r0, #31
 8002096:	0028      	movs	r0, r5
 8002098:	f000 f826 	bl	80020e8 <__clzsi2>
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <__aeabi_i2d+0x5c>)
 800209e:	1a1b      	subs	r3, r3, r0
 80020a0:	280a      	cmp	r0, #10
 80020a2:	dc16      	bgt.n	80020d2 <__aeabi_i2d+0x4a>
 80020a4:	0002      	movs	r2, r0
 80020a6:	002e      	movs	r6, r5
 80020a8:	3215      	adds	r2, #21
 80020aa:	4096      	lsls	r6, r2
 80020ac:	220b      	movs	r2, #11
 80020ae:	1a12      	subs	r2, r2, r0
 80020b0:	40d5      	lsrs	r5, r2
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	032d      	lsls	r5, r5, #12
 80020b6:	0b2d      	lsrs	r5, r5, #12
 80020b8:	0d5b      	lsrs	r3, r3, #21
 80020ba:	e003      	b.n	80020c4 <__aeabi_i2d+0x3c>
 80020bc:	2400      	movs	r4, #0
 80020be:	2300      	movs	r3, #0
 80020c0:	2500      	movs	r5, #0
 80020c2:	2600      	movs	r6, #0
 80020c4:	051b      	lsls	r3, r3, #20
 80020c6:	432b      	orrs	r3, r5
 80020c8:	07e4      	lsls	r4, r4, #31
 80020ca:	4323      	orrs	r3, r4
 80020cc:	0030      	movs	r0, r6
 80020ce:	0019      	movs	r1, r3
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	380b      	subs	r0, #11
 80020d4:	4085      	lsls	r5, r0
 80020d6:	055b      	lsls	r3, r3, #21
 80020d8:	032d      	lsls	r5, r5, #12
 80020da:	2600      	movs	r6, #0
 80020dc:	0b2d      	lsrs	r5, r5, #12
 80020de:	0d5b      	lsrs	r3, r3, #21
 80020e0:	e7f0      	b.n	80020c4 <__aeabi_i2d+0x3c>
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	0000041e 	.word	0x0000041e

080020e8 <__clzsi2>:
 80020e8:	211c      	movs	r1, #28
 80020ea:	2301      	movs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	4298      	cmp	r0, r3
 80020f0:	d301      	bcc.n	80020f6 <__clzsi2+0xe>
 80020f2:	0c00      	lsrs	r0, r0, #16
 80020f4:	3910      	subs	r1, #16
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d301      	bcc.n	8002100 <__clzsi2+0x18>
 80020fc:	0a00      	lsrs	r0, r0, #8
 80020fe:	3908      	subs	r1, #8
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	4298      	cmp	r0, r3
 8002104:	d301      	bcc.n	800210a <__clzsi2+0x22>
 8002106:	0900      	lsrs	r0, r0, #4
 8002108:	3904      	subs	r1, #4
 800210a:	a202      	add	r2, pc, #8	; (adr r2, 8002114 <__clzsi2+0x2c>)
 800210c:	5c10      	ldrb	r0, [r2, r0]
 800210e:	1840      	adds	r0, r0, r1
 8002110:	4770      	bx	lr
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	02020304 	.word	0x02020304
 8002118:	01010101 	.word	0x01010101
	...

08002124 <test_leds>:
#define TOGGLE(PIN) HAL_GPIO_TogglePin(PIN ## _GPIO_Port, PIN ## _Pin)
#define SHORT_TIMEOUT 10

void test_leds(void);

void test_leds(){
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	ON(RED);
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <test_leds+0xc0>)
 800212a:	2201      	movs	r2, #1
 800212c:	2108      	movs	r1, #8
 800212e:	0018      	movs	r0, r3
 8002130:	f002 fafb 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002134:	200a      	movs	r0, #10
 8002136:	f000 ff9b 	bl	8003070 <HAL_Delay>
	ON(GREEN);
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <test_leds+0xc0>)
 800213c:	2201      	movs	r2, #1
 800213e:	2110      	movs	r1, #16
 8002140:	0018      	movs	r0, r3
 8002142:	f002 faf2 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002146:	200a      	movs	r0, #10
 8002148:	f000 ff92 	bl	8003070 <HAL_Delay>
	ON(BLUE1);
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <test_leds+0xc0>)
 800214e:	2201      	movs	r2, #1
 8002150:	2120      	movs	r1, #32
 8002152:	0018      	movs	r0, r3
 8002154:	f002 fae9 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002158:	200a      	movs	r0, #10
 800215a:	f000 ff89 	bl	8003070 <HAL_Delay>
	ON(BLUE2);
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <test_leds+0xc0>)
 8002160:	2201      	movs	r2, #1
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	0018      	movs	r0, r3
 8002166:	f002 fae0 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800216a:	200a      	movs	r0, #10
 800216c:	f000 ff80 	bl	8003070 <HAL_Delay>
	ON(BLUE3);
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <test_leds+0xc0>)
 8002172:	2201      	movs	r2, #1
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0018      	movs	r0, r3
 8002178:	f002 fad7 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800217c:	200a      	movs	r0, #10
 800217e:	f000 ff77 	bl	8003070 <HAL_Delay>
	OFF(RED);
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <test_leds+0xc0>)
 8002184:	2200      	movs	r2, #0
 8002186:	2108      	movs	r1, #8
 8002188:	0018      	movs	r0, r3
 800218a:	f002 face 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f000 ff6e 	bl	8003070 <HAL_Delay>
	OFF(GREEN);
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <test_leds+0xc0>)
 8002196:	2200      	movs	r2, #0
 8002198:	2110      	movs	r1, #16
 800219a:	0018      	movs	r0, r3
 800219c:	f002 fac5 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021a0:	200a      	movs	r0, #10
 80021a2:	f000 ff65 	bl	8003070 <HAL_Delay>
	OFF(BLUE1);
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <test_leds+0xc0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	2120      	movs	r1, #32
 80021ac:	0018      	movs	r0, r3
 80021ae:	f002 fabc 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f000 ff5c 	bl	8003070 <HAL_Delay>
	OFF(BLUE2);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <test_leds+0xc0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	0018      	movs	r0, r3
 80021c0:	f002 fab3 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021c4:	200a      	movs	r0, #10
 80021c6:	f000 ff53 	bl	8003070 <HAL_Delay>
	OFF(BLUE3);
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <test_leds+0xc0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	0018      	movs	r0, r3
 80021d2:	f002 faaa 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021d6:	200a      	movs	r0, #10
 80021d8:	f000 ff4a 	bl	8003070 <HAL_Delay>

}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	50000400 	.word	0x50000400

080021e8 <calculateCRC16>:
 */

#ifndef CPPLIBS_CRC_H_
#define CPPLIBS_CRC_H_

uint16_t calculateCRC16(uint8_t *buf, uint16_t len){
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	000a      	movs	r2, r1
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	801a      	strh	r2, [r3, #0]
		0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
		0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
		0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
		0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
	};
	uint16_t crc = 0;
 80021f6:	230e      	movs	r3, #14
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2200      	movs	r2, #0
 80021fc:	801a      	strh	r2, [r3, #0]
	while (len--) {
 80021fe:	e017      	b.n	8002230 <calculateCRC16+0x48>
		crc = (crc << 8) ^ lookup_table[(crc >> 8) ^ *buf++];
 8002200:	240e      	movs	r4, #14
 8002202:	193b      	adds	r3, r7, r4
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	193b      	adds	r3, r7, r4
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	0018      	movs	r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	6079      	str	r1, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	0001      	movs	r1, r0
 800221e:	4059      	eors	r1, r3
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <calculateCRC16+0x64>)
 8002222:	0049      	lsls	r1, r1, #1
 8002224:	5acb      	ldrh	r3, [r1, r3]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4053      	eors	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	193b      	adds	r3, r7, r4
 800222e:	801a      	strh	r2, [r3, #0]
	while (len--) {
 8002230:	1cbb      	adds	r3, r7, #2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	1cba      	adds	r2, r7, #2
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	8011      	strh	r1, [r2, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e0      	bne.n	8002200 <calculateCRC16+0x18>
	}
	return crc;
 800223e:	230e      	movs	r3, #14
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	881b      	ldrh	r3, [r3, #0]
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b005      	add	sp, #20
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	08006b88 	.word	0x08006b88

08002250 <calctemp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calctemp() {
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
	// gets °C data from raw adc data
	for (int i = 0; i < NUMSENSORS; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e098      	b.n	800238e <calctemp+0x13e>
		uint16_t value = adc_values[i] - AD_CORRECTION;
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <calctemp+0x150>)
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	58d2      	ldr	r2, [r2, r3]
 8002264:	2616      	movs	r6, #22
 8002266:	19bb      	adds	r3, r7, r6
 8002268:	801a      	strh	r2, [r3, #0]
		double voltage = VREF / (double) 4096 * value;
 800226a:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <calctemp+0x154>)
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <calctemp+0x158>)
 8002274:	f7fe fc76 	bl	8000b64 <__aeabi_ddiv>
 8002278:	0002      	movs	r2, r0
 800227a:	000b      	movs	r3, r1
 800227c:	0014      	movs	r4, r2
 800227e:	001d      	movs	r5, r3
 8002280:	19bb      	adds	r3, r7, r6
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff feff 	bl	8002088 <__aeabi_i2d>
 800228a:	0002      	movs	r2, r0
 800228c:	000b      	movs	r3, r1
 800228e:	0020      	movs	r0, r4
 8002290:	0029      	movs	r1, r5
 8002292:	f7ff f861 	bl	8001358 <__aeabi_dmul>
 8002296:	0002      	movs	r2, r0
 8002298:	000b      	movs	r3, r1
 800229a:	60ba      	str	r2, [r7, #8]
 800229c:	60fb      	str	r3, [r7, #12]
		double ntc_resistance = voltage / (VREF - voltage) * DIVIDER_RESISTANCE;
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <calctemp+0x154>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f7ff fb18 	bl	80018dc <__aeabi_dsub>
 80022ac:	0002      	movs	r2, r0
 80022ae:	000b      	movs	r3, r1
 80022b0:	68b8      	ldr	r0, [r7, #8]
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	f7fe fc56 	bl	8000b64 <__aeabi_ddiv>
 80022b8:	0002      	movs	r2, r0
 80022ba:	000b      	movs	r3, r1
 80022bc:	0010      	movs	r0, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <calctemp+0x15c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f7ff f847 	bl	8001358 <__aeabi_dmul>
 80022ca:	0002      	movs	r2, r0
 80022cc:	000b      	movs	r3, r1
 80022ce:	603a      	str	r2, [r7, #0]
 80022d0:	607b      	str	r3, [r7, #4]
		double temperature = (double) ntc_resistance
				/ (double) NOMINAL_RESISTANCE;
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <calctemp+0x160>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
		double temperature = (double) ntc_resistance
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f7fe fc42 	bl	8000b64 <__aeabi_ddiv>
 80022e0:	0002      	movs	r2, r0
 80022e2:	000b      	movs	r3, r1
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	61fb      	str	r3, [r7, #28]
		temperature = log(temperature);
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	0010      	movs	r0, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	f004 fa22 	bl	8006738 <log>
 80022f4:	0002      	movs	r2, r0
 80022f6:	000b      	movs	r3, r1
 80022f8:	61ba      	str	r2, [r7, #24]
 80022fa:	61fb      	str	r3, [r7, #28]
		temperature /= BETA;
 80022fc:	2200      	movs	r2, #0
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <calctemp+0x164>)
 8002300:	69b8      	ldr	r0, [r7, #24]
 8002302:	69f9      	ldr	r1, [r7, #28]
 8002304:	f7fe fc2e 	bl	8000b64 <__aeabi_ddiv>
 8002308:	0002      	movs	r2, r0
 800230a:	000b      	movs	r3, r1
 800230c:	61ba      	str	r2, [r7, #24]
 800230e:	61fb      	str	r3, [r7, #28]
		temperature += 1.0 / NOMINAL_TEMPERATURE;
 8002310:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <calctemp+0x168>)
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <calctemp+0x16c>)
 8002314:	69b8      	ldr	r0, [r7, #24]
 8002316:	69f9      	ldr	r1, [r7, #28]
 8002318:	f7fe f8c4 	bl	80004a4 <__aeabi_dadd>
 800231c:	0002      	movs	r2, r0
 800231e:	000b      	movs	r3, r1
 8002320:	61ba      	str	r2, [r7, #24]
 8002322:	61fb      	str	r3, [r7, #28]
		temperature = 1.0 / temperature;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2000      	movs	r0, #0
 800232a:	4925      	ldr	r1, [pc, #148]	; (80023c0 <calctemp+0x170>)
 800232c:	f7fe fc1a 	bl	8000b64 <__aeabi_ddiv>
 8002330:	0002      	movs	r2, r0
 8002332:	000b      	movs	r3, r1
 8002334:	61ba      	str	r2, [r7, #24]
 8002336:	61fb      	str	r3, [r7, #28]
		temperature -= 273.15;
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <calctemp+0x174>)
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <calctemp+0x178>)
 800233c:	69b8      	ldr	r0, [r7, #24]
 800233e:	69f9      	ldr	r1, [r7, #28]
 8002340:	f7ff facc 	bl	80018dc <__aeabi_dsub>
 8002344:	0002      	movs	r2, r0
 8002346:	000b      	movs	r3, r1
 8002348:	61ba      	str	r2, [r7, #24]
 800234a:	61fb      	str	r3, [r7, #28]

		if (temperature < RANGE_L || temperature > RANGE_H) {
 800234c:	2200      	movs	r2, #0
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <calctemp+0x17c>)
 8002350:	69b8      	ldr	r0, [r7, #24]
 8002352:	69f9      	ldr	r1, [r7, #28]
 8002354:	f7fe f860 	bl	8000418 <__aeabi_dcmplt>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d107      	bne.n	800236c <calctemp+0x11c>
 800235c:	2200      	movs	r2, #0
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <calctemp+0x180>)
 8002360:	69b8      	ldr	r0, [r7, #24]
 8002362:	69f9      	ldr	r1, [r7, #28]
 8002364:	f7fe f86c 	bl	8000440 <__aeabi_dcmpgt>
 8002368:	1e03      	subs	r3, r0, #0
 800236a:	d003      	beq.n	8002374 <calctemp+0x124>
			temperature = INVALID_VAL;
 800236c:	2200      	movs	r2, #0
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <calctemp+0x184>)
 8002370:	61ba      	str	r2, [r7, #24]
 8002372:	61fb      	str	r3, [r7, #28]
		}

		temperatures_data[i] = temperature;
 8002374:	69b8      	ldr	r0, [r7, #24]
 8002376:	69f9      	ldr	r1, [r7, #28]
 8002378:	f7fe f876 	bl	8000468 <__aeabi_d2uiz>
 800237c:	0003      	movs	r3, r0
 800237e:	b299      	uxth	r1, r3
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <calctemp+0x188>)
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	0052      	lsls	r2, r2, #1
 8002386:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < NUMSENSORS; i++) {
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3301      	adds	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	2b07      	cmp	r3, #7
 8002392:	dc00      	bgt.n	8002396 <calctemp+0x146>
 8002394:	e762      	b.n	800225c <calctemp+0xc>
	}
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b00b      	add	sp, #44	; 0x2c
 800239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a0:	20000240 	.word	0x20000240
 80023a4:	20000010 	.word	0x20000010
 80023a8:	40b00000 	.word	0x40b00000
 80023ac:	20000008 	.word	0x20000008
 80023b0:	20000000 	.word	0x20000000
 80023b4:	40af1200 	.word	0x40af1200
 80023b8:	dcb5db83 	.word	0xdcb5db83
 80023bc:	3f6b79e1 	.word	0x3f6b79e1
 80023c0:	3ff00000 	.word	0x3ff00000
 80023c4:	66666666 	.word	0x66666666
 80023c8:	40711266 	.word	0x40711266
 80023cc:	c0440000 	.word	0xc0440000
 80023d0:	40690000 	.word	0x40690000
 80023d4:	406fe000 	.word	0x406fe000
 80023d8:	20000260 	.word	0x20000260

080023dc <select_adc_channel>:
		}
	}
	return counter;
}
//-------------------------------------------------------
void select_adc_channel(int channel) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80023e4:	230c      	movs	r3, #12
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	0018      	movs	r0, r3
 80023ea:	230c      	movs	r3, #12
 80023ec:	001a      	movs	r2, r3
 80023ee:	2100      	movs	r1, #0
 80023f0:	f004 f970 	bl	80066d4 <memset>
//////////    sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
	switch (channel) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d82d      	bhi.n	8002456 <select_adc_channel+0x7a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <select_adc_channel+0xac>)
 8002400:	18d3      	adds	r3, r2, r3
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	469f      	mov	pc, r3
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8002406:	230c      	movs	r3, #12
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
		break;
 800240e:	e026      	b.n	800245e <select_adc_channel+0x82>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 8002410:	230c      	movs	r3, #12
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <select_adc_channel+0xb0>)
 8002416:	601a      	str	r2, [r3, #0]
		break;
 8002418:	e021      	b.n	800245e <select_adc_channel+0x82>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 800241a:	230c      	movs	r3, #12
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <select_adc_channel+0xb4>)
 8002420:	601a      	str	r2, [r3, #0]
		break;
 8002422:	e01c      	b.n	800245e <select_adc_channel+0x82>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 8002424:	230c      	movs	r3, #12
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <select_adc_channel+0xb8>)
 800242a:	601a      	str	r2, [r3, #0]
		break;
 800242c:	e017      	b.n	800245e <select_adc_channel+0x82>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 800242e:	230c      	movs	r3, #12
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <select_adc_channel+0xbc>)
 8002434:	601a      	str	r2, [r3, #0]
		break;
 8002436:	e012      	b.n	800245e <select_adc_channel+0x82>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 8002438:	230c      	movs	r3, #12
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <select_adc_channel+0xc0>)
 800243e:	601a      	str	r2, [r3, #0]
		break;
 8002440:	e00d      	b.n	800245e <select_adc_channel+0x82>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 8002442:	230c      	movs	r3, #12
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <select_adc_channel+0xc4>)
 8002448:	601a      	str	r2, [r3, #0]
		break;
 800244a:	e008      	b.n	800245e <select_adc_channel+0x82>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 800244c:	230c      	movs	r3, #12
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <select_adc_channel+0xc8>)
 8002452:	601a      	str	r2, [r3, #0]
		break;
 8002454:	e003      	b.n	800245e <select_adc_channel+0x82>
	default:
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002456:	230c      	movs	r3, #12
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <select_adc_channel+0xcc>)
 800245c:	601a      	str	r2, [r3, #0]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800245e:	210c      	movs	r1, #12
 8002460:	187b      	adds	r3, r7, r1
 8002462:	2200      	movs	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800246c:	187a      	adds	r2, r7, r1
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <select_adc_channel+0xd0>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f001 fa5c 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <select_adc_channel+0xa4>
		Error_Handler();
 800247c:	f000 fba4 	bl	8002bc8 <Error_Handler>
	}
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}
 8002488:	08006b68 	.word	0x08006b68
 800248c:	04000002 	.word	0x04000002
 8002490:	08000004 	.word	0x08000004
 8002494:	0c000008 	.word	0x0c000008
 8002498:	10000010 	.word	0x10000010
 800249c:	14000020 	.word	0x14000020
 80024a0:	18000040 	.word	0x18000040
 80024a4:	1c000080 	.word	0x1c000080
 80024a8:	b0001000 	.word	0xb0001000
 80024ac:	20000090 	.word	0x20000090

080024b0 <convert>:
//----------------------------------------------

void convert() {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
	int p;

	for (p = 0; p < NUMSENSORS; p++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	e027      	b.n	800250c <convert+0x5c>
		select_adc_channel(p);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ff8c 	bl	80023dc <select_adc_channel>
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <convert+0x6c>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f001 f908 	bl	80036dc <HAL_ADC_Start>
 80024cc:	1e03      	subs	r3, r0, #0
 80024ce:	d001      	beq.n	80024d4 <convert+0x24>
			Error_Handler();
 80024d0:	f000 fb7a 	bl	8002bc8 <Error_Handler>
		}
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80024d4:	2301      	movs	r3, #1
 80024d6:	425a      	negs	r2, r3
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <convert+0x6c>)
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f001 f987 	bl	80037f0 <HAL_ADC_PollForConversion>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d001      	beq.n	80024ea <convert+0x3a>
			Error_Handler();
 80024e6:	f000 fb6f 	bl	8002bc8 <Error_Handler>
		}
		adc_values[p] = HAL_ADC_GetValue(&hadc1);
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <convert+0x6c>)
 80024ec:	0018      	movs	r0, r3
 80024ee:	f001 fa13 	bl	8003918 <HAL_ADC_GetValue>
 80024f2:	0003      	movs	r3, r0
 80024f4:	0019      	movs	r1, r3
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <convert+0x70>)
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	50d1      	str	r1, [r2, r3]
		HAL_ADC_Stop(&hadc1);
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <convert+0x6c>)
 8002500:	0018      	movs	r0, r3
 8002502:	f001 f939 	bl	8003778 <HAL_ADC_Stop>
	for (p = 0; p < NUMSENSORS; p++) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3301      	adds	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b07      	cmp	r3, #7
 8002510:	ddd4      	ble.n	80024bc <convert+0xc>

	}
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000090 	.word	0x20000090
 8002520:	20000240 	.word	0x20000240

08002524 <sendDataCal>:

//--------------------------------------------------------
void sendDataCal() {
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	46ce      	mov	lr, r9
 8002528:	4647      	mov	r7, r8
 800252a:	b580      	push	{r7, lr}
 800252c:	b08b      	sub	sp, #44	; 0x2c
 800252e:	af00      	add	r7, sp, #0
 8002530:	466e      	mov	r6, sp
 8002532:	46b0      	mov	r8, r6
	uint8_t packet_len = NUMSENSORS * 2 + 2;
 8002534:	2613      	movs	r6, #19
 8002536:	0032      	movs	r2, r6
 8002538:	2310      	movs	r3, #16
 800253a:	18f3      	adds	r3, r6, r3
 800253c:	19de      	adds	r6, r3, r7
 800253e:	2312      	movs	r3, #18
 8002540:	469c      	mov	ip, r3
 8002542:	4663      	mov	r3, ip
 8002544:	7033      	strb	r3, [r6, #0]
	uint8_t packet[packet_len];
 8002546:	0016      	movs	r6, r2
 8002548:	2310      	movs	r3, #16
 800254a:	18f3      	adds	r3, r6, r3
 800254c:	19de      	adds	r6, r3, r7
 800254e:	7836      	ldrb	r6, [r6, #0]
 8002550:	46b4      	mov	ip, r6
 8002552:	2301      	movs	r3, #1
 8002554:	425b      	negs	r3, r3
 8002556:	4699      	mov	r9, r3
 8002558:	44cc      	add	ip, r9
 800255a:	4663      	mov	r3, ip
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	60be      	str	r6, [r7, #8]
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0f5b      	lsrs	r3, r3, #29
 8002568:	469c      	mov	ip, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	00d9      	lsls	r1, r3, #3
 800256e:	4663      	mov	r3, ip
 8002570:	4319      	orrs	r1, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	00d8      	lsls	r0, r3, #3
 8002576:	0034      	movs	r4, r6
 8002578:	2100      	movs	r1, #0
 800257a:	000d      	movs	r5, r1
 800257c:	0f61      	lsrs	r1, r4, #29
 800257e:	00eb      	lsls	r3, r5, #3
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	430b      	orrs	r3, r1
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	00e3      	lsls	r3, r4, #3
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	0033      	movs	r3, r6
 800258e:	3307      	adds	r3, #7
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	466a      	mov	r2, sp
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	469d      	mov	sp, r3
 800259a:	466b      	mov	r3, sp
 800259c:	3300      	adds	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
	for (int s = 0; s < NUMSENSORS; s++) {
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	e017      	b.n	80025d6 <sendDataCal+0xb2>
		packet[s * 2 + 1] = temperatures_data[s] & 0xFF;
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <sendDataCal+0x120>)
 80025a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025aa:	0052      	lsls	r2, r2, #1
 80025ac:	5ad2      	ldrh	r2, [r2, r3]
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2d1      	uxtb	r1, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	54d1      	strb	r1, [r2, r3]
		packet[s * 2] = temperatures_data[s] >> 8;
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <sendDataCal+0x120>)
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	5ad3      	ldrh	r3, [r2, r3]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	b2d1      	uxtb	r1, r2
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	54d1      	strb	r1, [r2, r3]
	for (int s = 0; s < NUMSENSORS; s++) {
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	2b07      	cmp	r3, #7
 80025da:	dde4      	ble.n	80025a6 <sendDataCal+0x82>
	}

	uint16_t crc = calculateCRC16(packet, NUMSENSORS * 2);
 80025dc:	2316      	movs	r3, #22
 80025de:	18fc      	adds	r4, r7, r3
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2110      	movs	r1, #16
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fdff 	bl	80021e8 <calculateCRC16>
 80025ea:	0003      	movs	r3, r0
 80025ec:	8023      	strh	r3, [r4, #0]
	packet[packet_len - 2] = crc >> 8;
 80025ee:	2316      	movs	r3, #22
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	2013      	movs	r0, #19
 80025fa:	2310      	movs	r3, #16
 80025fc:	18c3      	adds	r3, r0, r3
 80025fe:	19db      	adds	r3, r3, r7
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3b02      	subs	r3, #2
 8002604:	b2d1      	uxtb	r1, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	54d1      	strb	r1, [r2, r3]
	packet[packet_len - 1] = crc & 0xFF;
 800260a:	2310      	movs	r3, #16
 800260c:	18c3      	adds	r3, r0, r3
 800260e:	19db      	adds	r3, r3, r7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	3b01      	subs	r3, #1
 8002614:	2216      	movs	r2, #22
 8002616:	18ba      	adds	r2, r7, r2
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	b2d1      	uxtb	r1, r2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart3, packet, packet_len, 10);
 8002620:	2310      	movs	r3, #16
 8002622:	18c3      	adds	r3, r0, r3
 8002624:	19db      	adds	r3, r3, r7
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b29a      	uxth	r2, r3
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	4806      	ldr	r0, [pc, #24]	; (8002648 <sendDataCal+0x124>)
 800262e:	230a      	movs	r3, #10
 8002630:	f002 ff28 	bl	8005484 <HAL_UART_Transmit>
 8002634:	46c5      	mov	sp, r8
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b00b      	add	sp, #44	; 0x2c
 800263c:	bcc0      	pop	{r6, r7}
 800263e:	46b9      	mov	r9, r7
 8002640:	46b0      	mov	r8, r6
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	20000260 	.word	0x20000260
 8002648:	200001ac 	.word	0x200001ac

0800264c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002650:	f000 fc88 	bl	8002f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002654:	f000 f84e 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002658:	f000 fa36 	bl	8002ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800265c:	f000 f8a4 	bl	80027a8 <MX_ADC1_Init>
  MX_CRC_Init();
 8002660:	f000 f98c 	bl	800297c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8002664:	f000 f9ae 	bl	80029c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002668:	f000 f9fa 	bl	8002a60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	test_leds();
 800266c:	f7ff fd5a 	bl	8002124 <test_leds>
	ON(ENSPWR);
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	0059      	lsls	r1, r3, #1
 8002674:	23a0      	movs	r3, #160	; 0xa0
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	2201      	movs	r2, #1
 800267a:	0018      	movs	r0, r3
 800267c:	f002 f855 	bl	800472a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f000 fcf5 	bl	8003070 <HAL_Delay>
	convert();
 8002686:	f7ff ff13 	bl	80024b0 <convert>
	calctemp();
 800268a:	f7ff fde1 	bl	8002250 <calctemp>
	convert();
 800268e:	f7ff ff0f 	bl	80024b0 <convert>
	calctemp();
 8002692:	f7ff fddd 	bl	8002250 <calctemp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		convert();
 8002696:	f7ff ff0b 	bl	80024b0 <convert>
//	  msglength=sprintf(tx_buffer,"ADC %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
		calctemp();
 800269a:	f7ff fdd9 	bl	8002250 <calctemp>
//	  msglength=sprintf(tx_buffer,"TMP %04d,%04d,%04d,%04d,%04d,%04d,%04d,%04d \r\n",temperatures_data[0],temperatures_data[1],temperatures_data[2],temperatures_data[3],temperatures_data[4],temperatures_data[5],temperatures_data[6],temperatures_data[7]);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) tx_buffer,msglength, 100);
//------------------------------------------------------------------------
		// wait for rising edge
		while (HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin))
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	019b      	lsls	r3, r3, #6
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <main+0xa0>)
 80026a6:	0019      	movs	r1, r3
 80026a8:	0010      	movs	r0, r2
 80026aa:	f002 f821 	bl	80046f0 <HAL_GPIO_ReadPin>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d1f6      	bne.n	80026a0 <main+0x54>
			;
		ON(GREEN);
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <main+0xa4>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	2110      	movs	r1, #16
 80026b8:	0018      	movs	r0, r3
 80026ba:	f002 f836 	bl	800472a <HAL_GPIO_WritePin>
		 // fill temperatures buffer
		 //fillTemp();

		 // send
		 //sendData();
		 */sendDataCal();
 80026be:	f7ff ff31 	bl	8002524 <sendDataCal>
		OFF(GREEN);
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <main+0xa4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	2110      	movs	r1, #16
 80026c8:	0018      	movs	r0, r3
 80026ca:	f002 f82e 	bl	800472a <HAL_GPIO_WritePin>
		// wait for falling edge
		while (!HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin));
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <main+0xa0>)
 80026d6:	0019      	movs	r1, r3
 80026d8:	0010      	movs	r0, r2
 80026da:	f002 f809 	bl	80046f0 <HAL_GPIO_ReadPin>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d0f6      	beq.n	80026d0 <main+0x84>


//------------------------------------------------------------------------
		HAL_Delay(100);
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	f000 fcc4 	bl	8003070 <HAL_Delay>
		convert();
 80026e8:	e7d5      	b.n	8002696 <main+0x4a>
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	50000800 	.word	0x50000800
 80026f0:	50000400 	.word	0x50000400

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b093      	sub	sp, #76	; 0x4c
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	2414      	movs	r4, #20
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	0018      	movs	r0, r3
 8002700:	2334      	movs	r3, #52	; 0x34
 8002702:	001a      	movs	r2, r3
 8002704:	2100      	movs	r1, #0
 8002706:	f003 ffe5 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	0018      	movs	r0, r3
 800270e:	2310      	movs	r3, #16
 8002710:	001a      	movs	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	f003 ffde 	bl	80066d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	0018      	movs	r0, r3
 800271e:	f002 f821 	bl	8004764 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002722:	193b      	adds	r3, r7, r4
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002728:	193b      	adds	r3, r7, r4
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0052      	lsls	r2, r2, #1
 800272e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002730:	0021      	movs	r1, r4
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2202      	movs	r2, #2
 8002742:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002744:	187b      	adds	r3, r7, r1
 8002746:	2202      	movs	r2, #2
 8002748:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2208      	movs	r2, #8
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	0292      	lsls	r2, r2, #10
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	0592      	lsls	r2, r2, #22
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002766:	187b      	adds	r3, r7, r1
 8002768:	0018      	movs	r0, r3
 800276a:	f002 f847 	bl	80047fc <HAL_RCC_OscConfig>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002772:	f000 fa29 	bl	8002bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2202      	movs	r2, #2
 8002780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2102      	movs	r1, #2
 8002792:	0018      	movs	r0, r3
 8002794:	f002 fb42 	bl	8004e1c <HAL_RCC_ClockConfig>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800279c:	f000 fa14 	bl	8002bc8 <Error_Handler>
  }
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b013      	add	sp, #76	; 0x4c
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	0018      	movs	r0, r3
 80027b2:	230c      	movs	r3, #12
 80027b4:	001a      	movs	r2, r3
 80027b6:	2100      	movs	r1, #0
 80027b8:	f003 ff8c 	bl	80066d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <MX_ADC1_Init+0x1b4>)
 80027c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0312      	lsls	r2, r2, #12
 80027c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027d0:	4b61      	ldr	r3, [pc, #388]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d6:	4b60      	ldr	r3, [pc, #384]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0392      	lsls	r2, r2, #14
 80027dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027de:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027e0:	2208      	movs	r2, #8
 80027e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027e4:	4b5c      	ldr	r3, [pc, #368]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 80027f6:	4b58      	ldr	r3, [pc, #352]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027f8:	2208      	movs	r2, #8
 80027fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80027fe:	2220      	movs	r2, #32
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002804:	4b54      	ldr	r3, [pc, #336]	; (8002958 <MX_ADC1_Init+0x1b0>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800280a:	4b53      	ldr	r3, [pc, #332]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <MX_ADC1_Init+0x1b0>)
 8002812:	222c      	movs	r2, #44	; 0x2c
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800281e:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <MX_ADC1_Init+0x1b0>)
 8002820:	2207      	movs	r2, #7
 8002822:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <MX_ADC1_Init+0x1b0>)
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800282a:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800282c:	223c      	movs	r2, #60	; 0x3c
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002832:	4b49      	ldr	r3, [pc, #292]	; (8002958 <MX_ADC1_Init+0x1b0>)
 8002834:	2200      	movs	r2, #0
 8002836:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002838:	4b47      	ldr	r3, [pc, #284]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fda6 	bl	800338c <HAL_ADC_Init>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002844:	f000 f9c0 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285a:	1d3a      	adds	r2, r7, #4
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f001 f865 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d001      	beq.n	800286e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800286a:	f000 f9ad 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4a3b      	ldr	r2, [pc, #236]	; (8002960 <MX_ADC1_Init+0x1b8>)
 8002872:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2204      	movs	r2, #4
 8002878:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	4b36      	ldr	r3, [pc, #216]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f001 f855 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800288a:	f000 f99d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	4a34      	ldr	r2, [pc, #208]	; (8002964 <MX_ADC1_Init+0x1bc>)
 8002892:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2208      	movs	r2, #8
 8002898:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289a:	1d3a      	adds	r2, r7, #4
 800289c:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 f845 	bl	8003930 <HAL_ADC_ConfigChannel>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80028aa:	f000 f98d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <MX_ADC1_Init+0x1c0>)
 80028b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	220c      	movs	r2, #12
 80028b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ba:	1d3a      	adds	r2, r7, #4
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f001 f835 	bl	8003930 <HAL_ADC_ConfigChannel>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80028ca:	f000 f97d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4a26      	ldr	r2, [pc, #152]	; (800296c <MX_ADC1_Init+0x1c4>)
 80028d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2210      	movs	r2, #16
 80028d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028da:	1d3a      	adds	r2, r7, #4
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f001 f825 	bl	8003930 <HAL_ADC_ConfigChannel>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80028ea:	f000 f96d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <MX_ADC1_Init+0x1c8>)
 80028f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2214      	movs	r2, #20
 80028f8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028fa:	1d3a      	adds	r2, r7, #4
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_ADC1_Init+0x1b0>)
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f001 f815 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800290a:	f000 f95d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <MX_ADC1_Init+0x1cc>)
 8002912:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2218      	movs	r2, #24
 8002918:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800291a:	1d3a      	adds	r2, r7, #4
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f001 f805 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 800292a:	f000 f94d 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <MX_ADC1_Init+0x1d0>)
 8002932:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	221c      	movs	r2, #28
 8002938:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800293a:	1d3a      	adds	r2, r7, #4
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_ADC1_Init+0x1b0>)
 800293e:	0011      	movs	r1, r2
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fff5 	bl	8003930 <HAL_ADC_ConfigChannel>
 8002946:	1e03      	subs	r3, r0, #0
 8002948:	d001      	beq.n	800294e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800294a:	f000 f93d 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000090 	.word	0x20000090
 800295c:	40012400 	.word	0x40012400
 8002960:	04000002 	.word	0x04000002
 8002964:	08000004 	.word	0x08000004
 8002968:	0c000008 	.word	0x0c000008
 800296c:	10000010 	.word	0x10000010
 8002970:	14000020 	.word	0x14000020
 8002974:	18000040 	.word	0x18000040
 8002978:	1c000080 	.word	0x1c000080

0800297c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_CRC_Init+0x40>)
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <MX_CRC_Init+0x44>)
 8002984:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <MX_CRC_Init+0x40>)
 8002988:	2200      	movs	r2, #0
 800298a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <MX_CRC_Init+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <MX_CRC_Init+0x40>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <MX_CRC_Init+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <MX_CRC_Init+0x40>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <MX_CRC_Init+0x40>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f001 fb9e 	bl	80040e8 <HAL_CRC_Init>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d001      	beq.n	80029b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80029b0:	f000 f90a 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	200000f4 	.word	0x200000f4
 80029c0:	40023000 	.word	0x40023000

080029c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029c8:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <MX_USART1_UART_Init+0x98>)
 80029cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029d0:	22e1      	movs	r2, #225	; 0xe1
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029ea:	220c      	movs	r2, #12
 80029ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f002 fce2 	bl	80053d8 <HAL_UART_Init>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a18:	f000 f8d6 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a1e:	2100      	movs	r1, #0
 8002a20:	0018      	movs	r0, r3
 8002a22:	f003 fd77 	bl	8006514 <HAL_UARTEx_SetTxFifoThreshold>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a2a:	f000 f8cd 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a30:	2100      	movs	r1, #0
 8002a32:	0018      	movs	r0, r3
 8002a34:	f003 fdae 	bl	8006594 <HAL_UARTEx_SetRxFifoThreshold>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a3c:	f000 f8c4 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <MX_USART1_UART_Init+0x94>)
 8002a42:	0018      	movs	r0, r3
 8002a44:	f003 fd2c 	bl	80064a0 <HAL_UARTEx_DisableFifoMode>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a4c:	f000 f8bc 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	20000118 	.word	0x20000118
 8002a5c:	40013800 	.word	0x40013800

08002a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <MX_USART3_UART_Init+0x64>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a6c:	2296      	movs	r2, #150	; 0x96
 8002a6e:	01d2      	lsls	r2, r2, #7
 8002a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <MX_USART3_UART_Init+0x60>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f002 fc94 	bl	80053d8 <HAL_UART_Init>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ab4:	f000 f888 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	200001ac 	.word	0x200001ac
 8002ac4:	40004800 	.word	0x40004800

08002ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ace:	240c      	movs	r4, #12
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	2314      	movs	r3, #20
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	2100      	movs	r1, #0
 8002ada:	f003 fdfb 	bl	80066d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aea:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	2201      	movs	r2, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002b14:	2102      	movs	r1, #2
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <MX_GPIO_Init+0xf4>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENSPWR_GPIO_Port, ENSPWR_Pin, GPIO_PIN_RESET);
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	0059      	lsls	r1, r3, #1
 8002b2a:	23a0      	movs	r3, #160	; 0xa0
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	2200      	movs	r2, #0
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 fdfa 	bl	800472a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <MX_GPIO_Init+0xf8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	21f8      	movs	r1, #248	; 0xf8
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f001 fdf4 	bl	800472a <HAL_GPIO_WritePin>
                          |BLUE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : START_Pin */
  GPIO_InitStruct.Pin = START_Pin;
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	0192      	lsls	r2, r2, #6
 8002b48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <MX_GPIO_Init+0xfc>)
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f001 fc63 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENSPWR_Pin */
  GPIO_InitStruct.Pin = ENSPWR_Pin;
 8002b62:	0021      	movs	r1, r4
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0052      	lsls	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	000c      	movs	r4, r1
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	2201      	movs	r2, #1
 8002b72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENSPWR_GPIO_Port, &GPIO_InitStruct);
 8002b80:	193a      	adds	r2, r7, r4
 8002b82:	23a0      	movs	r3, #160	; 0xa0
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f001 fc4d 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE1_Pin BLUE2_Pin
                           BLUE3_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE1_Pin|BLUE2_Pin
 8002b8e:	0021      	movs	r1, r4
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	22f8      	movs	r2, #248	; 0xf8
 8002b94:	601a      	str	r2, [r3, #0]
                          |BLUE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2201      	movs	r2, #1
 8002b9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <MX_GPIO_Init+0xf8>)
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f001 fc3a 	bl	8004428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b009      	add	sp, #36	; 0x24
 8002bba:	bd90      	pop	{r4, r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	50000400 	.word	0x50000400
 8002bc4:	50000800 	.word	0x50000800

08002bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bd0:	e7fe      	b.n	8002bd0 <Error_Handler+0x8>
	...

08002bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_MspInit+0x44>)
 8002bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_MspInit+0x44>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_MspInit+0x44>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0549      	lsls	r1, r1, #21
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_MspInit+0x44>)
 8002c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b093      	sub	sp, #76	; 0x4c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	2334      	movs	r3, #52	; 0x34
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	2314      	movs	r3, #20
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f003 fd50 	bl	80066d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	2418      	movs	r4, #24
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	231c      	movs	r3, #28
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f003 fd48 	bl	80066d4 <memset>
  if(hadc->Instance==ADC1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_ADC_MspInit+0xe4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d154      	bne.n	8002cf8 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	01d2      	lsls	r2, r2, #7
 8002c54:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002c56:	193b      	adds	r3, r7, r4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f002 fa86 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002c68:	f7ff ffae 	bl	8002bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	0349      	lsls	r1, r1, #13
 8002c76:	430a      	orrs	r2, r1
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	035b      	lsls	r3, r3, #13
 8002c82:	4013      	ands	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_ADC_MspInit+0xe8>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8002cb8:	2434      	movs	r4, #52	; 0x34
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	601a      	str	r2, [r3, #0]
                          |S4_Pin|S5_Pin|S6_Pin|S7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	193a      	adds	r2, r7, r4
 8002cce:	23a0      	movs	r3, #160	; 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f001 fba7 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AREFIN_Pin;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AREFIN_GPIO_Port, &GPIO_InitStruct);
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_ADC_MspInit+0xec>)
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	0010      	movs	r0, r2
 8002cf4:	f001 fb98 	bl	8004428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b013      	add	sp, #76	; 0x4c
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	40012400 	.word	0x40012400
 8002d04:	40021000 	.word	0x40021000
 8002d08:	50000400 	.word	0x50000400

08002d0c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_CRC_MspInit+0x38>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10d      	bne.n	8002d3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_CRC_MspInit+0x3c>)
 8002d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_CRC_MspInit+0x3c>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0149      	lsls	r1, r1, #5
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_CRC_MspInit+0x3c>)
 8002d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b004      	add	sp, #16
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	40023000 	.word	0x40023000
 8002d48:	40021000 	.word	0x40021000

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b093      	sub	sp, #76	; 0x4c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	2334      	movs	r3, #52	; 0x34
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	0018      	movs	r0, r3
 8002d5a:	2314      	movs	r3, #20
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f003 fcb8 	bl	80066d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d64:	2418      	movs	r4, #24
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	0018      	movs	r0, r3
 8002d6a:	231c      	movs	r3, #28
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f003 fcb0 	bl	80066d4 <memset>
  if(huart->Instance==USART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a46      	ldr	r2, [pc, #280]	; (8002e94 <HAL_UART_MspInit+0x148>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d148      	bne.n	8002e10 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2200      	movs	r2, #0
 8002d88:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f002 f9ef 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d96:	f7ff ff17 	bl	8002bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	01c9      	lsls	r1, r1, #7
 8002da4:	430a      	orrs	r2, r1
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	01db      	lsls	r3, r3, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc2:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_Pin|U1RX_Pin;
 8002dce:	2134      	movs	r1, #52	; 0x34
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	22c0      	movs	r2, #192	; 0xc0
 8002dd4:	00d2      	lsls	r2, r2, #3
 8002dd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2202      	movs	r2, #2
 8002ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2201      	movs	r2, #1
 8002dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df0:	187a      	adds	r2, r7, r1
 8002df2:	23a0      	movs	r3, #160	; 0xa0
 8002df4:	05db      	lsls	r3, r3, #23
 8002df6:	0011      	movs	r1, r2
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f001 fb15 	bl	8004428 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	201b      	movs	r0, #27
 8002e04:	f001 f93e 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e08:	201b      	movs	r0, #27
 8002e0a:	f001 f950 	bl	80040ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e0e:	e03d      	b.n	8002e8c <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <HAL_UART_MspInit+0x150>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d138      	bne.n	8002e8c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	02c9      	lsls	r1, r1, #11
 8002e24:	430a      	orrs	r2, r1
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	02db      	lsls	r3, r3, #11
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <HAL_UART_MspInit+0x14c>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U3TX_Pin|U3RX_Pin;
 8002e4e:	2134      	movs	r1, #52	; 0x34
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	22c0      	movs	r2, #192	; 0xc0
 8002e54:	0092      	lsls	r2, r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_UART_MspInit+0x154>)
 8002e74:	0019      	movs	r1, r3
 8002e76:	0010      	movs	r0, r2
 8002e78:	f001 fad6 	bl	8004428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	201d      	movs	r0, #29
 8002e82:	f001 f8ff 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002e86:	201d      	movs	r0, #29
 8002e88:	f001 f911 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b013      	add	sp, #76	; 0x4c
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004800 	.word	0x40004800
 8002ea0:	50000400 	.word	0x50000400

08002ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <NMI_Handler+0x4>

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <HardFault_Handler+0x4>

08002eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec8:	f000 f8b6 	bl	8003038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <USART1_IRQHandler+0x14>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f002 fb6e 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20000118 	.word	0x20000118

08002eec <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <USART3_4_IRQHandler+0x14>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f002 fb62 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	200001ac 	.word	0x200001ac

08002f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f10:	480d      	ldr	r0, [pc, #52]	; (8002f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f14:	f7ff fff6 	bl	8002f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f1a:	490d      	ldr	r1, [pc, #52]	; (8002f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <LoopForever+0xe>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f20:	e002      	b.n	8002f28 <LoopCopyDataInit>

08002f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f26:	3304      	adds	r3, #4

08002f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f2c:	d3f9      	bcc.n	8002f22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f30:	4c0a      	ldr	r4, [pc, #40]	; (8002f5c <LoopForever+0x16>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f34:	e001      	b.n	8002f3a <LoopFillZerobss>

08002f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f38:	3204      	adds	r2, #4

08002f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f3c:	d3fb      	bcc.n	8002f36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f3e:	f003 fbd7 	bl	80066f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f42:	f7ff fb83 	bl	800264c <main>

08002f46 <LoopForever>:

LoopForever:
  b LoopForever
 8002f46:	e7fe      	b.n	8002f46 <LoopForever>
  ldr   r0, =_estack
 8002f48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002f54:	08006e1c 	.word	0x08006e1c
  ldr r2, =_sbss
 8002f58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002f5c:	200003ac 	.word	0x200003ac

08002f60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f60:	e7fe      	b.n	8002f60 <ADC1_IRQHandler>
	...

08002f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_Init+0x3c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_Init+0x3c>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	0049      	lsls	r1, r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f000 f810 	bl	8002fa4 <HAL_InitTick>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e001      	b.n	8002f94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7ff fe20 	bl	8002bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	781b      	ldrb	r3, [r3, #0]
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40022000 	.word	0x40022000

08002fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_InitTick+0x88>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02b      	beq.n	8003014 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_InitTick+0x8c>)
 8002fbe:	681c      	ldr	r4, [r3, #0]
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_InitTick+0x88>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	23fa      	movs	r3, #250	; 0xfa
 8002fc8:	0098      	lsls	r0, r3, #2
 8002fca:	f7fd f899 	bl	8000100 <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	f7fd f894 	bl	8000100 <__udivsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f001 f877 	bl	80040ce <HAL_SYSTICK_Config>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d112      	bne.n	800300a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d80a      	bhi.n	8003000 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	2301      	movs	r3, #1
 8002fee:	425b      	negs	r3, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f001 f846 	bl	8004084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_InitTick+0x90>)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00d      	b.n	800301c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e008      	b.n	800301c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800300a:	230f      	movs	r3, #15
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e003      	b.n	800301c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800301c:	230f      	movs	r3, #15
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	781b      	ldrb	r3, [r3, #0]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b005      	add	sp, #20
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	20000020 	.word	0x20000020
 8003030:	20000018 	.word	0x20000018
 8003034:	2000001c 	.word	0x2000001c

08003038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_IncTick+0x1c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	001a      	movs	r2, r3
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_IncTick+0x20>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	18d2      	adds	r2, r2, r3
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_IncTick+0x20>)
 800304a:	601a      	str	r2, [r3, #0]
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000020 	.word	0x20000020
 8003058:	20000270 	.word	0x20000270

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_GetTick+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	20000270 	.word	0x20000270

08003070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff fff0 	bl	800305c <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3301      	adds	r3, #1
 8003088:	d005      	beq.n	8003096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_Delay+0x44>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	001a      	movs	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	189b      	adds	r3, r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	f7ff ffe0 	bl	800305c <HAL_GetTick>
 800309c:	0002      	movs	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d8f7      	bhi.n	8003098 <HAL_Delay+0x28>
  {
  }
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	20000020 	.word	0x20000020

080030b8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80030c8:	401a      	ands	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	fe3fffff 	.word	0xfe3fffff

080030e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	23e0      	movs	r3, #224	; 0xe0
 80030ee:	045b      	lsls	r3, r3, #17
 80030f0:	4013      	ands	r3, r2
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}

080030fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	2104      	movs	r1, #4
 800310e:	400a      	ands	r2, r1
 8003110:	2107      	movs	r1, #7
 8003112:	4091      	lsls	r1, r2
 8003114:	000a      	movs	r2, r1
 8003116:	43d2      	mvns	r2, r2
 8003118:	401a      	ands	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2104      	movs	r1, #4
 800311e:	400b      	ands	r3, r1
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4099      	lsls	r1, r3
 8003124:	000b      	movs	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}

08003134 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	2104      	movs	r1, #4
 8003146:	400a      	ands	r2, r1
 8003148:	2107      	movs	r1, #7
 800314a:	4091      	lsls	r1, r2
 800314c:	000a      	movs	r2, r1
 800314e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2104      	movs	r1, #4
 8003154:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003156:	40da      	lsrs	r2, r3
 8003158:	0013      	movs	r3, r2
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	23c0      	movs	r3, #192	; 0xc0
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4013      	ands	r3, r2
 8003174:	d101      	bne.n	800317a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800317a:	2300      	movs	r3, #0
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}

08003184 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	211f      	movs	r1, #31
 8003198:	400a      	ands	r2, r1
 800319a:	210f      	movs	r1, #15
 800319c:	4091      	lsls	r1, r2
 800319e:	000a      	movs	r2, r1
 80031a0:	43d2      	mvns	r2, r2
 80031a2:	401a      	ands	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	210f      	movs	r1, #15
 80031aa:	4019      	ands	r1, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	201f      	movs	r0, #31
 80031b0:	4003      	ands	r3, r0
 80031b2:	4099      	lsls	r1, r3
 80031b4:	000b      	movs	r3, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	035b      	lsls	r3, r3, #13
 80031d6:	0b5b      	lsrs	r3, r3, #13
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b002      	add	sp, #8
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	0352      	lsls	r2, r2, #13
 80031f8:	0b52      	lsrs	r2, r2, #13
 80031fa:	43d2      	mvns	r2, r2
 80031fc:	401a      	ands	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	0212      	lsls	r2, r2, #8
 8003220:	43d2      	mvns	r2, r2
 8003222:	401a      	ands	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	400b      	ands	r3, r1
 800322c:	4904      	ldr	r1, [pc, #16]	; (8003240 <LL_ADC_SetChannelSamplingTime+0x34>)
 800322e:	400b      	ands	r3, r1
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	07ffff00 	.word	0x07ffff00

08003244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a05      	ldr	r2, [pc, #20]	; (8003268 <LL_ADC_EnableInternalRegulator+0x24>)
 8003252:	4013      	ands	r3, r2
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	0552      	lsls	r2, r2, #21
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	6fffffe8 	.word	0x6fffffe8

0800326c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	055b      	lsls	r3, r3, #21
 800327c:	401a      	ands	r2, r3
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	055b      	lsls	r3, r3, #21
 8003282:	429a      	cmp	r2, r3
 8003284:	d101      	bne.n	800328a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <LL_ADC_Enable+0x20>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	2201      	movs	r2, #1
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	7fffffe8 	.word	0x7fffffe8

080032b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <LL_ADC_Disable+0x20>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	2202      	movs	r2, #2
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	7fffffe8 	.word	0x7fffffe8

080032dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <LL_ADC_IsEnabled+0x18>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_ADC_IsEnabled+0x1a>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}

080032fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d101      	bne.n	8003316 <LL_ADC_IsDisableOngoing+0x18>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_ADC_IsDisableOngoing+0x1a>
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}

08003320 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <LL_ADC_REG_StartConversion+0x20>)
 800332e:	4013      	ands	r3, r2
 8003330:	2204      	movs	r2, #4
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	7fffffe8 	.word	0x7fffffe8

08003344 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <LL_ADC_REG_StopConversion+0x20>)
 8003352:	4013      	ands	r3, r2
 8003354:	2210      	movs	r2, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}
 8003364:	7fffffe8 	.word	0x7fffffe8

08003368 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2204      	movs	r2, #4
 8003376:	4013      	ands	r3, r2
 8003378:	2b04      	cmp	r3, #4
 800337a:	d101      	bne.n	8003380 <LL_ADC_REG_IsConversionOngoing+0x18>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003380:	2300      	movs	r3, #0
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003394:	231f      	movs	r3, #31
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e17f      	b.n	80036b2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	0018      	movs	r0, r3
 80033be:	f7ff fc2d 	bl	8002c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2254      	movs	r2, #84	; 0x54
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff49 	bl	800326c <LL_ADC_IsInternalRegulatorEnabled>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d115      	bne.n	800340a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7ff ff2e 	bl	8003244 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4bb4      	ldr	r3, [pc, #720]	; (80036bc <HAL_ADC_Init+0x330>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	49b4      	ldr	r1, [pc, #720]	; (80036c0 <HAL_ADC_Init+0x334>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fc fe86 	bl	8000100 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033fc:	e002      	b.n	8003404 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f9      	bne.n	80033fe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff ff2c 	bl	800326c <LL_ADC_IsInternalRegulatorEnabled>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d10f      	bne.n	8003438 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	2210      	movs	r2, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2201      	movs	r2, #1
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003430:	231f      	movs	r3, #31
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff ff93 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003442:	0003      	movs	r3, r0
 8003444:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	2210      	movs	r2, #16
 800344c:	4013      	ands	r3, r2
 800344e:	d000      	beq.n	8003452 <HAL_ADC_Init+0xc6>
 8003450:	e122      	b.n	8003698 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d000      	beq.n	800345a <HAL_ADC_Init+0xce>
 8003458:	e11e      	b.n	8003698 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	4a99      	ldr	r2, [pc, #612]	; (80036c4 <HAL_ADC_Init+0x338>)
 8003460:	4013      	ands	r3, r2
 8003462:	2202      	movs	r2, #2
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0018      	movs	r0, r3
 8003470:	f7ff ff34 	bl	80032dc <LL_ADC_IsEnabled>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d000      	beq.n	800347a <HAL_ADC_Init+0xee>
 8003478:	e0ad      	b.n	80035d6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e1b      	ldrb	r3, [r3, #24]
 8003482:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003484:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7e5b      	ldrb	r3, [r3, #25]
 800348a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800348c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7e9b      	ldrb	r3, [r3, #26]
 8003492:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003494:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_ADC_Init+0x118>
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_Init+0x11a>
 80034a4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034a6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034ac:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da04      	bge.n	80034c0 <HAL_ADC_Init+0x134>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Init+0x138>
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80034c4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	5c5b      	ldrb	r3, [r3, r1]
 80034cc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034ce:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d115      	bne.n	800350c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7e9b      	ldrb	r3, [r3, #26]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	0252      	lsls	r2, r2, #9
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e00b      	b.n	800350c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	2220      	movs	r2, #32
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	2201      	movs	r2, #1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003518:	23e0      	movs	r3, #224	; 0xe0
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003522:	4313      	orrs	r3, r2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a65      	ldr	r2, [pc, #404]	; (80036c8 <HAL_ADC_Init+0x33c>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0f9b      	lsrs	r3, r3, #30
 8003546:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800354c:	4313      	orrs	r3, r2
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223c      	movs	r2, #60	; 0x3c
 8003558:	5c9b      	ldrb	r3, [r3, r2]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d111      	bne.n	8003582 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	0f9b      	lsrs	r3, r3, #30
 8003564:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800356a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003570:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003576:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	2201      	movs	r2, #1
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	4a50      	ldr	r2, [pc, #320]	; (80036cc <HAL_ADC_Init+0x340>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	430a      	orrs	r2, r1
 8003596:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	23c0      	movs	r3, #192	; 0xc0
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d018      	beq.n	80035d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	05db      	lsls	r3, r3, #23
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d012      	beq.n	80035d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d00c      	beq.n	80035d6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80035bc:	4b44      	ldr	r3, [pc, #272]	; (80036d0 <HAL_ADC_Init+0x344>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a44      	ldr	r2, [pc, #272]	; (80036d4 <HAL_ADC_Init+0x348>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	23f0      	movs	r3, #240	; 0xf0
 80035cc:	039b      	lsls	r3, r3, #14
 80035ce:	401a      	ands	r2, r3
 80035d0:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_ADC_Init+0x344>)
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	001a      	movs	r2, r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	f7ff fd8a 	bl	80030fa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	493a      	ldr	r1, [pc, #232]	; (80036d8 <HAL_ADC_Init+0x34c>)
 80035f0:	001a      	movs	r2, r3
 80035f2:	f7ff fd82 	bl	80030fa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2110      	movs	r1, #16
 800360a:	4249      	negs	r1, r1
 800360c:	430a      	orrs	r2, r1
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
 8003610:	e018      	b.n	8003644 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	039b      	lsls	r3, r3, #14
 800361a:	429a      	cmp	r2, r3
 800361c:	d112      	bne.n	8003644 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	3b01      	subs	r3, #1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	221c      	movs	r2, #28
 800362e:	4013      	ands	r3, r2
 8003630:	2210      	movs	r2, #16
 8003632:	4252      	negs	r2, r2
 8003634:	409a      	lsls	r2, r3
 8003636:	0011      	movs	r1, r2
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fd72 	bl	8003134 <LL_ADC_GetSamplingTimeCommonChannels>
 8003650:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003656:	429a      	cmp	r2, r3
 8003658:	d10b      	bne.n	8003672 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	2203      	movs	r2, #3
 8003666:	4393      	bics	r3, r2
 8003668:	2201      	movs	r2, #1
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003670:	e01c      	b.n	80036ac <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	2212      	movs	r2, #18
 8003678:	4393      	bics	r3, r2
 800367a:	2210      	movs	r2, #16
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2201      	movs	r2, #1
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003696:	e009      	b.n	80036ac <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	2210      	movs	r2, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	781b      	ldrb	r3, [r3, #0]
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b008      	add	sp, #32
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000018 	.word	0x20000018
 80036c0:	00030d40 	.word	0x00030d40
 80036c4:	fffffefd 	.word	0xfffffefd
 80036c8:	fffe0201 	.word	0xfffe0201
 80036cc:	1ffffc02 	.word	0x1ffffc02
 80036d0:	40012708 	.word	0x40012708
 80036d4:	ffc3ffff 	.word	0xffc3ffff
 80036d8:	07ffff04 	.word	0x07ffff04

080036dc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036dc:	b5b0      	push	{r4, r5, r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff fe3d 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d135      	bne.n	800375e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2254      	movs	r2, #84	; 0x54
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_Start+0x24>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e035      	b.n	800376c <HAL_ADC_Start+0x90>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2254      	movs	r2, #84	; 0x54
 8003704:	2101      	movs	r1, #1
 8003706:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003708:	250f      	movs	r5, #15
 800370a:	197c      	adds	r4, r7, r5
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 fb28 	bl	8003d64 <ADC_Enable>
 8003714:	0003      	movs	r3, r0
 8003716:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003718:	197b      	adds	r3, r7, r5
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d119      	bne.n	8003754 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <HAL_ADC_Start+0x98>)
 8003726:	4013      	ands	r3, r2
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	0052      	lsls	r2, r2, #1
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	221c      	movs	r2, #28
 800373e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2254      	movs	r2, #84	; 0x54
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff fde7 	bl	8003320 <LL_ADC_REG_StartConversion>
 8003752:	e008      	b.n	8003766 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2254      	movs	r2, #84	; 0x54
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
 800375c:	e003      	b.n	8003766 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800375e:	230f      	movs	r3, #15
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003766:	230f      	movs	r3, #15
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bdb0      	pop	{r4, r5, r7, pc}
 8003774:	fffff0fe 	.word	0xfffff0fe

08003778 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2254      	movs	r2, #84	; 0x54
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADC_Stop+0x16>
 800378a:	2302      	movs	r3, #2
 800378c:	e029      	b.n	80037e2 <HAL_ADC_Stop+0x6a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2254      	movs	r2, #84	; 0x54
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003796:	250f      	movs	r5, #15
 8003798:	197c      	adds	r4, r7, r5
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fa9f 	bl	8003ce0 <ADC_ConversionStop>
 80037a2:	0003      	movs	r3, r0
 80037a4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037a6:	197b      	adds	r3, r7, r5
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d112      	bne.n	80037d4 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037ae:	197c      	adds	r4, r7, r5
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fb5c 	bl	8003e70 <ADC_Disable>
 80037b8:	0003      	movs	r3, r0
 80037ba:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037bc:	197b      	adds	r3, r7, r5
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_ADC_Stop+0x74>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	2201      	movs	r2, #1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2254      	movs	r2, #84	; 0x54
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80037dc:	230f      	movs	r3, #15
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	fffffefe 	.word	0xfffffefe

080037f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d102      	bne.n	8003808 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003802:	2308      	movs	r3, #8
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e00f      	b.n	8003828 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	4013      	ands	r3, r2
 8003812:	d007      	beq.n	8003824 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	2220      	movs	r2, #32
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e072      	b.n	800390a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003824:	2304      	movs	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003828:	f7ff fc18 	bl	800305c <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003830:	e01f      	b.n	8003872 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	d01c      	beq.n	8003872 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003838:	f7ff fc10 	bl	800305c <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <HAL_ADC_PollForConversion+0x5e>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d111      	bne.n	8003872 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	d10b      	bne.n	8003872 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	2204      	movs	r2, #4
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2254      	movs	r2, #84	; 0x54
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e04b      	b.n	800390a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	d0d9      	beq.n	8003832 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	0092      	lsls	r2, r2, #2
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff fc66 	bl	8003162 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d02e      	beq.n	80038f8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7e9b      	ldrb	r3, [r3, #26]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12a      	bne.n	80038f8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d123      	bne.n	80038f8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff fd57 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d110      	bne.n	80038e0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	210c      	movs	r1, #12
 80038ca:	438a      	bics	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_ADC_PollForConversion+0x124>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	2201      	movs	r2, #1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58
 80038de:	e00b      	b.n	80038f8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	2220      	movs	r2, #32
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2201      	movs	r2, #1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	220c      	movs	r2, #12
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	fffffefe 	.word	0xfffffefe

08003918 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393a:	2317      	movs	r3, #23
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2254      	movs	r2, #84	; 0x54
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x24>
 8003950:	2302      	movs	r3, #2
 8003952:	e1c0      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x3a6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2254      	movs	r2, #84	; 0x54
 8003958:	2101      	movs	r1, #1
 800395a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0018      	movs	r0, r3
 8003962:	f7ff fd01 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d000      	beq.n	800396c <HAL_ADC_ConfigChannel+0x3c>
 800396a:	e1a3      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d100      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x46>
 8003974:	e143      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	429a      	cmp	r2, r3
 8003980:	d004      	beq.n	800398c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003986:	4ac1      	ldr	r2, [pc, #772]	; (8003c8c <HAL_ADC_ConfigChannel+0x35c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	0019      	movs	r1, r3
 8003996:	0010      	movs	r0, r2
 8003998:	f7ff fc14 	bl	80031c4 <LL_ADC_REG_SetSequencerChAdd>
 800399c:	e0c9      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	211f      	movs	r1, #31
 80039a8:	400b      	ands	r3, r1
 80039aa:	210f      	movs	r1, #15
 80039ac:	4099      	lsls	r1, r3
 80039ae:	000b      	movs	r3, r1
 80039b0:	43db      	mvns	r3, r3
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	035b      	lsls	r3, r3, #13
 80039bc:	0b5b      	lsrs	r3, r3, #13
 80039be:	d105      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x9c>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0e9b      	lsrs	r3, r3, #26
 80039c6:	221f      	movs	r2, #31
 80039c8:	4013      	ands	r3, r2
 80039ca:	e098      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	d000      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0xa8>
 80039d6:	e091      	b.n	8003afc <HAL_ADC_ConfigChannel+0x1cc>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2202      	movs	r2, #2
 80039de:	4013      	ands	r3, r2
 80039e0:	d000      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0xb4>
 80039e2:	e089      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x1c8>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2204      	movs	r2, #4
 80039ea:	4013      	ands	r3, r2
 80039ec:	d000      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0xc0>
 80039ee:	e081      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x1c4>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2208      	movs	r2, #8
 80039f6:	4013      	ands	r3, r2
 80039f8:	d000      	beq.n	80039fc <HAL_ADC_ConfigChannel+0xcc>
 80039fa:	e079      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x1c0>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d000      	beq.n	8003a08 <HAL_ADC_ConfigChannel+0xd8>
 8003a06:	e071      	b.n	8003aec <HAL_ADC_ConfigChannel+0x1bc>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d000      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0xe4>
 8003a12:	e069      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x1b8>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2240      	movs	r2, #64	; 0x40
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d000      	beq.n	8003a20 <HAL_ADC_ConfigChannel+0xf0>
 8003a1e:	e061      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x1b4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	4013      	ands	r3, r2
 8003a28:	d000      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0xfc>
 8003a2a:	e059      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x1b0>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d151      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x1ac>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d149      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1a8>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d141      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1a4>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d139      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1a0>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	015b      	lsls	r3, r3, #5
 8003a64:	4013      	ands	r3, r2
 8003a66:	d131      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x19c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	019b      	lsls	r3, r3, #6
 8003a70:	4013      	ands	r3, r2
 8003a72:	d129      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x198>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d121      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x194>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d119      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x190>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	025b      	lsls	r3, r3, #9
 8003a94:	4013      	ands	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x18c>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x188>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	02db      	lsls	r3, r3, #11
 8003aac:	4013      	ands	r3, r2
 8003aae:	d001      	beq.n	8003ab4 <HAL_ADC_ConfigChannel+0x184>
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	e024      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e022      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ab8:	2311      	movs	r3, #17
 8003aba:	e020      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003abc:	2310      	movs	r3, #16
 8003abe:	e01e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	e01c      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac4:	230e      	movs	r3, #14
 8003ac6:	e01a      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ac8:	230d      	movs	r3, #13
 8003aca:	e018      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003acc:	230c      	movs	r3, #12
 8003ace:	e016      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad0:	230b      	movs	r3, #11
 8003ad2:	e014      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad4:	230a      	movs	r3, #10
 8003ad6:	e012      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ad8:	2309      	movs	r3, #9
 8003ada:	e010      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003adc:	2308      	movs	r3, #8
 8003ade:	e00e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae0:	2307      	movs	r3, #7
 8003ae2:	e00c      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	e00a      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003ae8:	2305      	movs	r3, #5
 8003aea:	e008      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003aec:	2304      	movs	r3, #4
 8003aee:	e006      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af0:	2303      	movs	r3, #3
 8003af2:	e004      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e002      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_ADC_ConfigChannel+0x1ce>
 8003afc:	2300      	movs	r3, #0
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	6852      	ldr	r2, [r2, #4]
 8003b02:	201f      	movs	r0, #31
 8003b04:	4002      	ands	r2, r0
 8003b06:	4093      	lsls	r3, r2
 8003b08:	000a      	movs	r2, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d808      	bhi.n	8003b32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	f7ff fb29 	bl	8003184 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	f7ff fb64 	bl	800320c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db00      	blt.n	8003b4e <HAL_ADC_ConfigChannel+0x21e>
 8003b4c:	e0bc      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4e:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fac5 	bl	80030e0 <LL_ADC_GetCommonPathInternalCh>
 8003b56:	0003      	movs	r3, r0
 8003b58:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4d      	ldr	r2, [pc, #308]	; (8003c94 <HAL_ADC_ConfigChannel+0x364>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d122      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b6c:	d11d      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	0412      	lsls	r2, r2, #16
 8003b74:	4313      	orrs	r3, r2
 8003b76:	4a46      	ldr	r2, [pc, #280]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003b78:	0019      	movs	r1, r3
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	f7ff fa9c 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_ADC_ConfigChannel+0x368>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4945      	ldr	r1, [pc, #276]	; (8003c9c <HAL_ADC_ConfigChannel+0x36c>)
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7fc faba 	bl	8000100 <__udivsi3>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	0013      	movs	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	189b      	adds	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b9a:	e002      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ba8:	e08e      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3c      	ldr	r2, [pc, #240]	; (8003ca0 <HAL_ADC_ConfigChannel+0x370>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	045b      	lsls	r3, r3, #17
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d109      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	0452      	lsls	r2, r2, #17
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003bc8:	0019      	movs	r1, r3
 8003bca:	0010      	movs	r0, r2
 8003bcc:	f7ff fa74 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
 8003bd0:	e07a      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a33      	ldr	r2, [pc, #204]	; (8003ca4 <HAL_ADC_ConfigChannel+0x374>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d000      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x2ae>
 8003bdc:	e074      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	03db      	lsls	r3, r3, #15
 8003be4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003be6:	d000      	beq.n	8003bea <HAL_ADC_ConfigChannel+0x2ba>
 8003be8:	e06e      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	03d2      	lsls	r2, r2, #15
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f7ff fa5e 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
 8003bfc:	e064      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d004      	beq.n	8003c14 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c0e:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <HAL_ADC_ConfigChannel+0x35c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d107      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	0010      	movs	r0, r2
 8003c20:	f7ff fae1 	bl	80031e6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da4d      	bge.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7ff fa56 	bl	80030e0 <LL_ADC_GetCommonPathInternalCh>
 8003c34:	0003      	movs	r3, r0
 8003c36:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <HAL_ADC_ConfigChannel+0x364>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_ADC_ConfigChannel+0x378>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	f7ff fa33 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
 8003c52:	e039      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <HAL_ADC_ConfigChannel+0x370>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d108      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <HAL_ADC_ConfigChannel+0x37c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f7ff fa25 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
 8003c6e:	e02b      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_ADC_ConfigChannel+0x374>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d126      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <HAL_ADC_ConfigChannel+0x380>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_ADC_ConfigChannel+0x360>)
 8003c82:	0019      	movs	r1, r3
 8003c84:	0010      	movs	r0, r2
 8003c86:	f7ff fa17 	bl	80030b8 <LL_ADC_SetCommonPathInternalCh>
 8003c8a:	e01d      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x398>
 8003c8c:	80000004 	.word	0x80000004
 8003c90:	40012708 	.word	0x40012708
 8003c94:	b0001000 	.word	0xb0001000
 8003c98:	20000018 	.word	0x20000018
 8003c9c:	00030d40 	.word	0x00030d40
 8003ca0:	b8004000 	.word	0xb8004000
 8003ca4:	b4002000 	.word	0xb4002000
 8003ca8:	ff7fffff 	.word	0xff7fffff
 8003cac:	feffffff 	.word	0xfeffffff
 8003cb0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	2220      	movs	r2, #32
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cc0:	2317      	movs	r3, #23
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2254      	movs	r2, #84	; 0x54
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003cd0:	2317      	movs	r3, #23
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b006      	add	sp, #24
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)

08003ce0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fb3b 	bl	8003368 <LL_ADC_REG_IsConversionOngoing>
 8003cf2:	1e03      	subs	r3, r0, #0
 8003cf4:	d031      	beq.n	8003d5a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7ff faff 	bl	80032fe <LL_ADC_IsDisableOngoing>
 8003d00:	1e03      	subs	r3, r0, #0
 8003d02:	d104      	bne.n	8003d0e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff fb1b 	bl	8003344 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d0e:	f7ff f9a5 	bl	800305c <HAL_GetTick>
 8003d12:	0003      	movs	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d16:	e01a      	b.n	8003d4e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d18:	f7ff f9a0 	bl	800305c <HAL_GetTick>
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d913      	bls.n	8003d4e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	2210      	movs	r2, #16
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	2201      	movs	r2, #1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e006      	b.n	8003d5c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2204      	movs	r2, #4
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1de      	bne.n	8003d18 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7ff fab1 	bl	80032dc <LL_ADC_IsEnabled>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d000      	beq.n	8003d80 <ADC_Enable+0x1c>
 8003d7e:	e069      	b.n	8003e54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <ADC_Enable+0xfc>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	2210      	movs	r2, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e056      	b.n	8003e56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fa71 	bl	8003294 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <ADC_Enable+0x100>)
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7ff f993 	bl	80030e0 <LL_ADC_GetCommonPathInternalCh>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00f      	beq.n	8003de4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <ADC_Enable+0x104>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4928      	ldr	r1, [pc, #160]	; (8003e6c <ADC_Enable+0x108>)
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7fc f998 	bl	8000100 <__udivsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003dd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dd6:	e002      	b.n	8003dde <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f9      	bne.n	8003dd8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7e5b      	ldrb	r3, [r3, #25]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d033      	beq.n	8003e54 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003dec:	f7ff f936 	bl	800305c <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df4:	e027      	b.n	8003e46 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fa6e 	bl	80032dc <LL_ADC_IsEnabled>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d104      	bne.n	8003e0e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7ff fa43 	bl	8003294 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e0e:	f7ff f925 	bl	800305c <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d914      	bls.n	8003e46 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d00d      	beq.n	8003e46 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	2210      	movs	r2, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e007      	b.n	8003e56 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d1d0      	bne.n	8003df6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	80000017 	.word	0x80000017
 8003e64:	40012708 	.word	0x40012708
 8003e68:	20000018 	.word	0x20000018
 8003e6c:	00030d40 	.word	0x00030d40

08003e70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff fa3e 	bl	80032fe <LL_ADC_IsDisableOngoing>
 8003e82:	0003      	movs	r3, r0
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7ff fa26 	bl	80032dc <LL_ADC_IsEnabled>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d046      	beq.n	8003f22 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d143      	bne.n	8003f22 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2205      	movs	r2, #5
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff fa03 	bl	80032b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eba:	f7ff f8cf 	bl	800305c <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec2:	e028      	b.n	8003f16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec8:	2210      	movs	r2, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e021      	b.n	8003f24 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ee0:	f7ff f8bc 	bl	800305c <HAL_GetTick>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d913      	bls.n	8003f16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d00d      	beq.n	8003f16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	2210      	movs	r2, #16
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e006      	b.n	8003f24 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d1de      	bne.n	8003ee0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b004      	add	sp, #16
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	0002      	movs	r2, r0
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	1dfb      	adds	r3, r7, #7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f3e:	d809      	bhi.n	8003f54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f40:	1dfb      	adds	r3, r7, #7
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	001a      	movs	r2, r3
 8003f46:	231f      	movs	r3, #31
 8003f48:	401a      	ands	r2, r3
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_EnableIRQ+0x30>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4091      	lsls	r1, r2
 8003f50:	000a      	movs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	e000e100 	.word	0xe000e100

08003f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	0002      	movs	r2, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f6e:	1dfb      	adds	r3, r7, #7
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b7f      	cmp	r3, #127	; 0x7f
 8003f74:	d828      	bhi.n	8003fc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <__NVIC_SetPriority+0xd4>)
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	33c0      	adds	r3, #192	; 0xc0
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	589b      	ldr	r3, [r3, r2]
 8003f86:	1dfa      	adds	r2, r7, #7
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	400a      	ands	r2, r1
 8003f90:	00d2      	lsls	r2, r2, #3
 8003f92:	21ff      	movs	r1, #255	; 0xff
 8003f94:	4091      	lsls	r1, r2
 8003f96:	000a      	movs	r2, r1
 8003f98:	43d2      	mvns	r2, r2
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	019b      	lsls	r3, r3, #6
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	1dfb      	adds	r3, r7, #7
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	0018      	movs	r0, r3
 8003fac:	2303      	movs	r3, #3
 8003fae:	4003      	ands	r3, r0
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fb4:	481f      	ldr	r0, [pc, #124]	; (8004034 <__NVIC_SetPriority+0xd4>)
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	33c0      	adds	r3, #192	; 0xc0
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fc6:	e031      	b.n	800402c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <__NVIC_SetPriority+0xd8>)
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	0019      	movs	r1, r3
 8003fd0:	230f      	movs	r3, #15
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	3b08      	subs	r3, #8
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3306      	adds	r3, #6
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	3304      	adds	r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1dfa      	adds	r2, r7, #7
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	0011      	movs	r1, r2
 8003fe8:	2203      	movs	r2, #3
 8003fea:	400a      	ands	r2, r1
 8003fec:	00d2      	lsls	r2, r2, #3
 8003fee:	21ff      	movs	r1, #255	; 0xff
 8003ff0:	4091      	lsls	r1, r2
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	43d2      	mvns	r2, r2
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	401a      	ands	r2, r3
 8004002:	1dfb      	adds	r3, r7, #7
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	0018      	movs	r0, r3
 8004008:	2303      	movs	r3, #3
 800400a:	4003      	ands	r3, r0
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004010:	4809      	ldr	r0, [pc, #36]	; (8004038 <__NVIC_SetPriority+0xd8>)
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	001c      	movs	r4, r3
 8004018:	230f      	movs	r3, #15
 800401a:	4023      	ands	r3, r4
 800401c:	3b08      	subs	r3, #8
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	430a      	orrs	r2, r1
 8004022:	3306      	adds	r3, #6
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	18c3      	adds	r3, r0, r3
 8004028:	3304      	adds	r3, #4
 800402a:	601a      	str	r2, [r3, #0]
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b003      	add	sp, #12
 8004032:	bd90      	pop	{r4, r7, pc}
 8004034:	e000e100 	.word	0xe000e100
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	1e5a      	subs	r2, r3, #1
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	045b      	lsls	r3, r3, #17
 800404c:	429a      	cmp	r2, r3
 800404e:	d301      	bcc.n	8004054 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004050:	2301      	movs	r3, #1
 8004052:	e010      	b.n	8004076 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <SysTick_Config+0x44>)
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	3a01      	subs	r2, #1
 800405a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800405c:	2301      	movs	r3, #1
 800405e:	425b      	negs	r3, r3
 8004060:	2103      	movs	r1, #3
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff ff7c 	bl	8003f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <SysTick_Config+0x44>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <SysTick_Config+0x44>)
 8004070:	2207      	movs	r2, #7
 8004072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004074:	2300      	movs	r3, #0
}
 8004076:	0018      	movs	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	b002      	add	sp, #8
 800407c:	bd80      	pop	{r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	e000e010 	.word	0xe000e010

08004084 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	210f      	movs	r1, #15
 8004090:	187b      	adds	r3, r7, r1
 8004092:	1c02      	adds	r2, r0, #0
 8004094:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	187b      	adds	r3, r7, r1
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b25b      	sxtb	r3, r3
 800409e:	0011      	movs	r1, r2
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff ff5d 	bl	8003f60 <__NVIC_SetPriority>
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	0002      	movs	r2, r0
 80040b6:	1dfb      	adds	r3, r7, #7
 80040b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ba:	1dfb      	adds	r3, r7, #7
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff ff33 	bl	8003f2c <__NVIC_EnableIRQ>
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b002      	add	sp, #8
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff ffaf 	bl	800403c <SysTick_Config>
 80040de:	0003      	movs	r3, r0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e056      	b.n	80041a8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7f5b      	ldrb	r3, [r3, #29]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f7fe fdfd 	bl	8002d0c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <HAL_CRC_Init+0xc8>)
 8004126:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2118      	movs	r1, #24
 8004134:	438a      	bics	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e00b      	b.n	8004152 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6899      	ldr	r1, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 f835 	bl	80041b4 <HAL_CRCEx_Polynomial_Set>
 800414a:	1e03      	subs	r3, r0, #0
 800414c:	d001      	beq.n	8004152 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e02a      	b.n	80041a8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	795b      	ldrb	r3, [r3, #5]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	4252      	negs	r2, r2
 8004162:	611a      	str	r2, [r3, #16]
 8004164:	e004      	b.n	8004170 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6912      	ldr	r2, [r2, #16]
 800416e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2260      	movs	r2, #96	; 0x60
 8004178:	4393      	bics	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	4393      	bics	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	04c11db7 	.word	0x04c11db7

080041b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2317      	movs	r3, #23
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041c8:	231f      	movs	r3, #31
 80041ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	613a      	str	r2, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_CRCEx_Polynomial_Set+0x36>
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	221f      	movs	r2, #31
 80041dc:	4013      	ands	r3, r2
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	40da      	lsrs	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
 80041e8:	d0f1      	beq.n	80041ce <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d00f      	beq.n	8004210 <HAL_CRCEx_Polynomial_Set+0x5c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b18      	cmp	r3, #24
 80041f4:	d824      	bhi.n	8004240 <HAL_CRCEx_Polynomial_Set+0x8c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d011      	beq.n	8004220 <HAL_CRCEx_Polynomial_Set+0x6c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d81e      	bhi.n	8004240 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_CRCEx_Polynomial_Set+0x96>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b08      	cmp	r3, #8
 800420c:	d010      	beq.n	8004230 <HAL_CRCEx_Polynomial_Set+0x7c>
 800420e:	e017      	b.n	8004240 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d91b      	bls.n	800424e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8004216:	2317      	movs	r3, #23
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800421e:	e016      	b.n	800424e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b07      	cmp	r3, #7
 8004224:	d915      	bls.n	8004252 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8004226:	2317      	movs	r3, #23
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800422e:	e010      	b.n	8004252 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	d90f      	bls.n	8004256 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8004236:	2317      	movs	r3, #23
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800423e:	e00a      	b.n	8004256 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004240:	2317      	movs	r3, #23
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
      break;
 8004248:	e006      	b.n	8004258 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	e004      	b.n	8004258 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	e002      	b.n	8004258 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	e000      	b.n	8004258 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8004256:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8004258:	2317      	movs	r3, #23
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10e      	bne.n	8004280 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2218      	movs	r2, #24
 8004272:	4393      	bics	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	430a      	orrs	r2, r1
 800427e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004280:	2317      	movs	r3, #23
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	781b      	ldrb	r3, [r3, #0]
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b006      	add	sp, #24
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e050      	b.n	8004344 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2225      	movs	r2, #37	; 0x25
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d008      	beq.n	80042c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e041      	b.n	8004344 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	210e      	movs	r1, #14
 80042cc:	438a      	bics	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	491c      	ldr	r1, [pc, #112]	; (800434c <HAL_DMA_Abort+0xbc>)
 80042dc:	400a      	ands	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_DMA_Abort+0xc0>)
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	221c      	movs	r2, #28
 80042fa:	4013      	ands	r3, r2
 80042fc:	2201      	movs	r2, #1
 80042fe:	409a      	lsls	r2, r3
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_DMA_Abort+0xc0>)
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800430e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	490a      	ldr	r1, [pc, #40]	; (800434c <HAL_DMA_Abort+0xbc>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004330:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2225      	movs	r2, #37	; 0x25
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2224      	movs	r2, #36	; 0x24
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}
 800434c:	fffffeff 	.word	0xfffffeff
 8004350:	40020000 	.word	0x40020000

08004354 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	210f      	movs	r1, #15
 800435e:	187b      	adds	r3, r7, r1
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2225      	movs	r2, #37	; 0x25
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d006      	beq.n	800437e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2204      	movs	r2, #4
 8004374:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004376:	187b      	adds	r3, r7, r1
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e049      	b.n	8004412 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	210e      	movs	r1, #14
 800438a:	438a      	bics	r2, r1
 800438c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	438a      	bics	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	491d      	ldr	r1, [pc, #116]	; (8004420 <HAL_DMA_Abort_IT+0xcc>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_DMA_Abort_IT+0xd0>)
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	221c      	movs	r2, #28
 80043b8:	4013      	ands	r3, r2
 80043ba:	2201      	movs	r2, #1
 80043bc:	409a      	lsls	r2, r3
 80043be:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_DMA_Abort_IT+0xd0>)
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	490f      	ldr	r1, [pc, #60]	; (8004420 <HAL_DMA_Abort_IT+0xcc>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2225      	movs	r2, #37	; 0x25
 80043f4:	2101      	movs	r1, #1
 80043f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	2100      	movs	r1, #0
 80043fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	0010      	movs	r0, r2
 8004410:	4798      	blx	r3
    }
  }
  return status;
 8004412:	230f      	movs	r3, #15
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	781b      	ldrb	r3, [r3, #0]
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}
 8004420:	fffffeff 	.word	0xfffffeff
 8004424:	40020000 	.word	0x40020000

08004428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004436:	e147      	b.n	80046c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2101      	movs	r1, #1
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4091      	lsls	r1, r2
 8004442:	000a      	movs	r2, r1
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d100      	bne.n	8004450 <HAL_GPIO_Init+0x28>
 800444e:	e138      	b.n	80046c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	4013      	ands	r3, r2
 8004458:	2b01      	cmp	r3, #1
 800445a:	d005      	beq.n	8004468 <HAL_GPIO_Init+0x40>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2203      	movs	r2, #3
 8004462:	4013      	ands	r3, r2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d130      	bne.n	80044ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	409a      	lsls	r2, r3
 8004476:	0013      	movs	r3, r2
 8004478:	43da      	mvns	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	409a      	lsls	r2, r3
 800448a:	0013      	movs	r3, r2
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800449e:	2201      	movs	r2, #1
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	409a      	lsls	r2, r3
 80044a4:	0013      	movs	r3, r2
 80044a6:	43da      	mvns	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	2201      	movs	r2, #1
 80044b6:	401a      	ands	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	409a      	lsls	r2, r3
 80044bc:	0013      	movs	r3, r2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d017      	beq.n	8004506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	2203      	movs	r2, #3
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	43da      	mvns	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	409a      	lsls	r2, r3
 80044f8:	0013      	movs	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2203      	movs	r2, #3
 800450c:	4013      	ands	r3, r2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d123      	bne.n	800455a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	08da      	lsrs	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3208      	adds	r2, #8
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	58d3      	ldr	r3, [r2, r3]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2207      	movs	r2, #7
 8004524:	4013      	ands	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	220f      	movs	r2, #15
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	43da      	mvns	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2107      	movs	r1, #7
 800453e:	400b      	ands	r3, r1
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	409a      	lsls	r2, r3
 8004544:	0013      	movs	r3, r2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	08da      	lsrs	r2, r3, #3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3208      	adds	r2, #8
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	6939      	ldr	r1, [r7, #16]
 8004558:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	409a      	lsls	r2, r3
 8004568:	0013      	movs	r3, r2
 800456a:	43da      	mvns	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	401a      	ands	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	0013      	movs	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	23c0      	movs	r3, #192	; 0xc0
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	4013      	ands	r3, r2
 8004598:	d100      	bne.n	800459c <HAL_GPIO_Init+0x174>
 800459a:	e092      	b.n	80046c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800459c:	4a50      	ldr	r2, [pc, #320]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	3318      	adds	r3, #24
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	589b      	ldr	r3, [r3, r2]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2203      	movs	r2, #3
 80045ae:	4013      	ands	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	220f      	movs	r2, #15
 80045b4:	409a      	lsls	r2, r3
 80045b6:	0013      	movs	r3, r2
 80045b8:	43da      	mvns	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	23a0      	movs	r3, #160	; 0xa0
 80045c4:	05db      	lsls	r3, r3, #23
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d013      	beq.n	80045f2 <HAL_GPIO_Init+0x1ca>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a45      	ldr	r2, [pc, #276]	; (80046e4 <HAL_GPIO_Init+0x2bc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00d      	beq.n	80045ee <HAL_GPIO_Init+0x1c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a44      	ldr	r2, [pc, #272]	; (80046e8 <HAL_GPIO_Init+0x2c0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <HAL_GPIO_Init+0x1c2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a43      	ldr	r2, [pc, #268]	; (80046ec <HAL_GPIO_Init+0x2c4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_GPIO_Init+0x1be>
 80045e2:	2303      	movs	r3, #3
 80045e4:	e006      	b.n	80045f4 <HAL_GPIO_Init+0x1cc>
 80045e6:	2305      	movs	r3, #5
 80045e8:	e004      	b.n	80045f4 <HAL_GPIO_Init+0x1cc>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e002      	b.n	80045f4 <HAL_GPIO_Init+0x1cc>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_GPIO_Init+0x1cc>
 80045f2:	2300      	movs	r3, #0
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	2103      	movs	r1, #3
 80045f8:	400a      	ands	r2, r1
 80045fa:	00d2      	lsls	r2, r2, #3
 80045fc:	4093      	lsls	r3, r2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004604:	4936      	ldr	r1, [pc, #216]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	3318      	adds	r3, #24
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	43da      	mvns	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	035b      	lsls	r3, r3, #13
 800462a:	4013      	ands	r3, r2
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004636:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	43da      	mvns	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	039b      	lsls	r3, r3, #14
 8004654:	4013      	ands	r3, r2
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004660:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004668:	2384      	movs	r3, #132	; 0x84
 800466a:	58d3      	ldr	r3, [r2, r3]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	43da      	mvns	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	029b      	lsls	r3, r3, #10
 8004680:	4013      	ands	r3, r2
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800468c:	4914      	ldr	r1, [pc, #80]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 800468e:	2284      	movs	r2, #132	; 0x84
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	58d3      	ldr	r3, [r2, r3]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43da      	mvns	r2, r3
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	025b      	lsls	r3, r3, #9
 80046ae:	4013      	ands	r3, r2
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046ba:	4909      	ldr	r1, [pc, #36]	; (80046e0 <HAL_GPIO_Init+0x2b8>)
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	3301      	adds	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	40da      	lsrs	r2, r3
 80046d0:	1e13      	subs	r3, r2, #0
 80046d2:	d000      	beq.n	80046d6 <HAL_GPIO_Init+0x2ae>
 80046d4:	e6b0      	b.n	8004438 <HAL_GPIO_Init+0x10>
  }
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b006      	add	sp, #24
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021800 	.word	0x40021800
 80046e4:	50000400 	.word	0x50000400
 80046e8:	50000800 	.word	0x50000800
 80046ec:	50000c00 	.word	0x50000c00

080046f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	000a      	movs	r2, r1
 80046fa:	1cbb      	adds	r3, r7, #2
 80046fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	1cba      	adds	r2, r7, #2
 8004704:	8812      	ldrh	r2, [r2, #0]
 8004706:	4013      	ands	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800470a:	230f      	movs	r3, #15
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e003      	b.n	800471c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004714:	230f      	movs	r3, #15
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800471c:	230f      	movs	r3, #15
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b004      	add	sp, #16
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	0008      	movs	r0, r1
 8004734:	0011      	movs	r1, r2
 8004736:	1cbb      	adds	r3, r7, #2
 8004738:	1c02      	adds	r2, r0, #0
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	1c7b      	adds	r3, r7, #1
 800473e:	1c0a      	adds	r2, r1, #0
 8004740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004742:	1c7b      	adds	r3, r7, #1
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800474a:	1cbb      	adds	r3, r7, #2
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004752:	e003      	b.n	800475c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004754:	1cbb      	adds	r3, r7, #2
 8004756:	881a      	ldrh	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004772:	4013      	ands	r3, r2
 8004774:	0019      	movs	r1, r3
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	429a      	cmp	r2, r3
 8004786:	d11f      	bne.n	80047c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	0013      	movs	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	189b      	adds	r3, r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4912      	ldr	r1, [pc, #72]	; (80047e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004796:	0018      	movs	r0, r3
 8004798:	f7fb fcb2 	bl	8000100 <__udivsi3>
 800479c:	0003      	movs	r3, r0
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a2:	e008      	b.n	80047b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e001      	b.n	80047b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e009      	b.n	80047ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	401a      	ands	r2, r3
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d0ed      	beq.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b004      	add	sp, #16
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	40007000 	.word	0x40007000
 80047d8:	fffff9ff 	.word	0xfffff9ff
 80047dc:	20000018 	.word	0x20000018
 80047e0:	000f4240 	.word	0x000f4240

080047e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	23e0      	movs	r3, #224	; 0xe0
 80047ee:	01db      	lsls	r3, r3, #7
 80047f0:	4013      	ands	r3, r2
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e2f3      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d100      	bne.n	800481a <HAL_RCC_OscConfig+0x1e>
 8004818:	e07c      	b.n	8004914 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	4bc3      	ldr	r3, [pc, #780]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2238      	movs	r2, #56	; 0x38
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	4bc0      	ldr	r3, [pc, #768]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2203      	movs	r2, #3
 800482a:	4013      	ands	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d102      	bne.n	800483a <HAL_RCC_OscConfig+0x3e>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d002      	beq.n	8004840 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4bb9      	ldr	r3, [pc, #740]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	4013      	ands	r3, r2
 800484a:	d062      	beq.n	8004912 <HAL_RCC_OscConfig+0x116>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d15e      	bne.n	8004912 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e2ce      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	429a      	cmp	r2, r3
 8004862:	d107      	bne.n	8004874 <HAL_RCC_OscConfig+0x78>
 8004864:	4bb0      	ldr	r3, [pc, #704]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4baf      	ldr	r3, [pc, #700]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 800486a:	2180      	movs	r1, #128	; 0x80
 800486c:	0249      	lsls	r1, r1, #9
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e020      	b.n	80048b6 <HAL_RCC_OscConfig+0xba>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	23a0      	movs	r3, #160	; 0xa0
 800487a:	02db      	lsls	r3, r3, #11
 800487c:	429a      	cmp	r2, r3
 800487e:	d10e      	bne.n	800489e <HAL_RCC_OscConfig+0xa2>
 8004880:	4ba9      	ldr	r3, [pc, #676]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4ba8      	ldr	r3, [pc, #672]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	02c9      	lsls	r1, r1, #11
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	4ba6      	ldr	r3, [pc, #664]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4ba5      	ldr	r3, [pc, #660]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004894:	2180      	movs	r1, #128	; 0x80
 8004896:	0249      	lsls	r1, r1, #9
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e00b      	b.n	80048b6 <HAL_RCC_OscConfig+0xba>
 800489e:	4ba2      	ldr	r3, [pc, #648]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4ba1      	ldr	r3, [pc, #644]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80048a4:	49a1      	ldr	r1, [pc, #644]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048a6:	400a      	ands	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	4b9f      	ldr	r3, [pc, #636]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b9e      	ldr	r3, [pc, #632]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80048b0:	499f      	ldr	r1, [pc, #636]	; (8004b30 <HAL_RCC_OscConfig+0x334>)
 80048b2:	400a      	ands	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d014      	beq.n	80048e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fe fbcd 	bl	800305c <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fe fbc8 	bl	800305c <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e28d      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048da:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	4013      	ands	r3, r2
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0xcc>
 80048e6:	e015      	b.n	8004914 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fe fbb8 	bl	800305c <HAL_GetTick>
 80048ec:	0003      	movs	r3, r0
 80048ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f2:	f7fe fbb3 	bl	800305c <HAL_GetTick>
 80048f6:	0002      	movs	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b64      	cmp	r3, #100	; 0x64
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e278      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	4013      	ands	r3, r2
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0xf6>
 8004910:	e000      	b.n	8004914 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2202      	movs	r2, #2
 800491a:	4013      	ands	r3, r2
 800491c:	d100      	bne.n	8004920 <HAL_RCC_OscConfig+0x124>
 800491e:	e099      	b.n	8004a54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2238      	movs	r2, #56	; 0x38
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492a:	4b7f      	ldr	r3, [pc, #508]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2203      	movs	r2, #3
 8004930:	4013      	ands	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b10      	cmp	r3, #16
 8004938:	d102      	bne.n	8004940 <HAL_RCC_OscConfig+0x144>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d002      	beq.n	8004946 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d135      	bne.n	80049b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004946:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4013      	ands	r3, r2
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x162>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e24b      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x338>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d112      	bne.n	80049a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800497a:	4b6b      	ldr	r3, [pc, #428]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a6e      	ldr	r2, [pc, #440]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 8004980:	4013      	ands	r3, r2
 8004982:	0019      	movs	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800498e:	4b66      	ldr	r3, [pc, #408]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0adb      	lsrs	r3, r3, #11
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	4a68      	ldr	r2, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x340>)
 800499a:	40da      	lsrs	r2, r3
 800499c:	4b68      	ldr	r3, [pc, #416]	; (8004b40 <HAL_RCC_OscConfig+0x344>)
 800499e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049a0:	4b68      	ldr	r3, [pc, #416]	; (8004b44 <HAL_RCC_OscConfig+0x348>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fe fafd 	bl	8002fa4 <HAL_InitTick>
 80049aa:	1e03      	subs	r3, r0, #0
 80049ac:	d051      	beq.n	8004a52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e221      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d030      	beq.n	8004a1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049ba:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5e      	ldr	r2, [pc, #376]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	4b57      	ldr	r3, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80049ce:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b55      	ldr	r3, [pc, #340]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0049      	lsls	r1, r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe fb3e 	bl	800305c <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e6:	f7fe fb39 	bl	800305c <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1fe      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f8:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4013      	ands	r3, r2
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a04:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <HAL_RCC_OscConfig+0x338>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	021a      	lsls	r2, r3, #8
 8004a14:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e01b      	b.n	8004a54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a1c:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a22:	4949      	ldr	r1, [pc, #292]	; (8004b48 <HAL_RCC_OscConfig+0x34c>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fe fb18 	bl	800305c <HAL_GetTick>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fe fb13 	bl	800305c <HAL_GetTick>
 8004a36:	0002      	movs	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1d8      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a44:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x236>
 8004a50:	e000      	b.n	8004a54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d047      	beq.n	8004aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a5e:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2238      	movs	r2, #56	; 0x38
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b18      	cmp	r3, #24
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	2202      	movs	r2, #2
 8004a70:	4013      	ands	r3, r2
 8004a72:	d03c      	beq.n	8004aee <HAL_RCC_OscConfig+0x2f2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d138      	bne.n	8004aee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e1ba      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d019      	beq.n	8004abc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a88:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fae2 	bl	800305c <HAL_GetTick>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fe fadd 	bl	800305c <HAL_GetTick>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1a2      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d0f1      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2a2>
 8004aba:	e018      	b.n	8004aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fac8 	bl	800305c <HAL_GetTick>
 8004acc:	0003      	movs	r3, r0
 8004ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fe fac3 	bl	800305c <HAL_GetTick>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e188      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4013      	ands	r3, r2
 8004aec:	d1f1      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2204      	movs	r2, #4
 8004af4:	4013      	ands	r3, r2
 8004af6:	d100      	bne.n	8004afa <HAL_RCC_OscConfig+0x2fe>
 8004af8:	e0c6      	b.n	8004c88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afa:	231f      	movs	r3, #31
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2238      	movs	r2, #56	; 0x38
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d11e      	bne.n	8004b4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_RCC_OscConfig+0x32c>)
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2202      	movs	r2, #2
 8004b14:	4013      	ands	r3, r2
 8004b16:	d100      	bne.n	8004b1a <HAL_RCC_OscConfig+0x31e>
 8004b18:	e0b6      	b.n	8004c88 <HAL_RCC_OscConfig+0x48c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d000      	beq.n	8004b24 <HAL_RCC_OscConfig+0x328>
 8004b22:	e0b1      	b.n	8004c88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e166      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	fffeffff 	.word	0xfffeffff
 8004b30:	fffbffff 	.word	0xfffbffff
 8004b34:	ffff80ff 	.word	0xffff80ff
 8004b38:	ffffc7ff 	.word	0xffffc7ff
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	20000018 	.word	0x20000018
 8004b44:	2000001c 	.word	0x2000001c
 8004b48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b4c:	4bac      	ldr	r3, [pc, #688]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	055b      	lsls	r3, r3, #21
 8004b54:	4013      	ands	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x360>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x362>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d011      	beq.n	8004b86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	4ba7      	ldr	r3, [pc, #668]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b66:	4ba6      	ldr	r3, [pc, #664]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	0549      	lsls	r1, r1, #21
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b70:	4ba3      	ldr	r3, [pc, #652]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	055b      	lsls	r3, r3, #21
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b7e:	231f      	movs	r3, #31
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b86:	4b9f      	ldr	r3, [pc, #636]	; (8004e04 <HAL_RCC_OscConfig+0x608>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d11a      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b92:	4b9c      	ldr	r3, [pc, #624]	; (8004e04 <HAL_RCC_OscConfig+0x608>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b9b      	ldr	r3, [pc, #620]	; (8004e04 <HAL_RCC_OscConfig+0x608>)
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	0049      	lsls	r1, r1, #1
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fa5c 	bl	800305c <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004baa:	f7fe fa57 	bl	800305c <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e11c      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbc:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <HAL_RCC_OscConfig+0x608>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d106      	bne.n	8004bde <HAL_RCC_OscConfig+0x3e2>
 8004bd0:	4b8b      	ldr	r3, [pc, #556]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bd4:	4b8a      	ldr	r3, [pc, #552]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bdc:	e01c      	b.n	8004c18 <HAL_RCC_OscConfig+0x41c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b05      	cmp	r3, #5
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x404>
 8004be6:	4b86      	ldr	r3, [pc, #536]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bea:	4b85      	ldr	r3, [pc, #532]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004bec:	2104      	movs	r1, #4
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bf2:	4b83      	ldr	r3, [pc, #524]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004bf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0x41c>
 8004c00:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c04:	4b7e      	ldr	r3, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c06:	2101      	movs	r1, #1
 8004c08:	438a      	bics	r2, r1
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c0c:	4b7c      	ldr	r3, [pc, #496]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c10:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c12:	2104      	movs	r1, #4
 8004c14:	438a      	bics	r2, r1
 8004c16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d014      	beq.n	8004c4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe fa1c 	bl	800305c <HAL_GetTick>
 8004c24:	0003      	movs	r3, r0
 8004c26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c28:	e009      	b.n	8004c3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fe fa17 	bl	800305c <HAL_GetTick>
 8004c2e:	0002      	movs	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	4a74      	ldr	r2, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x60c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0db      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3e:	4b70      	ldr	r3, [pc, #448]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2202      	movs	r2, #2
 8004c44:	4013      	ands	r3, r2
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x42e>
 8004c48:	e013      	b.n	8004c72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fe fa07 	bl	800305c <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c54:	f7fe fa02 	bl	800305c <HAL_GetTick>
 8004c58:	0002      	movs	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	4a6a      	ldr	r2, [pc, #424]	; (8004e08 <HAL_RCC_OscConfig+0x60c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e0c6      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c68:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c72:	231f      	movs	r3, #31
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c7c:	4b60      	ldr	r3, [pc, #384]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	4b5f      	ldr	r3, [pc, #380]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c82:	4962      	ldr	r1, [pc, #392]	; (8004e0c <HAL_RCC_OscConfig+0x610>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d100      	bne.n	8004c92 <HAL_RCC_OscConfig+0x496>
 8004c90:	e0b0      	b.n	8004df4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c92:	4b5b      	ldr	r3, [pc, #364]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2238      	movs	r2, #56	; 0x38
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d100      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4a4>
 8004c9e:	e078      	b.n	8004d92 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d153      	bne.n	8004d50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b54      	ldr	r3, [pc, #336]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004cae:	4958      	ldr	r1, [pc, #352]	; (8004e10 <HAL_RCC_OscConfig+0x614>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f9d2 	bl	800305c <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fe f9cd 	bl	800305c <HAL_GetTick>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e092      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd0:	4b4b      	ldr	r3, [pc, #300]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	049b      	lsls	r3, r3, #18
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a4c      	ldr	r2, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	431a      	orrs	r2, r3
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d06:	430a      	orrs	r2, r1
 8004d08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0a:	4b3d      	ldr	r3, [pc, #244]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	0449      	lsls	r1, r1, #17
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	0549      	lsls	r1, r1, #21
 8004d22:	430a      	orrs	r2, r1
 8004d24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fe f999 	bl	800305c <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fe f994 	bl	800305c <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e059      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	049b      	lsls	r3, r3, #18
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x534>
 8004d4e:	e051      	b.n	8004df4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d50:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d56:	492e      	ldr	r1, [pc, #184]	; (8004e10 <HAL_RCC_OscConfig+0x614>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fe f97e 	bl	800305c <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fe f979 	bl	800305c <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e03e      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	049b      	lsls	r3, r3, #18
 8004d80:	4013      	ands	r3, r2
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004d8a:	4923      	ldr	r1, [pc, #140]	; (8004e18 <HAL_RCC_OscConfig+0x61c>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	60da      	str	r2, [r3, #12]
 8004d90:	e030      	b.n	8004df4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e02b      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <HAL_RCC_OscConfig+0x604>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2203      	movs	r2, #3
 8004da8:	401a      	ands	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d11e      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2270      	movs	r2, #112	; 0x70
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d117      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	23fe      	movs	r3, #254	; 0xfe
 8004dc4:	01db      	lsls	r3, r3, #7
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d10e      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	23f8      	movs	r3, #248	; 0xf8
 8004dd6:	039b      	lsls	r3, r3, #14
 8004dd8:	401a      	ands	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d106      	bne.n	8004df0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	0f5b      	lsrs	r3, r3, #29
 8004de6:	075a      	lsls	r2, r3, #29
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b008      	add	sp, #32
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40007000 	.word	0x40007000
 8004e08:	00001388 	.word	0x00001388
 8004e0c:	efffffff 	.word	0xefffffff
 8004e10:	feffffff 	.word	0xfeffffff
 8004e14:	1fc1808c 	.word	0x1fc1808c
 8004e18:	effefffc 	.word	0xeffefffc

08004e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0e9      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2207      	movs	r2, #7
 8004e36:	4013      	ands	r3, r2
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d91e      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b73      	ldr	r3, [pc, #460]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2207      	movs	r2, #7
 8004e44:	4393      	bics	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	4b70      	ldr	r3, [pc, #448]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e50:	f7fe f904 	bl	800305c <HAL_GetTick>
 8004e54:	0003      	movs	r3, r0
 8004e56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e58:	e009      	b.n	8004e6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5a:	f7fe f8ff 	bl	800305c <HAL_GetTick>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	4a6a      	ldr	r2, [pc, #424]	; (8005010 <HAL_RCC_ClockConfig+0x1f4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e0ca      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e6e:	4b67      	ldr	r3, [pc, #412]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2207      	movs	r2, #7
 8004e74:	4013      	ands	r3, r2
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1ee      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2202      	movs	r2, #2
 8004e82:	4013      	ands	r3, r2
 8004e84:	d015      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d006      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e90:	4b60      	ldr	r3, [pc, #384]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b5f      	ldr	r3, [pc, #380]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004e96:	21e0      	movs	r1, #224	; 0xe0
 8004e98:	01c9      	lsls	r1, r1, #7
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9e:	4b5d      	ldr	r3, [pc, #372]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4a5d      	ldr	r2, [pc, #372]	; (8005018 <HAL_RCC_ClockConfig+0x1fc>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d057      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d12b      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e097      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004edc:	4b4d      	ldr	r3, [pc, #308]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	049b      	lsls	r3, r3, #18
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d11f      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e08b      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4013      	ands	r3, r2
 8004efe:	d113      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e07f      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f0c:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d108      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e074      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	2202      	movs	r2, #2
 8004f20:	4013      	ands	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e06d      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f28:	4b3a      	ldr	r3, [pc, #232]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2207      	movs	r2, #7
 8004f2e:	4393      	bics	r3, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3c:	f7fe f88e 	bl	800305c <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f44:	e009      	b.n	8004f5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f46:	f7fe f889 	bl	800305c <HAL_GetTick>
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <HAL_RCC_ClockConfig+0x1f4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e054      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2238      	movs	r2, #56	; 0x38
 8004f60:	401a      	ands	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d1ec      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2207      	movs	r2, #7
 8004f72:	4013      	ands	r3, r2
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d21e      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2207      	movs	r2, #7
 8004f80:	4393      	bics	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f8c:	f7fe f866 	bl	800305c <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f94:	e009      	b.n	8004faa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f96:	f7fe f861 	bl	800305c <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_RCC_ClockConfig+0x1f4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e02c      	b.n	8005004 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_RCC_ClockConfig+0x1f0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2207      	movs	r2, #7
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1ee      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_RCC_ClockConfig+0x200>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004fd6:	f000 f829 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fda:	0001      	movs	r1, r0
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_RCC_ClockConfig+0x1f8>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	220f      	movs	r2, #15
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x204>)
 8004fe8:	0092      	lsls	r2, r2, #2
 8004fea:	58d3      	ldr	r3, [r2, r3]
 8004fec:	221f      	movs	r2, #31
 8004fee:	4013      	ands	r3, r2
 8004ff0:	000a      	movs	r2, r1
 8004ff2:	40da      	lsrs	r2, r3
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCC_ClockConfig+0x208>)
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_ClockConfig+0x20c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7fd ffd1 	bl	8002fa4 <HAL_InitTick>
 8005002:	0003      	movs	r3, r0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b004      	add	sp, #16
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40022000 	.word	0x40022000
 8005010:	00001388 	.word	0x00001388
 8005014:	40021000 	.word	0x40021000
 8005018:	fffff0ff 	.word	0xfffff0ff
 800501c:	ffff8fff 	.word	0xffff8fff
 8005020:	08006d88 	.word	0x08006d88
 8005024:	20000018 	.word	0x20000018
 8005028:	2000001c 	.word	0x2000001c

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005032:	4b3c      	ldr	r3, [pc, #240]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2238      	movs	r2, #56	; 0x38
 8005038:	4013      	ands	r3, r2
 800503a:	d10f      	bne.n	800505c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800503c:	4b39      	ldr	r3, [pc, #228]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0adb      	lsrs	r3, r3, #11
 8005042:	2207      	movs	r2, #7
 8005044:	4013      	ands	r3, r2
 8005046:	2201      	movs	r2, #1
 8005048:	409a      	lsls	r2, r3
 800504a:	0013      	movs	r3, r2
 800504c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	4835      	ldr	r0, [pc, #212]	; (8005128 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005052:	f7fb f855 	bl	8000100 <__udivsi3>
 8005056:	0003      	movs	r3, r0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e05d      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2238      	movs	r2, #56	; 0x38
 8005062:	4013      	ands	r3, r2
 8005064:	2b08      	cmp	r3, #8
 8005066:	d102      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005068:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_RCC_GetSysClockFreq+0x100>)
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e054      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506e:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2238      	movs	r2, #56	; 0x38
 8005074:	4013      	ands	r3, r2
 8005076:	2b10      	cmp	r3, #16
 8005078:	d138      	bne.n	80050ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2203      	movs	r2, #3
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	2207      	movs	r2, #7
 800508c:	4013      	ands	r3, r2
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d10d      	bne.n	80050b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4824      	ldr	r0, [pc, #144]	; (800512c <HAL_RCC_GetSysClockFreq+0x100>)
 800509c:	f7fb f830 	bl	8000100 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	0019      	movs	r1, r3
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	227f      	movs	r2, #127	; 0x7f
 80050ac:	4013      	ands	r3, r2
 80050ae:	434b      	muls	r3, r1
 80050b0:	617b      	str	r3, [r7, #20]
        break;
 80050b2:	e00d      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	481c      	ldr	r0, [pc, #112]	; (8005128 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050b8:	f7fb f822 	bl	8000100 <__udivsi3>
 80050bc:	0003      	movs	r3, r0
 80050be:	0019      	movs	r1, r3
 80050c0:	4b18      	ldr	r3, [pc, #96]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	227f      	movs	r2, #127	; 0x7f
 80050c8:	4013      	ands	r3, r2
 80050ca:	434b      	muls	r3, r1
 80050cc:	617b      	str	r3, [r7, #20]
        break;
 80050ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	0f5b      	lsrs	r3, r3, #29
 80050d6:	2207      	movs	r2, #7
 80050d8:	4013      	ands	r3, r2
 80050da:	3301      	adds	r3, #1
 80050dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	6978      	ldr	r0, [r7, #20]
 80050e2:	f7fb f80d 	bl	8000100 <__udivsi3>
 80050e6:	0003      	movs	r3, r0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e015      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2238      	movs	r2, #56	; 0x38
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d103      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2238      	movs	r2, #56	; 0x38
 8005106:	4013      	ands	r3, r2
 8005108:	2b18      	cmp	r3, #24
 800510a:	d103      	bne.n	8005114 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800510c:	23fa      	movs	r3, #250	; 0xfa
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e001      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005118:	693b      	ldr	r3, [r7, #16]
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	40021000 	.word	0x40021000
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200

08005130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005134:	4b02      	ldr	r3, [pc, #8]	; (8005140 <HAL_RCC_GetHCLKFreq+0x10>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	20000018 	.word	0x20000018

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b5b0      	push	{r4, r5, r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005148:	f7ff fff2 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 800514c:	0004      	movs	r4, r0
 800514e:	f7ff fb49 	bl	80047e4 <LL_RCC_GetAPB1Prescaler>
 8005152:	0003      	movs	r3, r0
 8005154:	0b1a      	lsrs	r2, r3, #12
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	58d3      	ldr	r3, [r2, r3]
 800515c:	221f      	movs	r2, #31
 800515e:	4013      	ands	r3, r2
 8005160:	40dc      	lsrs	r4, r3
 8005162:	0023      	movs	r3, r4
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	bdb0      	pop	{r4, r5, r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	08006dc8 	.word	0x08006dc8

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005178:	2313      	movs	r3, #19
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005180:	2312      	movs	r3, #18
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	4013      	ands	r3, r2
 8005192:	d100      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005194:	e0a3      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005196:	2011      	movs	r0, #17
 8005198:	183b      	adds	r3, r7, r0
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	055b      	lsls	r3, r3, #21
 80051a6:	4013      	ands	r3, r2
 80051a8:	d110      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b83      	ldr	r3, [pc, #524]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ae:	4b82      	ldr	r3, [pc, #520]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051b0:	2180      	movs	r1, #128	; 0x80
 80051b2:	0549      	lsls	r1, r1, #21
 80051b4:	430a      	orrs	r2, r1
 80051b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80051b8:	4b7f      	ldr	r3, [pc, #508]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80051ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	055b      	lsls	r3, r3, #21
 80051c0:	4013      	ands	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	2201      	movs	r2, #1
 80051ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051cc:	4b7b      	ldr	r3, [pc, #492]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b7a      	ldr	r3, [pc, #488]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	0049      	lsls	r1, r1, #1
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051da:	f7fd ff3f 	bl	800305c <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e2:	e00b      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e4:	f7fd ff3a 	bl	800305c <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d904      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051f2:	2313      	movs	r3, #19
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	2203      	movs	r2, #3
 80051f8:	701a      	strb	r2, [r3, #0]
        break;
 80051fa:	e005      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4013      	ands	r3, r2
 8005206:	d0ed      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005208:	2313      	movs	r3, #19
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d154      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005212:	4b69      	ldr	r3, [pc, #420]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005216:	23c0      	movs	r3, #192	; 0xc0
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4013      	ands	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d019      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d014      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800522e:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005232:	4a63      	ldr	r2, [pc, #396]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005234:	4013      	ands	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800523a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800523c:	4b5e      	ldr	r3, [pc, #376]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	0249      	lsls	r1, r1, #9
 8005242:	430a      	orrs	r2, r1
 8005244:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005246:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800524a:	4b5b      	ldr	r3, [pc, #364]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800524c:	495d      	ldr	r1, [pc, #372]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800524e:	400a      	ands	r2, r1
 8005250:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005252:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2201      	movs	r2, #1
 800525c:	4013      	ands	r3, r2
 800525e:	d016      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd fefc 	bl	800305c <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	e00c      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fd fef7 	bl	800305c <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d904      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800527a:	2313      	movs	r3, #19
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2203      	movs	r2, #3
 8005280:	701a      	strb	r2, [r3, #0]
            break;
 8005282:	e004      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	2202      	movs	r2, #2
 800528a:	4013      	ands	r3, r2
 800528c:	d0ed      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800528e:	2313      	movs	r3, #19
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	4a48      	ldr	r2, [pc, #288]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800529e:	4013      	ands	r3, r2
 80052a0:	0019      	movs	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	4b44      	ldr	r3, [pc, #272]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ac:	e00c      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ae:	2312      	movs	r3, #18
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	2213      	movs	r2, #19
 80052b4:	18ba      	adds	r2, r7, r2
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e005      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	2312      	movs	r3, #18
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2213      	movs	r2, #19
 80052c2:	18ba      	adds	r2, r7, r2
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052c8:	2311      	movs	r3, #17
 80052ca:	18fb      	adds	r3, r7, r3
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d6:	4b38      	ldr	r3, [pc, #224]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052d8:	493c      	ldr	r1, [pc, #240]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80052da:	400a      	ands	r2, r1
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e8:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	2203      	movs	r2, #3
 80052ee:	4393      	bics	r3, r2
 80052f0:	0019      	movs	r1, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052f8:	430a      	orrs	r2, r1
 80052fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2202      	movs	r2, #2
 8005302:	4013      	ands	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	220c      	movs	r2, #12
 800530c:	4393      	bics	r3, r2
 800530e:	0019      	movs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005316:	430a      	orrs	r2, r1
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2220      	movs	r2, #32
 8005320:	4013      	ands	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532a:	4013      	ands	r3, r2
 800532c:	0019      	movs	r1, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005334:	430a      	orrs	r2, r1
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	4013      	ands	r3, r2
 8005342:	d015      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	0899      	lsrs	r1, r3, #2
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005352:	430a      	orrs	r2, r1
 8005354:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	05db      	lsls	r3, r3, #23
 800535e:	429a      	cmp	r2, r3
 8005360:	d106      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	0249      	lsls	r1, r1, #9
 800536c:	430a      	orrs	r2, r1
 800536e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	4013      	ands	r3, r2
 800537a:	d016      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005382:	4013      	ands	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800538c:	430a      	orrs	r2, r1
 800538e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	01db      	lsls	r3, r3, #7
 8005398:	429a      	cmp	r2, r3
 800539a:	d106      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	0249      	lsls	r1, r1, #9
 80053a6:	430a      	orrs	r2, r1
 80053a8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80053aa:	2312      	movs	r3, #18
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b006      	add	sp, #24
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40007000 	.word	0x40007000
 80053c0:	fffffcff 	.word	0xfffffcff
 80053c4:	fffeffff 	.word	0xfffeffff
 80053c8:	00001388 	.word	0x00001388
 80053cc:	efffffff 	.word	0xefffffff
 80053d0:	ffffcfff 	.word	0xffffcfff
 80053d4:	ffff3fff 	.word	0xffff3fff

080053d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e046      	b.n	8005478 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2288      	movs	r2, #136	; 0x88
 80053ee:	589b      	ldr	r3, [r3, r2]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2284      	movs	r2, #132	; 0x84
 80053f8:	2100      	movs	r1, #0
 80053fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fd fca4 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2288      	movs	r2, #136	; 0x88
 8005408:	2124      	movs	r1, #36	; 0x24
 800540a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2101      	movs	r1, #1
 8005418:	438a      	bics	r2, r1
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	0018      	movs	r0, r3
 8005420:	f000 fc0e 	bl	8005c40 <UART_SetConfig>
 8005424:	0003      	movs	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e024      	b.n	8005478 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	0018      	movs	r0, r3
 800543a:	f000 fda5 	bl	8005f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	490d      	ldr	r1, [pc, #52]	; (8005480 <HAL_UART_Init+0xa8>)
 800544a:	400a      	ands	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	212a      	movs	r1, #42	; 0x2a
 800545a:	438a      	bics	r2, r1
 800545c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 fe3d 	bl	80060f0 <UART_CheckIdleState>
 8005476:	0003      	movs	r3, r0
}
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}
 8005480:	ffffb7ff 	.word	0xffffb7ff

08005484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	1dbb      	adds	r3, r7, #6
 8005492:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2288      	movs	r2, #136	; 0x88
 8005498:	589b      	ldr	r3, [r3, r2]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d000      	beq.n	80054a0 <HAL_UART_Transmit+0x1c>
 800549e:	e088      	b.n	80055b2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_UART_Transmit+0x2a>
 80054a6:	1dbb      	adds	r3, r7, #6
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e080      	b.n	80055b4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	015b      	lsls	r3, r3, #5
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d109      	bne.n	80054d2 <HAL_UART_Transmit+0x4e>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d001      	beq.n	80054d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e070      	b.n	80055b4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2290      	movs	r2, #144	; 0x90
 80054d6:	2100      	movs	r1, #0
 80054d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2288      	movs	r2, #136	; 0x88
 80054de:	2121      	movs	r1, #33	; 0x21
 80054e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054e2:	f7fd fdbb 	bl	800305c <HAL_GetTick>
 80054e6:	0003      	movs	r3, r0
 80054e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1dba      	adds	r2, r7, #6
 80054ee:	2154      	movs	r1, #84	; 0x54
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1dba      	adds	r2, r7, #6
 80054f8:	2156      	movs	r1, #86	; 0x56
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	015b      	lsls	r3, r3, #5
 8005506:	429a      	cmp	r2, r3
 8005508:	d108      	bne.n	800551c <HAL_UART_Transmit+0x98>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d104      	bne.n	800551c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e003      	b.n	8005524 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005524:	e02c      	b.n	8005580 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	0013      	movs	r3, r2
 8005530:	2200      	movs	r2, #0
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	f000 fe2a 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8005538:	1e03      	subs	r3, r0, #0
 800553a:	d001      	beq.n	8005540 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e039      	b.n	80055b4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	001a      	movs	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	05d2      	lsls	r2, r2, #23
 8005552:	0dd2      	lsrs	r2, r2, #23
 8005554:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3302      	adds	r3, #2
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e007      	b.n	800556e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2256      	movs	r2, #86	; 0x56
 8005572:	5a9b      	ldrh	r3, [r3, r2]
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b299      	uxth	r1, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2256      	movs	r2, #86	; 0x56
 800557e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2256      	movs	r2, #86	; 0x56
 8005584:	5a9b      	ldrh	r3, [r3, r2]
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1cc      	bne.n	8005526 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	0013      	movs	r3, r2
 8005596:	2200      	movs	r2, #0
 8005598:	2140      	movs	r1, #64	; 0x40
 800559a:	f000 fdf7 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 800559e:	1e03      	subs	r3, r0, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e006      	b.n	80055b4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2288      	movs	r2, #136	; 0x88
 80055aa:	2120      	movs	r1, #32
 80055ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b008      	add	sp, #32
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b0aa      	sub	sp, #168	; 0xa8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	22a4      	movs	r2, #164	; 0xa4
 80055cc:	18b9      	adds	r1, r7, r2
 80055ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	20a0      	movs	r0, #160	; 0xa0
 80055d8:	1839      	adds	r1, r7, r0
 80055da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	249c      	movs	r4, #156	; 0x9c
 80055e4:	1939      	adds	r1, r7, r4
 80055e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055e8:	0011      	movs	r1, r2
 80055ea:	18bb      	adds	r3, r7, r2
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4aa2      	ldr	r2, [pc, #648]	; (8005878 <HAL_UART_IRQHandler+0x2bc>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	2298      	movs	r2, #152	; 0x98
 80055f4:	18bd      	adds	r5, r7, r2
 80055f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80055f8:	18bb      	adds	r3, r7, r2
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11a      	bne.n	8005636 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005600:	187b      	adds	r3, r7, r1
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2220      	movs	r2, #32
 8005606:	4013      	ands	r3, r2
 8005608:	d015      	beq.n	8005636 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800560a:	183b      	adds	r3, r7, r0
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2220      	movs	r2, #32
 8005610:	4013      	ands	r3, r2
 8005612:	d105      	bne.n	8005620 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005614:	193b      	adds	r3, r7, r4
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	055b      	lsls	r3, r3, #21
 800561c:	4013      	ands	r3, r2
 800561e:	d00a      	beq.n	8005636 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	2b00      	cmp	r3, #0
 8005626:	d100      	bne.n	800562a <HAL_UART_IRQHandler+0x6e>
 8005628:	e2dc      	b.n	8005be4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	0010      	movs	r0, r2
 8005632:	4798      	blx	r3
      }
      return;
 8005634:	e2d6      	b.n	8005be4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005636:	2398      	movs	r3, #152	; 0x98
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d100      	bne.n	8005642 <HAL_UART_IRQHandler+0x86>
 8005640:	e122      	b.n	8005888 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005642:	239c      	movs	r3, #156	; 0x9c
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a8c      	ldr	r2, [pc, #560]	; (800587c <HAL_UART_IRQHandler+0x2c0>)
 800564a:	4013      	ands	r3, r2
 800564c:	d106      	bne.n	800565c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800564e:	23a0      	movs	r3, #160	; 0xa0
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a8a      	ldr	r2, [pc, #552]	; (8005880 <HAL_UART_IRQHandler+0x2c4>)
 8005656:	4013      	ands	r3, r2
 8005658:	d100      	bne.n	800565c <HAL_UART_IRQHandler+0xa0>
 800565a:	e115      	b.n	8005888 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800565c:	23a4      	movs	r3, #164	; 0xa4
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2201      	movs	r2, #1
 8005664:	4013      	ands	r3, r2
 8005666:	d012      	beq.n	800568e <HAL_UART_IRQHandler+0xd2>
 8005668:	23a0      	movs	r3, #160	; 0xa0
 800566a:	18fb      	adds	r3, r7, r3
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4013      	ands	r3, r2
 8005674:	d00b      	beq.n	800568e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2201      	movs	r2, #1
 800567c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2290      	movs	r2, #144	; 0x90
 8005682:	589b      	ldr	r3, [r3, r2]
 8005684:	2201      	movs	r2, #1
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2190      	movs	r1, #144	; 0x90
 800568c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800568e:	23a4      	movs	r3, #164	; 0xa4
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	4013      	ands	r3, r2
 8005698:	d011      	beq.n	80056be <HAL_UART_IRQHandler+0x102>
 800569a:	239c      	movs	r3, #156	; 0x9c
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00b      	beq.n	80056be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2202      	movs	r2, #2
 80056ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2290      	movs	r2, #144	; 0x90
 80056b2:	589b      	ldr	r3, [r3, r2]
 80056b4:	2204      	movs	r2, #4
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2190      	movs	r1, #144	; 0x90
 80056bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056be:	23a4      	movs	r3, #164	; 0xa4
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	4013      	ands	r3, r2
 80056c8:	d011      	beq.n	80056ee <HAL_UART_IRQHandler+0x132>
 80056ca:	239c      	movs	r3, #156	; 0x9c
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	d00b      	beq.n	80056ee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2204      	movs	r2, #4
 80056dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2290      	movs	r2, #144	; 0x90
 80056e2:	589b      	ldr	r3, [r3, r2]
 80056e4:	2202      	movs	r2, #2
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2190      	movs	r1, #144	; 0x90
 80056ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056ee:	23a4      	movs	r3, #164	; 0xa4
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	4013      	ands	r3, r2
 80056f8:	d017      	beq.n	800572a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056fa:	23a0      	movs	r3, #160	; 0xa0
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2220      	movs	r2, #32
 8005702:	4013      	ands	r3, r2
 8005704:	d105      	bne.n	8005712 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005706:	239c      	movs	r3, #156	; 0x9c
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a5b      	ldr	r2, [pc, #364]	; (800587c <HAL_UART_IRQHandler+0x2c0>)
 800570e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005710:	d00b      	beq.n	800572a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2208      	movs	r2, #8
 8005718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2290      	movs	r2, #144	; 0x90
 800571e:	589b      	ldr	r3, [r3, r2]
 8005720:	2208      	movs	r2, #8
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2190      	movs	r1, #144	; 0x90
 8005728:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800572a:	23a4      	movs	r3, #164	; 0xa4
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	4013      	ands	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_UART_IRQHandler+0x1a4>
 8005738:	23a0      	movs	r3, #160	; 0xa0
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	04db      	lsls	r3, r3, #19
 8005742:	4013      	ands	r3, r2
 8005744:	d00c      	beq.n	8005760 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	0112      	lsls	r2, r2, #4
 800574e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2290      	movs	r2, #144	; 0x90
 8005754:	589b      	ldr	r3, [r3, r2]
 8005756:	2220      	movs	r2, #32
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2190      	movs	r1, #144	; 0x90
 800575e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2290      	movs	r2, #144	; 0x90
 8005764:	589b      	ldr	r3, [r3, r2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d100      	bne.n	800576c <HAL_UART_IRQHandler+0x1b0>
 800576a:	e23d      	b.n	8005be8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800576c:	23a4      	movs	r3, #164	; 0xa4
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2220      	movs	r2, #32
 8005774:	4013      	ands	r3, r2
 8005776:	d015      	beq.n	80057a4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005778:	23a0      	movs	r3, #160	; 0xa0
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2220      	movs	r2, #32
 8005780:	4013      	ands	r3, r2
 8005782:	d106      	bne.n	8005792 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005784:	239c      	movs	r3, #156	; 0x9c
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	055b      	lsls	r3, r3, #21
 800578e:	4013      	ands	r3, r2
 8005790:	d008      	beq.n	80057a4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	0010      	movs	r0, r2
 80057a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2290      	movs	r2, #144	; 0x90
 80057a8:	589b      	ldr	r3, [r3, r2]
 80057aa:	2194      	movs	r1, #148	; 0x94
 80057ac:	187a      	adds	r2, r7, r1
 80057ae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d004      	beq.n	80057c8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057be:	187b      	adds	r3, r7, r1
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2228      	movs	r2, #40	; 0x28
 80057c4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c6:	d04c      	beq.n	8005862 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fda6 	bl	800631c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2240      	movs	r2, #64	; 0x40
 80057d8:	4013      	ands	r3, r2
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d13c      	bne.n	8005858 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80057e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e6:	2090      	movs	r0, #144	; 0x90
 80057e8:	183a      	adds	r2, r7, r0
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	2301      	movs	r3, #1
 80057ee:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	438a      	bics	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	183b      	adds	r3, r7, r0
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005810:	f383 8810 	msr	PRIMASK, r3
}
 8005814:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	589b      	ldr	r3, [r3, r2]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d016      	beq.n	800584e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	589b      	ldr	r3, [r3, r2]
 8005826:	4a17      	ldr	r2, [pc, #92]	; (8005884 <HAL_UART_IRQHandler+0x2c8>)
 8005828:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	589b      	ldr	r3, [r3, r2]
 8005830:	0018      	movs	r0, r3
 8005832:	f7fe fd8f 	bl	8004354 <HAL_DMA_Abort_IT>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d01c      	beq.n	8005874 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	589b      	ldr	r3, [r3, r2]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	5852      	ldr	r2, [r2, r1]
 8005848:	0010      	movs	r0, r2
 800584a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	e012      	b.n	8005874 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f000 f9e1 	bl	8005c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005856:	e00d      	b.n	8005874 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f000 f9dc 	bl	8005c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e008      	b.n	8005874 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f9d7 	bl	8005c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2290      	movs	r2, #144	; 0x90
 800586e:	2100      	movs	r1, #0
 8005870:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005872:	e1b9      	b.n	8005be8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	46c0      	nop			; (mov r8, r8)
    return;
 8005876:	e1b7      	b.n	8005be8 <HAL_UART_IRQHandler+0x62c>
 8005878:	0000080f 	.word	0x0000080f
 800587c:	10000001 	.word	0x10000001
 8005880:	04000120 	.word	0x04000120
 8005884:	080063e9 	.word	0x080063e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d000      	beq.n	8005892 <HAL_UART_IRQHandler+0x2d6>
 8005890:	e13e      	b.n	8005b10 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005892:	23a4      	movs	r3, #164	; 0xa4
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2210      	movs	r2, #16
 800589a:	4013      	ands	r3, r2
 800589c:	d100      	bne.n	80058a0 <HAL_UART_IRQHandler+0x2e4>
 800589e:	e137      	b.n	8005b10 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058a0:	23a0      	movs	r3, #160	; 0xa0
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2210      	movs	r2, #16
 80058a8:	4013      	ands	r3, r2
 80058aa:	d100      	bne.n	80058ae <HAL_UART_IRQHandler+0x2f2>
 80058ac:	e130      	b.n	8005b10 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2210      	movs	r2, #16
 80058b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2240      	movs	r2, #64	; 0x40
 80058be:	4013      	ands	r3, r2
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d000      	beq.n	80058c6 <HAL_UART_IRQHandler+0x30a>
 80058c4:	e0a4      	b.n	8005a10 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	589b      	ldr	r3, [r3, r2]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	217e      	movs	r1, #126	; 0x7e
 80058d2:	187b      	adds	r3, r7, r1
 80058d4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d100      	bne.n	80058e0 <HAL_UART_IRQHandler+0x324>
 80058de:	e185      	b.n	8005bec <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	225c      	movs	r2, #92	; 0x5c
 80058e4:	5a9b      	ldrh	r3, [r3, r2]
 80058e6:	187a      	adds	r2, r7, r1
 80058e8:	8812      	ldrh	r2, [r2, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d300      	bcc.n	80058f0 <HAL_UART_IRQHandler+0x334>
 80058ee:	e17d      	b.n	8005bec <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	187a      	adds	r2, r7, r1
 80058f4:	215e      	movs	r1, #94	; 0x5e
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	589b      	ldr	r3, [r3, r2]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2220      	movs	r2, #32
 8005906:	4013      	ands	r3, r2
 8005908:	d170      	bne.n	80059ec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	67bb      	str	r3, [r7, #120]	; 0x78
 8005914:	2301      	movs	r3, #1
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	49b4      	ldr	r1, [pc, #720]	; (8005bfc <HAL_UART_IRQHandler+0x640>)
 800592c:	400a      	ands	r2, r1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593c:	f3ef 8310 	mrs	r3, PRIMASK
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005944:	677b      	str	r3, [r7, #116]	; 0x74
 8005946:	2301      	movs	r3, #1
 8005948:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2101      	movs	r1, #1
 800595e:	438a      	bics	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005964:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596e:	f3ef 8310 	mrs	r3, PRIMASK
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005974:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005976:	673b      	str	r3, [r7, #112]	; 0x70
 8005978:	2301      	movs	r3, #1
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	438a      	bics	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599a:	f383 8810 	msr	PRIMASK, r3
}
 800599e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	228c      	movs	r2, #140	; 0x8c
 80059a4:	2120      	movs	r1, #32
 80059a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80059b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059b8:	2301      	movs	r3, #1
 80059ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2110      	movs	r1, #16
 80059d0:	438a      	bics	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	589b      	ldr	r3, [r3, r2]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7fe fc52 	bl	8004290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	225c      	movs	r2, #92	; 0x5c
 80059f6:	5a9a      	ldrh	r2, [r3, r2]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	215e      	movs	r1, #94	; 0x5e
 80059fc:	5a5b      	ldrh	r3, [r3, r1]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	0011      	movs	r1, r2
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f90d 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a0e:	e0ed      	b.n	8005bec <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	225c      	movs	r2, #92	; 0x5c
 8005a14:	5a99      	ldrh	r1, [r3, r2]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	225e      	movs	r2, #94	; 0x5e
 8005a1a:	5a9b      	ldrh	r3, [r3, r2]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	208e      	movs	r0, #142	; 0x8e
 8005a20:	183b      	adds	r3, r7, r0
 8005a22:	1a8a      	subs	r2, r1, r2
 8005a24:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	225e      	movs	r2, #94	; 0x5e
 8005a2a:	5a9b      	ldrh	r3, [r3, r2]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d100      	bne.n	8005a34 <HAL_UART_IRQHandler+0x478>
 8005a32:	e0dd      	b.n	8005bf0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005a34:	183b      	adds	r3, r7, r0
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d100      	bne.n	8005a3e <HAL_UART_IRQHandler+0x482>
 8005a3c:	e0d8      	b.n	8005bf0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a42:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a44:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a46:	2488      	movs	r4, #136	; 0x88
 8005a48:	193a      	adds	r2, r7, r4
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4967      	ldr	r1, [pc, #412]	; (8005c00 <HAL_UART_IRQHandler+0x644>)
 8005a64:	400a      	ands	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f383 8810 	msr	PRIMASK, r3
}
 8005a74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a76:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a7c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a7e:	2484      	movs	r4, #132	; 0x84
 8005a80:	193a      	adds	r2, r7, r4
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	2301      	movs	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	495a      	ldr	r1, [pc, #360]	; (8005c04 <HAL_UART_IRQHandler+0x648>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	193b      	adds	r3, r7, r4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	228c      	movs	r2, #140	; 0x8c
 8005ab2:	2120      	movs	r1, #32
 8005ab4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	2480      	movs	r4, #128	; 0x80
 8005acc:	193a      	adds	r2, r7, r4
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2110      	movs	r1, #16
 8005ae8:	438a      	bics	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f88d 	bl	8005c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b0e:	e06f      	b.n	8005bf0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b10:	23a4      	movs	r3, #164	; 0xa4
 8005b12:	18fb      	adds	r3, r7, r3
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	035b      	lsls	r3, r3, #13
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d010      	beq.n	8005b40 <HAL_UART_IRQHandler+0x584>
 8005b1e:	239c      	movs	r3, #156	; 0x9c
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	03db      	lsls	r3, r3, #15
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d009      	beq.n	8005b40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	0352      	lsls	r2, r2, #13
 8005b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 fc98 	bl	800646e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b3e:	e05a      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b40:	23a4      	movs	r3, #164	; 0xa4
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d016      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b4c:	23a0      	movs	r3, #160	; 0xa0
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	4013      	ands	r3, r2
 8005b56:	d106      	bne.n	8005b66 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b58:	239c      	movs	r3, #156	; 0x9c
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	4013      	ands	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d042      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	0010      	movs	r0, r2
 8005b76:	4798      	blx	r3
    }
    return;
 8005b78:	e03c      	b.n	8005bf4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b7a:	23a4      	movs	r3, #164	; 0xa4
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2240      	movs	r2, #64	; 0x40
 8005b82:	4013      	ands	r3, r2
 8005b84:	d00a      	beq.n	8005b9c <HAL_UART_IRQHandler+0x5e0>
 8005b86:	23a0      	movs	r3, #160	; 0xa0
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2240      	movs	r2, #64	; 0x40
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 fc3e 	bl	8006416 <UART_EndTransmit_IT>
    return;
 8005b9a:	e02c      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b9c:	23a4      	movs	r3, #164	; 0xa4
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x606>
 8005baa:	23a0      	movs	r3, #160	; 0xa0
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 fc67 	bl	800648e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bc0:	e019      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bc2:	23a4      	movs	r3, #164	; 0xa4
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	045b      	lsls	r3, r3, #17
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d012      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
 8005bd0:	23a0      	movs	r3, #160	; 0xa0
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da0d      	bge.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fc4e 	bl	800647e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005be2:	e008      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
      return;
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	e006      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
    return;
 8005be8:	46c0      	nop			; (mov r8, r8)
 8005bea:	e004      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
      return;
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	e002      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
      return;
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	e000      	b.n	8005bf6 <HAL_UART_IRQHandler+0x63a>
    return;
 8005bf4:	46c0      	nop			; (mov r8, r8)
  }
}
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b02a      	add	sp, #168	; 0xa8
 8005bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfc:	fffffeff 	.word	0xfffffeff
 8005c00:	fffffedf 	.word	0xfffffedf
 8005c04:	effffffe 	.word	0xeffffffe

08005c08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b002      	add	sp, #8
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	000a      	movs	r2, r1
 8005c32:	1cbb      	adds	r3, r7, #2
 8005c34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c48:	231a      	movs	r3, #26
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4abc      	ldr	r2, [pc, #752]	; (8005f60 <UART_SetConfig+0x320>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	0019      	movs	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4ab7      	ldr	r2, [pc, #732]	; (8005f64 <UART_SetConfig+0x324>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4aae      	ldr	r2, [pc, #696]	; (8005f68 <UART_SetConfig+0x328>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	220f      	movs	r2, #15
 8005cc4:	4393      	bics	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4aa4      	ldr	r2, [pc, #656]	; (8005f6c <UART_SetConfig+0x32c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d127      	bne.n	8005d2e <UART_SetConfig+0xee>
 8005cde:	4ba4      	ldr	r3, [pc, #656]	; (8005f70 <UART_SetConfig+0x330>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d017      	beq.n	8005d1a <UART_SetConfig+0xda>
 8005cea:	d81b      	bhi.n	8005d24 <UART_SetConfig+0xe4>
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d00a      	beq.n	8005d06 <UART_SetConfig+0xc6>
 8005cf0:	d818      	bhi.n	8005d24 <UART_SetConfig+0xe4>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <UART_SetConfig+0xbc>
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d00a      	beq.n	8005d10 <UART_SetConfig+0xd0>
 8005cfa:	e013      	b.n	8005d24 <UART_SetConfig+0xe4>
 8005cfc:	231b      	movs	r3, #27
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e058      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d06:	231b      	movs	r3, #27
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e053      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d10:	231b      	movs	r3, #27
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	2204      	movs	r2, #4
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e04e      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d1a:	231b      	movs	r3, #27
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e049      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d24:	231b      	movs	r3, #27
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2210      	movs	r2, #16
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e044      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a90      	ldr	r2, [pc, #576]	; (8005f74 <UART_SetConfig+0x334>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d127      	bne.n	8005d88 <UART_SetConfig+0x148>
 8005d38:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <UART_SetConfig+0x330>)
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	220c      	movs	r2, #12
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b0c      	cmp	r3, #12
 8005d42:	d017      	beq.n	8005d74 <UART_SetConfig+0x134>
 8005d44:	d81b      	bhi.n	8005d7e <UART_SetConfig+0x13e>
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d00a      	beq.n	8005d60 <UART_SetConfig+0x120>
 8005d4a:	d818      	bhi.n	8005d7e <UART_SetConfig+0x13e>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <UART_SetConfig+0x116>
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d00a      	beq.n	8005d6a <UART_SetConfig+0x12a>
 8005d54:	e013      	b.n	8005d7e <UART_SetConfig+0x13e>
 8005d56:	231b      	movs	r3, #27
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e02b      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d60:	231b      	movs	r3, #27
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	2202      	movs	r2, #2
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e026      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d6a:	231b      	movs	r3, #27
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	2204      	movs	r2, #4
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e021      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d74:	231b      	movs	r3, #27
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	2208      	movs	r2, #8
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e01c      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d7e:	231b      	movs	r3, #27
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	2210      	movs	r2, #16
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e017      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7a      	ldr	r2, [pc, #488]	; (8005f78 <UART_SetConfig+0x338>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d104      	bne.n	8005d9c <UART_SetConfig+0x15c>
 8005d92:	231b      	movs	r3, #27
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e00d      	b.n	8005db8 <UART_SetConfig+0x178>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a76      	ldr	r2, [pc, #472]	; (8005f7c <UART_SetConfig+0x33c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d104      	bne.n	8005db0 <UART_SetConfig+0x170>
 8005da6:	231b      	movs	r3, #27
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e003      	b.n	8005db8 <UART_SetConfig+0x178>
 8005db0:	231b      	movs	r3, #27
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2210      	movs	r2, #16
 8005db6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d000      	beq.n	8005dc6 <UART_SetConfig+0x186>
 8005dc4:	e065      	b.n	8005e92 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d015      	beq.n	8005dfc <UART_SetConfig+0x1bc>
 8005dd0:	dc18      	bgt.n	8005e04 <UART_SetConfig+0x1c4>
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00d      	beq.n	8005df2 <UART_SetConfig+0x1b2>
 8005dd6:	dc15      	bgt.n	8005e04 <UART_SetConfig+0x1c4>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <UART_SetConfig+0x1a2>
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d005      	beq.n	8005dec <UART_SetConfig+0x1ac>
 8005de0:	e010      	b.n	8005e04 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de2:	f7ff f9af 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8005de6:	0003      	movs	r3, r0
 8005de8:	617b      	str	r3, [r7, #20]
        break;
 8005dea:	e012      	b.n	8005e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <UART_SetConfig+0x340>)
 8005dee:	617b      	str	r3, [r7, #20]
        break;
 8005df0:	e00f      	b.n	8005e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7ff f91b 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8005df6:	0003      	movs	r3, r0
 8005df8:	617b      	str	r3, [r7, #20]
        break;
 8005dfa:	e00a      	b.n	8005e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	617b      	str	r3, [r7, #20]
        break;
 8005e02:	e006      	b.n	8005e12 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e08:	231a      	movs	r3, #26
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
        break;
 8005e10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d100      	bne.n	8005e1a <UART_SetConfig+0x1da>
 8005e18:	e08d      	b.n	8005f36 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e1e:	4b59      	ldr	r3, [pc, #356]	; (8005f84 <UART_SetConfig+0x344>)
 8005e20:	0052      	lsls	r2, r2, #1
 8005e22:	5ad3      	ldrh	r3, [r2, r3]
 8005e24:	0019      	movs	r1, r3
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7fa f96a 	bl	8000100 <__udivsi3>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	005a      	lsls	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	18d2      	adds	r2, r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	0010      	movs	r0, r2
 8005e40:	f7fa f95e 	bl	8000100 <__udivsi3>
 8005e44:	0003      	movs	r3, r0
 8005e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b0f      	cmp	r3, #15
 8005e4c:	d91c      	bls.n	8005e88 <UART_SetConfig+0x248>
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	025b      	lsls	r3, r3, #9
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d217      	bcs.n	8005e88 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	200e      	movs	r0, #14
 8005e5e:	183b      	adds	r3, r7, r0
 8005e60:	210f      	movs	r1, #15
 8005e62:	438a      	bics	r2, r1
 8005e64:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2207      	movs	r2, #7
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b299      	uxth	r1, r3
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	183a      	adds	r2, r7, r0
 8005e76:	8812      	ldrh	r2, [r2, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	183a      	adds	r2, r7, r0
 8005e82:	8812      	ldrh	r2, [r2, #0]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e056      	b.n	8005f36 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005e88:	231a      	movs	r3, #26
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e051      	b.n	8005f36 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e92:	231b      	movs	r3, #27
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d015      	beq.n	8005ec8 <UART_SetConfig+0x288>
 8005e9c:	dc18      	bgt.n	8005ed0 <UART_SetConfig+0x290>
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d00d      	beq.n	8005ebe <UART_SetConfig+0x27e>
 8005ea2:	dc15      	bgt.n	8005ed0 <UART_SetConfig+0x290>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <UART_SetConfig+0x26e>
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d005      	beq.n	8005eb8 <UART_SetConfig+0x278>
 8005eac:	e010      	b.n	8005ed0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eae:	f7ff f949 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	617b      	str	r3, [r7, #20]
        break;
 8005eb6:	e012      	b.n	8005ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb8:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <UART_SetConfig+0x340>)
 8005eba:	617b      	str	r3, [r7, #20]
        break;
 8005ebc:	e00f      	b.n	8005ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ebe:	f7ff f8b5 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	617b      	str	r3, [r7, #20]
        break;
 8005ec6:	e00a      	b.n	8005ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	617b      	str	r3, [r7, #20]
        break;
 8005ece:	e006      	b.n	8005ede <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ed4:	231a      	movs	r3, #26
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	2201      	movs	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
        break;
 8005edc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d028      	beq.n	8005f36 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee8:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <UART_SetConfig+0x344>)
 8005eea:	0052      	lsls	r2, r2, #1
 8005eec:	5ad3      	ldrh	r3, [r2, r3]
 8005eee:	0019      	movs	r1, r3
 8005ef0:	6978      	ldr	r0, [r7, #20]
 8005ef2:	f7fa f905 	bl	8000100 <__udivsi3>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	001a      	movs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	18d2      	adds	r2, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	0019      	movs	r1, r3
 8005f08:	0010      	movs	r0, r2
 8005f0a:	f7fa f8f9 	bl	8000100 <__udivsi3>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d90a      	bls.n	8005f2e <UART_SetConfig+0x2ee>
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	025b      	lsls	r3, r3, #9
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d205      	bcs.n	8005f2e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	e003      	b.n	8005f36 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2e:	231a      	movs	r3, #26
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	226a      	movs	r2, #106	; 0x6a
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2268      	movs	r2, #104	; 0x68
 8005f42:	2101      	movs	r1, #1
 8005f44:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f52:	231a      	movs	r3, #26
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b008      	add	sp, #32
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	cfff69f3 	.word	0xcfff69f3
 8005f64:	ffffcfff 	.word	0xffffcfff
 8005f68:	11fff4ff 	.word	0x11fff4ff
 8005f6c:	40013800 	.word	0x40013800
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40004c00 	.word	0x40004c00
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	08006de8 	.word	0x08006de8

08005f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	2201      	movs	r2, #1
 8005f96:	4013      	ands	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <UART_AdvFeatureConfig+0x144>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a43      	ldr	r2, [pc, #268]	; (80060d0 <UART_AdvFeatureConfig+0x148>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	2204      	movs	r2, #4
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a3b      	ldr	r2, [pc, #236]	; (80060d4 <UART_AdvFeatureConfig+0x14c>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4a34      	ldr	r2, [pc, #208]	; (80060d8 <UART_AdvFeatureConfig+0x150>)
 8006008:	4013      	ands	r3, r2
 800600a:	0019      	movs	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	2210      	movs	r2, #16
 800601e:	4013      	ands	r3, r2
 8006020:	d00b      	beq.n	800603a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a2c      	ldr	r2, [pc, #176]	; (80060dc <UART_AdvFeatureConfig+0x154>)
 800602a:	4013      	ands	r3, r2
 800602c:	0019      	movs	r1, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	2220      	movs	r2, #32
 8006040:	4013      	ands	r3, r2
 8006042:	d00b      	beq.n	800605c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <UART_AdvFeatureConfig+0x158>)
 800604c:	4013      	ands	r3, r2
 800604e:	0019      	movs	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	4013      	ands	r3, r2
 8006064:	d01d      	beq.n	80060a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <UART_AdvFeatureConfig+0x15c>)
 800606e:	4013      	ands	r3, r2
 8006070:	0019      	movs	r1, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	035b      	lsls	r3, r3, #13
 8006086:	429a      	cmp	r2, r3
 8006088:	d10b      	bne.n	80060a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a15      	ldr	r2, [pc, #84]	; (80060e8 <UART_AdvFeatureConfig+0x160>)
 8006092:	4013      	ands	r3, r2
 8006094:	0019      	movs	r1, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <UART_AdvFeatureConfig+0x164>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	0019      	movs	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b002      	add	sp, #8
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	fffdffff 	.word	0xfffdffff
 80060d0:	fffeffff 	.word	0xfffeffff
 80060d4:	fffbffff 	.word	0xfffbffff
 80060d8:	ffff7fff 	.word	0xffff7fff
 80060dc:	ffffefff 	.word	0xffffefff
 80060e0:	ffffdfff 	.word	0xffffdfff
 80060e4:	ffefffff 	.word	0xffefffff
 80060e8:	ff9fffff 	.word	0xff9fffff
 80060ec:	fff7ffff 	.word	0xfff7ffff

080060f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2290      	movs	r2, #144	; 0x90
 80060fc:	2100      	movs	r1, #0
 80060fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006100:	f7fc ffac 	bl	800305c <HAL_GetTick>
 8006104:	0003      	movs	r3, r0
 8006106:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2208      	movs	r2, #8
 8006110:	4013      	ands	r3, r2
 8006112:	2b08      	cmp	r3, #8
 8006114:	d10c      	bne.n	8006130 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	0391      	lsls	r1, r2, #14
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4a1a      	ldr	r2, [pc, #104]	; (8006188 <UART_CheckIdleState+0x98>)
 8006120:	9200      	str	r2, [sp, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	f000 f832 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8006128:	1e03      	subs	r3, r0, #0
 800612a:	d001      	beq.n	8006130 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e026      	b.n	800617e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	4013      	ands	r3, r2
 800613a:	2b04      	cmp	r3, #4
 800613c:	d10c      	bne.n	8006158 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2280      	movs	r2, #128	; 0x80
 8006142:	03d1      	lsls	r1, r2, #15
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <UART_CheckIdleState+0x98>)
 8006148:	9200      	str	r2, [sp, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	f000 f81e 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8006150:	1e03      	subs	r3, r0, #0
 8006152:	d001      	beq.n	8006158 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e012      	b.n	800617e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2288      	movs	r2, #136	; 0x88
 800615c:	2120      	movs	r1, #32
 800615e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	228c      	movs	r2, #140	; 0x8c
 8006164:	2120      	movs	r1, #32
 8006166:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2284      	movs	r2, #132	; 0x84
 8006178:	2100      	movs	r1, #0
 800617a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b004      	add	sp, #16
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	01ffffff 	.word	0x01ffffff

0800618c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b094      	sub	sp, #80	; 0x50
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	e0a7      	b.n	80062ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a0:	3301      	adds	r3, #1
 80061a2:	d100      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80061a4:	e0a3      	b.n	80062ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fc ff59 	bl	800305c <HAL_GetTick>
 80061aa:	0002      	movs	r2, r0
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <UART_WaitOnFlagUntilTimeout+0x30>
 80061b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d13f      	bne.n	800623c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061bc:	f3ef 8310 	mrs	r3, PRIMASK
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061c4:	647b      	str	r3, [r7, #68]	; 0x44
 80061c6:	2301      	movs	r3, #1
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	f383 8810 	msr	PRIMASK, r3
}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	494e      	ldr	r1, [pc, #312]	; (8006318 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80061de:	400a      	ands	r2, r1
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	f383 8810 	msr	PRIMASK, r3
}
 80061ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ee:	f3ef 8310 	mrs	r3, PRIMASK
 80061f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80061f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
 80061f8:	2301      	movs	r3, #1
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2101      	movs	r1, #1
 8006210:	438a      	bics	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2288      	movs	r2, #136	; 0x88
 8006224:	2120      	movs	r1, #32
 8006226:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	228c      	movs	r2, #140	; 0x8c
 800622c:	2120      	movs	r1, #32
 800622e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2284      	movs	r2, #132	; 0x84
 8006234:	2100      	movs	r1, #0
 8006236:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e069      	b.n	8006310 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2204      	movs	r2, #4
 8006244:	4013      	ands	r3, r2
 8006246:	d052      	beq.n	80062ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	401a      	ands	r2, r3
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	429a      	cmp	r2, r3
 800625a:	d148      	bne.n	80062ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	0112      	lsls	r2, r2, #4
 8006264:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006266:	f3ef 8310 	mrs	r3, PRIMASK
 800626a:	613b      	str	r3, [r7, #16]
  return(result);
 800626c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f383 8810 	msr	PRIMASK, r3
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4924      	ldr	r1, [pc, #144]	; (8006318 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006288:	400a      	ands	r2, r1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	f383 8810 	msr	PRIMASK, r3
}
 8006296:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006298:	f3ef 8310 	mrs	r3, PRIMASK
 800629c:	61fb      	str	r3, [r7, #28]
  return(result);
 800629e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a2:	2301      	movs	r3, #1
 80062a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	f383 8810 	msr	PRIMASK, r3
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2101      	movs	r1, #1
 80062ba:	438a      	bics	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	f383 8810 	msr	PRIMASK, r3
}
 80062c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2288      	movs	r2, #136	; 0x88
 80062ce:	2120      	movs	r1, #32
 80062d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	228c      	movs	r2, #140	; 0x8c
 80062d6:	2120      	movs	r1, #32
 80062d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2290      	movs	r2, #144	; 0x90
 80062de:	2120      	movs	r1, #32
 80062e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2284      	movs	r2, #132	; 0x84
 80062e6:	2100      	movs	r1, #0
 80062e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e010      	b.n	8006310 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	425a      	negs	r2, r3
 80062fe:	4153      	adcs	r3, r2
 8006300:	b2db      	uxtb	r3, r3
 8006302:	001a      	movs	r2, r3
 8006304:	1dfb      	adds	r3, r7, #7
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d100      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0x182>
 800630c:	e747      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b014      	add	sp, #80	; 0x50
 8006316:	bd80      	pop	{r7, pc}
 8006318:	fffffe5f 	.word	0xfffffe5f

0800631c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08e      	sub	sp, #56	; 0x38
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006324:	f3ef 8310 	mrs	r3, PRIMASK
 8006328:	617b      	str	r3, [r7, #20]
  return(result);
 800632a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	2301      	movs	r3, #1
 8006330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4926      	ldr	r1, [pc, #152]	; (80063e0 <UART_EndRxTransfer+0xc4>)
 8006346:	400a      	ands	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f383 8810 	msr	PRIMASK, r3
}
 8006354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006356:	f3ef 8310 	mrs	r3, PRIMASK
 800635a:	623b      	str	r3, [r7, #32]
  return(result);
 800635c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	2301      	movs	r3, #1
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <UART_EndRxTransfer+0xc8>)
 8006378:	400a      	ands	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	f383 8810 	msr	PRIMASK, r3
}
 8006386:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d118      	bne.n	80063c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006390:	f3ef 8310 	mrs	r3, PRIMASK
 8006394:	60bb      	str	r3, [r7, #8]
  return(result);
 8006396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	2301      	movs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			; (mov r8, r8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2110      	movs	r1, #16
 80063b2:	438a      	bics	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f383 8810 	msr	PRIMASK, r3
}
 80063c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	228c      	movs	r2, #140	; 0x8c
 80063c6:	2120      	movs	r1, #32
 80063c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b00e      	add	sp, #56	; 0x38
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	fffffedf 	.word	0xfffffedf
 80063e4:	effffffe 	.word	0xeffffffe

080063e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	225e      	movs	r2, #94	; 0x5e
 80063fa:	2100      	movs	r1, #0
 80063fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2256      	movs	r2, #86	; 0x56
 8006402:	2100      	movs	r1, #0
 8006404:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	0018      	movs	r0, r3
 800640a:	f7ff fc05 	bl	8005c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b004      	add	sp, #16
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641e:	f3ef 8310 	mrs	r3, PRIMASK
 8006422:	60bb      	str	r3, [r7, #8]
  return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	2301      	movs	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f383 8810 	msr	PRIMASK, r3
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2140      	movs	r1, #64	; 0x40
 8006440:	438a      	bics	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f383 8810 	msr	PRIMASK, r3
}
 800644e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2288      	movs	r2, #136	; 0x88
 8006454:	2120      	movs	r1, #32
 8006456:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0018      	movs	r0, r3
 8006462:	f7ff fbd1 	bl	8005c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	46bd      	mov	sp, r7
 800646a:	b006      	add	sp, #24
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b002      	add	sp, #8
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	46bd      	mov	sp, r7
 800648a:	b002      	add	sp, #8
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	46bd      	mov	sp, r7
 800649a:	b002      	add	sp, #8
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2284      	movs	r2, #132	; 0x84
 80064ac:	5c9b      	ldrb	r3, [r3, r2]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e027      	b.n	8006506 <HAL_UARTEx_DisableFifoMode+0x66>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2284      	movs	r2, #132	; 0x84
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2288      	movs	r2, #136	; 0x88
 80064c2:	2124      	movs	r1, #36	; 0x24
 80064c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2101      	movs	r1, #1
 80064da:	438a      	bics	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <HAL_UARTEx_DisableFifoMode+0x70>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2288      	movs	r2, #136	; 0x88
 80064f8:	2120      	movs	r1, #32
 80064fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2284      	movs	r2, #132	; 0x84
 8006500:	2100      	movs	r1, #0
 8006502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	0018      	movs	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	b004      	add	sp, #16
 800650c:	bd80      	pop	{r7, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	dfffffff 	.word	0xdfffffff

08006514 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2284      	movs	r2, #132	; 0x84
 8006522:	5c9b      	ldrb	r3, [r3, r2]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e02e      	b.n	800658a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2284      	movs	r2, #132	; 0x84
 8006530:	2101      	movs	r1, #1
 8006532:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2288      	movs	r2, #136	; 0x88
 8006538:	2124      	movs	r1, #36	; 0x24
 800653a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2101      	movs	r1, #1
 8006550:	438a      	bics	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	08d9      	lsrs	r1, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f854 	bl	8006618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2288      	movs	r2, #136	; 0x88
 800657c:	2120      	movs	r1, #32
 800657e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2284      	movs	r2, #132	; 0x84
 8006584:	2100      	movs	r1, #0
 8006586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b004      	add	sp, #16
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2284      	movs	r2, #132	; 0x84
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e02f      	b.n	800660c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2284      	movs	r2, #132	; 0x84
 80065b0:	2101      	movs	r1, #1
 80065b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2288      	movs	r2, #136	; 0x88
 80065b8:	2124      	movs	r1, #36	; 0x24
 80065ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2101      	movs	r1, #1
 80065d0:	438a      	bics	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	4a0e      	ldr	r2, [pc, #56]	; (8006614 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80065dc:	4013      	ands	r3, r2
 80065de:	0019      	movs	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 f813 	bl	8006618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2288      	movs	r2, #136	; 0x88
 80065fe:	2120      	movs	r1, #32
 8006600:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2284      	movs	r2, #132	; 0x84
 8006606:	2100      	movs	r1, #0
 8006608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	0018      	movs	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	b004      	add	sp, #16
 8006612:	bd80      	pop	{r7, pc}
 8006614:	f1ffffff 	.word	0xf1ffffff

08006618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006624:	2b00      	cmp	r3, #0
 8006626:	d108      	bne.n	800663a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	226a      	movs	r2, #106	; 0x6a
 800662c:	2101      	movs	r1, #1
 800662e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2268      	movs	r2, #104	; 0x68
 8006634:	2101      	movs	r1, #1
 8006636:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006638:	e043      	b.n	80066c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800663a:	260f      	movs	r6, #15
 800663c:	19bb      	adds	r3, r7, r6
 800663e:	2208      	movs	r2, #8
 8006640:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006642:	200e      	movs	r0, #14
 8006644:	183b      	adds	r3, r7, r0
 8006646:	2208      	movs	r2, #8
 8006648:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0e5b      	lsrs	r3, r3, #25
 8006652:	b2da      	uxtb	r2, r3
 8006654:	240d      	movs	r4, #13
 8006656:	193b      	adds	r3, r7, r4
 8006658:	2107      	movs	r1, #7
 800665a:	400a      	ands	r2, r1
 800665c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	0f5b      	lsrs	r3, r3, #29
 8006666:	b2da      	uxtb	r2, r3
 8006668:	250c      	movs	r5, #12
 800666a:	197b      	adds	r3, r7, r5
 800666c:	2107      	movs	r1, #7
 800666e:	400a      	ands	r2, r1
 8006670:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006672:	183b      	adds	r3, r7, r0
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	197a      	adds	r2, r7, r5
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	4914      	ldr	r1, [pc, #80]	; (80066cc <UARTEx_SetNbDataToProcess+0xb4>)
 800667c:	5c8a      	ldrb	r2, [r1, r2]
 800667e:	435a      	muls	r2, r3
 8006680:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006682:	197b      	adds	r3, r7, r5
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006688:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800668a:	0019      	movs	r1, r3
 800668c:	f7f9 fdc2 	bl	8000214 <__divsi3>
 8006690:	0003      	movs	r3, r0
 8006692:	b299      	uxth	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	226a      	movs	r2, #106	; 0x6a
 8006698:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800669a:	19bb      	adds	r3, r7, r6
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	193a      	adds	r2, r7, r4
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	490a      	ldr	r1, [pc, #40]	; (80066cc <UARTEx_SetNbDataToProcess+0xb4>)
 80066a4:	5c8a      	ldrb	r2, [r1, r2]
 80066a6:	435a      	muls	r2, r3
 80066a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80066b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b2:	0019      	movs	r1, r3
 80066b4:	f7f9 fdae 	bl	8000214 <__divsi3>
 80066b8:	0003      	movs	r3, r0
 80066ba:	b299      	uxth	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2268      	movs	r2, #104	; 0x68
 80066c0:	5299      	strh	r1, [r3, r2]
}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b005      	add	sp, #20
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	08006e00 	.word	0x08006e00
 80066d0:	08006e08 	.word	0x08006e08

080066d4 <memset>:
 80066d4:	0003      	movs	r3, r0
 80066d6:	1882      	adds	r2, r0, r2
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	7019      	strb	r1, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <__errno>:
 80066e4:	4b01      	ldr	r3, [pc, #4]	; (80066ec <__errno+0x8>)
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	4770      	bx	lr
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	20000070 	.word	0x20000070

080066f0 <__libc_init_array>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	2600      	movs	r6, #0
 80066f4:	4c0c      	ldr	r4, [pc, #48]	; (8006728 <__libc_init_array+0x38>)
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x3c>)
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	42a6      	cmp	r6, r4
 80066fe:	d109      	bne.n	8006714 <__libc_init_array+0x24>
 8006700:	2600      	movs	r6, #0
 8006702:	f000 fa05 	bl	8006b10 <_init>
 8006706:	4c0a      	ldr	r4, [pc, #40]	; (8006730 <__libc_init_array+0x40>)
 8006708:	4d0a      	ldr	r5, [pc, #40]	; (8006734 <__libc_init_array+0x44>)
 800670a:	1b64      	subs	r4, r4, r5
 800670c:	10a4      	asrs	r4, r4, #2
 800670e:	42a6      	cmp	r6, r4
 8006710:	d105      	bne.n	800671e <__libc_init_array+0x2e>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	00b3      	lsls	r3, r6, #2
 8006716:	58eb      	ldr	r3, [r5, r3]
 8006718:	4798      	blx	r3
 800671a:	3601      	adds	r6, #1
 800671c:	e7ee      	b.n	80066fc <__libc_init_array+0xc>
 800671e:	00b3      	lsls	r3, r6, #2
 8006720:	58eb      	ldr	r3, [r5, r3]
 8006722:	4798      	blx	r3
 8006724:	3601      	adds	r6, #1
 8006726:	e7f2      	b.n	800670e <__libc_init_array+0x1e>
 8006728:	08006e14 	.word	0x08006e14
 800672c:	08006e14 	.word	0x08006e14
 8006730:	08006e18 	.word	0x08006e18
 8006734:	08006e14 	.word	0x08006e14

08006738 <log>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	0004      	movs	r4, r0
 800673c:	000d      	movs	r5, r1
 800673e:	f000 f837 	bl	80067b0 <__ieee754_log>
 8006742:	0022      	movs	r2, r4
 8006744:	0006      	movs	r6, r0
 8006746:	000f      	movs	r7, r1
 8006748:	002b      	movs	r3, r5
 800674a:	0020      	movs	r0, r4
 800674c:	0029      	movs	r1, r5
 800674e:	f7fb fc47 	bl	8001fe0 <__aeabi_dcmpun>
 8006752:	2800      	cmp	r0, #0
 8006754:	d115      	bne.n	8006782 <log+0x4a>
 8006756:	2200      	movs	r2, #0
 8006758:	2300      	movs	r3, #0
 800675a:	0020      	movs	r0, r4
 800675c:	0029      	movs	r1, r5
 800675e:	f7f9 fe6f 	bl	8000440 <__aeabi_dcmpgt>
 8006762:	2800      	cmp	r0, #0
 8006764:	d10d      	bne.n	8006782 <log+0x4a>
 8006766:	2200      	movs	r2, #0
 8006768:	2300      	movs	r3, #0
 800676a:	0020      	movs	r0, r4
 800676c:	0029      	movs	r1, r5
 800676e:	f7f9 fe4d 	bl	800040c <__aeabi_dcmpeq>
 8006772:	2800      	cmp	r0, #0
 8006774:	d008      	beq.n	8006788 <log+0x50>
 8006776:	f7ff ffb5 	bl	80066e4 <__errno>
 800677a:	2322      	movs	r3, #34	; 0x22
 800677c:	2600      	movs	r6, #0
 800677e:	4f07      	ldr	r7, [pc, #28]	; (800679c <log+0x64>)
 8006780:	6003      	str	r3, [r0, #0]
 8006782:	0030      	movs	r0, r6
 8006784:	0039      	movs	r1, r7
 8006786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006788:	f7ff ffac 	bl	80066e4 <__errno>
 800678c:	2321      	movs	r3, #33	; 0x21
 800678e:	6003      	str	r3, [r0, #0]
 8006790:	4803      	ldr	r0, [pc, #12]	; (80067a0 <log+0x68>)
 8006792:	f000 f807 	bl	80067a4 <nan>
 8006796:	0006      	movs	r6, r0
 8006798:	000f      	movs	r7, r1
 800679a:	e7f2      	b.n	8006782 <log+0x4a>
 800679c:	fff00000 	.word	0xfff00000
 80067a0:	08006e10 	.word	0x08006e10

080067a4 <nan>:
 80067a4:	2000      	movs	r0, #0
 80067a6:	4901      	ldr	r1, [pc, #4]	; (80067ac <nan+0x8>)
 80067a8:	4770      	bx	lr
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	7ff80000 	.word	0x7ff80000

080067b0 <__ieee754_log>:
 80067b0:	2280      	movs	r2, #128	; 0x80
 80067b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b4:	000b      	movs	r3, r1
 80067b6:	b08d      	sub	sp, #52	; 0x34
 80067b8:	0352      	lsls	r2, r2, #13
 80067ba:	4291      	cmp	r1, r2
 80067bc:	da22      	bge.n	8006804 <__ieee754_log+0x54>
 80067be:	004a      	lsls	r2, r1, #1
 80067c0:	0852      	lsrs	r2, r2, #1
 80067c2:	4302      	orrs	r2, r0
 80067c4:	d107      	bne.n	80067d6 <__ieee754_log+0x26>
 80067c6:	2200      	movs	r2, #0
 80067c8:	2300      	movs	r3, #0
 80067ca:	2000      	movs	r0, #0
 80067cc:	49b3      	ldr	r1, [pc, #716]	; (8006a9c <__ieee754_log+0x2ec>)
 80067ce:	f7fa f9c9 	bl	8000b64 <__aeabi_ddiv>
 80067d2:	b00d      	add	sp, #52	; 0x34
 80067d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d6:	2900      	cmp	r1, #0
 80067d8:	da05      	bge.n	80067e6 <__ieee754_log+0x36>
 80067da:	0002      	movs	r2, r0
 80067dc:	f7fb f87e 	bl	80018dc <__aeabi_dsub>
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	e7f3      	b.n	80067ce <__ieee754_log+0x1e>
 80067e6:	4bae      	ldr	r3, [pc, #696]	; (8006aa0 <__ieee754_log+0x2f0>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	f7fa fdb5 	bl	8001358 <__aeabi_dmul>
 80067ee:	2436      	movs	r4, #54	; 0x36
 80067f0:	000b      	movs	r3, r1
 80067f2:	4264      	negs	r4, r4
 80067f4:	4aab      	ldr	r2, [pc, #684]	; (8006aa4 <__ieee754_log+0x2f4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	dd06      	ble.n	8006808 <__ieee754_log+0x58>
 80067fa:	0002      	movs	r2, r0
 80067fc:	000b      	movs	r3, r1
 80067fe:	f7f9 fe51 	bl	80004a4 <__aeabi_dadd>
 8006802:	e7e6      	b.n	80067d2 <__ieee754_log+0x22>
 8006804:	2400      	movs	r4, #0
 8006806:	e7f5      	b.n	80067f4 <__ieee754_log+0x44>
 8006808:	4da7      	ldr	r5, [pc, #668]	; (8006aa8 <__ieee754_log+0x2f8>)
 800680a:	151a      	asrs	r2, r3, #20
 800680c:	1952      	adds	r2, r2, r5
 800680e:	1912      	adds	r2, r2, r4
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	4ca6      	ldr	r4, [pc, #664]	; (8006aac <__ieee754_log+0x2fc>)
 8006814:	0b1b      	lsrs	r3, r3, #12
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	191b      	adds	r3, r3, r4
 800681a:	2480      	movs	r4, #128	; 0x80
 800681c:	0364      	lsls	r4, r4, #13
 800681e:	4023      	ands	r3, r4
 8006820:	4ca3      	ldr	r4, [pc, #652]	; (8006ab0 <__ieee754_log+0x300>)
 8006822:	9d02      	ldr	r5, [sp, #8]
 8006824:	405c      	eors	r4, r3
 8006826:	151b      	asrs	r3, r3, #20
 8006828:	189b      	adds	r3, r3, r2
 800682a:	4325      	orrs	r5, r4
 800682c:	2200      	movs	r2, #0
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	0029      	movs	r1, r5
 8006832:	4b9f      	ldr	r3, [pc, #636]	; (8006ab0 <__ieee754_log+0x300>)
 8006834:	f7fb f852 	bl	80018dc <__aeabi_dsub>
 8006838:	9b02      	ldr	r3, [sp, #8]
 800683a:	0006      	movs	r6, r0
 800683c:	3302      	adds	r3, #2
 800683e:	031b      	lsls	r3, r3, #12
 8006840:	000f      	movs	r7, r1
 8006842:	2200      	movs	r2, #0
 8006844:	0b1b      	lsrs	r3, r3, #12
 8006846:	2b02      	cmp	r3, #2
 8006848:	dc64      	bgt.n	8006914 <__ieee754_log+0x164>
 800684a:	2300      	movs	r3, #0
 800684c:	f7f9 fdde 	bl	800040c <__aeabi_dcmpeq>
 8006850:	2800      	cmp	r0, #0
 8006852:	d019      	beq.n	8006888 <__ieee754_log+0xd8>
 8006854:	9b00      	ldr	r3, [sp, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d100      	bne.n	800685c <__ieee754_log+0xac>
 800685a:	e11c      	b.n	8006a96 <__ieee754_log+0x2e6>
 800685c:	0018      	movs	r0, r3
 800685e:	f7fb fc13 	bl	8002088 <__aeabi_i2d>
 8006862:	4a94      	ldr	r2, [pc, #592]	; (8006ab4 <__ieee754_log+0x304>)
 8006864:	4b94      	ldr	r3, [pc, #592]	; (8006ab8 <__ieee754_log+0x308>)
 8006866:	0004      	movs	r4, r0
 8006868:	000d      	movs	r5, r1
 800686a:	f7fa fd75 	bl	8001358 <__aeabi_dmul>
 800686e:	4a93      	ldr	r2, [pc, #588]	; (8006abc <__ieee754_log+0x30c>)
 8006870:	0006      	movs	r6, r0
 8006872:	000f      	movs	r7, r1
 8006874:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <__ieee754_log+0x310>)
 8006876:	0020      	movs	r0, r4
 8006878:	0029      	movs	r1, r5
 800687a:	f7fa fd6d 	bl	8001358 <__aeabi_dmul>
 800687e:	0002      	movs	r2, r0
 8006880:	000b      	movs	r3, r1
 8006882:	0030      	movs	r0, r6
 8006884:	0039      	movs	r1, r7
 8006886:	e7ba      	b.n	80067fe <__ieee754_log+0x4e>
 8006888:	4a8e      	ldr	r2, [pc, #568]	; (8006ac4 <__ieee754_log+0x314>)
 800688a:	4b8f      	ldr	r3, [pc, #572]	; (8006ac8 <__ieee754_log+0x318>)
 800688c:	0030      	movs	r0, r6
 800688e:	0039      	movs	r1, r7
 8006890:	f7fa fd62 	bl	8001358 <__aeabi_dmul>
 8006894:	0002      	movs	r2, r0
 8006896:	000b      	movs	r3, r1
 8006898:	2000      	movs	r0, #0
 800689a:	498c      	ldr	r1, [pc, #560]	; (8006acc <__ieee754_log+0x31c>)
 800689c:	f7fb f81e 	bl	80018dc <__aeabi_dsub>
 80068a0:	0032      	movs	r2, r6
 80068a2:	0004      	movs	r4, r0
 80068a4:	000d      	movs	r5, r1
 80068a6:	003b      	movs	r3, r7
 80068a8:	0030      	movs	r0, r6
 80068aa:	0039      	movs	r1, r7
 80068ac:	f7fa fd54 	bl	8001358 <__aeabi_dmul>
 80068b0:	000b      	movs	r3, r1
 80068b2:	0002      	movs	r2, r0
 80068b4:	0029      	movs	r1, r5
 80068b6:	0020      	movs	r0, r4
 80068b8:	f7fa fd4e 	bl	8001358 <__aeabi_dmul>
 80068bc:	9b00      	ldr	r3, [sp, #0]
 80068be:	9002      	str	r0, [sp, #8]
 80068c0:	9103      	str	r1, [sp, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <__ieee754_log+0x124>
 80068c6:	0002      	movs	r2, r0
 80068c8:	000b      	movs	r3, r1
 80068ca:	0030      	movs	r0, r6
 80068cc:	0039      	movs	r1, r7
 80068ce:	f7fb f805 	bl	80018dc <__aeabi_dsub>
 80068d2:	e77e      	b.n	80067d2 <__ieee754_log+0x22>
 80068d4:	9800      	ldr	r0, [sp, #0]
 80068d6:	f7fb fbd7 	bl	8002088 <__aeabi_i2d>
 80068da:	4a76      	ldr	r2, [pc, #472]	; (8006ab4 <__ieee754_log+0x304>)
 80068dc:	4b76      	ldr	r3, [pc, #472]	; (8006ab8 <__ieee754_log+0x308>)
 80068de:	0004      	movs	r4, r0
 80068e0:	000d      	movs	r5, r1
 80068e2:	f7fa fd39 	bl	8001358 <__aeabi_dmul>
 80068e6:	4a75      	ldr	r2, [pc, #468]	; (8006abc <__ieee754_log+0x30c>)
 80068e8:	9000      	str	r0, [sp, #0]
 80068ea:	9101      	str	r1, [sp, #4]
 80068ec:	4b74      	ldr	r3, [pc, #464]	; (8006ac0 <__ieee754_log+0x310>)
 80068ee:	0020      	movs	r0, r4
 80068f0:	0029      	movs	r1, r5
 80068f2:	f7fa fd31 	bl	8001358 <__aeabi_dmul>
 80068f6:	0002      	movs	r2, r0
 80068f8:	000b      	movs	r3, r1
 80068fa:	9802      	ldr	r0, [sp, #8]
 80068fc:	9903      	ldr	r1, [sp, #12]
 80068fe:	f7fa ffed 	bl	80018dc <__aeabi_dsub>
 8006902:	0032      	movs	r2, r6
 8006904:	003b      	movs	r3, r7
 8006906:	f7fa ffe9 	bl	80018dc <__aeabi_dsub>
 800690a:	0002      	movs	r2, r0
 800690c:	000b      	movs	r3, r1
 800690e:	9800      	ldr	r0, [sp, #0]
 8006910:	9901      	ldr	r1, [sp, #4]
 8006912:	e7dc      	b.n	80068ce <__ieee754_log+0x11e>
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	05db      	lsls	r3, r3, #23
 8006918:	f7f9 fdc4 	bl	80004a4 <__aeabi_dadd>
 800691c:	0002      	movs	r2, r0
 800691e:	000b      	movs	r3, r1
 8006920:	0030      	movs	r0, r6
 8006922:	0039      	movs	r1, r7
 8006924:	f7fa f91e 	bl	8000b64 <__aeabi_ddiv>
 8006928:	9004      	str	r0, [sp, #16]
 800692a:	9105      	str	r1, [sp, #20]
 800692c:	9800      	ldr	r0, [sp, #0]
 800692e:	f7fb fbab 	bl	8002088 <__aeabi_i2d>
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	9b05      	ldr	r3, [sp, #20]
 8006936:	9006      	str	r0, [sp, #24]
 8006938:	9107      	str	r1, [sp, #28]
 800693a:	0010      	movs	r0, r2
 800693c:	0019      	movs	r1, r3
 800693e:	f7fa fd0b 	bl	8001358 <__aeabi_dmul>
 8006942:	4a63      	ldr	r2, [pc, #396]	; (8006ad0 <__ieee754_log+0x320>)
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	4694      	mov	ip, r2
 8006948:	4463      	add	r3, ip
 800694a:	0002      	movs	r2, r0
 800694c:	930b      	str	r3, [sp, #44]	; 0x2c
 800694e:	000b      	movs	r3, r1
 8006950:	9008      	str	r0, [sp, #32]
 8006952:	9109      	str	r1, [sp, #36]	; 0x24
 8006954:	f7fa fd00 	bl	8001358 <__aeabi_dmul>
 8006958:	0004      	movs	r4, r0
 800695a:	000d      	movs	r5, r1
 800695c:	4a5d      	ldr	r2, [pc, #372]	; (8006ad4 <__ieee754_log+0x324>)
 800695e:	4b5e      	ldr	r3, [pc, #376]	; (8006ad8 <__ieee754_log+0x328>)
 8006960:	f7fa fcfa 	bl	8001358 <__aeabi_dmul>
 8006964:	4a5d      	ldr	r2, [pc, #372]	; (8006adc <__ieee754_log+0x32c>)
 8006966:	4b5e      	ldr	r3, [pc, #376]	; (8006ae0 <__ieee754_log+0x330>)
 8006968:	f7f9 fd9c 	bl	80004a4 <__aeabi_dadd>
 800696c:	0022      	movs	r2, r4
 800696e:	002b      	movs	r3, r5
 8006970:	f7fa fcf2 	bl	8001358 <__aeabi_dmul>
 8006974:	4a5b      	ldr	r2, [pc, #364]	; (8006ae4 <__ieee754_log+0x334>)
 8006976:	4b5c      	ldr	r3, [pc, #368]	; (8006ae8 <__ieee754_log+0x338>)
 8006978:	f7f9 fd94 	bl	80004a4 <__aeabi_dadd>
 800697c:	0022      	movs	r2, r4
 800697e:	002b      	movs	r3, r5
 8006980:	f7fa fcea 	bl	8001358 <__aeabi_dmul>
 8006984:	4a59      	ldr	r2, [pc, #356]	; (8006aec <__ieee754_log+0x33c>)
 8006986:	4b5a      	ldr	r3, [pc, #360]	; (8006af0 <__ieee754_log+0x340>)
 8006988:	f7f9 fd8c 	bl	80004a4 <__aeabi_dadd>
 800698c:	9a08      	ldr	r2, [sp, #32]
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	f7fa fce2 	bl	8001358 <__aeabi_dmul>
 8006994:	4a57      	ldr	r2, [pc, #348]	; (8006af4 <__ieee754_log+0x344>)
 8006996:	9008      	str	r0, [sp, #32]
 8006998:	9109      	str	r1, [sp, #36]	; 0x24
 800699a:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <__ieee754_log+0x348>)
 800699c:	0020      	movs	r0, r4
 800699e:	0029      	movs	r1, r5
 80069a0:	f7fa fcda 	bl	8001358 <__aeabi_dmul>
 80069a4:	4a55      	ldr	r2, [pc, #340]	; (8006afc <__ieee754_log+0x34c>)
 80069a6:	4b56      	ldr	r3, [pc, #344]	; (8006b00 <__ieee754_log+0x350>)
 80069a8:	f7f9 fd7c 	bl	80004a4 <__aeabi_dadd>
 80069ac:	0022      	movs	r2, r4
 80069ae:	002b      	movs	r3, r5
 80069b0:	f7fa fcd2 	bl	8001358 <__aeabi_dmul>
 80069b4:	4a53      	ldr	r2, [pc, #332]	; (8006b04 <__ieee754_log+0x354>)
 80069b6:	4b54      	ldr	r3, [pc, #336]	; (8006b08 <__ieee754_log+0x358>)
 80069b8:	f7f9 fd74 	bl	80004a4 <__aeabi_dadd>
 80069bc:	0022      	movs	r2, r4
 80069be:	002b      	movs	r3, r5
 80069c0:	f7fa fcca 	bl	8001358 <__aeabi_dmul>
 80069c4:	0002      	movs	r2, r0
 80069c6:	000b      	movs	r3, r1
 80069c8:	9808      	ldr	r0, [sp, #32]
 80069ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069cc:	f7f9 fd6a 	bl	80004a4 <__aeabi_dadd>
 80069d0:	9a02      	ldr	r2, [sp, #8]
 80069d2:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <__ieee754_log+0x35c>)
 80069d4:	0004      	movs	r4, r0
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069da:	000d      	movs	r5, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	dd34      	ble.n	8006a4c <__ieee754_log+0x29c>
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b39      	ldr	r3, [pc, #228]	; (8006acc <__ieee754_log+0x31c>)
 80069e6:	0030      	movs	r0, r6
 80069e8:	0039      	movs	r1, r7
 80069ea:	f7fa fcb5 	bl	8001358 <__aeabi_dmul>
 80069ee:	0032      	movs	r2, r6
 80069f0:	003b      	movs	r3, r7
 80069f2:	f7fa fcb1 	bl	8001358 <__aeabi_dmul>
 80069f6:	0002      	movs	r2, r0
 80069f8:	000b      	movs	r3, r1
 80069fa:	9002      	str	r0, [sp, #8]
 80069fc:	9103      	str	r1, [sp, #12]
 80069fe:	0020      	movs	r0, r4
 8006a00:	0029      	movs	r1, r5
 8006a02:	f7f9 fd4f 	bl	80004a4 <__aeabi_dadd>
 8006a06:	9a04      	ldr	r2, [sp, #16]
 8006a08:	9b05      	ldr	r3, [sp, #20]
 8006a0a:	f7fa fca5 	bl	8001358 <__aeabi_dmul>
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	0004      	movs	r4, r0
 8006a12:	000d      	movs	r5, r1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <__ieee754_log+0x276>
 8006a18:	0002      	movs	r2, r0
 8006a1a:	000b      	movs	r3, r1
 8006a1c:	9802      	ldr	r0, [sp, #8]
 8006a1e:	9903      	ldr	r1, [sp, #12]
 8006a20:	f7fa ff5c 	bl	80018dc <__aeabi_dsub>
 8006a24:	e74f      	b.n	80068c6 <__ieee754_log+0x116>
 8006a26:	4a23      	ldr	r2, [pc, #140]	; (8006ab4 <__ieee754_log+0x304>)
 8006a28:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <__ieee754_log+0x308>)
 8006a2a:	9806      	ldr	r0, [sp, #24]
 8006a2c:	9907      	ldr	r1, [sp, #28]
 8006a2e:	f7fa fc93 	bl	8001358 <__aeabi_dmul>
 8006a32:	4a22      	ldr	r2, [pc, #136]	; (8006abc <__ieee754_log+0x30c>)
 8006a34:	9000      	str	r0, [sp, #0]
 8006a36:	9101      	str	r1, [sp, #4]
 8006a38:	9806      	ldr	r0, [sp, #24]
 8006a3a:	9907      	ldr	r1, [sp, #28]
 8006a3c:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <__ieee754_log+0x310>)
 8006a3e:	f7fa fc8b 	bl	8001358 <__aeabi_dmul>
 8006a42:	0022      	movs	r2, r4
 8006a44:	002b      	movs	r3, r5
 8006a46:	f7f9 fd2d 	bl	80004a4 <__aeabi_dadd>
 8006a4a:	e754      	b.n	80068f6 <__ieee754_log+0x146>
 8006a4c:	0002      	movs	r2, r0
 8006a4e:	000b      	movs	r3, r1
 8006a50:	0030      	movs	r0, r6
 8006a52:	0039      	movs	r1, r7
 8006a54:	f7fa ff42 	bl	80018dc <__aeabi_dsub>
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	f7fa fc7c 	bl	8001358 <__aeabi_dmul>
 8006a60:	9b00      	ldr	r3, [sp, #0]
 8006a62:	0004      	movs	r4, r0
 8006a64:	000d      	movs	r5, r1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <__ieee754_log+0x2c0>
 8006a6a:	0002      	movs	r2, r0
 8006a6c:	000b      	movs	r3, r1
 8006a6e:	e72c      	b.n	80068ca <__ieee754_log+0x11a>
 8006a70:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <__ieee754_log+0x304>)
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <__ieee754_log+0x308>)
 8006a74:	9806      	ldr	r0, [sp, #24]
 8006a76:	9907      	ldr	r1, [sp, #28]
 8006a78:	f7fa fc6e 	bl	8001358 <__aeabi_dmul>
 8006a7c:	4a0f      	ldr	r2, [pc, #60]	; (8006abc <__ieee754_log+0x30c>)
 8006a7e:	9000      	str	r0, [sp, #0]
 8006a80:	9101      	str	r1, [sp, #4]
 8006a82:	9806      	ldr	r0, [sp, #24]
 8006a84:	9907      	ldr	r1, [sp, #28]
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <__ieee754_log+0x310>)
 8006a88:	f7fa fc66 	bl	8001358 <__aeabi_dmul>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	000b      	movs	r3, r1
 8006a90:	0020      	movs	r0, r4
 8006a92:	0029      	movs	r1, r5
 8006a94:	e733      	b.n	80068fe <__ieee754_log+0x14e>
 8006a96:	2000      	movs	r0, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	e69a      	b.n	80067d2 <__ieee754_log+0x22>
 8006a9c:	c3500000 	.word	0xc3500000
 8006aa0:	43500000 	.word	0x43500000
 8006aa4:	7fefffff 	.word	0x7fefffff
 8006aa8:	fffffc01 	.word	0xfffffc01
 8006aac:	00095f64 	.word	0x00095f64
 8006ab0:	3ff00000 	.word	0x3ff00000
 8006ab4:	fee00000 	.word	0xfee00000
 8006ab8:	3fe62e42 	.word	0x3fe62e42
 8006abc:	35793c76 	.word	0x35793c76
 8006ac0:	3dea39ef 	.word	0x3dea39ef
 8006ac4:	55555555 	.word	0x55555555
 8006ac8:	3fd55555 	.word	0x3fd55555
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	fff9eb86 	.word	0xfff9eb86
 8006ad4:	df3e5244 	.word	0xdf3e5244
 8006ad8:	3fc2f112 	.word	0x3fc2f112
 8006adc:	96cb03de 	.word	0x96cb03de
 8006ae0:	3fc74664 	.word	0x3fc74664
 8006ae4:	94229359 	.word	0x94229359
 8006ae8:	3fd24924 	.word	0x3fd24924
 8006aec:	55555593 	.word	0x55555593
 8006af0:	3fe55555 	.word	0x3fe55555
 8006af4:	d078c69f 	.word	0xd078c69f
 8006af8:	3fc39a09 	.word	0x3fc39a09
 8006afc:	1d8e78af 	.word	0x1d8e78af
 8006b00:	3fcc71c5 	.word	0x3fcc71c5
 8006b04:	9997fa04 	.word	0x9997fa04
 8006b08:	3fd99999 	.word	0x3fd99999
 8006b0c:	0006b851 	.word	0x0006b851

08006b10 <_init>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr

08006b1c <_fini>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr
